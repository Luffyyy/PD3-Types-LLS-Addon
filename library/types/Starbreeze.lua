---@meta

---@class ADEPRECATED_SBZVehicleSpawner : ASBZSpline
---@field TrafficManager USBZTrafficManager
ADEPRECATED_SBZVehicleSpawner = {}



---@class APD3HeistGameMode : ASBZMissionGameMode
---@field NegotiationManager USBZNegotiationManager
---@field AssaultManager UPD3AssaultManager
---@field AISquadManager USBZAISquadManager
---@field CivilianManager USBZCivilianManager
---@field NavLinkManager USBZNavLinkManager
---@field ChatInGame ASBZChatInGame
---@field TrafficManager USBZTrafficManager
---@field SearchManager USBZAISearchManager
---@field GlobalModifiers USBZGlobalModifiers
---@field TransporterBrutalCarrySkillPlayerSet TSet<AActor>
---@field TransporterBrutalCarrySkillAISet TSet<ASBZAICharacter>
APD3HeistGameMode = {}

---@return USBZNegotiationManager
function APD3HeistGameMode:GetNegotiationManager() end


---@class APD3HeistGameSession : ASBZGameSessionBase
APD3HeistGameSession = {}


---@class APD3HeistGameState : ASBZMissionState
---@field OnHeistStateChanged FPD3HeistGameStateOnHeistStateChanged
---@field OnNegotiationEndTimeChanged FPD3HeistGameStateOnNegotiationEndTimeChanged
---@field OnHostagesDemandChanged FPD3HeistGameStateOnHostagesDemandChanged
---@field OnNegotiationTradeTypeChanged FPD3HeistGameStateOnNegotiationTradeTypeChanged
---@field OnSuspenseValueChanged FPD3HeistGameStateOnSuspenseValueChanged
---@field OnAnswerPagerValueChanged FPD3HeistGameStateOnAnswerPagerValueChanged
---@field OnECMCountChanged FPD3HeistGameStateOnECMCountChanged
---@field CurrentSuspenseValue uint8
---@field CurrentThreatLevel float
---@field CurrentHeistState EPD3HeistState
---@field GameIntensityAnalyzer UPD3GameIntensityAnalyzer
---@field Dispatcher UPD3Dispatcher
---@field RoomPathFinder USBZRoomPathFinder
---@field MissionFailedTimeoutSeconds float
---@field SpawnedCarryDataArray TArray<FSBZSpawnedCarryData>
---@field PendingUsingCarryMap TMap<uint32, FSBZPendingUsingSpawnedCarryData>
---@field SpawnedCarryActorMap TMap<uint32, AActor>
---@field NegotiationEndTime float
---@field NrHostagesDemand uint8
---@field AnswerPagerCount uint8
---@field PagerHeistDataArray FPD3PagerHeistData
---@field DefaultWeaponBoxClass TSubclassOf<ASBZPlaceableWeapon>
---@field MaxCrewCount int32
---@field AICrewCharacterClassSet TSet<TSubclassOf<ASBZAICrewCharacter>>
---@field GlobalMaterialParameterCollection UMaterialParameterCollection
---@field GlobalNiagaraParameterCollection UNiagaraParameterCollection
---@field AlarmThreatLevel float
---@field NegotiationThreatLevel float
---@field AssaultThreatLevel float
---@field AssaultThreatLevelIncrease float
---@field PlayerPositionUpdateFrequency float
---@field GlobalMaterialCollectionInstance UMaterialParameterCollectionInstance
---@field GlobalNiagaraCollectionInstance UNiagaraParameterCollectionInstance
---@field bIsAICrewSpawned boolean
---@field bEscalated boolean
---@field SavedCustodyTime float
---@field NegotiationTradeType ESBZNegotiationTradeType
---@field ECMCountData FSBZECMCountData
---@field JammerTimeSeconds float
---@field ECMJammerRadioBasePercentageIncrease float
---@field ECMJammerCameraBasePercentageIncrease float
---@field ECMJammerPagerBasePercentageIncrease float
---@field ECMJammerAdditionalIncreasePercentagePerJammer float
APD3HeistGameState = {}

---@param WorldContextObject UObject
---@param OutputPins ESBZStealthBranch
---@return EPD3HeistState
function APD3HeistGameState:StealthBranch(WorldContextObject, OutputPins) end
---@param HeistState EPD3HeistState
function APD3HeistGameState:SetHeistState(HeistState) end
---@param StateName FName
function APD3HeistGameState:OnStateMachineStateLeft(StateName) end
function APD3HeistGameState:OnRep_SpawnedCarryDataArray() end
---@param OldDemand uint8
function APD3HeistGameState:OnRep_NrHostagesDemand(OldDemand) end
---@param OldType ESBZNegotiationTradeType
function APD3HeistGameState:OnRep_NegotiationTradeType(OldType) end
---@param OldEndTime float
function APD3HeistGameState:OnRep_NegotiationEndTime(OldEndTime) end
---@param OldCountData FSBZECMCountData
function APD3HeistGameState:OnRep_ECMCountData(OldCountData) end
---@param OldHeistState EPD3HeistState
function APD3HeistGameState:OnRep_CurrentHeistState(OldHeistState) end
---@param NewSuspenseValue uint8
function APD3HeistGameState:Multicast_SuspenseValueChanged(NewSuspenseValue) end
---@param NetID uint32
---@param bIsEnabled boolean
---@param bIsTimedOut boolean
function APD3HeistGameState:Multicast_SetPagerEnabled(NetID, bIsEnabled, bIsTimedOut) end
---@param Type ESBZNegotiationTradeType
function APD3HeistGameState:Multicast_SetNegotiationTradeType(Type) end
---@param EndTime float
function APD3HeistGameState:Multicast_SetNegotiationEndTime(EndTime) end
---@param Count uint8
function APD3HeistGameState:Multicast_SetHostagesDemand(Count) end
---@param HeistState EPD3HeistState
function APD3HeistGameState:Multicast_SetHeistState(HeistState) end
---@param InCountData FSBZECMCountData
function APD3HeistGameState:Multicast_SetCurrentECMJammerCount(InCountData) end
---@param TrafficControlArray TArray<FSBZTrafficControl>
function APD3HeistGameState:Multicast_ProcessTrafficControls(TrafficControlArray) end
---@return boolean
function APD3HeistGameState:IsAssaultActive() end
---@param State EPD3HeistState
---@return boolean
function APD3HeistGameState:IsActiveAssaultState(State) end
---@param WorldContextObject UObject
function APD3HeistGameState:IncreaseSuspense(WorldContextObject) end
---@param WorldContextObject UObject
---@param OutputPins EPD3HeistState
function APD3HeistGameState:HeistStateBranch(WorldContextObject, OutputPins) end
---@return ESBZNegotiationTradeType
function APD3HeistGameState:GetNegotiationTradeType() end
---@return float
function APD3HeistGameState:GetNegotiationEndTime() end
---@return uint8
function APD3HeistGameState:GetHostageDemand() end
---@return EPD3HeistState
function APD3HeistGameState:GetCurrentHeistState() end
---@param WorldContextObject UObject
---@param OutputPins ESBZDifficulty
function APD3HeistGameState:DifficultyBranch(WorldContextObject, OutputPins) end


---@class APD3PawnSpawnGroup : ASBZPawnSpawnGroup
---@field OnPawnSpawnedBP FPD3PawnSpawnGroupOnPawnSpawnedBP
---@field bIsEnabledForAssault boolean
---@field bIsEnabledForCivilians boolean
---@field AllowedPawnTypeContainer FGameplayTagContainer
APD3PawnSpawnGroup = {}

---@param bInIsEnabledForCivilians boolean
function APD3PawnSpawnGroup:SetEnabledForCivilians(bInIsEnabledForCivilians) end
---@param bInIsEnabledForAssault boolean
function APD3PawnSpawnGroup:SetEnabledForAssault(bInIsEnabledForAssault) end
---@param Handle FSBZPawnSpawnRequestHandle
---@param Pawn APawn
---@param Spawner ASBZPawnSpawnBase
function APD3PawnSpawnGroup:OnSpawnFinished(Handle, Pawn, Spawner) end
---@param Pawn APawn
function APD3PawnSpawnGroup:OnSpawnDie(Pawn) end


---@class ASBZAIAttractorDestruction : AActor
---@field PropDamage USBZPropDamageComponent
---@field DestroyedSoundTag FGameplayTag
---@field SoundRange float
---@field AttractorComponent USBZAIAttractorComponent
ASBZAIAttractorDestruction = {}



---@class ASBZAIBaseCharacter : ASBZCharacter
---@field CombatUtilityData USBZAIUtilityData
---@field InvalidTargetTags FGameplayTagContainer
---@field NavFilters TSubclassOf<UNavigationQueryFilter>
---@field AbilitySystemComponent USBZAbilitySystemComponent
---@field AttributeSetClass TSubclassOf<USBZAICharacterAttributeSet>
---@field AttributeSet USBZAICharacterAttributeSet
---@field RemoteDesiredViewYaw uint8
---@field RemoteDesiredHeadYaw uint8
---@field UtilityData USBZAIUtilityData
---@field TypeTag FGameplayTag
---@field CurrentTarget AActor
---@field AgilityQueryParam USBZAgilityQueryParams
---@field CurrentNavLinkAgilityComponent USBZNavLinkAgilityComponent
---@field StimuliReactionComponent USBZAIStimuliReactionComponent
---@field ComesticPropRef FComponentReference
---@field bCanEverDoIdleBreaker boolean
---@field AIInteractorComponent USBZAIInteractorComponent
---@field PlacementComment USBZVoiceCommentDataAsset
---@field CurrentRappellingRope ASBZRappellingRope
---@field LastWarpedRootMotionMontage UAnimMontage
---@field CurVehicleObstacle ASBZWheeledVehicle
---@field CurVehicleHit ASBZWheeledVehicle
---@field AllowedStanceTransitionData USBZStanceTransitionDataAsset
---@field AgentManager USBZAgentManager
---@field DeadlyFallHeight float
---@field PathFocusSettings USBZPathFocusSettings
---@field AgentId uint32
---@field AgentSettings FSBZAgentSettings
---@field AgentCharacterMovement USBZAICharacterMovementComponent
---@field NeighbourDetectionRange float
---@field Neighbours TArray<ASBZAIBaseCharacter>
---@field AvoidanceRandomWeight FFloatRange
---@field PlayingAgilityMontage UAnimMontage
---@field bCanDoEvadeDuringPathing boolean
---@field bCanDoEvades boolean
---@field MarkedGameplayEffectClass TSubclassOf<UGameplayEffect>
---@field AdditiveBaseEyeHeightTickRate float
ASBZAIBaseCharacter = {}

function ASBZAIBaseCharacter:OnRep_AgentId() end
---@param Montage UAnimMontage
function ASBZAIBaseCharacter:OnMontageStarted(Montage) end
---@param InMarkedDuration float
function ASBZAIBaseCharacter:Multicast_Unmark(InMarkedDuration) end
---@param Montage UAnimMontage
---@param bCanPlayExit boolean
function ASBZAIBaseCharacter:Multicast_StopWarpedRootMotionMontage(Montage, bCanPlayExit) end
function ASBZAIBaseCharacter:Multicast_StopEvade() end
---@param Montage UAnimMontage
function ASBZAIBaseCharacter:Multicast_StopAgilityMontage(Montage) end
---@param NewTarget AActor
function ASBZAIBaseCharacter:Multicast_SetCurrentTarget(NewTarget) end
---@param Montage UAnimMontage
---@param WarpingTransforms TArray<FTransform>
function ASBZAIBaseCharacter:Multicast_PlayWarpedRootMotionMontage(Montage, WarpingTransforms) end
---@param Montage UAnimMontage
---@param WarpingTransforms TArray<FTransform>
---@param AgilityType ESBZAgilityType
---@param TrajectoryPoints TArray<FSBZAgilityTrajectoryPoint>
function ASBZAIBaseCharacter:Multicast_PlayAgilityMontage(Montage, WarpingTransforms, AgilityType, TrajectoryPoints) end
---@param Montage UAnimMontage
function ASBZAIBaseCharacter:Multicast_PlaceObjectCosmetics(Montage) end
---@param EvadeType ESBZEvadeType
---@param Montage UAnimMontage
function ASBZAIBaseCharacter:Multicast_Evade(EvadeType, Montage) end
---@return float
function ASBZAIBaseCharacter:GetTimeSinceLastAgility() end


---@class ASBZAICharacter : ASBZAIBaseCharacter
---@field BlockGoDownTagContainer FGameplayTagContainer
---@field BulletMagnetismSocketName FName
---@field StickyAimSocketNameArray TArray<FName>
---@field OnBehaviorCategoryChanged FSBZAICharacterOnBehaviorCategoryChanged
---@field OnHogTiedChangedDelegate FSBZAICharacterOnHogTiedChangedDelegate
---@field OnHumanShieldChangedDelegate FSBZAICharacterOnHumanShieldChangedDelegate
---@field OnPlayerMeleeHitReceived FSBZAICharacterOnPlayerMeleeHitReceived
---@field OnEnabledAsObjectiveDelegate FSBZAICharacterOnEnabledAsObjectiveDelegate
---@field DownOnGroundEyeHeight float
---@field HostageState uint8
---@field bIsSurrendered boolean
---@field CurrentBehaviorCategory ESBZAIBehaviorCategory
---@field SensorComponent USBZSensorComponent
---@field ShoutTargetComponent USBZShoutTargetComponent
---@field EquipmentData USBZAIEquipmentData
---@field HumanShieldData USBZHumanShieldData
---@field SurrenderedHumanShieldData USBZHumanShieldData
---@field SurrenderedUtilityData USBZAIUtilityData
---@field AmmoPickupAsset TSubclassOf<ASBZAmmoPickup>
---@field PlaceablePickupAssetArray TArray<TSubclassOf<ASBZPlaceableCharges>>
---@field PlaceableSpawnForwardOffset float
---@field TradeHostagePickupAssetArray TArray<TSubclassOf<ASBZPlaceableCharges>>
---@field AlertnessDataComponent UDEPRECATED_SBZAlertnessDataComponent
---@field MarkerComponent USBZMarkerComponent
---@field HelmetPopper USBZHelmetPopper
---@field SpecialType USBZSpecialAIComponent
---@field PhysicalAnimationComponent UPhysicalAnimationComponent
---@field bCanRunWhileFocusing boolean
---@field bShouldTelegraphAttack boolean
---@field PreferredCoverDist float
---@field InteractionActions TMap<ESBZInteractionAction, TSubclassOf<USBZAIAction>>
---@field TradeOutline USBZOutlineAsset
---@field ObjectiveOutline USBZOutlineAsset
---@field ObjectiveMarker USBZMarkerDataAsset
---@field ObjectiveMarkerOffset FVector
---@field ObjectiveMarkerSocketName FName
---@field StartRoomLabel ESBZRoomLabel
---@field AsObjectiveState uint8
---@field VariationData USBZVariationSetData
---@field VariationCategoryIndexIntervals FInt32Interval
---@field LastInteractorCharacter ASBZCharacter
---@field ShotBlockedDownTime float
---@field SurrenderedNavFilter TSubclassOf<UNavigationQueryFilter>
---@field TagToStanceMappingTable TArray<FSBZTagStanceMapping>
---@field bTelegraphAttack boolean
---@field FireWeaponComment USBZVoiceCommentDataAsset
---@field OnKilledComment USBZVoiceCommentDataAsset
---@field TauntComment USBZVoiceCommentDataAsset
---@field HumanShieldTaken USBZVoiceCommentDataAsset
---@field HumanShieldReleased USBZVoiceCommentDataAsset
---@field DeadBodyPOIClass TSubclassOf<ASBZAIPointOfInterestDeadBody>
---@field HostagePOIClass TSubclassOf<ASBZAIPointOfInterest>
---@field HumanShieldPOIClass TSubclassOf<ASBZAIPointOfInterest>
---@field DeadBodyPOIInstance ASBZAIPointOfInterestDeadBody
---@field HostagePOIInstance ASBZAIPointOfInterest
---@field HumanShieldPOIInstance ASBZAIPointOfInterest
---@field bIsValidHumanShield boolean
---@field bIsPagerEnabled boolean
---@field bIsPagerEnabledOnce boolean
---@field bIsCarriedKillInteraction boolean
---@field bIsBeingHogTied boolean
---@field bHasBeenHogtied boolean
---@field bIsInCover boolean
---@field bWantsCoverPose boolean
---@field bIsInDownOnGroundPose boolean
---@field bIsPagerSnatched boolean
---@field PagerData USBZPagerData
---@field PagerTriggeredCount int32
---@field PagerSnatchedInteractor USBZInteractorComponent
---@field NavQueryFilterOverride TSubclassOf<UNavigationQueryFilter>
---@field ValidTargetDefeatStates uint16
---@field bCanShootDownedIfFired boolean
---@field CivilianNearRange float
---@field HackedGameplayEffectClass TSubclassOf<UGameplayEffect>
---@field AttachedLoot ASBZCarriedStaticInteractionActor
---@field CurrentLifeActionTriggerVolume ASBZLifeActionTriggerVolume
---@field LocallyKilledByPlayer ASBZPlayerCharacter
---@field PendingMeleeDownOnGoundInstigator ASBZCharacter
---@field SurrenderInstigatorPlayerState ASBZPlayerState
---@field VariationCategory ESBZAICharacterVariationCategory
---@field MarkGuard FString
---@field CQCSpecialistPinPullerDoneSet TSet<int32>
ASBZAICharacter = {}

---@param ClassTOSpawn TSubclassOf<ASBZCarriedStaticInteractionActor>
---@return ASBZCarriedStaticInteractionActor
function ASBZAICharacter:SpawnLootOnCharacter(ClassTOSpawn) end
function ASBZAICharacter:SetStartRoomLabel() end
function ASBZAICharacter:RemoveMarkerFromAsObjective() end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnStartInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnServerStartInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnServerEndInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnServerCompleteInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
function ASBZAICharacter:OnRep_VariationCategory() end
function ASBZAICharacter:OnRep_TelegraphAttack() end
function ASBZAICharacter:OnRep_IsSurrendered() end
---@param OldHostageState uint8
function ASBZAICharacter:OnRep_HostageState(OldHostageState) end
function ASBZAICharacter:OnRep_BehaviorCategory() end
function ASBZAICharacter:OnRep_AsObjectiveState() end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnPredictedEndInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnPredictedAbortInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param OldType ESBZNegotiationTradeType
---@param NewType ESBZNegotiationTradeType
function ASBZAICharacter:OnNegotiationTradeTypeChanged(OldType, NewType) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnEndInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param NewCount int32
---@param OldCount int32
---@param AddedTime float
function ASBZAICharacter:OnECMCountChanged(NewCount, OldCount, AddedTime) end
---@param BaseInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZAICharacter:OnAttachedLootTaken(BaseInteractable, InInteractor, bIsLocallyControlledInteractor) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnAckRejectedPredictedInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnAckCompleteInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICharacter:OnAckAbortInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
function ASBZAICharacter:Multicast_Surrender() end
---@param RoomScanningType ESBZRoomScanningType
function ASBZAICharacter:Multicast_StopRoomScanning(RoomScanningType) end
---@param Category ESBZAICharacterVariationCategory
function ASBZAICharacter:Multicast_SetVariationCategory(Category) end
---@param bInIsInCover boolean
function ASBZAICharacter:Multicast_SetInCover(bInIsInCover) end
---@param Duration float
function ASBZAICharacter:Multicast_SetHacked(Duration) end
---@param RepCategory ESBZAIBehaviorCategory
function ASBZAICharacter:Multicast_SetBehaviorCategory(RepCategory) end
---@param NewAsObjectiveState uint8
function ASBZAICharacter:Multicast_SetAsObjectiveState(NewAsObjectiveState) end
---@param RoomScanningType ESBZRoomScanningType
---@param AnimationIndex int32
function ASBZAICharacter:Multicast_RoomScanning(RoomScanningType, AnimationIndex) end
---@param InHostageState uint8
function ASBZAICharacter:Multicast_HostageState(InHostageState) end
function ASBZAICharacter:Multicast_DropAttachedLoot() end
---@param bImmediately boolean
---@param Distance float
function ASBZAICharacter:EnableAsObjective(bImmediately, Distance) end
function ASBZAICharacter:DisableAsObjective() end
function ASBZAICharacter:BP_OnTagReactionPlayed() end


---@class ASBZAIController : AAIController
---@field OnAIPawnKilled FSBZAIControllerOnAIPawnKilled
---@field YawAngle FSBZAccelerationBasedAngle
---@field PitchAngle FSBZAccelerationBasedAngle
---@field VisualDetectionComponent USBZAIVisualDetectionComponent
---@field UtilityComponent USBZAIUtilityComponent
---@field BlackboardAsset UBlackboardData
---@field FactionId FSBZFactionIdHelper
---@field LerpedControlRotation FRotator
---@field CurrentActions TArray<USBZAIAction>
---@field CurrentOrder USBZAIOrder
---@field OrderQueue TArray<USBZAIOrder>
---@field DisableTargetFocusWhilePathingEFs TArray<ESBZEquippableFamily>
---@field PathFocusHandler FSBZPathFocusHandler
---@field MinCoverScoreToFocus int16
---@field MinDistFromTraversalNavLinkToFocus float
---@field FocusOnLastVisibleLocationDuration float
---@field NearRangeCurve FRuntimeFloatCurve
---@field PreferredRangeCurve FRuntimeFloatCurve
---@field HeistStateAlert uint8
ASBZAIController = {}

---@param Order USBZAIOrder
---@param Mode ESBZAIOrderMode
---@return boolean
function ASBZAIController:PushOrder(Order, Mode) end
---@param ActionClass TSubclassOf<USBZAIAction>
---@param TargetActor AActor
---@return USBZAIAction
function ASBZAIController:PushAction(ActionClass, TargetActor) end
---@param Order USBZAIOrder
---@param OrderPawn APawn
---@param Result EBTNodeResult::Type
function ASBZAIController:OnOrderCompleted(Order, OrderPawn, Result) end
---@param KilledPawn APawn
function ASBZAIController:OnEnemyKilled(KilledPawn) end
---@param Action USBZAIAction
---@param Actor AActor
---@param bSuccess boolean
function ASBZAIController:OnActionCompleted(Action, Actor, bSuccess) end
---@param Action USBZAIAction
function ASBZAIController:OnActionCanceled(Action) end
---@return APawn
function ASBZAIController:GetCurrentEnemy() end
function ASBZAIController:BP_OnCurrentEnemyAssigned() end


---@class ASBZAICrewCharacter : ASBZAIBaseCharacter
---@field EquipmentData USBZAICrewEquipmentData
---@field HealthReplenishEffectClass TSubclassOf<UGameplayEffect>
---@field TargetPriority TMap<FGameplayTag, float>
---@field CallComment USBZVoiceCommentDataAsset
---@field HelpComment USBZVoiceCommentDataAsset
---@field CPD00 uint8
---@field CPD01 uint8
---@field CrewState ASBZAICrewState
---@field DefeatState EPD3DefeatState
---@field OldDefeatState EPD3DefeatState
---@field DefeatTime float
---@field ReviveMarker USBZMarkerDataAsset
---@field TasedMarker USBZMarkerDataAsset
---@field CuffedMarker USBZMarkerDataAsset
---@field SubduedMarker USBZMarkerDataAsset
---@field DownedOutline USBZOutlineAsset
---@field RevivedComment USBZVoiceCommentDataAsset
---@field UncuffedComment USBZVoiceCommentDataAsset
---@field DownedDialog USBZDialogDataAsset
---@field InCustodyDialog USBZDialogDataAsset
---@field BackFromCustodyDialog USBZDialogDataAsset
---@field CuffedDialog USBZDialogDataAsset
---@field TasedDialog USBZDialogDataAsset
---@field SubduedDialog USBZDialogDataAsset
---@field CurrentWard ASBZPlayerCharacter
---@field bIsMaskOn boolean
---@field bIsLoadoutLoaded boolean
---@field MarkingVoicePriority ESBZVoicePriority
---@field MarkingDuration float
---@field MarkGuardStealth FText
---@field MarkCameraStealth FText
---@field CrewAIColor FLinearColor
---@field CrewAIMarkerAsset USBZMarkerDataAsset
---@field CrewAIMarkerOffset FVector
---@field CrewAIMarkerSocketName FName
ASBZAICrewCharacter = {}

---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICrewCharacter:OnServerStartInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICrewCharacter:OnServerEndInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZAICrewCharacter:OnServerCompleteInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
function ASBZAICrewCharacter:OnRep_DefeatTime() end
---@param OldCrewState ASBZAICrewState
function ASBZAICrewCharacter:OnRep_CrewState(OldCrewState) end
---@param InDefeatTime float
function ASBZAICrewCharacter:Multicast_SetDefeatTime(InDefeatTime) end
---@param InState EPD3DefeatState
function ASBZAICrewCharacter:Multicast_SetDefeatState(InState) end
---@param InDefeatTime float
function ASBZAICrewCharacter:Multicast_ResumeDefeatTime(InDefeatTime) end
function ASBZAICrewCharacter:Multicast_PauseDefeatTime() end
---@param Character ASBZCharacter
---@param bShouldPlayPointGesture boolean
function ASBZAICrewCharacter:Multicast_MarkTarget(Character, bShouldPlayPointGesture) end
---@param Camera ASBZSecurityCamera
function ASBZAICrewCharacter:Multicast_MarkCamera(Camera) end


---@class ASBZAICrewController : ASBZAIController
---@field CrewState ASBZAICrewState
---@field CustodyDurationArray float
---@field LastWardRoom ASBZRoomVolume
ASBZAICrewController = {}

function ASBZAICrewController:OnRep_CrewState() end
---@param DestroyedActor AActor
function ASBZAICrewController:OnCrewStateDestroyed(DestroyedActor) end


---@class ASBZAICrewState : AInfo
---@field Character ASBZAICrewCharacter
---@field CharacterClass TSubclassOf<ASBZAICrewCharacter>
---@field DefeatState EPD3DefeatState
---@field OldDefeatState EPD3DefeatState
---@field bIsMaskOn boolean
---@field CachedCharacterName FText
---@field CachedCrewAIColor FLinearColor
ASBZAICrewState = {}

function ASBZAICrewState:OnRep_IsMaskOn() end
---@param InOldDefeatState EPD3DefeatState
function ASBZAICrewState:OnRep_DefeatState(InOldDefeatState) end
---@param OldCharacter ASBZAICrewCharacter
function ASBZAICrewState:OnRep_Character(OldCharacter) end
---@param bMaskOn boolean
function ASBZAICrewState:Multicast_SetMaskOn(bMaskOn) end
---@param InState EPD3DefeatState
function ASBZAICrewState:Multicast_SetDefeatState(InState) end
---@return FText
function ASBZAICrewState:GetCharacterName() end
---@return UPaperSprite
function ASBZAICrewState:GetCharacterIcon() end


---@class ASBZAIDefensePoint : ASBZAIOrderTargetArea
ASBZAIDefensePoint = {}


---@class ASBZAIDrone : ASBZArmedPawn
---@field AttributeSet USBZAIDroneAttributeSet
---@field DestroyedEffect UNiagaraSystem
---@field DestroyedEvent UAkAudioEvent
---@field SkeletalMesh USkeletalMeshComponentBudgeted
---@field DroneMovementComponent UFloatingPawnMovement
ASBZAIDrone = {}

function ASBZAIDrone:Multicast_OnKill() end


---@class ASBZAIDroneController : AAIController
---@field Faction FSBZFactionIdHelper
ASBZAIDroneController = {}



---@class ASBZAIFBIVan : ASBZWheeledVehicle
---@field PropDamageComponent USBZPropDamageComponent
---@field AntennaHitMeshComponent UStaticMeshComponent
---@field AntennaDestroyedEffect UNiagaraSystem
---@field DestroyedEffectOffset FVector
---@field AntennaDestroyedMesh UStaticMesh
---@field AntennaDestroyedOnEvent UAkAudioEvent
---@field VoiceComponent USBZCharacterVoiceComponent
---@field FBIArrivedVO USBZVoiceCommentDataAsset
---@field AntennaDestroyedVO USBZVoiceCommentDataAsset
---@field AssaultBarkVO USBZVoiceCommentDataAsset
---@field EscapeArrivingVO USBZVoiceCommentDataAsset
---@field PlayerInEscapeZoneVO USBZVoiceCommentDataAsset
---@field AllPlayersInEscapeZoneVO USBZVoiceCommentDataAsset
---@field FirstPlayerInCustodyVO USBZVoiceCommentDataAsset
---@field AnotherPlayerInCustodyVO USBZVoiceCommentDataAsset
---@field ShadeFBIOnTheWayVO USBZDialogDataAsset
---@field ShadeFBIHasArrivedVO USBZDialogDataAsset
---@field ShadeFBIReminderVO USBZDialogDataAsset
---@field DownedByTypeVOs TArray<FSBZDownedByTypeVO>
---@field AssaultCommentIntervalSeconds float
---@field AssaultCommentRandomChance float
---@field EscapeVOCooldown float
---@field ShadeReminderVOChance float
---@field ShadeReminderVOCooldown float
---@field bIsFBIActive boolean
ASBZAIFBIVan = {}

---@param Vehicle ASBZWheeledVehicle
---@param Spline ASBZSpline
function ASBZAIFBIVan:OnVanArrived(Vehicle, Spline) end
---@param DamageEventData FSBZDamageEvent
function ASBZAIFBIVan:OnTakeDamage(DamageEventData) end
function ASBZAIFBIVan:OnRep_IsFBIActive() end
---@param PoolComponent UActorComponent
---@param Health float
---@param bDoCosmetics boolean
---@param DamageContext FSBZPropDamageContext
function ASBZAIFBIVan:OnPropDamaged(PoolComponent, Health, bDoCosmetics, DamageContext) end
---@param PlayerInEscapeChangedEventData FSBZPlayerInEscapeChangedEvent
function ASBZAIFBIVan:OnPlayersInEscapeChanged(PlayerInEscapeChangedEventData) end
---@param InPlayerState ASBZPlayerState
---@param OldDefeatState EPD3DefeatState
---@param NewDefeatState EPD3DefeatState
function ASBZAIFBIVan:OnPlayerDefeated(InPlayerState, OldDefeatState, NewDefeatState) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function ASBZAIFBIVan:OnHeistStateChanged(OldState, NewState) end


---@class ASBZAIOrderTargetArea : AActor
---@field bEnabled boolean
---@field bConsiderCoversDirection boolean
---@field ArcAngle float
---@field BoxComponent UBoxComponent
---@field Room ASBZRoomVolume
---@field AssignedSquads TArray<USBZAISquad>
---@field CachedCoverPoints TArray<ASBZCoverPoint>
ASBZAIOrderTargetArea = {}

function ASBZAIOrderTargetArea:UpdateCoverPoints() end
---@param bEnable boolean
function ASBZAIOrderTargetArea:SetEnabled(bEnable) end
---@return boolean
function ASBZAIOrderTargetArea:IsEnabled() end


---@class ASBZAIPointOfInterest : AActor
---@field bAutoEnable boolean
---@field RoomVolumes TArray<ASBZRoomVolume>
---@field AttractorComponent USBZAIAttractorComponent
---@field SphereCollision USphereComponent
ASBZAIPointOfInterest = {}

---@param DestroyedActor AActor
function ASBZAIPointOfInterest:OnOwnerDestroyed(DestroyedActor) end
---@param ActionInstigator AActor
---@param InteractionTag FGameplayTag
function ASBZAIPointOfInterest:OnInteracted(ActionInstigator, InteractionTag) end


---@class ASBZAIPointOfInterestDeadBody : ASBZAIPointOfInterest
---@field LifeActionComponent USBZLifeActionComponent
---@field LifeActionInstance USBZLifeActionInstance
---@field LifeActionSlot USBZLifeActionSlot
ASBZAIPointOfInterestDeadBody = {}



---@class ASBZAIProtectPoint : ASBZAIOrderTargetArea
---@field AssignedSquad USBZAISquad
ASBZAIProtectPoint = {}



---@class ASBZAIShieldCoverAttachPoint : AActor
---@field Occupier APawn
---@field BlockingCovers TArray<ASBZAIShieldCoverAttachPoint>
ASBZAIShieldCoverAttachPoint = {}



---@class ASBZAITaserMine : AStaticMeshActor
---@field DetectionRange float
---@field StunDuration float
---@field WalkedOnEffect UNiagaraSystem
---@field DestroyedEffect UNiagaraSystem
---@field DestroyedMesh TSubclassOf<ASBZSmallCosmeticDestruction>
---@field TasedEffect TSubclassOf<UGameplayEffect>
---@field OverlapSphere USphereComponent
---@field AudioComponent UAkComponent
---@field PlaceSound UAkAudioEvent
---@field WalkedOnEvent UAkAudioEvent
---@field DestroyedEvent UAkAudioEvent
---@field AIExplosionRange float
---@field PlayerExplosionRange float
---@field HurtReactionData FSBZHurtReactionData
---@field Spawned ASBZSmallCosmeticDestruction
ASBZAITaserMine = {}

---@param Result FSBZExplosionResult
function ASBZAITaserMine:Multicast_ReplicateExplosion(Result) end
---@param OtherActor AActor
function ASBZAITaserMine:Multicast_OnWalkedOnTarget(OtherActor) end
function ASBZAITaserMine:Multicast_OnWalkedOn() end
function ASBZAITaserMine:DamageRejected() end


---@class ASBZAITaserWeapon : ASBZRangedWeapon
---@field TasingComment USBZVoiceCommentDataAsset
ASBZAITaserWeapon = {}



---@class ASBZAIVisibilityManager : AActor
---@field MaxComputedNodePerFrame int32
---@field MaxComputedCoverPointVisibilityPerFrame int32
---@field MaxDistFromObstacleToBeStandCovered float
---@field MaxDistFromObstacleToBeCrouchCovered float
---@field MinDistFromEnemyToBeCrouchCovered float
---@field MinDistFromEnemyToBeStandCovered float
---@field VisibilityComponent USBZAIVisibilityComponent
---@field AIVisibilityRelevantActorsEveryFrame TArray<AActor>
---@field AIVisibilityRelevantActorsAutomatic TArray<AActor>
---@field AIVisibilityRelevants TMap<AActor, TScriptInterface<ISBZAIVisibilityRelevant>>
---@field AIVisibilityRelevantActorsToRefreshAfterUpdate TArray<AActor>
---@field CoverPointVisibilityChecks TMap<ASBZCharacter, FSBZCoverPointVisibilityCheckData>
---@field RandomSublevelVisComponents TArray<USBZAIVisibilityComponent>
---@field RSLVisComponentTransforms TMap<USBZAIVisibilityComponent, FTransform>
ASBZAIVisibilityManager = {}

---@param InVisibilityComponent USBZAIVisibilityComponent
function ASBZAIVisibilityManager:UnregisterVisibilityComponent(InVisibilityComponent) end
---@param AIVisibilityRelevantActor AActor
function ASBZAIVisibilityManager:UnregisterRelevantAIVisibilityActor(AIVisibilityRelevantActor) end
---@param InRandomSublevelVisComponent USBZAIVisibilityComponent
function ASBZAIVisibilityManager:UnregisterRandomSublevelVisComponent(InRandomSublevelVisComponent) end
---@param Caller ASBZCharacter
function ASBZAIVisibilityManager:UnregisterCoverPointVisibilityCheck(Caller) end
---@param InVisibilityComponent USBZAIVisibilityComponent
function ASBZAIVisibilityManager:RegisterVisibilityComponent(InVisibilityComponent) end
---@param AIVisibilityRelevantActor AActor
---@return boolean
function ASBZAIVisibilityManager:RegisterRelevantAIVisibilityActor(AIVisibilityRelevantActor) end
---@param InRandomSublevelVisComponent USBZAIVisibilityComponent
function ASBZAIVisibilityManager:RegisterRandomSublevelVisComponent(InRandomSublevelVisComponent) end
---@param Caller ASBZCharacter
---@param CoverPoint ASBZCoverPoint
---@param Enemies TArray<AActor>
---@param Score uint8
function ASBZAIVisibilityManager:RegisterCoverPointVisibilityCheck(Caller, CoverPoint, Enemies, Score) end
---@param Observer AActor
---@param StartLocation FVector
---@param TargetLocation FVector
---@param MaxRelevantDist float
---@param EnemyExcluderRadius float
---@param RejectingHeightDiffBetweenNodeAndTarget float
---@param OutVisibilityScore uint8
---@param OutDistanceScore uint8
function ASBZAIVisibilityManager:RateTargetLocation(Observer, StartLocation, TargetLocation, MaxRelevantDist, EnemyExcluderRadius, RejectingHeightDiffBetweenNodeAndTarget, OutVisibilityScore, OutDistanceScore) end
---@param LeafNode FSBZAIVisibilityLeafNode
---@param Location FVector
---@param ObserverLocation FVector
---@param OutAdjustedLocation FVector
---@param OutScore uint8
---@return boolean
function ASBZAIVisibilityManager:IsNodeVisibleFromLocation(LeafNode, Location, ObserverLocation, OutAdjustedLocation, OutScore) end
---@param LeafNode FSBZAIVisibilityLeafNode
---@param Location FVector
---@param ActorObserver AActor
---@param OutAdjustedLocation FVector
---@param OutScore uint8
---@return boolean
function ASBZAIVisibilityManager:IsNodeVisibleFromActor(LeafNode, Location, ActorObserver, OutAdjustedLocation, OutScore) end
---@param LeafNode FSBZAIVisibilityLeafNode
---@param Location FVector
---@param ObserverLocation FVector
---@param OutSafeStances uint8
---@param OutAdjustedLocation FVector
---@param OutScore uint8
---@return boolean
function ASBZAIVisibilityManager:IsNodeSafeFromLocation(LeafNode, Location, ObserverLocation, OutSafeStances, OutAdjustedLocation, OutScore) end
---@param LeafNode FSBZAIVisibilityLeafNode
---@param Location FVector
---@param ActorObserver AActor
---@param OutSafeStances uint8
---@param OutAdjustedLocation FVector
---@param OutScore uint8
---@return boolean
function ASBZAIVisibilityManager:IsNodeSafeFromActor(LeafNode, Location, ActorObserver, OutSafeStances, OutAdjustedLocation, OutScore) end
---@param Location FVector
---@param ObserverLocation FVector
---@param OutAdjustedLocation FVector
---@param OutScore uint8
---@return boolean
function ASBZAIVisibilityManager:IsLocationVisibleFromLocation(Location, ObserverLocation, OutAdjustedLocation, OutScore) end
---@param Location FVector
---@param ObserverLocation FVector
---@param OutSafeStances uint8
---@param OutAdjustedLocation FVector
---@param OutScore uint8
---@return boolean
function ASBZAIVisibilityManager:IsLocationSafeFromLocation(Location, ObserverLocation, OutSafeStances, OutAdjustedLocation, OutScore) end
---@param AIVisibilityRelevant TScriptInterface<ISBZAIVisibilityRelevant>
---@param ObserverAIVisibilityRelevant TScriptInterface<ISBZAIVisibilityRelevant>
---@param OutSafeStances uint8
---@param OutAdjustedLocation FVector
---@param OutScore uint8
---@return boolean
function ASBZAIVisibilityManager:IsAIVisibilityRelevantSafeFromAIVisibility(AIVisibilityRelevant, ObserverAIVisibilityRelevant, OutSafeStances, OutAdjustedLocation, OutScore) end
---@return boolean
function ASBZAIVisibilityManager:HasVisibilityData() end
---@param Location FVector
---@return FSBZAIVisibilityLeafNode
function ASBZAIVisibilityManager:GetAiVisibilityNode(Location) end
---@param WorldContextObject UObject
---@return ASBZAIVisibilityManager
function ASBZAIVisibilityManager:GetAIVisibilityManager(WorldContextObject) end
---@param WorldContextObject UObject
---@param Location FVector
---@param bDrawAzymuts boolean
---@return boolean
function ASBZAIVisibilityManager:DebugLocation(WorldContextObject, Location, bDrawAzymuts) end


---@class ASBZActorSpawnBase : AActor
---@field Seed int32
---@field bRandomizeSpawnTransformStartingIndex boolean
---@field SpawnTransformArray TArray<FTransform>
---@field NextSpawnTransformIndex int32
ASBZActorSpawnBase = {}



---@class ASBZActorSpawnRegionBase : ASBZActorSpawnBase
---@field CollisionCapsuleRadius float
---@field CollisionCapsuleHalfHeight float
---@field SpawnLocationBreadth float
---@field SpawnLocationClearance float
---@field SpawnLocationGridOffset FVector2D
---@field bShouldIgnoreActorScale boolean
---@field SpawnLocationOffset float
---@field bSurfaceNormalAligned boolean
---@field RandomHeadingOffset FFloatInterval
---@field bDrawSpawnLocationGenerationDebugShapes boolean
ASBZActorSpawnRegionBase = {}



---@class ASBZActorSpawnShapes : ASBZActorSpawnRegionBase
ASBZActorSpawnShapes = {}


---@class ASBZActorSpawnTransforms : ASBZActorSpawnBase
ASBZActorSpawnTransforms = {}


---@class ASBZActorSpawnVolume : ASBZActorSpawnRegionBase
ASBZActorSpawnVolume = {}


---@class ASBZAerialVehicle : APawn
---@field OnBeginStop FSBZAerialVehicleOnBeginStop
---@field OnStopped FSBZAerialVehicleOnStopped
---@field OnSplineEntered FSBZAerialVehicleOnSplineEntered
---@field OnSplineLeft FSBZAerialVehicleOnSplineLeft
---@field OnSplineEndReached FSBZAerialVehicleOnSplineEndReached
---@field OnPathEndReached FSBZAerialVehicleOnPathEndReached
---@field OnStateEntered FSBZAerialVehicleOnStateEntered
---@field OnStateExited FSBZAerialVehicleOnStateExited
---@field OnDoorStateChanged FSBZAerialVehicleOnDoorStateChanged
---@field AerialVehicleAudioComponent USBZAerialVehicleAudioComponent
---@field Mesh USkeletalMeshComponent
---@field SplineFollowingComponent USBZAerialVehicleSplineFollowingComponent
---@field StateMachine USBZAerialVehicleStateMachine
---@field HoverStatePitchCurve FRuntimeFloatCurve
---@field HoverStateYawCurve FRuntimeFloatCurve
---@field HoverStateRollCurve FRuntimeFloatCurve
---@field DoorState uint8
---@field RepMove FSBZVehicleReplicatedMovementBase
---@field MaxRollAngle float
---@field PitchAngle float
---@field MaxHoverYawAngle float
---@field MaxHoverRollAngle float
---@field LandingRotation float
---@field bUseLandingRotation boolean
---@field MainRotorName FName
---@field TailRotorName FName
---@field RootName FName
ASBZAerialVehicle = {}

---@param NewState uint8
function ASBZAerialVehicle:SetDoorState(NewState) end
---@param Door ESBZAerialVehicleDoor
---@param bOpen boolean
function ASBZAerialVehicle:SetDoorOpen(Door, bOpen) end
---@param Door ESBZAerialVehicleDoor
---@param bIsDoorOpen boolean
function ASBZAerialVehicle:ReceiveOnDoorStateChanged(Door, bIsDoorOpen) end
function ASBZAerialVehicle:OnStoppedCallback() end
---@param Spline ASBZSpline
function ASBZAerialVehicle:OnSplineLeftCallback(Spline) end
---@param Spline ASBZSpline
---@param bPathEntered boolean
---@param bTeleportToPathStart boolean
function ASBZAerialVehicle:OnSplineEnteredCallback(Spline, bPathEntered, bTeleportToPathStart) end
---@param Spline ASBZSpline
function ASBZAerialVehicle:OnSplineEndReachedCallback(Spline) end
function ASBZAerialVehicle:OnRep_RepMove() end
---@param OldState uint8
function ASBZAerialVehicle:OnRep_DoorState(OldState) end
function ASBZAerialVehicle:OnPathEndReachedCallback() end
function ASBZAerialVehicle:OnBeginStopCallback() end
---@param NewState uint8
function ASBZAerialVehicle:Multicast_SetDoorState(NewState) end
---@return USBZVehicleSplineFollowingComponent
function ASBZAerialVehicle:GetVehicleSplineFollowingComponent() end


---@class ASBZAgilityNavLink : ASBZSmartNavLink
---@field LeftRoom ASBZRoomVolume
---@field RightRoom ASBZRoomVolume
---@field NavLinkAgilityComponent USBZNavLinkAgilityComponent
ASBZAgilityNavLink = {}



---@class ASBZAgilityPawnSpawnPredefined : ASBZPawnSpawnPredefined
---@field ForcedMontage UAnimMontage
---@field bUseAnimationToComputeEnd boolean
---@field AgilityType ESBZAgilityType
---@field NavLinkAgilityComponent USBZNavLinkAgilityComponent
---@field NavigationLink FNavigationLink
ASBZAgilityPawnSpawnPredefined = {}

function ASBZAgilityPawnSpawnPredefined:UpdateAgilityTrajectory() end
---@param Controller ASBZAIController
---@param Order USBZAIOrder
function ASBZAgilityPawnSpawnPredefined:SpawnedPawnOrderPushed(Controller, Order) end


---@class ASBZAkAcousticPortal : AAkAcousticPortal
---@field AffectedActors TArray<AActor>
---@field FrontSoundEnvironment ASBZSoundEnvironment
---@field BackSoundEnvironment ASBZSoundEnvironment
---@field ConnectedGate ASBZGate
---@field DebugScreenTimer float
---@field StateOpenDelay float
---@field StateCloseDelay float
---@field bAllowStateChange boolean
ASBZAkAcousticPortal = {}

function ASBZAkAcousticPortal:OnDebugLogging() end
---@param bTick boolean
function ASBZAkAcousticPortal:OnActivateTick(bTick) end


---@class ASBZAmbientSound : AActor
---@field AmbientSoundComponent USBZAmbientSoundComponent
ASBZAmbientSound = {}

---@param Component UActorComponent
function ASBZAmbientSound:HandleDeactivateSoundComponent(Component) end
---@param Component UActorComponent
---@param bReset boolean
function ASBZAmbientSound:HandleActivateSoundComponent(Component, bReset) end


---@class ASBZAmmoBag : ASBZPlaceableCharges
---@field NumberOfMagazinesPerCharge uint8
---@field NumberOfGrenadesPerCharge uint8
ASBZAmmoBag = {}



---@class ASBZAmmoPack : ASBZAmmoBag
ASBZAmmoPack = {}


---@class ASBZAmmoPickup : AActor
---@field PickupModifier float
---@field PhysicsComponent FSBZComponentSelector
ASBZAmmoPickup = {}



---@class ASBZArmedPawn : APawn
---@field EquippableConfigArray TArray<FSBZEquippableConfig>
---@field EquippableArray TArray<ASBZEquippable>
---@field AbilitySystemComponent USBZAbilitySystemComponent
---@field AbilityData USBZAICharacterAbilityData
---@field Type FGameplayTag
---@field AIVisibilityNodeComputationFrequency ESBZAIVisibilityNodeComputationFrequency
---@field StimuliSourceComponent UAIPerceptionStimuliSourceComponent
---@field OutlineComponent USBZOutlineComponent
---@field RangedWeapon ASBZRangedWeapon
---@field TeamId FGenericTeamId
---@field RangedWeaponAttachmentSocket FName
---@field RoomVolumes TArray<ASBZRoomVolume>
ASBZArmedPawn = {}



---@class ASBZArmorBag : ASBZPlaceableCharges
---@field ArmorChunkSizePerCharge int32
ASBZArmorBag = {}



---@class ASBZAttractableBagItem : ASBZBagItem
---@field AttractorComponent USBZAIAttractorComponent
---@field RoomVolumes TArray<ASBZRoomVolume>
ASBZAttractableBagItem = {}



---@class ASBZBagDropPoint : AActor
---@field bShouldActivateOnBeginPlay boolean
ASBZBagDropPoint = {}

function ASBZBagDropPoint:EnableAsBagDropPoint() end
function ASBZBagDropPoint:DisableAsBagDropPoint() end


---@class ASBZBagItem : AActor
---@field AudioComponent UAkComponent
---@field ZiplineAudioController USBZZiplineAudioController
---@field OverrideImpactEvent UAkAudioEvent
---@field MinimumImpactVelocity float
---@field ZiplineMotorClass TSubclassOf<ASBZZiplineMotor>
---@field CurrentZiplineMotor ASBZZiplineMotor
---@field BoxComponent UBoxComponent
---@field Interactable USBZInteractableComponent
---@field PhysicsCorrector USBZSimplePhysicsCorrector
---@field ObjectiveComponent USBZAIObjectiveComponent
---@field Bag FSBZBagHandle
---@field CurrentZipLine ASBZZipline
---@field TimeOnZipline float
---@field bIsMovingOnZiplineForward boolean
---@field BagId int32
---@field InteractionDelay float
---@field ZiplineParams USBZZiplineSettings
---@field bCanCrewAICarry boolean
ASBZBagItem = {}

---@param bDestroyOnSecured boolean
---@return boolean
function ASBZBagItem:SecureBag(bDestroyOnSecured) end
function ASBZBagItem:OnRep_CurrentZipline() end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZBagItem:OnPickup(Interactable, Interactor, bInIsLocallyControlled) end
---@param Zipline ASBZZipline
---@param InTimeOnZipline float
---@param bInIsMovingForward boolean
function ASBZBagItem:Multicast_SetZipline(Zipline, InTimeOnZipline, bInIsMovingForward) end
---@param bIsAttached boolean
function ASBZBagItem:BP_OnZiplineAttachmentChanged(bIsAttached) end
---@param DegredationLevel int32
function ASBZBagItem:BP_OnDegradationChanged(DegredationLevel) end


---@class ASBZBagRespawnPoint : AActor
---@field bStartEnabled boolean
ASBZBagRespawnPoint = {}

function ASBZBagRespawnPoint:EnableBagRespawnPoint() end
function ASBZBagRespawnPoint:DisableBagRespawnPoint() end


---@class ASBZBagSpawner : AActor
---@field NumberOfBags int32
---@field DelayBetweenSpawns float
---@field BagTypeToSpawn USBZBagType
---@field bShouldLaunchBag boolean
---@field LaunchSpeed float
---@field LaunchDirection FVector
---@field bShouldLaunchWithinCone boolean
---@field ConeAngle float
ASBZBagSpawner = {}

function ASBZBagSpawner:StartSpawningBags() end


---@class ASBZBagTriggerVolume : ATriggerVolume
---@field bShouldStartEnabled boolean
---@field TriggerMode ESBZBagTriggerMode
---@field bDisableOnComplete boolean
---@field bCountOverlappedForTarget boolean
---@field bCountSecuredForTarget boolean
---@field Target int32
---@field BagTypeArray TArray<USBZBagType>
---@field OnBagCountChanged FSBZBagTriggerVolumeOnBagCountChanged
---@field OnBagEnteredOrSecured FSBZBagTriggerVolumeOnBagEnteredOrSecured
---@field OnComplete FSBZBagTriggerVolumeOnComplete
---@field Filter FSBZBagFilter
---@field LocallySecured int32
---@field BagTeleportPoint ASBZBagRespawnPoint
ASBZBagTriggerVolume = {}

---@param bEnabled boolean
function ASBZBagTriggerVolume:SetVolumeEnabled(bEnabled) end
---@param BagItem ASBZBagItem
---@param bFilterFirst boolean
---@return boolean
function ASBZBagTriggerVolume:ManuallySecureBag(BagItem, bFilterFirst) end
---@return int32
function ASBZBagTriggerVolume:GetCount() end
---@param BagItem ASBZBagItem
---@param BagHandle FSBZBagHandle
---@return boolean
function ASBZBagTriggerVolume:FilterBag(BagItem, BagHandle) end
---@param BagItem ASBZBagItem
---@param BagHandle FSBZBagHandle
---@return boolean
function ASBZBagTriggerVolume:CheckCustomBagFilter(BagItem, BagHandle) end


---@class ASBZBasePlayerCameraManager : APlayerCameraManager
---@field DefaultListenerComponentArray TArray<UAkComponent>
ASBZBasePlayerCameraManager = {}



---@class ASBZBeaconActionPhaseClient : ASBZOnlineBeaconClient
---@field PlayersInfo TArray<FSBZLobbyCharacterInfo>
---@field bIsDsLobbyClient boolean
ASBZBeaconActionPhaseClient = {}

function ASBZBeaconActionPhaseClient:ServerVoteStayAsParty() end
---@param InPlayerId FUniqueNetIdRepl
---@param Status ESBZSlotStatus
function ASBZBeaconActionPhaseClient:ServerSetSlotStatus(InPlayerId, Status) end
---@param InPlayerId FUniqueNetIdRepl
---@param InLoadout FPD3PlayerLoadout
---@param InPlatform ESBZPlatform
---@param InInfamyLevel int32
---@param AccelByteUserName FString
---@param AccelByteDisplayName FString
---@param bCrossPlayEnabled boolean
function ASBZBeaconActionPhaseClient:ServerSetPlayerLoadout(InPlayerId, InLoadout, InPlatform, InInfamyLevel, AccelByteUserName, AccelByteDisplayName, bCrossPlayEnabled) end
---@param InPlayerId FUniqueNetIdRepl
function ASBZBeaconActionPhaseClient:ServerSetPlayerLoadingComplete(InPlayerId) end
---@param PlayerInfo FSBZLobbyCharacterInfo
function ASBZBeaconActionPhaseClient:ServerSetPlayerInfo(PlayerInfo) end
---@param InSlotData FSBZSlotData
function ASBZBeaconActionPhaseClient:ServerSetPlayerData(InSlotData) end
---@param InPlayerId FUniqueNetIdRepl
---@param InPreferredPlayerCharacters TArray<FSoftObjectPath>
---@param InInventoryPlayerCharacters TArray<FSoftObjectPath>
function ASBZBeaconActionPhaseClient:ServerSetPlayerCharactersArray(InPlayerId, InPreferredPlayerCharacters, InInventoryPlayerCharacters) end
---@param InPlayers TArray<FSBZPlayerSlotInfo>
function ASBZBeaconActionPhaseClient:ServerReserveSlot(InPlayers) end
---@param InPlayerId FUniqueNetIdRepl
function ASBZBeaconActionPhaseClient:ServerRemovePreplanningAsset(InPlayerId) end
---@param InPlayerId FUniqueNetIdRepl
function ASBZBeaconActionPhaseClient:ServerPlayerToReadyReceive(InPlayerId) end
function ASBZBeaconActionPhaseClient:ServerPlayerToReadyAck() end
function ASBZBeaconActionPhaseClient:ServerPlayerToReady() end
---@param InPlayerIdStartTravel FUniqueNetIdRepl
function ASBZBeaconActionPhaseClient:ServerNotifyStartTravel(InPlayerIdStartTravel) end
---@param InPlayerId FUniqueNetIdRepl
---@param AccelByteItemSku FString
function ASBZBeaconActionPhaseClient:ServerAddPreplanningAsset(InPlayerId, AccelByteItemSku) end
function ASBZBeaconActionPhaseClient:SendPreplanningAssets() end
---@param InPlayerId FUniqueNetIdRepl
function ASBZBeaconActionPhaseClient:SendActiveLoadout(InPlayerId) end
function ASBZBeaconActionPhaseClient:OnRep_CharactersInfo() end
---@param NewActiveLoadoutIndex int32
function ASBZBeaconActionPhaseClient:OnActiveLoadoutChanged(NewActiveLoadoutIndex) end
function ASBZBeaconActionPhaseClient:NotifyMissionEnd() end
---@param BackendPlayerIds TArray<FString>
function ASBZBeaconActionPhaseClient:ClientUpdateStayAsPartyList(BackendPlayerIds) end
---@param InSlotsData TArray<FSBZSlotData>
function ASBZBeaconActionPhaseClient:ClientUpdateSlotsData(InSlotsData) end
function ASBZBeaconActionPhaseClient:ClientTravelConnectionTimeout() end
function ASBZBeaconActionPhaseClient:ClientStartWaitingPlayersLoadingComplete() end
---@param Result ESBZOnlineCode
function ASBZBeaconActionPhaseClient:ClientStartTravelAck(Result) end
---@param InPlayerId FUniqueNetIdRepl
---@param InLoadout FPD3PlayerLoadout
---@param InSelectedCharacter FSoftObjectPath
---@param InPlatform ESBZPlatform
---@param InInfamyLevel int32
---@param AccelByteUserName FString
---@param AccelByteDisplayName FString
---@param bCrossPlayEnabled boolean
function ASBZBeaconActionPhaseClient:ClientSetPlayerLoadout(InPlayerId, InLoadout, InSelectedCharacter, InPlatform, InInfamyLevel, AccelByteUserName, AccelByteDisplayName, bCrossPlayEnabled) end
---@param PreTravelTimeLimit float
function ASBZBeaconActionPhaseClient:ClientRestartPreTravelTimer(PreTravelTimeLimit) end
---@param PreMatchReadyTimeLimit float
function ASBZBeaconActionPhaseClient:ClientRestartPreMatchTimer(PreMatchReadyTimeLimit) end
---@param bWasSuccessful boolean
---@param InMissionInfo FSBZMissionInfo
function ASBZBeaconActionPhaseClient:ClientReserveSlotAck(bWasSuccessful, InMissionInfo) end
---@param InPlayerId FUniqueNetIdRepl
function ASBZBeaconActionPhaseClient:ClientPreplanningAssetRemoved(InPlayerId) end
function ASBZBeaconActionPhaseClient:ClientPreplanningAssetRejected() end
---@param InPlayerId FUniqueNetIdRepl
---@param AccelByteItemSku FString
function ASBZBeaconActionPhaseClient:ClientPreplanningAssetAdded(InPlayerId, AccelByteItemSku) end
---@param InStatus ESBZPreMatchLobbyStatus
function ASBZBeaconActionPhaseClient:ClientPreMatchLobbyStatusUpdated(InStatus) end
function ASBZBeaconActionPhaseClient:ClientPlayerToReadyAck() end
---@param PartyCode FString
function ASBZBeaconActionPhaseClient:ClientJoinPartyByCode(PartyCode) end
function ASBZBeaconActionPhaseClient:ClientInitializeTravel() end
function ASBZBeaconActionPhaseClient:ClientForceReadyButtonByServer() end


---@class ASBZBeaconActionPhaseHost : ASBZOnlineBeaconHostObject
---@field OnPlayerToReadyEvent FSBZBeaconActionPhaseHostOnPlayerToReadyEvent
---@field OnPlayerStartTravelEvent FSBZBeaconActionPhaseHostOnPlayerStartTravelEvent
---@field OnPlayerDisconnectedEvent FSBZBeaconActionPhaseHostOnPlayerDisconnectedEvent
ASBZBeaconActionPhaseHost = {}

---@param PlayerState APlayerState
function ASBZBeaconActionPhaseHost:HandlePlayerCountChanged(PlayerState) end


---@class ASBZBinaryStateNode : AActor
---@field OnStateChanged FSBZBinaryStateNodeOnStateChanged
---@field bState boolean
ASBZBinaryStateNode = {}

---@param bInState boolean
function ASBZBinaryStateNode:SetState(bInState) end
---@return boolean
function ASBZBinaryStateNode:GetState() end


---@class ASBZBreachingEquipmentBase : AActor
---@field OnBreachingEquipmentStarted FSBZBreachingEquipmentBaseOnBreachingEquipmentStarted
---@field OnBreachingEquipmentJammed FSBZBreachingEquipmentBaseOnBreachingEquipmentJammed
---@field OnBreachingEquipmentRestarted FSBZBreachingEquipmentBaseOnBreachingEquipmentRestarted
---@field OnBreachingEquipmentCompleted FSBZBreachingEquipmentBaseOnBreachingEquipmentCompleted
---@field DurationTimeSeconds float
---@field bCanEverBeSabotaged boolean
---@field OutlineAsset USBZOutlineAsset
---@field OutlineComponent USBZOutlineComponent
---@field CurrentEquipmentState ESBZBreachingEquipmentState
---@field EstimatedCompleteTime float
---@field ProgressMade float
---@field AttractorComponent USBZAIAttractorComponent
---@field LifeActionComponent USBZLifeActionComponent
---@field LifeActionInstance USBZLifeActionInstance
---@field LifeActionSlot USBZLifeActionSlot
---@field InteractionMarkerAsset USBZMarkerDataAsset
---@field FixMarkerAsset USBZMarkerDataAsset
---@field AkComponent UAkComponent
---@field DrillingEvent UAkAudioEvent
---@field JammedEvent UAkAudioEvent
---@field HeatingUpEvent UAkAudioEvent
---@field DoneEvent UAkAudioEvent
---@field RoomVolumes TArray<ASBZRoomVolume>
ASBZBreachingEquipmentBase = {}

---@param OldState ESBZBreachingEquipmentState
function ASBZBreachingEquipmentBase:OnRep_CurrentState(OldState) end
---@param NewState ESBZBreachingEquipmentState
function ASBZBreachingEquipmentBase:Multicast_SetState(NewState) end
---@param InEstimatedCompleteTime float
function ASBZBreachingEquipmentBase:Multicast_SetEstimatedCompleteTime(InEstimatedCompleteTime) end
---@return float
function ASBZBreachingEquipmentBase:GetProgressMade() end
---@return ESBZBreachingEquipmentState
function ASBZBreachingEquipmentBase:GetCurrentState() end
---@param OldState ESBZBreachingEquipmentState
---@param NewState ESBZBreachingEquipmentState
---@param bDoCosmetics boolean
function ASBZBreachingEquipmentBase:BP_OnStateChanged(OldState, NewState, bDoCosmetics) end


---@class ASBZCarriedBag : AActor
---@field SkeletalMeshComponentBudgeted USkeletalMeshComponentBudgeted
---@field OwningCharacter ASBZCharacter
---@field AIBagOutlineAsset USBZOutlineAsset
---@field InteractableComponent USBZInteractableComponent
---@field BagHandle FSBZBagHandle
ASBZCarriedBag = {}

---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZCarriedBag:HandleServerComplete(InInteractable, Interactor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZCarriedBag:HandlePredictedEnd(InInteractable, Interactor, bInIsLocallyControlled) end
---@param DegredationLevel int32
function ASBZCarriedBag:BP_OnDegradationChanged(DegredationLevel) end
---@param ParentSkeletalMeshComponent USkeletalMeshComponent
function ASBZCarriedBag:BP_AttachmentComplete(ParentSkeletalMeshComponent) end


---@class ASBZCarriedHackableKey : ASBZCarriedStaticInteractionActor
---@field OnComplete FSBZCarriedHackableKeyOnComplete
---@field OnCanceled FSBZCarriedHackableKeyOnCanceled
---@field ZoneEffect UNiagaraComponent
---@field HackDuration float
---@field SharedKeyItemTagsToGrant FGameplayTagContainer
---@field DistanceCheckFrequency float
---@field MaxAllowedDistance float
---@field MaxChecksOutsideOfAllowedDistance int32
---@field CurrentHackingCharacter AActor
---@field CheckOutsideCircleCount int32
---@field ChecksMade int32
ASBZCarriedHackableKey = {}

---@param InteractableComponent USBZBaseInteractableComponent
---@param bInNewState boolean
function ASBZCarriedHackableKey:OnInteractionEnabledStateChanged(InteractableComponent, bInNewState) end
function ASBZCarriedHackableKey:Multicast_OnHackComplete() end
---@param bInRange boolean
---@param bWasInRange boolean
---@param Progress float
function ASBZCarriedHackableKey:BP_OnPlayerInRangeChecked(bInRange, bWasInRange, Progress) end
---@param bIsLocallyControlled boolean
function ASBZCarriedHackableKey:BP_OnHackStarted(bIsLocallyControlled) end
function ASBZCarriedHackableKey:BP_OnHackComplete() end
function ASBZCarriedHackableKey:BP_OnHackAborted() end


---@class ASBZCarriedStaticInteractionActor : ASBZDynamicInteractionActor
---@field AttachedAIParent ASBZAICharacter
---@field bIsSingleUse boolean
ASBZCarriedStaticInteractionActor = {}



---@class ASBZCharacter : ACharacter
---@field OnAnimEventActiveDelegate FSBZCharacterOnAnimEventActiveDelegate
---@field MarkedVoiceComment USBZVoiceCommentDataAsset
---@field MarkedOutline USBZOutlineAsset
---@field OutlineComponent USBZOutlineComponent
---@field AttachedCosmeticProps TArray<ASBZCosmeticProp>
---@field CarryType USBZCarryType
---@field HumanShieldCarryType USBZCarryType
---@field DeathImpactMaterialOverrides TMap<TWeakObjectPtr<UPhysicalMaterial>, TWeakObjectPtr<UPhysicalMaterial>>
---@field DeathImpactMaterialOverridesArray TArray<UPhysicalMaterial>
---@field AudioComponent UAkComponent
---@field ZiplineAudioController USBZZiplineAudioController
---@field ZiplineMotorClass TSubclassOf<ASBZZiplineMotor>
---@field CurrentZiplineMotor ASBZZiplineMotor
---@field ZiplineAttachmentBone FName
---@field MeshScaleData FSBZCharacterMeshScaleData
---@field bRandomMeshScaleEnabled boolean
---@field AdditiveBoundExtent FVector
---@field RagdollAdditiveBoundExtent FVector
---@field EventReactionComponent USBZEventReactionComponent
---@field CurrentBagActor AActor
---@field CurrentBag FSBZBagHandle
---@field CurrentCarriedType USBZCarryType
---@field ReplicatedMontage FSBZReplicatedMontage
---@field bIsAlive boolean
---@field bIsRagdolled boolean
---@field bIsLocallyControlled boolean
---@field bIsRunning boolean
---@field bIsJumping boolean
---@field bIsTargeting boolean
---@field bIsHurtReactionScope boolean
---@field bIsHurtReactionScopeStackAllowedOnce boolean
---@field bIsPlayReady boolean
---@field bIsCarried boolean
---@field bIsCarriedPredicted boolean
---@field bIsCarriedDropAnimation boolean
---@field bIsCarryChangedUsingInteraction boolean
---@field ReplicatedReloadState FSBZReplicatedReloadState
---@field StartReloadState ESBZReloadState
---@field bIsCurrentAnimationMagazineRemoved boolean
---@field LastReloadAnimationName FName
---@field LastLocalReloadMontage UAnimMontage
---@field LastRecoilMontage UAnimMontage
---@field MovementSettings USBZCharacterMovementSettings
---@field Stance ESBZCharacterStance
---@field CompatibleStances int32
---@field MaxStartAimOffsetYawDegrees float
---@field MaxAimOffsetYawDegrees float
---@field MaxStartAimOffsetYawDegreesTargeting float
---@field MaxAimOffsetYawDegreesTargeting float
---@field RemoteViewYaw uint8
---@field AbilitySystem USBZAbilitySystemComponent
---@field EquippableConfigArray TArray<FSBZEquippableConfig>
---@field LoadedEquippableConfigArray TArray<FSBZEquippableConfig>
---@field CurrentEquippableIndex int32
---@field LastEquippableIndex int32
---@field LastRequiredEquippableIndex int32
---@field EquippableArray TArray<ASBZEquippable>
---@field PendingReplicatedEquippableArray TArray<ASBZEquippable>
---@field CurrentEquippableConfig FSBZEquippableConfig
---@field CurrentEquippableRuntime FSBZEquippableRuntime
---@field CurrentEquippable ASBZEquippable
---@field EquippableRuntimeArray TArray<FSBZEquippableRuntime>
---@field EquipState ESBZEquipState
---@field EquipStateAndIndex uint8
---@field EquippableAttachementSocketName FName
---@field LinkedAnimationClass TSubclassOf<UAnimInstance>
---@field AnimationCollection USBZBaseCharacterAnimationCollection
---@field FacialAnimationCollection USBZFacialAnimationCollection
---@field EmotionMapping USBZEmotionMapping
---@field AnimationData USBZCharacterAnimationDataTP
---@field DefaultLifeActionAffinityData USBZLifeActionAffinitytData
---@field RandomizedMeshScaleLifeActionAffinityData USBZLifeActionAffinitytData
---@field bCanEverHaveFacialAnimation boolean
---@field MontageSectionSwitchRequests TArray<FSBZMontageSectionSwitchRequest>
---@field TargetEquippableIndex int32
---@field InitialEquippableIndex int32
---@field ForbiddenEquippableIndexCountArray int8
---@field EquippableVisibleCount int8
---@field EquippedCount int8
---@field bIsInitialEquipped boolean
---@field TeamId FGenericTeamId
---@field VoiceComponent USBZCharacterVoiceComponent
---@field DamageTracker USBZDamageTracker
---@field FootStepComponent USBZCharacterFootStepComponent
---@field SlidingComponent USBZCharacterSlidingComponent
---@field MantlingComponent USBZCharacterMantlingComponent
---@field VaultingComponent USBZCharacterVaultingComponent
---@field AIVisibilityNodeComputationFrequency ESBZAIVisibilityNodeComputationFrequency
---@field AIVisibilityNode FSBZAIVisibilityLeafNode
---@field AbilityData USBZCharacterAbilityData
---@field FloorHitLeftFoot FHitResult
---@field FloorHitRightFoot FHitResult
---@field BoneDamageMultiplierMap TMap<FName, FSBZBoneDamageMultiplier>
---@field TagReactionAsset USBZTagReactionAsset
---@field CurrentTagReactionAsset USBZTagReactionAsset
---@field TagReactionStanceMap TMap<ESBZCharacterStance, USBZTagReactionAsset>
---@field CurrentTagReactionEffects TArray<FSBZTagReactionEffect>
---@field LastTagReactionMontage UAnimMontage
---@field HurtReactionArray USBZHurtReaction
---@field SprintForwardHurtVelocityInterval FFloatInterval
---@field LandSoundEvent UAkAudioEvent
---@field MinInteractionDurationToUnequip float
---@field CurrentThrowableIndex int32
---@field GadgetIndexArray TArray<int32>
---@field GadgetMaxIndexArray TArray<int32>
---@field CurrentPlaceableIndex int32
---@field Interactable USBZCharacterInteractableComponent
---@field MeleeComponent USBZMeleeComponent
---@field MeleeDamageData USBZMeleeDamageData
---@field CurrentCarryActor AActor
---@field CurrentCarryInstigator ASBZCharacter
---@field CarryActorSocketName FName
---@field PhysicsAssetWhenCarried UPhysicsAsset
---@field PhysicsAssetWhenNotCarried UPhysicsAsset
---@field HumanShieldInstigatorState ESBZHumanShieldInstigatorState
---@field OffsetWhenCarried FTransform
---@field OffsetWhenHumanShield FTransform
---@field HumanShieldInstigatorAcceptableRadius float
---@field HumanShieldSlotParameters TArray<FSBZHumanShieldSlotParameters>
---@field MeleeComment USBZVoiceCommentDataAsset
---@field CurrentHumanShieldInstigatorEnterMontage UAnimMontage
---@field CarryingFromCrouchAcceptableRadius float
---@field Seed int32
---@field SharedAnimBehavior FSBZSharedAnimBehavior
---@field LastController AController
---@field CharacterTag FGameplayTag
---@field DialogBodyGesturesData USBZDialogBodyGesturesData
---@field CharacterName FText
---@field EquippedMask ASBZMask
---@field DisplayIcon UPaperSprite
---@field HurtReactionOffset int32
---@field LastAppliedHurtReactionIndex int32
---@field CurrentHurtReactionType ESBZHurtReactionType
---@field HurtReactionEndTime float
---@field PredictedHurtReactionEndTime float
---@field CurrentMeleeMontage UAnimMontage
---@field RoomVolumes TArray<ASBZRoomVolume>
---@field LastKnownRoom ASBZRoomVolume
---@field ExplosionLineTraceBoneArray TArray<FName>
---@field HeadBone FName
---@field StatisticName FName
---@field StatisticKillString FString
---@field CarryWeightTierOffset float
---@field CurrentlyUsedThrowable ASBZThrowable
---@field ReplicatedThrowableArray TArray<ASBZThrowable>
---@field ReplicatedGrenadeProjectileArray TArray<ASBZGrenadeProjectile>
ASBZCharacter = {}

---@param InStance ESBZCharacterStance
function ASBZCharacter:SetStance(InStance) end
---@param FromCharacter ASBZCharacter
function ASBZCharacter:Server_WantsToTranferBagFrom(FromCharacter) end
---@param InEquipStateAndIndex uint8
function ASBZCharacter:Server_SetEquipStateAndIndex(InEquipStateAndIndex) end
---@param NetID uint32
function ASBZCharacter:Server_OnThrowCarryActorFailed(NetID) end
---@param NetID uint32
function ASBZCharacter:Server_OnPickupCarryActorFailed(NetID) end
function ASBZCharacter:Server_HumanShieldInstigatorSlotReached() end
---@param GameplayTags FGameplayTagContainer
---@param Count int32
function ASBZCharacter:RemoveLooseGameplayTags(GameplayTags, Count) end
---@param GameplayTag FGameplayTag
---@param Count int32
function ASBZCharacter:RemoveLooseGameplayTag(GameplayTag, Count) end
---@param Zipline ASBZZipline
---@param bIsMovingZiplineForward boolean
function ASBZCharacter:OnStopZipline(Zipline, bIsMovingZiplineForward) end
---@param Trajectory FSBZAgilityTraversalTrajectory
function ASBZCharacter:OnStopTraversal(Trajectory) end
function ASBZCharacter:OnStopSlide() end
---@param Zipline ASBZZipline
---@param bIsMovingZiplineForward boolean
function ASBZCharacter:OnStartZipline(Zipline, bIsMovingZiplineForward) end
---@param Trajectory FSBZAgilityTraversalTrajectory
function ASBZCharacter:OnStartTraversal(Trajectory) end
function ASBZCharacter:OnStartSlide() end
---@param InEquippableActor AActor
function ASBZCharacter:OnReplicatedEquippableDestroyedOnClient(InEquippableActor) end
---@param InStance ESBZCharacterStance
function ASBZCharacter:OnRep_Stance(InStance) end
function ASBZCharacter:OnRep_Seed() end
---@param OldReplicatedReloadState FSBZReplicatedReloadState
function ASBZCharacter:OnRep_ReplicatedReloadState(OldReplicatedReloadState) end
function ASBZCharacter:OnRep_RandomMeshScaleEnabled() end
function ASBZCharacter:OnRep_IsAlive() end
function ASBZCharacter:OnRep_HumanShieldInstigatorState() end
function ASBZCharacter:OnRep_EquipStateAndIndex() end
---@param OldThrowableIndex int32
function ASBZCharacter:OnRep_CurrentThrowableIndex(OldThrowableIndex) end
---@param OldPlaceableIndex int32
function ASBZCharacter:OnRep_CurrentPlaceableIndex(OldPlaceableIndex) end
function ASBZCharacter:OnRep_CurrentBag() end
function ASBZCharacter:OnEquipStateTimerDone() end
---@param AnimMontageInstanceID int32
---@param bInterrupted boolean
function ASBZCharacter:OnCharacterMontageInstanceEnded(AnimMontageInstanceID, bInterrupted) end
---@param Montage UAnimMontage
---@param SectionName FName
function ASBZCharacter:Multicast_SwitchMontageSection(Montage, SectionName) end
function ASBZCharacter:Multicast_StopTargeting() end
---@param bWasCancelled boolean
function ASBZCharacter:Multicast_StopRecoil(bWasCancelled) end
function ASBZCharacter:Multicast_StopOverrideMaxWalkSpeed() end
---@param Montage UAnimMontage
---@param bAllowExitSectionSwitch boolean
function ASBZCharacter:Multicast_StopMontage(Montage, bAllowExitSectionSwitch) end
function ASBZCharacter:Multicast_StartTargeting() end
---@param SnapLocation FVector
---@param HSInstigator ASBZCharacter
function ASBZCharacter:Multicast_SnapVictimOntoInstigator(SnapLocation, HSInstigator) end
---@param NewStance ESBZCharacterStance
function ASBZCharacter:Multicast_SetStance(NewStance) end
---@param InReplicatedReloadState FSBZReplicatedReloadState
function ASBZCharacter:Multicast_SetReloadState(InReplicatedReloadState) end
---@param Montage UAnimMontage
---@param NextSectionName FName
function ASBZCharacter:Multicast_SetMontageNextSection(Montage, NextSectionName) end
---@param bIsMarked boolean
function ASBZCharacter:Multicast_SetMarked(bIsMarked) end
---@param InEquipStateAndIndex uint8
function ASBZCharacter:Multicast_SetEquipStateAndIndex(InEquipStateAndIndex) end
---@param bInEnableRandomMeshScale boolean
function ASBZCharacter:Multicast_SetEnableRandomMeshScale(bInEnableRandomMeshScale) end
---@param NewThrowableIndex int32
function ASBZCharacter:Multicast_SetCurrentThrowableIndex(NewThrowableIndex) end
---@param NewPlaceableIndex int32
function ASBZCharacter:Multicast_SetCurrentPlaceableIndex(NewPlaceableIndex) end
---@param NewIndex int32
function ASBZCharacter:Multicast_SetActiveGadget(NewIndex) end
---@param HurtReactionIndex int32
function ASBZCharacter:Multicast_PredictedRagdollDenied(HurtReactionIndex) end
---@param Montage UAnimMontage
---@param TargetTransforms TArray<FTransform>
---@param bDisableAutoBlendOut boolean
function ASBZCharacter:Multicast_PlayMontageMoveTo(Montage, TargetTransforms, bDisableAutoBlendOut) end
---@param MontageName FName
---@param TargetTransforms TArray<FTransform>
function ASBZCharacter:Multicast_PlayMontageMoveMulti(MontageName, TargetTransforms) end
---@param MontageName FName
---@param EndMoveToWorldPosition FVector
---@param PlayRate float
function ASBZCharacter:Multicast_PlayMontageMove(MontageName, EndMoveToWorldPosition, PlayRate) end
---@param Montage UAnimMontage
---@param bPlayOnDedicatedServer boolean
---@param bStopAllActiveMontages boolean
function ASBZCharacter:Multicast_PlayMontage(Montage, bPlayOnDedicatedServer, bStopAllActiveMontages) end
---@param MaxWalkSpeed float
function ASBZCharacter:Multicast_OverrideMaxWalkSpeed(MaxWalkSpeed) end
---@param NetID uint32
function ASBZCharacter:Multicast_OnThrowCarryActor(NetID) end
---@param NetID uint32
function ASBZCharacter:Multicast_OnPickupCarryActor(NetID) end
function ASBZCharacter:Multicast_OnKill() end
function ASBZCharacter:Multicast_HumanShieldInstigatorSlotReached() end
---@param Index int32
function ASBZCharacter:Multicast_ExplodedInHand(Index) end
function ASBZCharacter:Multicast_EnableThrowState() end
function ASBZCharacter:Multicast_DisableThrowState() end
function ASBZCharacter:Multicast_CancelMelee() end
---@param HurtReactionPrediction FSBZHurtReactionPrediction
function ASBZCharacter:Multicast_ApplyHurtReaction(HurtReactionPrediction) end
function ASBZCharacter:Multicast_ActivateMelee() end
---@param DamagedActor AActor
---@param Damage float
---@param InstigatedBy AController
---@param HitLocation FVector
---@param HitComponent UPrimitiveComponent
---@param BoneName FName
---@param ShotFromDirection FVector
---@param DamageType UDamageType
---@param DamageCauser AActor
function ASBZCharacter:HandleTakePointDamage(DamagedActor, Damage, InstigatedBy, HitLocation, HitComponent, BoneName, ShotFromDirection, DamageType, DamageCauser) end
---@param Bag FSBZBagHandle
---@return boolean
function ASBZCharacter:GiveBag(Bag) end
---@return int32
function ASBZCharacter:GetSeed() end
---@return ASBZRoomVolume
function ASBZCharacter:GetLastKnownRoom() end
---@return ASBZRoomVolume
function ASBZCharacter:GetCurrentRoom_Implementation() end
---@param NetID uint32
function ASBZCharacter:Client_OnThrowCarryActorFailed(NetID) end
---@param NetID uint32
function ASBZCharacter:Client_OnPickupCarryActorFailed(NetID) end
function ASBZCharacter:BP_OnKill() end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function ASBZCharacter:BP_OnHeistStateChanged(OldState, NewState) end
---@param GameplayTag FGameplayTag
---@param Count int32
function ASBZCharacter:AddLooseGameplayTag(GameplayTag, Count) end


---@class ASBZChatInGame : AInfo
ASBZChatInGame = {}

---@param PlayerId int32
---@param PlayerChatEvent FSBZPlayerChatEvent
function ASBZChatInGame:ServerChatMessageReceived(PlayerId, PlayerChatEvent) end
---@param PlayerState APlayerState
---@param CallIndex uint8
function ASBZChatInGame:ServerCallMessageReceived(PlayerState, CallIndex) end
---@param ChatEventData FSBZPlayerChatEvent
function ASBZChatInGame:SendChatMessageToServer(ChatEventData) end
---@param CallEventData FSBZPlayerCallEvent
function ASBZChatInGame:SendCallMessageToServer(CallEventData) end
---@param PlayerId int32
---@param PlayerChatEvent FSBZPlayerChatEvent
function ASBZChatInGame:MulticastChatMessageReceived(PlayerId, PlayerChatEvent) end
---@param PlayerState APlayerState
---@param CallIndex uint8
function ASBZChatInGame:MulticastCallMessageReceived(PlayerState, CallIndex) end
function ASBZChatInGame:ClientSubscribeToChatMessages() end


---@class ASBZChatReplicatedProxy : AActor
ASBZChatReplicatedProxy = {}

---@param Message FSBZChatMessage
function ASBZChatReplicatedProxy:ServerSendChatMessage(Message) end
---@param Message FSBZChatMessage
function ASBZChatReplicatedProxy:MulticastReceiveChatMessage(Message) end
---@param Message FSBZChatMessage
function ASBZChatReplicatedProxy:ClientSendChatMessage(Message) end


---@class ASBZCodeNote : AActor
---@field CodeToShow int32
---@field CodeWidget UWidgetComponent
---@field bForceShowTrueCode boolean
ASBZCodeNote = {}

function ASBZCodeNote:OnRep_CodeToShow() end


---@class ASBZConnectedCableBox : AActor
---@field OnComplete FSBZConnectedCableBoxOnComplete
---@field OnDoorOpened FSBZConnectedCableBoxOnDoorOpened
---@field DoorInteractableSelector FSBZComponentSelector
---@field CableInteractablesSelectors TArray<FSBZComponentSelector>
---@field AllowedChances int32
---@field CurrentCorrectSequence TArray<int32>
---@field CurrentSequenceIndex int32
---@field InteractionStates uint8
---@field bIsDoorOpen boolean
---@field CurrentModelNumberText FText
---@field CableInteractables TArray<USBZInteractableComponent>
---@field DoorInteractable USBZInteractableComponent
---@field CurrentCorrectColorIndex int32
---@field bIsCompleted boolean
---@field FailCounter uint8
ASBZConnectedCableBox = {}

---@param CorrectSequence TArray<int32>
function ASBZConnectedCableBox:SetCorrectColorSequence(CorrectSequence) end
---@param InCorrectColorIndex int32
function ASBZConnectedCableBox:SetCorrectColorIndex(InCorrectColorIndex) end
function ASBZConnectedCableBox:OnRep_InteractionStates() end
function ASBZConnectedCableBox:OnRep_FailCounter() end
function ASBZConnectedCableBox:OnRep_DoorOpen() end
function ASBZConnectedCableBox:OnRep_CurrentSequenceIndex() end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZConnectedCableBox:OnDoorInteractionComplete(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZConnectedCableBox:OnCableInteractionComplete(Interactable, Interactor, bInIsLocallyControlled) end
---@param bEnabled boolean
function ASBZConnectedCableBox:EnableInteraction(bEnabled) end
---@param ModelNumberText FText
function ASBZConnectedCableBox:BP_UpdateModelNumber(ModelNumberText) end
---@param InputsMade int32
function ASBZConnectedCableBox:BP_UpdateInputsMade(InputsMade) end
---@param NumberOfFails int32
function ASBZConnectedCableBox:BP_UpdateFailCounter(NumberOfFails) end
---@param bDoCosmetics boolean
function ASBZConnectedCableBox:BP_OpenDoor(bDoCosmetics) end
---@param bWasSuccess boolean
function ASBZConnectedCableBox:BP_OnComplete(bWasSuccess) end
---@param Index int32
---@param bDoCosmetics boolean
---@param bReset boolean
function ASBZConnectedCableBox:BP_FlipSwitch(Index, bDoCosmetics, bReset) end


---@class ASBZConnectedMaintenanceBox : AActor
---@field OnMaintenanceBoxComplete FSBZConnectedMaintenanceBoxOnMaintenanceBoxComplete
---@field OnMaintenanceBoxEnabled FSBZConnectedMaintenanceBoxOnMaintenanceBoxEnabled
---@field OnWrongColorFlipped FSBZConnectedMaintenanceBoxOnWrongColorFlipped
---@field ConnectedCableBoxes TArray<ASBZConnectedCableBox>
---@field Objective ASBZObjective
---@field CurrentModelNumber FText
---@field SequenceLength int32
---@field NumberOfSequences int32
---@field bRequiresDeactivate boolean
---@field SequenceViewerSet TArray<FSBZSequenceViewerSet>
---@field Seed int32
---@field CableSymbols TArray<UMaterialInstance>
---@field CableColorTexts TArray<FText>
---@field FirstNotificationAsset USBZActionNotificationAsset
---@field SecondNotificationAsset USBZActionNotificationAsset
---@field OutlineComponent USBZOutlineComponent
---@field ShoutTargetComponent USBZShoutTargetComponent
---@field InteractableComponent USBZInteractableComponent
---@field StaticMesh UStaticMeshComponent
---@field CorrectSequenceArray TArray<FSBZMainteneanceBoxSequence>
---@field CurrentState ESBZMaintenanceBoxState
---@field CompletedCableBoxes int32
---@field bShouldUpdateCompletedCount boolean
---@field bHasTriggeredSearch boolean
ASBZConnectedMaintenanceBox = {}

---@param bEnabled boolean
function ASBZConnectedMaintenanceBox:SetEnabled(bEnabled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZConnectedMaintenanceBox:OnServerCompleteInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@param OldState ESBZMaintenanceBoxState
function ASBZConnectedMaintenanceBox:OnRep_CurrentState(OldState) end
function ASBZConnectedMaintenanceBox:OnRep_CompletedCableBoxes() end
---@param bSuccessful boolean
function ASBZConnectedMaintenanceBox:OnCableBoxComplete(bSuccessful) end
---@param NewState ESBZMaintenanceBoxState
function ASBZConnectedMaintenanceBox:Multicast_SetState(NewState) end
function ASBZConnectedMaintenanceBox:Multicast_SetNextColor() end
function ASBZConnectedMaintenanceBox:EnableCutting() end
---@param NumberOfBoxes int32
function ASBZConnectedMaintenanceBox:BP_UpdateNumberOfConnectedBoxes(NumberOfBoxes) end
---@param SequenceArray TArray<int32>
---@param NumberOfCompleteCables int32
function ASBZConnectedMaintenanceBox:BP_UpdateColors(SequenceArray, NumberOfCompleteCables) end
---@param NewState ESBZMaintenanceBoxState
function ASBZConnectedMaintenanceBox:BP_OnStateChanged(NewState) end


---@class ASBZCosmeticProp : AActor
ASBZCosmeticProp = {}

---@param CPDs TArray<FSBZAnimationSpawnedActorCPD>
function ASBZCosmeticProp:OnReceiveCPDs(CPDs) end
function ASBZCosmeticProp:OnDropped() end


---@class ASBZCoverPoint : AActor
---@field LinkedCoverPoints TArray<TWeakObjectPtr<ASBZCoverPoint>>
---@field ManualLinks TArray<TWeakObjectPtr<ASBZCoverPoint>>
---@field BlockingCollision UBoxComponent
---@field AIVisibilityPayload FSBZAIVisibilitySerializablePayload
---@field AIVisibilityNode FSBZAIVisibilityLeafNode
---@field AIVisibilityNodeComputationFrequency ESBZAIVisibilityNodeComputationFrequency
---@field LinkRadius float
---@field CurrentRoom ASBZRoomVolume
---@field ValidShootingPoints uint8
---@field bManualRegistering boolean
ASBZCoverPoint = {}

---@param ForActor AActor
---@return boolean
function ASBZCoverPoint:Reserve(ForActor) end
---@param Pawn APawn
function ASBZCoverPoint:OnOccupantKilled(Pawn) end
---@param Pawn APawn
function ASBZCoverPoint:OnBlockerKilled(Pawn) end
---@param OccupyingActor AActor
---@return boolean
function ASBZCoverPoint:Occupy(OccupyingActor) end
---@return boolean
function ASBZCoverPoint:IsStandingCover() end
---@param ForActor AActor
---@return boolean
function ASBZCoverPoint:IsReserved(ForActor) end
---@return boolean
function ASBZCoverPoint:IsRegistered() end
---@return boolean
function ASBZCoverPoint:IsOccupied() end
---@return boolean
function ASBZCoverPoint:IsLowCover() end
---@param ForActor AActor
---@return boolean
function ASBZCoverPoint:IsFree(ForActor) end
---@return boolean
function ASBZCoverPoint:IsCrouchingCover() end
---@return boolean
function ASBZCoverPoint:IsComputed() end
---@param Actor AActor
---@return boolean
function ASBZCoverPoint:IsBlockedBy(Actor) end
---@param ForActor AActor
---@return boolean
function ASBZCoverPoint:IsBlocked(ForActor) end
---@param ShootingPoint ESBZShootingPointType
---@param TargetActor AActor
---@return boolean
function ASBZCoverPoint:HasShootingPointLOS_Synchronously(ShootingPoint, TargetActor) end
---@param TargetActor AActor
---@return boolean
function ASBZCoverPoint:HasAnyShootingPointLOS_Synchronously(TargetActor) end
---@return uint8
function ASBZCoverPoint:GetValidShootingPoints() end
---@return AActor
function ASBZCoverPoint:GetReservedForActor() end
---@return AActor
function ASBZCoverPoint:GetOccupant() end
---@param ShootingPoints TArray<FSBZCoverShootingPoints>
---@param bUseAIVisibilityPayloadCenterAsLocation boolean
function ASBZCoverPoint:ComputeValidShootingPoints(ShootingPoints, bUseAIVisibilityPayloadCenterAsLocation) end
---@param ForActor AActor
function ASBZCoverPoint:CancelReservation(ForActor) end
---@param OverlappedComp UPrimitiveComponent
---@param Other AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function ASBZCoverPoint:BlockingActorLeft(OverlappedComp, Other, OtherComp, OtherBodyIndex) end
---@param OverlappedComp UPrimitiveComponent
---@param Other AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZCoverPoint:BlockingActorEntered(OverlappedComp, Other, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param OccupyingActor AActor
---@return boolean
function ASBZCoverPoint:Abandon(OccupyingActor) end


---@class ASBZCustomizationManager : AActor
---@field StartRotationForMannequin FRotator
---@field StartMaskData USBZMaskData
---@field MaskCustomizationCameraName FName
---@field MaskRotationComponent TSubclassOf<USBZCustomizationRotateComponent>
---@field SpawnOffsetForCameraFromMask FVector
---@field StartRotationForMask FRotator
---@field MannequinToSpawn TSubclassOf<AActor>
---@field SuitCustomizationCameraName FName
---@field SuitRotationComponent TSubclassOf<USBZCustomizationRotateComponent>
---@field SpawnOffsetForCameraFromMannequin FVector
---@field StartRotationForSuit FRotator
---@field WeaponCustomizationCameraName FName
---@field WeaponRotationComponent TSubclassOf<USBZCustomizationRotateComponent>
---@field SpawnOffsetForCameraFromWeapon FVector
---@field StartRotationForWeapon FRotator
---@field StandaloneWeaponDisplay ASBZStandaloneWeaponDisplay
---@field GlobalMask ASBZMask
---@field Mannequin ASBZMainMenuPlayerCharacter
ASBZCustomizationManager = {}

---@param MaskConfig FSBZMaskConfig
function ASBZCustomizationManager:SpawnGlobalMaskWithConfig(MaskConfig) end
---@param MaskData USBZMaskData
function ASBZCustomizationManager:SpawnGlobalMask(MaskData) end
function ASBZCustomizationManager:ShowMainMenuMannequin() end
function ASBZCustomizationManager:ShowGlobalMask() end
function ASBZCustomizationManager:ShowCustomizableWeapon() end
function ASBZCustomizationManager:ShowCustomizableMannequin() end
---@param bEnabled boolean
function ASBZCustomizationManager:SetMainMenuMannequinRotationEnabled(bEnabled) end
function ASBZCustomizationManager:HideMainMenuMannequin() end
function ASBZCustomizationManager:HideGlobalMask() end
function ASBZCustomizationManager:HideCustomizableMannequin() end
---@return boolean
function ASBZCustomizationManager:GetMainMenuMannequinVisibility() end
---@param WorldContextObject UObject
---@return ASBZCustomizationManager
function ASBZCustomizationManager:GetCustomizationManager(WorldContextObject) end


---@class ASBZCuttableActor : AActor
---@field OnCuttableActorCutComplete FSBZCuttableActorOnCuttableActorCutComplete
---@field CuttableVFXComponent UNiagaraComponent
---@field WholeMesh UStaticMeshComponent
---@field CutMesh UStaticMeshComponent
---@field CutOutlineMesh UStaticMeshComponent
---@field MeltingMesh UStaticMeshComponent
---@field BoxComponent UBoxComponent
---@field CuttableComponent USBZCuttableComponent
---@field CuttableSplineComponent USBZCuttableSplineComponent
---@field MaterialInterface UMaterialInterface
---@field InteractableComponent USBZInteractableComponent
---@field CuttableCollisionComponent FSBZComponentSelector
ASBZCuttableActor = {}

function ASBZCuttableActor:PropDamageReached() end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZCuttableActor:OnServerCompleteInteraction(Interactable, Interactor, bInIsLocallyControlled) end
function ASBZCuttableActor:OnCutCompleted() end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function ASBZCuttableActor:OnBoxEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZCuttableActor:OnBoxBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param bCuttingEnabled boolean
function ASBZCuttableActor:BP_OnCuttingEnabledChanged(bCuttingEnabled) end


---@class ASBZCuttableSkylightActor : ASBZCuttableActor
ASBZCuttableSkylightActor = {}


---@class ASBZCuttingTool : ASBZTool
---@field TorchEffectComponent UNiagaraComponent
---@field TorchMaxEffectVisibilityTime float
---@field ActivatedMaxRTPCValue float
---@field ActivatedIdleMaxRTPCValue float
---@field ActivatedUsingMaxRTPCValue float
---@field CuttingSoundMultiplicationValue float
---@field CuttingToolAutoCuttingTimer float
---@field OnCuttingToolStrengthRtpc UAkRtpc
ASBZCuttingTool = {}



---@class ASBZDebris : AStaticMeshActor
---@field MeshComponent UStaticMeshComponent
---@field MinimumImpactForce float
---@field PhysicalMaterial UPhysicalMaterial
ASBZDebris = {}

---@param HitComp UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param NormalImpulse FVector
---@param Hit FHitResult
function ASBZDebris:OnHit(HitComp, OtherActor, OtherComp, NormalImpulse, Hit) end
---@param Hit FHitResult
function ASBZDebris:CreateImpactPoint(Hit) end


---@class ASBZDebugActorFlow : AActor
---@field bIs boolean
---@field bIsDuplicateTransient boolean
---@field Float float
---@field Component USBZDebugActorComponentFlow
---@field InstanceComponent USBZDebugActorComponentFlow
---@field DynamicComponent USBZDebugActorComponentFlow
---@field Object USBZDebugObjectFlow
---@field InstanceObject USBZDebugObjectFlow
---@field DynamicObject USBZDebugObjectFlow
ASBZDebugActorFlow = {}



---@class ASBZDebugCameraController : ADebugCameraController
ASBZDebugCameraController = {}


---@class ASBZDebugDrawingManager : AActor
ASBZDebugDrawingManager = {}

---@param UncompressedPointsSize int32
---@param InCompressedPoints TArray<uint8>
---@param UncompressedLinesSize int32
---@param InCompressedLines TArray<uint8>
---@param UncompressedSpheresSize int32
---@param InCompressedSpheres TArray<uint8>
---@param UncompressedCapsulesSize int32
---@param InCompressedCapsules TArray<uint8>
---@param UncompressedTextsSize int32
---@param InCompressedTexts TArray<uint8>
function ASBZDebugDrawingManager:ReplicateShapes(UncompressedPointsSize, InCompressedPoints, UncompressedLinesSize, InCompressedLines, UncompressedSpheresSize, InCompressedSpheres, UncompressedCapsulesSize, InCompressedCapsules, UncompressedTextsSize, InCompressedTexts) end


---@class ASBZDecorativeSmokeGrenade : AActor
---@field StaticMesh UMeshComponent
---@field GasEffectComponent UNiagaraComponent
---@field DetonationEvent UAkAudioEvent
---@field DurationSeconds float
---@field Range float
---@field DelayedExplosionTimer float
---@field SmokeState ESBZDecorativeSmokeState
ASBZDecorativeSmokeGrenade = {}

function ASBZDecorativeSmokeGrenade:OnSpawned() end
function ASBZDecorativeSmokeGrenade:OnRep_SmokeState() end
function ASBZDecorativeSmokeGrenade:OnHitGround() end
---@param OverlappedComp UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param NormalImpulse FVector
---@param Hit FHitResult
function ASBZDecorativeSmokeGrenade:OnActorHit(OverlappedComp, OtherActor, OtherComp, NormalImpulse, Hit) end
function ASBZDecorativeSmokeGrenade:Multicast_CreateSmokeCloud() end


---@class ASBZDespawnVolume : AVolume
---@field AllowedTypes FGameplayTagContainer
---@field Room ASBZRoomVolume
ASBZDespawnVolume = {}



---@class ASBZDestroyGroup : AActor
---@field OnDestroyActorsDone FSBZDestroyGroupOnDestroyActorsDone
---@field ActorsToDestroy TArray<AActor>
---@field NumOfActorsToDestroyPerDifficulty FInt32Interval
---@field bShouldDestroyOnBeginplay boolean
---@field bHasDestroyedNonReplicatedActors boolean
---@field Seed int32
ASBZDestroyGroup = {}

---@param OldValue boolean
function ASBZDestroyGroup:OnRep_HasDestroyedActors(OldValue) end
function ASBZDestroyGroup:Multicast_DestroyActors() end
---@param KeptActors TArray<AActor>
---@param DestroyedActors TArray<AActor>
function ASBZDestroyGroup:DestroyActors(KeptActors, DestroyedActors) end


---@class ASBZDetachableCuttingTool : ASBZPlaceableToolBase
---@field BoxComponent UBoxComponent
---@field ExplosionInstigator AActor
---@field DetachableCuttingToolEffectClass TSubclassOf<UGameplayEffect>
---@field DetachableCuttingToolExplodedEvent UAkAudioEvent
---@field DetonationEffect UNiagaraSystem
---@field AIExplosionRange float
---@field PlayerExplosionRange float
---@field bExplosionAffectsAIOnly boolean
---@field AdditionalPlayerRange float
---@field AkComponent UAkComponent
---@field PlayerFeedbackCurve FRuntimeFloatCurve
---@field LocalplayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field HurtReactionData FSBZHurtReactionData
ASBZDetachableCuttingTool = {}

function ASBZDetachableCuttingTool:Multicast_SetArmed() end
---@param Result FSBZExplosionResult
function ASBZDetachableCuttingTool:Multicast_ReplicateExplosion(Result) end


---@class ASBZDisplayCase : ASBZCuttableActor
---@field OnDisplayCaseStateChanged FSBZDisplayCaseOnDisplayCaseStateChanged
---@field bHasLock boolean
---@field bHasAlarm boolean
---@field bHasLockdown boolean
---@field bShouldHackLiftLockdown boolean
---@field bCanBeClosed boolean
---@field LockActorArray TArray<ASBZMiniGameActor>
---@field bMustLockpickAllLocks boolean
---@field bIsLocksDisabledOnLockdown boolean
---@field BreachSoundTag FGameplayTag
---@field SoundRange float
---@field bIsLocked boolean
---@field bIsLarmed boolean
---@field AttractorComponent USBZAIAttractorComponent
---@field AlarmActorArray TArray<ASBZHackingMinigameActor>
---@field AlarmNotificationAsset USBZActionNotificationAsset
---@field ShutterMesh UStaticMeshComponent
---@field DefaultLock TSubclassOf<ASBZMiniGameActor>
---@field DefaultAlarm TSubclassOf<ASBZHackingMinigameActor>
---@field CurrentState ESBZDisplayCaseState
---@field PropDamage USBZPropDamageComponent
---@field BrokenMesh UStaticMeshComponent
---@field PreviousState ESBZDisplayCaseState
---@field TargetState ESBZDisplayCaseState
---@field LockAttachSelector FSBZComponentSelector
---@field AlarmAttachSelector FSBZComponentSelector
---@field LootAttachComponent FSBZComponentSelector
---@field AttachedLoot AActor
ASBZDisplayCase = {}

---@param bEnabled boolean
function ASBZDisplayCase:SetLockdownEnabled(bEnabled) end
---@param bInActive boolean
function ASBZDisplayCase:SetLockdownActive(bInActive) end
---@param bInIsLocked boolean
function ASBZDisplayCase:SetDisplayCaseLocked(bInIsLocked) end
---@param bInIsLarmed boolean
function ASBZDisplayCase:SetDisplayCaseLarmed(bInIsLarmed) end
---@param OldState ESBZDisplayCaseState
function ASBZDisplayCase:OnRep_CurrentState(OldState) end
---@param HitComponent UActorComponent
---@param Hits int32
---@param bDoCosmetics boolean
---@param DamageContext FSBZPropDamageContext
function ASBZDisplayCase:OnPropDamageHits(HitComponent, Hits, bDoCosmetics, DamageContext) end
---@param NewState EPD3MiniGameState
function ASBZDisplayCase:OnLockpickStateChanged(NewState) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function ASBZDisplayCase:OnHeistStateChanged(OldState, NewState) end
---@param NewState EPD3MiniGameState
function ASBZDisplayCase:OnHackingStateChanged(NewState) end
function ASBZDisplayCase:OnDoorTimelineDone() end
---@param NewState ESBZDisplayCaseState
function ASBZDisplayCase:Multicast_SetState(NewState) end
---@param bInIsLocked boolean
function ASBZDisplayCase:Multicast_SetIsLocked(bInIsLocked) end
---@param bInIsLarmed boolean
function ASBZDisplayCase:Multicast_SetIsLarmed(bInIsLarmed) end
---@param OldState ESBZDisplayCaseState
---@param NewState ESBZDisplayCaseState
---@param bDoCosmetics boolean
function ASBZDisplayCase:BP_OnStateChanged(OldState, NewState, bDoCosmetics) end
---@param bDoCosmetics boolean
function ASBZDisplayCase:BP_OnGlassBroken(bDoCosmetics) end


---@class ASBZDisplayCaseNotCuttable : ASBZDisplayCase
ASBZDisplayCaseNotCuttable = {}


---@class ASBZDoctorBag : ASBZHealthPlaceable
ASBZDoctorBag = {}


---@class ASBZDoor : ASBZGate
ASBZDoor = {}


---@class ASBZDrill : AActor
---@field OnDrillCompleteServer FSBZDrillOnDrillCompleteServer
---@field State ESBZDrillState
---@field EndTime float
---@field TimeLeft float
---@field Duration float
---@field UnjamInteraction USBZInteractableComponent
---@field WidgetComponent FSBZComponentSelector
---@field OutlineComponent USBZOutlineComponent
---@field OutlineAsset USBZOutlineAsset
ASBZDrill = {}

---@return boolean
function ASBZDrill:UnjamDrill() end
---@param bShow boolean
function ASBZDrill:TEMP_SetShowOutline(bShow) end
---@return boolean
function ASBZDrill:StartDrill() end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZDrill:OnUnjamInteraction(Interactable, Interactor, bInIsLocallyControlled) end
function ASBZDrill:OnStateChanged() end
---@param StopState ESBZDrillState
---@param TimeLeftDrill float
function ASBZDrill:Multicast_StopDrill(StopState, TimeLeftDrill) end
---@param EndServerTime float
function ASBZDrill:Multicast_StartDrill(EndServerTime) end
---@return boolean
function ASBZDrill:JamDrill() end


---@class ASBZDrillEx : AActor
---@field OnDrillCompleteServer FSBZDrillExOnDrillCompleteServer
---@field Duration float
---@field TransitionProgressMultiplier float
---@field TransitionHeatAddition float
---@field Data FSBZDrillRepData
---@field CooldownPerSec float
---@field Materials TArray<USBZDrillMaterial>
---@field bRandomMaterial boolean
---@field UnjamInteraction USBZInteractableComponent
---@field FixTransitionInteraction USBZInteractableComponent
---@field AdjustSpeedInteraction USBZInteractableComponent
---@field ToggleOnOffInteraction USBZInteractableComponent
---@field WidgetComponent FSBZComponentSelector
---@field OutlineComponent USBZOutlineComponent
---@field OutlineAsset USBZOutlineAsset
---@field AttractorComponent USBZAIAttractorComponent
ASBZDrillEx = {}

---@return boolean
function ASBZDrillEx:UnjamDrill() end
function ASBZDrillEx:TurnOff() end
function ASBZDrillEx:ToggleOnOff() end
---@param bShow boolean
function ASBZDrillEx:TEMP_SetShowOutline(bShow) end
---@return boolean
function ASBZDrillEx:StartDrill() end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZDrillEx:OnUnjamInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZDrillEx:OnToggleOnOffInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@param State ESBZDrillState
function ASBZDrillEx:OnStateChanged(State) end
---@param ProgressRate float
---@param HeatRate float
function ASBZDrillEx:OnSpeedUpdate(ProgressRate, HeatRate) end
---@param Old FSBZDrillRepData
function ASBZDrillEx:OnRep_Data(Old) end
---@param Material USBZDrillMaterial
function ASBZDrillEx:OnMaterialChanged(Material) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZDrillEx:OnFixTransitionInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZDrillEx:OnAdjustSpeedInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@return boolean
function ASBZDrillEx:NeedsAdjusting() end
---@return boolean
function ASBZDrillEx:JamDrill() end
---@return boolean
function ASBZDrillEx:IsFastSpeed() end
---@return float
function ASBZDrillEx:GetTimeLeft() end
---@return float
function ASBZDrillEx:GetProgressPerSec() end
---@return float
function ASBZDrillEx:GetProgressPercent() end
---@return float
function ASBZDrillEx:GetProgress() end
---@return float
function ASBZDrillEx:GetHeatPerSec() end
---@return float
function ASBZDrillEx:GetHeat() end
---@return USBZDrillMaterial
function ASBZDrillEx:GetCurrentMaterial() end
function ASBZDrillEx:AdjustSpeed() end


---@class ASBZDynamicInteractionActor : ASBZInteractionActor
ASBZDynamicInteractionActor = {}


---@class ASBZECMJammer : ASBZPlaceableToolBase
---@field AkComponent UAkComponent
---@field BoxComponent UBoxComponent
ASBZECMJammer = {}

function ASBZECMJammer:OnJammerEffectEnded() end


---@class ASBZEllipsoid : AActor
---@field EllipsoidComponent USBZEllipsoidComponent
ASBZEllipsoid = {}



---@class ASBZEquippable : AActor
---@field LocalDamageFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field Mesh UMeshComponent
---@field EquippableIndex int8
---@field EquippableConfig FSBZEquippableConfig
---@field ModOverrideGripAnimData USBZModGripAnimData
---@field bIsInventory boolean
---@field EquippableAkComponent UAkComponent
---@field EquippingEvent UAkAudioEvent
---@field UnequippingEvent UAkAudioEvent
---@field EquippingEventRtpc UAkRtpc
---@field UnequippingEventRtpc UAkRtpc
---@field bReplicateRootAttachment boolean
---@field EquipmentState FName
ASBZEquippable = {}

function ASBZEquippable:OnRep_EquippableIndex() end


---@class ASBZEquippableCharm : AActor
---@field OwningCharacter ASBZCharacter
---@field OwningEquippable ASBZEquippable
ASBZEquippableCharm = {}

---@param Reference UMeshComponent
---@param OutlineComponent USBZOutlineComponent
---@param bIsReset boolean
function ASBZEquippableCharm:UpdateMeshPropertiesFrom(Reference, OutlineComponent, bIsReset) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:SetOwningEquippable(Equippable) end
---@param Character ASBZCharacter
function ASBZEquippableCharm:SetOwningCharacter(Character) end
---@param Reference UMeshComponent
---@param OutlineComponent USBZOutlineComponent
function ASBZEquippableCharm:ResetMeshProperties(Reference, OutlineComponent) end
---@param DestroyedParent AActor
function ASBZEquippableCharm:OnParentDestroyed(DestroyedParent) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:OnEquippableUsed(Equippable) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:OnEquippableUnequipped(Equippable) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:OnEquippableUndropped(Equippable) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:OnEquippableEquipped(Equippable) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:OnEquippableDropped(Equippable) end
---@return FVector
function ASBZEquippableCharm:GetOwningCharacterVelocity() end
---@return float
function ASBZEquippableCharm:GetEquippableTimeLastUsed() end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:EquippableUsed(Equippable) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:EquippableUnequipped(Equippable) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:EquippableUndropped(Equippable) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:EquippableEquipped(Equippable) end
---@param Equippable ASBZEquippable
function ASBZEquippableCharm:EquippableDropped(Equippable) end


---@class ASBZEscortPoint : AActor
ASBZEscortPoint = {}


---@class ASBZExplosiveTrap : AActor
---@field ExplosionSoundEvent UAkAudioEvent
---@field AIExplosionRadius float
---@field PlayerExplosionRadius float
---@field DamageDistanceArray TArray<FSBZDamageDistance>
---@field ArmorPenetration float
---@field FriendlyFireDamageScale float
---@field FriendlyFireArmorPenetrationScale float
---@field ExplosionDamageType TSubclassOf<USBZDamageType>
---@field GameplayEffectClass TSubclassOf<UGameplayEffect>
---@field ExplosionEffect UNiagaraSystem
---@field bDoDecal boolean
---@field NumberOfShotsToExplode int32
---@field NumberOfHitsForCriticalDamage int32
---@field PostDamagePhysicsEffectData FSBZExplosivePhysicsEffectData
---@field ExplosionTimerInterval FFloatInterval
---@field ExplosionDelayInterval FFloatInterval
---@field LocalplayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field PlayerFeedbackCurve FRuntimeFloatCurve
---@field bUseImpactPointForEffect boolean
---@field CriticalDamageEffect UNiagaraSystem
---@field MarkerAsset USBZMarkerDataAsset
---@field MarkerOffset FVector
---@field NumberOfHitShots int32
---@field NiagaraComponent UNiagaraComponent
---@field MarkerId int32
---@field HurtReactionData FSBZHurtReactionData
ASBZExplosiveTrap = {}

---@param Result FSBZExplosionResult
---@param InExplosionInstigator AActor
function ASBZExplosiveTrap:Multicast_ReplicateExplosionWithInstigator(Result, InExplosionInstigator) end
function ASBZExplosiveTrap:Multicast_CriticalDamageNoParams() end
---@param ImpactLocation FVector
---@param ImpactNormal FVector
function ASBZExplosiveTrap:Multicast_CriticalDamage(ImpactLocation, ImpactNormal) end
function ASBZExplosiveTrap:BP_OnExplosion() end
function ASBZExplosiveTrap:BP_OnCriticalDamage() end


---@class ASBZFilteredAudioVolume : ATriggerVolume
---@field ActorFilterComponent USBZActorFilterComponent
---@field bShouldStartEnabled boolean
---@field CrowdEvent UAkAudioEvent
---@field StopEvent UAkAudioEvent
---@field AudioComponent UAkComponent
---@field RTPC UAkRtpc
---@field Intensity float
---@field InterPolationTimerMs int32
---@field Crowd25 int32
---@field Crowd50 int32
---@field Crowd75 int32
---@field Crowd100 int32
---@field CrowdCurrent int32
ASBZFilteredAudioVolume = {}

---@param bEnabled boolean
function ASBZFilteredAudioVolume:SetVolumeEnabled(bEnabled) end
function ASBZFilteredAudioVolume:OnLevelLoud() end
---@param Identifier FName
---@param Actor AActor
---@param CurrentTotalActors int32
function ASBZFilteredAudioVolume:OnFilteredActorEndOverlapping(Identifier, Actor, CurrentTotalActors) end
---@param Identifier FName
---@param Actor AActor
---@param CurrentTotalActors int32
function ASBZFilteredAudioVolume:OnFilteredActorBeginOverlapping(Identifier, Actor, CurrentTotalActors) end
function ASBZFilteredAudioVolume:OnCrowdLevelChange() end
---@param OtherActor AActor
function ASBZFilteredAudioVolume:OnCivilianDeath(OtherActor) end


---@class ASBZFilteredTriggerVolume : ATriggerVolume
---@field ActorFilterComponent USBZActorFilterComponent
---@field bShouldStartEnabled boolean
---@field FilteredActorBeginOverlapping FSBZFilteredTriggerVolumeFilteredActorBeginOverlapping
---@field FilteredActorEndOverlapping FSBZFilteredTriggerVolumeFilteredActorEndOverlapping
---@field FilterHasDesiredCountChanged FSBZFilteredTriggerVolumeFilterHasDesiredCountChanged
---@field FiltersAllHaveDesiredCountsChanged FSBZFilteredTriggerVolumeFiltersAllHaveDesiredCountsChanged
ASBZFilteredTriggerVolume = {}

---@param bEnabled boolean
function ASBZFilteredTriggerVolume:SetVolumeEnabled(bEnabled) end
---@param bState boolean
function ASBZFilteredTriggerVolume:OnFiltersAllHaveDesiredCountsChanged(bState) end
---@param Identifer FName
---@param bState boolean
function ASBZFilteredTriggerVolume:OnFilterHasDesiredCountChanged(Identifer, bState) end
---@param Identifier FName
---@param Actor AActor
---@param CurrentTotalActors int32
function ASBZFilteredTriggerVolume:OnFilteredActorEndOverlapping(Identifier, Actor, CurrentTotalActors) end
---@param Identifier FName
---@param Actor AActor
---@param CurrentTotalActors int32
function ASBZFilteredTriggerVolume:OnFilteredActorBeginOverlapping(Identifier, Actor, CurrentTotalActors) end


---@class ASBZFirstAidPack : ASBZHealthPlaceable
ASBZFirstAidPack = {}


---@class ASBZFlashBangGrenade : ASBZGrenade
---@field CapsuleCollision UCapsuleComponent
ASBZFlashBangGrenade = {}



---@class ASBZFragGrenade : ASBZGrenade
---@field SphereCollision USphereComponent
---@field PostDamagePhysicsEffectData FSBZExplosivePhysicsEffectData
ASBZFragGrenade = {}



---@class ASBZGadget : AActor
ASBZGadget = {}


---@class ASBZGameMode : ASBZGameModeBase
ASBZGameMode = {}


---@class ASBZGameModeMainMenu : ASBZGameModeBase
ASBZGameModeMainMenu = {}

---@param NewState ESBZMainMenuState
function ASBZGameModeMainMenu:SetMainMenuState(NewState) end
---@return ESBZMainMenuState
function ASBZGameModeMainMenu:GetMainMenuState() end


---@class ASBZGameSpectatorPawn : ASBZSpectatorPawn
---@field SpringArm USBZSpringArmComponent
---@field SpectateCamera UCameraComponent
---@field ControllerDeadZone float
---@field AttachSocket FName
---@field CameraDefault FSBZSpectateCameraSettings
---@field CameraDefeatedTarget FSBZSpectateCameraSettings
---@field OnSpectateTargetChanged FSBZGameSpectatorPawnOnSpectateTargetChanged
---@field DeadTargetDelay float
---@field SpectateTarget AActor
ASBZGameSpectatorPawn = {}



---@class ASBZGameStateBase : AGameStateBase
ASBZGameStateBase = {}


---@class ASBZGasGrenade : ASBZFragGrenade
---@field NiagaraParticleUpdateInterval float
---@field UpdateOverlapsInterval float
---@field UpdateRemainingLifeTimeInterval float
---@field RootCollision USphereComponent
---@field GasCollision USphereComponent
---@field GasComponent USBZGasVolumeComponent
---@field GasExplosionRepData FSBZGasExplosionData
---@field TargetArray TArray<FSBZGasGrenadeTarget>
ASBZGasGrenade = {}

function ASBZGasGrenade:OnRep_GasExplosionData() end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComponent UPrimitiveComponent
---@param OtherBodyIndex int32
function ASBZGasGrenade:OnEndOverlap(OverlappedComponent, OtherActor, OtherComponent, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComponent UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bIsSweep boolean
---@param SweepHitResult FHitResult
function ASBZGasGrenade:OnBeginOverlap(OverlappedComponent, OtherActor, OtherComponent, OtherBodyIndex, bIsSweep, SweepHitResult) end
---@param Location FVector_NetQuantize
function ASBZGasGrenade:Multicast_ReplicateExplosionLocation(Location) end


---@class ASBZGate : AActor
---@field OnGateStateChanged FSBZGateOnGateStateChanged
---@field InitialState ESBZGateState
---@field State ESBZGateState
---@field LinkMoveFinishedState ESBZGateState
---@field ServerState ESBZGateState
---@field ExplosionInstigator AActor
---@field OpenForwardExplosionData FSBZGateExplosionData
---@field OpenBackwardExplosionData FSBZGateExplosionData
---@field CloseForwardExplosionData FSBZGateExplosionData
---@field CloseBackwardExplosionData FSBZGateExplosionData
---@field MeshDataArray TArray<FSBZGateMeshData>
---@field NavigationBoundBox FBox
---@field bIsNavigationLinkCalculated boolean
---@field NavLinkCount int32
---@field NavLinkComponentArray TArray<USBZGateNavLinkComponent>
---@field NavLinkAgilityComponentArray TArray<USBZGateNavLinkAgilityComponent>
---@field bIsOpenForward boolean
---@field bIsOpenBackwardAllowed boolean
---@field bIsOpenFromFrontAllowed boolean
---@field bIsOnlyTraversedWhenAlerted boolean
---@field bIsLinkMoveFinishedStateSet boolean
---@field bIsUnlockingLinkMove boolean
---@field bIsUnlockingLinkMoveCooldown boolean
---@field bIsSliding boolean
---@field UnlockingLinkMoveCooldownDuration float
---@field UnlockingLinkMoveCooldownTime float
---@field SlammedClosedSound UAkAudioEvent
---@field SlammedOpenSound UAkAudioEvent
---@field OpenSound UAkAudioEvent
---@field CloseSound UAkAudioEvent
---@field BreachSound UAkAudioEvent
---@field UnlockSound UAkAudioEvent
---@field PortalObject ASBZAkAcousticPortal
---@field bUseBreachPOIandSound boolean
---@field BreachSoundTag FGameplayTag
---@field ToolSnapData USBZToolSnapData
---@field SoundRange float
---@field SoundRangeSlammedOpen float
---@field AttractorComponent USBZAIAttractorComponent
---@field LeftNavlinkOffset float
---@field RightNavlinkOffset float
---@field ClosedGateSoundReduction ESBZGateSoundReduction
ASBZGate = {}

---@param Mesh USceneComponent
---@param InYaw float
function ASBZGate:SetYaw(Mesh, InYaw) end
---@param InState ESBZGateState
---@return boolean
function ASBZGate:SetState(InState) end
---@param InInstigator APawn
function ASBZGate:SetAttractorInstigator(InInstigator) end
function ASBZGate:OnStateDone() end
---@param OldState ESBZGateState
---@param NewState ESBZGateState
---@param bIsInitialStateChange boolean
function ASBZGate:OnStateChanged(OldState, NewState, bIsInitialStateChange) end
---@param OldState ESBZGateState
function ASBZGate:OnRep_State(OldState) end
---@param InState ESBZGateState
function ASBZGate:Multicast_SetState(InState) end
---@param Result FSBZExplosionResult
function ASBZGate:Multicast_ReplicateExplosion(Result) end
function ASBZGate:Multicast_OnUnlockingLinkMoveStarted() end
function ASBZGate:Multicast_OnUnlockingLinkMoveEnded() end
---@param TagEvent FGameplayTag
---@param AICharacterInstigator ASBZAIBaseCharacter
function ASBZGate:Multicast_HandleAgilityTagEvent(TagEvent, AICharacterInstigator) end
---@param Location FVector
---@return boolean
function ASBZGate:IsOpenForwardFromLocation(Location) end
---@param Direction FVector
---@return boolean
function ASBZGate:IsOpenForwardFromDirection(Direction) end
---@return ASBZAkAcousticPortal
function ASBZGate:GetPortalObject() end


---@class ASBZGhostTool : AActor
---@field SkeletalMesh USkeletalMeshComponent
---@field OutlineComponent USBZOutlineComponent
---@field OutlineAsset USBZOutlineAsset
ASBZGhostTool = {}

---@param NewPlacementState ESBZPlacementState
function ASBZGhostTool:OnGhostToolStateChanged(NewPlacementState) end


---@class ASBZGrenade : ASBZThrowable
---@field InstigatorAbilitySystemComponent USBZAbilitySystemComponent
---@field AIVisibilityNode FSBZAIVisibilityLeafNode
---@field PendingDataExplosionResult FSBZExplosionResult
---@field DetonationEffect UNiagaraComponent
ASBZGrenade = {}

---@param OverlappedComp UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param NormalImpulse FVector
---@param Hit FHitResult
function ASBZGrenade:OnCollisionComponentHit(OverlappedComp, OtherActor, OtherComp, NormalImpulse, Hit) end
function ASBZGrenade:OnArmed() end
---@param Result FSBZExplosionResult
function ASBZGrenade:Multicast_ReplicateExplosion(Result) end
function ASBZGrenade:Multicast_CollisionExplosion() end


---@class ASBZGrenadeProjectile : AActor
---@field MarkerAsset USBZMarkerDataAsset
---@field MarkerOffset FVector
---@field MarkerActivationDelay float
---@field EquippableIndex int32
---@field StaticMesh UMeshComponent
---@field ProjectileMovementComponent UProjectileMovementComponent
---@field SphereCollision USphereComponent
---@field PendingDataExplosionResult FSBZExplosionResult
---@field OwnerCharacter ASBZCharacter
---@field Delay float
---@field DetonationEvent UAkAudioEvent
---@field FiredEvent UAkAudioEvent
---@field DetonationEffect UNiagaraSystem
---@field DamageGameplayEffectClass TSubclassOf<UGameplayEffect>
---@field DamageTypeClass TSubclassOf<USBZDamageType>
---@field LocalplayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field PlayerFeedbackCurve FRuntimeFloatCurve
---@field Data USBZWeaponFireData
---@field RangedWeaponData USBZRangedWeaponData
---@field bReduceBouncinessPerBounce boolean
---@field BouncinessReductionValue float
---@field MaxTimesToReduceBounciness int32
---@field MaxBounces int32
---@field bEnablePhysicsOnStopped boolean
---@field bWantsLocationRotation boolean
---@field PostDamagePhysicsEffectData FSBZExplosivePhysicsEffectData
ASBZGrenadeProjectile = {}

function ASBZGrenadeProjectile:OnRep_EquippableIndex() end
---@param InHitResult FHitResult
function ASBZGrenadeProjectile:OnProjectileStopped(InHitResult) end
---@param InHitResult FHitResult
---@param ImpactVelocity FVector
function ASBZGrenadeProjectile:OnProjectileBounce(InHitResult, ImpactVelocity) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZGrenadeProjectile:OnProjectileBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZGrenadeProjectile:OnOwnerEndPlay(Actor, EndPlayReason) end
function ASBZGrenadeProjectile:OnFired() end
---@param OverlappedComp UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param NormalImpulse FVector
---@param Hit FHitResult
function ASBZGrenadeProjectile:OnCollisionComponentHit(OverlappedComp, OtherActor, OtherComp, NormalImpulse, Hit) end
---@param ProjectileDirection FVector_NetQuantizeNormal
function ASBZGrenadeProjectile:Multicast_SetGrenadeProjectileVelocity(ProjectileDirection) end
---@param InIndex int32
function ASBZGrenadeProjectile:Multicast_SetEquippableIndex(InIndex) end
---@param Result FSBZExplosionResult
function ASBZGrenadeProjectile:Multicast_ReplicateExplosion(Result) end
---@param InBreakableHitResult FHitResult
function ASBZGrenadeProjectile:Multicast_DestroyBreakable(InBreakableHitResult) end
function ASBZGrenadeProjectile:Multicast_CollisionExplosion() end


---@class ASBZHUDBase : AHUD
ASBZHUDBase = {}

function ASBZHUDBase:DelayedHudInitizalize() end


---@class ASBZHackableActor : AActor
---@field OnHackingStarted FSBZHackableActorOnHackingStarted
---@field OnHackingResumed FSBZHackableActorOnHackingResumed
---@field OnHackingUnlocked FSBZHackableActorOnHackingUnlocked
---@field OnHackingComplete FSBZHackableActorOnHackingComplete
---@field OnHackingInterrupted FSBZHackableActorOnHackingInterrupted
---@field InteractableComponent USBZInteractableComponent
---@field OutlineComponent USBZOutlineComponent
---@field AttractorComponent USBZAIAttractorComponent
---@field LifeActionComponent USBZLifeActionComponent
---@field LifeActionInstance USBZLifeActionInstance
---@field LifeActionSlot USBZLifeActionSlot
---@field StaticMesh UStaticMeshComponent
---@field ShoutTarget USBZShoutTargetComponent
---@field InteractionMarker USBZMarkerDataAsset
---@field FixMarker USBZMarkerDataAsset
---@field HackingMarker USBZMarkerDataAsset
---@field bStartActive boolean
---@field UnlockMode ESBZHackableActorUnlockMode
---@field DurationSeconds float
---@field ItemUnlockGameplayInteractionQuery USBZGameplayAbilityQuery
---@field GameplayEffectOnInteract FSBZGameplayEffectData
---@field bWillInterrupt boolean
---@field InterruptionTimeInterval FFloatInterval
---@field CustomProcessText FText
---@field CustomSuccessText FText
---@field CurrentState ESBZHackableActorState
---@field ProgressData FSBZHackableProgressData
---@field RoomVolumes TArray<ASBZRoomVolume>
---@field DisplayTexts TArray<FSBZHackableDisplayText>
---@field NumberOfCodesToView int32
---@field CodeEmailIndex int32
---@field CurrentDisplayTextIndex uint8
---@field ObjectiveInfo FText
ASBZHackableActor = {}

---@param Viewer AActor
---@return boolean
function ASBZHackableActor:VisionPredicate(Viewer) end
---@param IndexToUpdate int32
---@param InText FText
function ASBZHackableActor:UpdateDisplayTextImportantInformation(IndexToUpdate, InText) end
---@param bEnabled boolean
function ASBZHackableActor:SetInteractionEnabled(bEnabled) end
---@param InDuration float
---@param bKeepCustomMessage boolean
---@param ResetState ESBZHackableActorState
function ASBZHackableActor:ResetHackableActor(InDuration, bKeepCustomMessage, ResetState) end
function ASBZHackableActor:OnRep_ProgressData() end
function ASBZHackableActor:OnRep_DisplayTextIndex() end
---@param OldState ESBZHackableActorState
function ASBZHackableActor:OnRep_CurrentState(OldState) end
---@param InInteractableComponent USBZBaseInteractableComponent
---@param bInNewState boolean
function ASBZHackableActor:OnInteractionStateChanged(InInteractableComponent, bInNewState) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZHackableActor:OnAckCompleteInteraction(Interactable, Interactor, bIsLocallyControlledInteractor) end
---@param NewUpdateFrequency float
function ASBZHackableActor:Multicast_SetUpdateFrequency(NewUpdateFrequency) end
---@param NewState ESBZHackableActorState
function ASBZHackableActor:Multicast_SetState(NewState) end
---@param bKeepCustomMessage boolean
function ASBZHackableActor:Multicast_ResetHackableActor(bKeepCustomMessage) end
---@param InReason ESBZHackableActorInterruptReason
function ASBZHackableActor:InterruptHacking(InReason) end
---@param ProgressDone int32
function ASBZHackableActor:BP_UpdateProgressBar(ProgressDone) end
---@param SucessText FText
function ASBZHackableActor:BP_UpdateCustomSuccessText(SucessText) end
function ASBZHackableActor:BP_OnUnlocked() end
---@param OldState ESBZHackableActorState
---@param NewState ESBZHackableActorState
function ASBZHackableActor:BP_OnStateChanged(OldState, NewState) end
---@param ProcessText FText
function ASBZHackableActor:BP_OnHackingStarted(ProcessText) end
function ASBZHackableActor:BP_GainedAccess() end
---@param NewIndex int32
function ASBZHackableActor:BP_DisplayTextIndexChanged(NewIndex) end
function ASBZHackableActor:ActivateHackableActor() end


---@class ASBZHackableCodeActor : ASBZHackableActor
---@field Codes TArray<int32>
---@field NumberOfCodes int32
---@field CustomCodeProcessText FText
---@field bShouldResetOnHeistStateChange boolean
---@field DurationSecondsAfterReset float
---@field StateToResetTo ESBZHackableActorState
---@field bShouldKeepCustomMessage boolean
---@field bShouldResetToGenericHack boolean
---@field bIsResetToGenericHack boolean
ASBZHackableCodeActor = {}

---@param InDuration float
---@param bKeepCustomMessage boolean
---@param ResetState ESBZHackableActorState
function ASBZHackableCodeActor:ResetHackableActorToGenericHack(InDuration, bKeepCustomMessage, ResetState) end
function ASBZHackableCodeActor:OnHeistGoneLoud() end
function ASBZHackableCodeActor:Multicast_ResetHackableActorToGenericHack() end
function ASBZHackableCodeActor:BP_OnCodeHackingDone() end


---@class ASBZHackableInfoActor : ASBZHackableActor
---@field bHasBeenResetToGenericHack boolean
---@field CustomInfoProcessText FText
---@field bShouldResetOnHeistStateChange boolean
---@field DurationSecondsAfterReset float
---@field StateToResetTo ESBZHackableActorState
---@field bShouldKeepCustomMessage boolean
---@field bShouldResetToGenericHack boolean
ASBZHackableInfoActor = {}

---@param InDuration float
---@param bKeepCustomMessage boolean
---@param ResetState ESBZHackableActorState
function ASBZHackableInfoActor:ResetHackableActorToGenericHack(InDuration, bKeepCustomMessage, ResetState) end
function ASBZHackableInfoActor:OnHeistGoneLoud() end
function ASBZHackableInfoActor:Multicast_ResetHackableActorToGenericHack() end
---@param OutLocationInformation FSBZLocationInformation
function ASBZHackableInfoActor:BP_SetInformation(OutLocationInformation) end
function ASBZHackableInfoActor:BP_OnHackingInfoDone() end


---@class ASBZHackingMinigameActor : ASBZMiniGameActor
---@field HackingComponent USBZHackingComponent
---@field HackableInteractable USBZHackableInteractableComponent
---@field MarkerAsset USBZMarkerDataAsset
---@field MarkerId int32
ASBZHackingMinigameActor = {}

---@param InOwner AActor
---@param NewState ESBZHackingState
---@param bDoCosmetics boolean
function ASBZHackingMinigameActor:OnHackingStateChanged(InOwner, NewState, bDoCosmetics) end
---@param bEnabled boolean
---@param bDoCosmetics boolean
function ASBZHackingMinigameActor:BP_OnEnabledStateChanged(bEnabled, bDoCosmetics) end


---@class ASBZHackingTool : ASBZTool
---@field WidgetComponent FSBZComponentSelector
---@field MiniGameWidgetComponent FSBZComponentSelector
---@field CurrentHackable UObject
---@field LockedInHackable UObject
---@field ExplosionInstigator AActor
---@field HackingToolEMPEffectClass TSubclassOf<UGameplayEffect>
---@field HackingToolEMPExplodedEvent UAkAudioEvent
---@field EMPDetonationEffect UNiagaraSystem
---@field EMPStunDuration float
---@field AIExplosionRange float
---@field PlayerExplosionRange float
---@field bExplosionAffectsAIOnly boolean
---@field EMPDetonationRange float
---@field HackingSyncStartedEvent UAkAudioEvent
---@field HackingSyncAbortedEvent UAkAudioEvent
---@field HackingSyncCompletedEvent UAkAudioEvent
---@field HackingSyncSucceededEvent UAkAudioEvent
---@field OnHackingSyncStartedEventRtpc UAkRtpc
---@field OnHackingSyncAbortedEventRtpc UAkRtpc
---@field OnHackingSyncCompletedEventRtpc UAkRtpc
---@field OnHackingSyncSucceededEventRtpc UAkRtpc
---@field HurtReactionData FSBZHurtReactionData
ASBZHackingTool = {}

function ASBZHackingTool:OnHackingSyncSucceded() end
function ASBZHackingTool:OnHackingSyncStarted() end
function ASBZHackingTool:OnHackingSyncCompleted() end
function ASBZHackingTool:OnHackingSyncAborted() end
---@param InHackedDevice AActor
function ASBZHackingTool:Multicast_SetCurrentHackable(InHackedDevice) end
---@param Result FSBZExplosionResult
function ASBZHackingTool:Multicast_ReplicateExplosion(Result) end


---@class ASBZHackingZone : AActor
---@field SphereComponent USphereComponent
---@field bEnabled boolean
---@field ZoneIndex int32
---@field ActiveTime float
ASBZHackingZone = {}

function ASBZHackingZone:OnRep_ZoneEnabled() end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function ASBZHackingZone:OnOverlapEnd(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZHackingZone:OnOverlapBegin(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param bInEnabled boolean
function ASBZHackingZone:Multicast_SetZoneEnabled(bInEnabled) end
---@param bDoCosmetics boolean
function ASBZHackingZone:BP_OnOverlapEnd(bDoCosmetics) end
---@param bDoCosmetics boolean
function ASBZHackingZone:BP_OnOverlapBegin(bDoCosmetics) end
---@param bNewState boolean
---@param bDoCosmetics boolean
function ASBZHackingZone:BP_EnabledStateChanged(bNewState, bDoCosmetics) end


---@class ASBZHackingZoneController : ASBZModifiableTimer
---@field OnInteractionComplete FSBZHackingZoneControllerOnInteractionComplete
---@field StaticMesh UStaticMeshComponent
---@field InteractableComponent USBZInteractableComponent
---@field OutlineComponent USBZOutlineComponent
---@field HackingZoneArray TArray<ASBZHackingZone>
---@field SabotagePoint ASBZSabotagePoint
---@field NumberOfZonesActiveAtOnce int32
---@field bSkipRandomization boolean
---@field SingleLocationDuration float
---@field PlayerMultiplierArray TArray<float>
---@field LoudOptions ESBZLoudOptions
---@field Seed int32
---@field NumberOfZonesOccupied int32
---@field HackingZoneDataArray TArray<FSBZHackingZoneData>
---@field AvailableZoneIndexes TArray<int32>
---@field bIsSabotaged boolean
ASBZHackingZoneController = {}

---@param bEnabled boolean
function ASBZHackingZoneController:SetInteractionEnabled(bEnabled) end
---@param InteractableComp USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZHackingZoneController:OnServerCompleteInteraction(InteractableComp, Interactor, bInIsLocallyControlled) end
---@param bNewSabotagedState boolean
function ASBZHackingZoneController:OnSabotaged(bNewSabotagedState) end
function ASBZHackingZoneController:OnHeistGoneLoud() end
function ASBZHackingZoneController:DisableHackingZones() end


---@class ASBZHandheldEquippable : ASBZEquippable
ASBZHandheldEquippable = {}


---@class ASBZHealthPlaceable : ASBZPlaceableCharges
---@field HealthGainedPerCharge float
---@field bAllowPartialCharges boolean
ASBZHealthPlaceable = {}



---@class ASBZHeavyBreachingEquipmentBase : ASBZBreachingEquipmentBase
---@field EquipmentParts TArray<FSBZComponentSelector>
---@field EquipmentTimes FSBZBreachingEquipmentTimes
---@field HeatupTimeSeconds float
---@field NumberOfPartsAdded uint8
---@field EstimatedFuelEndTime float
---@field EquipmentPartMeshes TArray<UMeshComponent>
---@field PartAddedEvent UAkAudioEvent
ASBZHeavyBreachingEquipmentBase = {}

function ASBZHeavyBreachingEquipmentBase:OnRep_PartsAdded() end
---@param InEstimatedFuelEndTime float
function ASBZHeavyBreachingEquipmentBase:Multicast_SetEstimatedFuelEndTime(InEstimatedFuelEndTime) end
function ASBZHeavyBreachingEquipmentBase:Multicast_OnPartAdded() end
---@param Amount int32
function ASBZHeavyBreachingEquipmentBase:BP_PartAdded(Amount) end


---@class ASBZHiddenStaticInteractionCollection : AActor
---@field NumberOfContainers int32
---@field SpawnLocationArray TArray<FVector>
---@field TraceDirectionAndLength FVector
---@field ContainerYawRotationInterval FFloatInterval
---@field Seed int32
---@field ItemContainerClass TSubclassOf<ASBZItemContainer>
---@field ItemContainers TArray<ASBZItemContainer>
---@field ContainerAfterKeyItemIndex int32
ASBZHiddenStaticInteractionCollection = {}

---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZHiddenStaticInteractionCollection:OnKeyItemInteractionComplete(Interactable, Interactor, bInIsLocallyControlled) end


---@class ASBZInstantLoot : AActor
---@field Interactable USBZInteractableComponent
---@field OutlineComponent USBZOutlineComponent
---@field OnLootedDelegate FSBZInstantLootOnLootedDelegate
---@field bIsDestroyOnLooted boolean
---@field OnLootedEvent UAkAudioEvent
---@field bIsLooted boolean
ASBZInstantLoot = {}

---@param bIsEnabled boolean
function ASBZInstantLoot:SetInteractionEnabled(bIsEnabled) end
---@param bOldIsLooted boolean
function ASBZInstantLoot:OnRep_IsLooted(bOldIsLooted) end
---@param bDoCosmetics boolean
function ASBZInstantLoot:OnLooted(bDoCosmetics) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZInstantLoot:HandlePredictedEnd(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZInstantLoot:HandleAckRejectedPredicted(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InteractableComp USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZInstantLoot:HandleAckComplete(InteractableComp, Interactor, bInIsLocallyControlled) end


---@class ASBZInteractableDoor : ASBZInteractableGate
---@field SelectedRoom ASBZRoomVolume
---@field MaxSlammedOpenAngle float
---@field BreachPropDamageSelector FSBZComponentSelector
ASBZInteractableDoor = {}

---@param PoolComponent UActorComponent
---@param Hits int32
---@param bDoCosmetics boolean
---@param DamageContext FSBZPropDamageContext
function ASBZInteractableDoor:HandleBreachPropDamageHits(PoolComponent, Hits, bDoCosmetics, DamageContext) end


---@class ASBZInteractableGate : ASBZGate
---@field Interactable USBZInteractableComponent
---@field MiniGameComponent USBZMiniGameComponent
---@field bIsMinigameIgnored boolean
---@field bIsMinigameFrontOnly boolean
ASBZInteractableGate = {}

---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZInteractableGate:OnStartInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZInteractableGate:OnServerCompleteInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZInteractableGate:OnPredictedEndInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param OldState EPD3MiniGameState
---@param NewState EPD3MiniGameState
---@param bInIsLocallyControlled boolean
function ASBZInteractableGate:OnMiniGameStateChanged(OldState, NewState, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZInteractableGate:OnAckRejectedPredictedInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZInteractableGate:OnAckAbortInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end


---@class ASBZInteractableWindow : ASBZInteractableGate
ASBZInteractableWindow = {}


---@class ASBZInteractionActor : AActor
---@field Interactable USBZInteractableComponent
---@field OnAckCompleteInteraction FSBZInteractionActorOnAckCompleteInteraction
---@field OnServerCompleteInteraction FSBZInteractionActorOnServerCompleteInteraction
ASBZInteractionActor = {}

---@param InteractableComp USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZInteractionActor:HandleServerComplete(InteractableComp, Interactor, bInIsLocallyControlled) end
---@param InteractableComp USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZInteractionActor:HandleAckComplete(InteractableComp, Interactor, bInIsLocallyControlled) end


---@class ASBZItemContainer : AActor
---@field InteractableComponent USBZInteractableComponent
---@field ItemSpawnPointSelector FSBZComponentSelector
---@field HiddenItem ASBZInteractionActor
---@field OtherContainer ASBZItemContainer
---@field bHasItem boolean
---@field bIsBeforeOtherContainer boolean
ASBZItemContainer = {}

---@param bEnabled boolean
function ASBZItemContainer:SetInteractionEnabled(bEnabled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZItemContainer:OnServerCompleteInteraction(Interactable, Interactor, bInIsLocallyControlled) end


---@class ASBZJobOverviewSync : AInfo
ASBZJobOverviewSync = {}

---@param PlayersReadyStatus FSBZPlayersReadyStatusStateArray
function ASBZJobOverviewSync:UpdateReadyClientStatusReceived(PlayersReadyStatus) end
function ASBZJobOverviewSync:UpdateReadyClientStatus() end
---@param InPlayerId FUniqueNetIdRepl
function ASBZJobOverviewSync:ServerSetPlayerJobOverviewReady(InPlayerId) end
---@param PlayerId FUniqueNetIdRepl
function ASBZJobOverviewSync:ServerPlayerReadyToEnterActionPhaseReceived(PlayerId) end
---@param PlayerId FUniqueNetIdRepl
function ASBZJobOverviewSync:SendServerPlayerReadyToEnterActionPhase(PlayerId) end
---@param InPlayerId FUniqueNetIdRepl
function ASBZJobOverviewSync:SendPlayerJobOverviewReady(InPlayerId) end
function ASBZJobOverviewSync:NotifyClientProceedToActionPhase() end
function ASBZJobOverviewSync:NotifyClientMissionEnd() end
---@param PlayerId FUniqueNetIdRepl
---@param ReadyTimeoutTime int32
function ASBZJobOverviewSync:NotifyClientCurrentReadyTimeoutTimeSinglePlayerReceived(PlayerId, ReadyTimeoutTime) end
---@param PlayerId FUniqueNetIdRepl
---@param ReadyTimeoutTime int32
function ASBZJobOverviewSync:NotifyClientCurrentReadyTimeoutTimeSinglePlayer(PlayerId, ReadyTimeoutTime) end
---@param ReadyTimeoutTime int32
function ASBZJobOverviewSync:NotifyClientCurrentReadyTimeoutTimeReceived(ReadyTimeoutTime) end
---@param ReadyTimeoutTime int32
function ASBZJobOverviewSync:NotifyClientCurrentReadyTimeoutTime(ReadyTimeoutTime) end
function ASBZJobOverviewSync:NotifyActionPhaseReady() end
---@param PlayerId FUniqueNetIdRepl
function ASBZJobOverviewSync:ClientWaitsForReadyReceived(PlayerId) end
function ASBZJobOverviewSync:ClientWaitsForReady() end
---@param PlayerId FUniqueNetIdRepl
---@param BlackScreenTransitionType EBlackScreenTransitionType
function ASBZJobOverviewSync:ClientMoveToBlackScreenSinglePlayerReceived(PlayerId, BlackScreenTransitionType) end
---@param PlayerId FUniqueNetIdRepl
---@param BlackScreenTransitionType EBlackScreenTransitionType
function ASBZJobOverviewSync:ClientMoveToBlackScreenSinglePlayer(PlayerId, BlackScreenTransitionType) end
---@param BlackScreenTransitionType EBlackScreenTransitionType
function ASBZJobOverviewSync:ClientMoveToBlackScreenReceived(BlackScreenTransitionType) end
---@param BlackScreenTransitionType EBlackScreenTransitionType
function ASBZJobOverviewSync:ClientMoveToBlackScreen(BlackScreenTransitionType) end


---@class ASBZKeycardReader : ASBZModuleActor
---@field InteractableComponent USBZInteractableComponent
---@field OutlineComponent USBZOutlineComponent
---@field AIOjectiveComponent USBZAIObjectiveComponent
ASBZKeycardReader = {}

---@param Interactable USBZBaseInteractableComponent
---@param bInNewState boolean
function ASBZKeycardReader:OnInteractionStateChanged(Interactable, bInNewState) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlled boolean
function ASBZKeycardReader:OnInteractionComplete(Interactable, Interactor, bIsLocallyControlled) end


---@class ASBZKeypad : ASBZModuleActor
---@field OnCodeCorrect FSBZKeypadOnCodeCorrect
---@field OnCodeIncorrect FSBZKeypadOnCodeIncorrect
---@field GuessedCode int32
---@field Inputs uint8
---@field KeypadInteractableComponentArray TArray<USBZInteractableComponent>
---@field BaseKeypadMesh UStaticMeshComponent
---@field CodeWidget UWidgetComponent
---@field LanternCapsule UCapsuleComponent
---@field PossibleCodeViewerSets TArray<FSBZCodeViewerSet>
---@field bIsInteractable boolean
---@field bHasHighlights boolean
---@field bRandomizeAtBeginPlay boolean
---@field IncorrectCodeWaitTime float
---@field ButtonSoundEvent UAkAudioEvent
---@field Code int32
---@field Seed int32
ASBZKeypad = {}

---@param bEnabled boolean
function ASBZKeypad:SetInteractionEnabled(bEnabled) end
function ASBZKeypad:RandomizeCode() end
function ASBZKeypad:OnRep_IsInteractable() end
function ASBZKeypad:OnRep_GuessedCode() end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function ASBZKeypad:OnLanternCapsuleEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZKeypad:OnLanternCapsuleBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param InteractableComp USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlled boolean
function ASBZKeypad:OnKeypadPressed(InteractableComp, Interactor, bIsLocallyControlled) end
---@param InteractableComponent USBZBaseInteractableComponent
---@param bInNewState boolean
function ASBZKeypad:OnInteractionStateChanged(InteractableComponent, bInNewState) end
---@param InteractableComp USBZBaseInteractableComponent
---@param bInNewState boolean
function ASBZKeypad:OnFocusChanged(InteractableComp, bInNewState) end
function ASBZKeypad:HandleOnInteractKeypadE() end
function ASBZKeypad:HandleOnInteractKeypadC() end
---@param GeneratedCode TArray<int32>
function ASBZKeypad:BP_UpdateHighlights(GeneratedCode) end
---@param KeyIndexPressed int32
function ASBZKeypad:BP_OnKeypadPressed(KeyIndexPressed) end
---@param KeyIndex int32
---@param bInNewState boolean
function ASBZKeypad:BP_OnKeypadFocusChanged(KeyIndex, bInNewState) end
---@param GuessedCodeText FText
function ASBZKeypad:BP_OnGuessedCodeChanged(GuessedCodeText) end
---@param PlayerAttachedActors TArray<AActor>
function ASBZKeypad:BP_HandleLanternOverlapEnd(PlayerAttachedActors) end
---@param PlayerAttachedActors TArray<AActor>
---@param PlayerMesh USkeletalMeshComponent
---@param SocketToAttach FName
---@param SpawnTransform FTransform
function ASBZKeypad:BP_HandleLanternOverlapBegin(PlayerAttachedActors, PlayerMesh, SocketToAttach, SpawnTransform) end


---@class ASBZKickingReplicatedProxy : AInfo
ASBZKickingReplicatedProxy = {}

---@param PlayerIdToKick FUniqueNetIdRepl
---@param PlayerProposingKick FUniqueNetIdRepl
---@param ModeKick ESBZKickingMode
function ASBZKickingReplicatedProxy:VoteToKick(PlayerIdToKick, PlayerProposingKick, ModeKick) end
---@param NewKickingInfo FSBZKickingInfo
function ASBZKickingReplicatedProxy:ServerSendKickingInfo(NewKickingInfo) end
---@param NewKickingInfo FSBZKickingInfo
function ASBZKickingReplicatedProxy:OnKicked(NewKickingInfo) end
---@param NewKickingInfo FSBZKickingInfo
function ASBZKickingReplicatedProxy:MulticastReceiveKickingInfo(NewKickingInfo) end
---@param PlayerIdToKick FUniqueNetIdRepl
---@param ModeKick ESBZKickingMode
function ASBZKickingReplicatedProxy:KickPlayerFinal(PlayerIdToKick, ModeKick) end
---@param PlayerProposed FUniqueNetIdRepl
---@param ErrorCode ESBZKickingError
function ASBZKickingReplicatedProxy:KickFailed(PlayerProposed, ErrorCode) end
---@param PlayerIdToKick FUniqueNetIdRepl
---@param PlayerProposingKick FUniqueNetIdRepl
---@param ModeKick ESBZKickingMode
function ASBZKickingReplicatedProxy:InitiateKicking(PlayerIdToKick, PlayerProposingKick, ModeKick) end


---@class ASBZLaserGadget : ASBZToggleGadget
---@field LaserMesh UStaticMeshComponent
ASBZLaserGadget = {}



---@class ASBZLaserGrid : AActor
---@field OnLaserGridTriggered FSBZLaserGridOnLaserGridTriggered
---@field LaserComponentClass TSubclassOf<USBZLaser>
---@field LaserConnectionArray TArray<FSBZLaserPointConnection>
---@field HitBoxSize FVector2D
---@field bShouldDisableOnAlarm boolean
---@field bShouldUsePatterns boolean
---@field LaserPatterns TArray<FSBZLaserPattern>
---@field PatternCyclingTime float
---@field LaserAudioEvent UAkAudioEvent
---@field CachedLaserArray TArray<USBZLaser>
---@field CachedBoxArray TArray<UBoxComponent>
---@field CachedAmbientSoundArray TArray<USBZAmbientSoundComponent>
---@field CurrentPatternIndex int32
---@field bIsEnabled boolean
ASBZLaserGrid = {}

function ASBZLaserGrid:StopCyclingPatterns() end
function ASBZLaserGrid:StartCyclingPatterns() end
---@param bEnabled boolean
function ASBZLaserGrid:SetEnabled(bEnabled) end
function ASBZLaserGrid:OnRep_CurrentPatternIndex() end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function ASBZLaserGrid:OnHeistStateChanged(OldState, NewState) end
function ASBZLaserGrid:NextPattern() end
---@param bEnabled boolean
function ASBZLaserGrid:Multicast_SetEnabled(bEnabled) end
function ASBZLaserGrid:Multicast_NextPattern() end
---@param OverlappedComp UPrimitiveComponent
---@param Other AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZLaserGrid:BlockingActorEntered(OverlappedComp, Other, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end


---@class ASBZLevelScriptActor : ASBZLevelScriptActorBase
---@field Seed int32
ASBZLevelScriptActor = {}

---@param WorldContextObject UObject
---@param Level TSoftObjectPtr<UWorld>
---@param RoomTransform FTransform
---@param bOutSuccess boolean
---@return ULevelStreamingDynamic
function ASBZLevelScriptActor:SBZPlaceRandomSublevelBySoftObjectPtr(WorldContextObject, Level, RoomTransform, bOutSuccess) end
---@param WorldContextObject UObject
---@param LevelName FString
---@param Location FVector
---@param Rotation FRotator
---@param bOutSuccess boolean
---@return ULevelStreamingDynamic
function ASBZLevelScriptActor:SBZPlaceRandomSublevel(WorldContextObject, LevelName, Location, Rotation, bOutSuccess) end
---@param RandomStream FRandomStream
function ASBZLevelScriptActor:RandomPlacementStarted(RandomStream) end
---@param OutroVariation int32
function ASBZLevelScriptActor:OutroSequenceStarted(OutroVariation) end
function ASBZLevelScriptActor:OnRandomSublevelPlaced() end
function ASBZLevelScriptActor:OnRandomPlacementStarted() end
function ASBZLevelScriptActor:OnRandomizedRoomShown() end
---@param PreplanningAssetsTags TArray<FGameplayTag>
function ASBZLevelScriptActor:OnPreplanningAssetsTagsApplied(PreplanningAssetsTags) end
---@param BagHandle FSBZBagHandle
function ASBZLevelScriptActor:OnPlayerPickedUpBag(BagHandle) end
---@param InstantLoot ASBZInstantLoot
---@param TakenByPlayer ASBZPlayerCharacter
function ASBZLevelScriptActor:OnPlayerInstantLootTaken(InstantLoot, TakenByPlayer) end
---@param PlayerState ASBZPlayerState
---@param OldDefeatState EPD3DefeatState
---@param DefeatState EPD3DefeatState
function ASBZLevelScriptActor:OnPlayerDefeatStateChanged(PlayerState, OldDefeatState, DefeatState) end
function ASBZLevelScriptActor:OnOverkillWeaponRequested() end
---@param ObjectiveNumber int32
function ASBZLevelScriptActor:OnOptionalObjectiveComplete(ObjectiveNumber) end
---@param InDifficulty ESBZDifficulty
---@param InCompanies TArray<ESBZSecurityCompany>
function ASBZLevelScriptActor:OnLevelModifiersApplied(InDifficulty, InCompanies) end
---@param InDifficulty ESBZDifficulty
function ASBZLevelScriptActor:OnDifficultyModifierApplied(InDifficulty) end
function ASBZLevelScriptActor:OnAllRandomizedRoomsPlaced() end
function ASBZLevelScriptActor:IntroSequenceStarted() end
---@param OldHeistState EPD3HeistState
---@param CurrentHeistState EPD3HeistState
function ASBZLevelScriptActor:HeistStateChanged(OldHeistState, CurrentHeistState) end
---@param OutroVariation int32
function ASBZLevelScriptActor:HandleOutroSequenceStarted(OutroVariation) end
function ASBZLevelScriptActor:HandleIntroSequenceStarted() end
function ASBZLevelScriptActor:HandleBlackScreenStarted() end
function ASBZLevelScriptActor:HandleActionPhaseStarted() end
---@param Max int32
---@param MixedSeed int32
---@return int32
function ASBZLevelScriptActor:GetRandomIntegerFromStreamMixed(Max, MixedSeed) end
---@param Max int32
---@return int32
function ASBZLevelScriptActor:GetRandomIntegerFromLevelStream(Max) end
---@param Weight float
---@param MixedSeed int32
---@return boolean
function ASBZLevelScriptActor:GetRandomBoolWithWeightFromStreamMixed(Weight, MixedSeed) end
---@param Weight float
---@return boolean
function ASBZLevelScriptActor:GetRandomBoolWithWeightFromLevelStream(Weight) end
function ASBZLevelScriptActor:EndOutroSequence() end
function ASBZLevelScriptActor:EndIntroSequence() end
---@param StatisticData USBZStatisticCriteriaData
function ASBZLevelScriptActor:CriteriaObjectiveComplete(StatisticData) end
function ASBZLevelScriptActor:CallPlaced() end
function ASBZLevelScriptActor:BlackScreenStarted() end
function ASBZLevelScriptActor:ActionPhaseStarted() end


---@class ASBZLevelScriptActorBase : ALevelScriptActor
ASBZLevelScriptActorBase = {}

---@param EventName FName
---@param Integer int32
---@return boolean
function ASBZLevelScriptActorBase:RemoteEventWithInt(EventName, Integer) end
---@param EventName FName
---@param bBool boolean
---@return boolean
function ASBZLevelScriptActorBase:RemoteEventWithBool(EventName, bBool) end
---@param EventName FName
---@param Actor TArray<AActor>
---@return boolean
function ASBZLevelScriptActorBase:RemoteEventWithActorsArray(EventName, Actor) end
---@param EventName FName
---@param Actor AActor
---@return boolean
function ASBZLevelScriptActorBase:RemoteEventWithActor(EventName, Actor) end


---@class ASBZLevelScriptMainMenuActor : ASBZLevelScriptActorBase
---@field MainMenuMannequin ASBZMainMenuPlayerCharacter
---@field MultiplayerMannequins TArray<ASBZMainMenuPlayerCharacter>
---@field CustomizationManager ASBZCustomizationManager
---@field MainMenuCameraManager ASBZMainMenuCameraManager
ASBZLevelScriptMainMenuActor = {}

function ASBZLevelScriptMainMenuActor:PostInitializeComponents() end
---@param ErrorCode ESBZOnlineCode
function ASBZLevelScriptMainMenuActor:OnLobbyUpdate(ErrorCode) end
---@param LobbyInfoArray TArray<FSBZLobbyCharacterInfoUi>
function ASBZLevelScriptMainMenuActor:OnLoadoutChanged(LobbyInfoArray) end
function ASBZLevelScriptMainMenuActor:OnLeft() end


---@class ASBZLifeActionTriggerVolume : ATriggerBox
---@field NeededTags FGameplayTagContainer
---@field bShouldStartEnabled boolean
---@field bDisableOnLifeActionReserved boolean
---@field bDisableOnLifeActionExiting boolean
---@field bDisableOnLifeActionComplete boolean
---@field ActorFilterComponent USBZActorFilterComponent
---@field bTriggeredByHumanShield boolean
---@field bAutoTrigger boolean
---@field Action USBZAIAction_Order
---@field OnCharacterSlotReserved FSBZLifeActionTriggerVolumeOnCharacterSlotReserved
---@field OnCharacterSlotEntered FSBZLifeActionTriggerVolumeOnCharacterSlotEntered
---@field OnCharacterSlotReady FSBZLifeActionTriggerVolumeOnCharacterSlotReady
---@field OnCharacterSlotStart FSBZLifeActionTriggerVolumeOnCharacterSlotStart
---@field OnCharacterSlotExiting FSBZLifeActionTriggerVolumeOnCharacterSlotExiting
---@field OnCharacterSlotExited FSBZLifeActionTriggerVolumeOnCharacterSlotExited
---@field OnCharacterSlotFreed FSBZLifeActionTriggerVolumeOnCharacterSlotFreed
ASBZLifeActionTriggerVolume = {}

---@param bEnabled boolean
function ASBZLifeActionTriggerVolume:SetVolumeEnabled(bEnabled) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function ASBZLifeActionTriggerVolume:OnSlotStart(Character, ActionInstance, ActionSlot) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function ASBZLifeActionTriggerVolume:OnSlotReserved(Character, ActionInstance, ActionSlot) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function ASBZLifeActionTriggerVolume:OnSlotReady(Character, ActionInstance, ActionSlot) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
---@param Result ESBZLifeActionStopReason
function ASBZLifeActionTriggerVolume:OnSlotFreed(Character, ActionInstance, ActionSlot, Result) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
---@param Result ESBZLifeActionStopReason
function ASBZLifeActionTriggerVolume:OnSlotExiting(Character, ActionInstance, ActionSlot, Result) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
---@param Result ESBZLifeActionStopReason
function ASBZLifeActionTriggerVolume:OnSlotExited(Character, ActionInstance, ActionSlot, Result) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function ASBZLifeActionTriggerVolume:OnSlotEntered(Character, ActionInstance, ActionSlot) end
---@param Identifier FName
---@param Actor AActor
---@param CurrentTotalActors int32
function ASBZLifeActionTriggerVolume:OnFilteredActorEndOverlapping(Identifier, Actor, CurrentTotalActors) end
---@param Identifier FName
---@param Actor AActor
---@param CurrentTotalActors int32
function ASBZLifeActionTriggerVolume:OnFilteredActorBeginOverlapping(Identifier, Actor, CurrentTotalActors) end


---@class ASBZLoadingState : AInfo
---@field LoadingProgress float
ASBZLoadingState = {}

---@param InLoadingProgress float
function ASBZLoadingState:ServerSetLoadingProgress(InLoadingProgress) end


---@class ASBZLobbyBeaconClient : ASBZOnlineBeaconClient
---@field LobbyState ASBZLobbyRemoteState
ASBZLobbyBeaconClient = {}

---@param InPlayerId FUniqueNetIdRepl
---@param InSlotData FSBZSlotData
function ASBZLobbyBeaconClient:ServerUpdateSlot(InPlayerId, InSlotData) end
---@param PlayerInfo FSBZLobbyCharacterInfo
function ASBZLobbyBeaconClient:ServerUpdatePlayerInfo(PlayerInfo) end
---@param InPlayerId FUniqueNetIdRepl
---@param bIsReady boolean
function ASBZLobbyBeaconClient:ServerSetPlayerReady(InPlayerId, bIsReady) end
---@param InPlayerId FUniqueNetIdRepl
---@param bIsConfirmed boolean
function ASBZLobbyBeaconClient:ServerSetPlayerAcceptedMatch(InPlayerId, bIsConfirmed) end
---@param InPlayerIds TArray<FUniqueNetIdRepl>
function ASBZLobbyBeaconClient:ServerReserveSlot(InPlayerIds) end
---@param InPlayerId FUniqueNetIdRepl
function ASBZLobbyBeaconClient:ServerRemovePreplanningAsset(InPlayerId) end
---@param InPlayerId FUniqueNetIdRepl
function ASBZLobbyBeaconClient:ServerPlayerToReadyReceive(InPlayerId) end
function ASBZLobbyBeaconClient:ServerPlayerToReady() end
---@param InPlayerId FUniqueNetIdRepl
function ASBZLobbyBeaconClient:ServerMoveToServerAck(InPlayerId) end
---@param InPlayerId FUniqueNetIdRepl
---@param AccelByteItemSku FString
function ASBZLobbyBeaconClient:ServerAddPreplanningAsset(InPlayerId, AccelByteItemSku) end
function ASBZLobbyBeaconClient:OnRep_LobbyState() end
---@param InSlotData FSBZSlotData
function ASBZLobbyBeaconClient:MulticastSlotUpdated(InSlotData) end
function ASBZLobbyBeaconClient:ClientStopWaitingOtherPlayers() end
---@param bWasSuccessful boolean
function ASBZLobbyBeaconClient:ClientReserveSlotAck(bWasSuccessful) end
---@param InPlayerId FUniqueNetIdRepl
function ASBZLobbyBeaconClient:ClientPreplanningAssetRemoved(InPlayerId) end
function ASBZLobbyBeaconClient:ClientPreplanningAssetRejected() end
---@param InPlayerId FUniqueNetIdRepl
---@param AccelByteItemSku FString
function ASBZLobbyBeaconClient:ClientPreplanningAssetAdded(InPlayerId, AccelByteItemSku) end
function ASBZLobbyBeaconClient:ClientInitiateWaitActionPhase() end
---@param InPlayerId FUniqueNetIdRepl
function ASBZLobbyBeaconClient:ClientFreeSlot(InPlayerId) end
---@param InPlayerId FUniqueNetIdRepl
function ASBZLobbyBeaconClient:ClientAddSlot(InPlayerId) end


---@class ASBZLobbyBeaconHost : ASBZOnlineBeaconHostObject
---@field LobbyState ASBZLobbyRemoteState
ASBZLobbyBeaconHost = {}



---@class ASBZLobbyRemoteState : AInfo
---@field SlotReservationTimeout float
---@field PlayersJoinInfo TArray<FSBZLobbyCharacterInfo>
---@field PlayersInfo TArray<FSBZLobbyCharacterInfo>
---@field LobbyTravelTimeoutTime float
---@field CharacterInfoChanged FSBZLobbyRemoteStateCharacterInfoChanged
---@field LobbyTimeout int32
ASBZLobbyRemoteState = {}

function ASBZLobbyRemoteState:OnRep_LobbyTimeout() end
function ASBZLobbyRemoteState:OnRep_LobbyInfo() end
---@param NewState FName
function ASBZLobbyRemoteState:HandleGameStateChanged(NewState) end
function ASBZLobbyRemoteState:BroadcastWaitGameTimerStarted() end
function ASBZLobbyRemoteState:BroadcastRemotePlayerAcceptedMatch() end


---@class ASBZLongNavLink : ANavLinkProxy
---@field OnNavLinkReached FSBZLongNavLinkOnNavLinkReached
---@field NavArea TSubclassOf<UNavArea>
---@field PlatformNavArea TSubclassOf<UNavArea>
---@field Direction ENavLinkDirection::Type
---@field Start FVector
---@field End FVector
---@field SubPlatformsStart FVector
---@field SubPlatformsEnd FVector
---@field StartNavLink ASBZSmartNavLink
---@field EndNavLink ASBZSmartNavLink
---@field NavMeshPlatforms TArray<ASBZLongNavLinkPlatform>
ASBZLongNavLink = {}

---@param AreaClass TSubclassOf<UNavArea>
function ASBZLongNavLink:SetPlatformNavArea(AreaClass) end
---@param AreaClass TSubclassOf<UNavArea>
function ASBZLongNavLink:SetNavArea(AreaClass) end
---@param bInLinkEnabled boolean
function ASBZLongNavLink:SetLinkEnabled(bInLinkEnabled) end
---@param MovingActor AActor
---@param DestinationPoint FVector
function ASBZLongNavLink:OnSmartLinkReached(MovingActor, DestinationPoint) end


---@class ASBZLongNavLinkPlatform : AActor
---@field BoxComponent UBoxComponent
---@field NavModifierComponent UNavModifierComponent
ASBZLongNavLinkPlatform = {}



---@class ASBZLootProcessor : AActor
---@field OnStateChangedDelegate FSBZLootProcessorOnStateChangedDelegate
---@field BagTypeMap TMap<USBZBagType, USBZBagType>
---@field ProcessDuration float
---@field MarkerAsset USBZMarkerDataAsset
---@field ClaimBagInteractable USBZInteractableComponent
---@field BoxComponent UBoxComponent
---@field CurrentState ESBZLootProcessorState
---@field BagCount int32
---@field SabotagePointArray TArray<ASBZSabotagePoint>
---@field SabotagePoint ASBZSabotagePoint
---@field bShouldSabotageGoToRunning boolean
---@field BagTypeToReturn USBZBagType
---@field MarkerID int32
---@field MarkerComponentSelector FSBZComponentSelector
---@field MarkerComponent USceneComponent
ASBZLootProcessor = {}

---@param bEnabled boolean
function ASBZLootProcessor:SetInteractionEnabled(bEnabled) end
function ASBZLootProcessor:ResumeProcessing() end
function ASBZLootProcessor:PauseProcessing() end
function ASBZLootProcessor:OnTrayOpened() end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZLootProcessor:OnServerClaimBagInteractComplete(Interactable, Interactor, bInIsLocallyControlled) end
---@param bSabotaged boolean
function ASBZLootProcessor:OnSabotagedStateChanged(bSabotaged) end
function ASBZLootProcessor:OnRep_CurrentState() end
function ASBZLootProcessor:OnRep_BagCount() end
---@param InteractableComponent USBZBaseInteractableComponent
---@param bInNewState boolean
function ASBZLootProcessor:OnInteractionEnabledStateChanged(InteractableComponent, bInNewState) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZLootProcessor:OnBagBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param NewBagCount int32
function ASBZLootProcessor:Multicast_UpdateBagCount(NewBagCount) end
---@param NewState ESBZLootProcessorState
function ASBZLootProcessor:Multicast_SetState(NewState) end
---@param NewState ESBZLootProcessorState
---@param bDoCosmetics boolean
---@param bIsDedicatedServer boolean
function ASBZLootProcessor:BP_OnRunningStateChanged(NewState, bDoCosmetics, bIsDedicatedServer) end
---@param NumOfBags int32
function ASBZLootProcessor:BP_BagCountUpdated(NumOfBags) end


---@class ASBZLure : AActor
---@field LureRange float
---@field LureNoiseStartEvent UAkAudioEvent
---@field LureNoiseStopEvent UAkAudioEvent
---@field LureActiveEffect UNiagaraSystem
---@field EffectOffset FVector
---@field Duration float
---@field InitialDelay float
---@field bIsRepeatable boolean
---@field RepeatableCooldown float
---@field AttractorComponent USBZAIAttractorComponent
---@field InteractableComponent USBZInteractableComponent
---@field LifeActionComponent USBZLifeActionComponent
---@field LifeActionInstance USBZLifeActionInstance
---@field LifeActionSlot USBZLifeActionSlot
---@field CurrentInvestigator AActor
---@field RoomVolumes TArray<ASBZRoomVolume>
---@field LureSoundComponent UAkComponent
---@field EffectComponent UNiagaraComponent
---@field bIsPlayingEffects boolean
ASBZLure = {}

---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZLure:OnServerCompleteInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@param bWasPlayingEffects boolean
function ASBZLure:OnRep_IsPlayingEffects(bWasPlayingEffects) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZLure:OnClientCompleteInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@param bIsActive boolean
---@param bDoCosmetics boolean
function ASBZLure:OnActiveStateChanged(bIsActive, bDoCosmetics) end
function ASBZLure:Multicast_StopEffects() end
function ASBZLure:MakeLureNoise() end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function ASBZLure:HandleHeistStateChanged(OldState, NewState) end


---@class ASBZMainMenuCameraManager : AActor
---@field DefaultCamera FName
---@field Cameras TMap<FName, ACameraActor>
---@field LobbyCameraName FName
ASBZMainMenuCameraManager = {}

function ASBZMainMenuCameraManager:SwitchToDefaultCamera() end
---@param CameraName FName
function ASBZMainMenuCameraManager:SwitchToCamera(CameraName) end
---@param WorldContextObject UObject
---@return ASBZMainMenuCameraManager
function ASBZMainMenuCameraManager:GetMainMenuCameraManager(WorldContextObject) end


---@class ASBZMainMenuPlayerCharacter : AActor
---@field Mesh USBZModularCharacterComponent
---@field Equippable ASBZEquippable
---@field MaskEquipped AActor
---@field MaskConfigEquipped FSBZMaskConfig
---@field MaskDataEquipped USBZMaskData
---@field CharacterComponent USBZCharacterComponent
---@field PlayerCharacterData USBZPlayerCharacterData
---@field CachedWeaponObjects TArray<UObject>
---@field CachedLoadoutObjects TArray<UObject>
---@field CachedLoadout FPD3PlayerLoadout
ASBZMainMenuPlayerCharacter = {}

function ASBZMainMenuPlayerCharacter:DestroyEquippable() end


---@class ASBZMainMenuSpectatorPawn : ASBZSpectatorPawn
ASBZMainMenuSpectatorPawn = {}


---@class ASBZMakeNoiseActor : AActor
ASBZMakeNoiseActor = {}


---@class ASBZMask : AActor
---@field MaskSkeletalMeshComponent USkeletalMeshComponent
---@field MaskStaticMeshComponent UStaticMeshComponent
---@field StrapSkeletalMeshComponent USkeletalMeshComponent
---@field MaskOnMontage UAnimMontage
---@field bIsMaskOn boolean
---@field bIsRendered1P boolean
---@field MaskConfig FSBZMaskConfig
ASBZMask = {}



---@class ASBZMeleeWeapon : ASBZWeapon
---@field MeleeHitEvent UAkAudioEvent
ASBZMeleeWeapon = {}



---@class ASBZMicroCamera : ASBZPlaceableToolBase
---@field YawLimit FFloatInterval
---@field PitchLimit FFloatInterval
---@field RotationSpeed float
---@field BoxComponent UBoxComponent
---@field ExplosionInstigator AActor
---@field MicroCameraTasedEffectClass TSubclassOf<UGameplayEffect>
---@field MicroCameraExplodedEvent UAkAudioEvent
---@field DetonationEffect UNiagaraSystem
---@field TaseDuration float
---@field AIExplosionRange float
---@field PlayerExplosionRange float
---@field bExplosionAffectsAIOnly boolean
---@field AutoMarkTickInterval float
---@field ViewExtents FVector
---@field OverloadStartEvent UAkAudioEvent
---@field StopOverloadStopEvent UAkAudioEvent
---@field ArmedEvent UAkAudioEvent
---@field OverloadSoundDuration float
---@field AkComponent UAkComponent
---@field HurtReactionData FSBZHurtReactionData
ASBZMicroCamera = {}

---@param InAIPawn APawn
function ASBZMicroCamera:OnAICharacterKilled(InAIPawn) end
function ASBZMicroCamera:Multicast_SetArmed() end
---@param Result FSBZExplosionResult
function ASBZMicroCamera:Multicast_ReplicateExplosion(Result) end
function ASBZMicroCamera:Multicast_OverloadMicroCamera() end


---@class ASBZMicroCameraHandler : ASBZTool
---@field WidgetComponent FSBZComponentSelector
---@field MiniGameWidget UWidget
ASBZMicroCameraHandler = {}



---@class ASBZMiniGameActor : AActor
---@field OnMiniGameSuccessful FSBZMiniGameActorOnMiniGameSuccessful
---@field bIsUnlocked boolean
---@field bIsMiniGameIgnored boolean
---@field MiniGameComponent USBZMiniGameComponent
---@field Interactable USBZInteractableComponent
---@field OutlineComponent USBZOutlineComponent
---@field StaticMesh UStaticMeshComponent
---@field WidgetComponent UWidgetComponent
ASBZMiniGameActor = {}

---@param bIgnored boolean
function ASBZMiniGameActor:SetMiniGameIgnored(bIgnored) end
---@param bInEnabled boolean
function ASBZMiniGameActor:SetEnabled(bInEnabled) end
function ASBZMiniGameActor:OnRep_IsUnlocked() end
---@param OldState EPD3MiniGameState
---@param NewState EPD3MiniGameState
---@param bInIsLocallyControlled boolean
function ASBZMiniGameActor:OnMiniGameStateChanged(OldState, NewState, bInIsLocallyControlled) end
---@param InteractableComponent USBZBaseInteractableComponent
---@param bInNewState boolean
function ASBZMiniGameActor:OnInteractableStateChanged(InteractableComponent, bInNewState) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZMiniGameActor:OnAckCompleteInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param bIgnored boolean
function ASBZMiniGameActor:Multicast_SetMiniGameIgnored(bIgnored) end
function ASBZMiniGameActor:Multicast_OnComplete() end
---@param bDoCosmetics boolean
function ASBZMiniGameActor:BP_OnMiniGameSuccess(bDoCosmetics) end


---@class ASBZMissionGameMode : ASBZGameMode
---@field SpawnManager USBZSpawnManager
---@field AIVisibilityManager ASBZAIVisibilityManager
---@field CoverPointManager USBZCoverPointManager
---@field FirePermissionManager UDEPRECATED_SBZFirePermissionManager
---@field ReconnectPlayerStateDataArray TArray<FSBZReconnectPlayerStateData>
---@field MaxInactivePlayers int32
ASBZMissionGameMode = {}

function ASBZMissionGameMode:OnActionPhaseStarted() end
function ASBZMissionGameMode:OnActionPhaseExited() end


---@class ASBZMissionState : ASBZGameStateBase
---@field OnFBIActivationChanged FSBZMissionStateOnFBIActivationChanged
---@field StatisticCodeCollection FSBZStatisticCodeCollection
---@field StatisticsCriteriaDataCollection FSBZStatisticCriteriaDataCollection
---@field RandomSeed int32
---@field ServerChangelist int32
---@field Difficulty ESBZDifficulty
---@field SecurityCompanies TArray<ESBZSecurityCompany>
---@field ReplicatedSharedKeyItemTagCount TArray<FSBZRepSharedKeyItemTags>
---@field PredictionTimeOutSeconds float
---@field ServerUnblockAbilityEarlierSeconds float
---@field MissionStartTime int16
---@field SharedKeyItemDataMap TMap<FGameplayTag, USBZKeyItemData>
---@field BagManager USBZBagManager
---@field AICrewStateArray TArray<ASBZAICrewState>
---@field RequestedOverkillWeaponConfig FSBZEquippableConfig
---@field SoundBanks TArray<UAkAudioBank>
---@field DialogManager USBZDialogManager
---@field AgentManager USBZAgentManager
---@field RagdollSyncManager USBZRagdollSyncManager
---@field VehicleManager USBZVehicleManager
---@field MarkerManager USBZMarkerManager
---@field LifeActionManager USBZLifeActionManager
---@field ActorPoolManager USBZActorPoolManager
---@field SmallTalkManager USBZSmallTalkManager
---@field StateMachineSharedState USBZStateMachineSharedState
---@field bPlayerFriendlyFire boolean
---@field PlayersInEscapeVolume uint8
---@field PlayersRequiredInEscapeVolume uint8
---@field EscapeTimeLeft int32
---@field KillingSpreeAmount uint8
---@field DropKillingSpreeWaitTime float
---@field PreplanningAssets TArray<FSBZPreplanningAsset>
---@field MaxQueuedCosmeticDestruction int32
---@field TimeBetweenQueuedCosmeticDestruction FFloatInterval
---@field QueuedCosmeticDestructionExplosions TArray<USBZCosmeticDestructionComponent>
---@field HeavyEnemiesTagContainer FGameplayTagContainer
---@field VariationSeedGenerator FSBZVariationSeedGenerator
---@field OverkillWeaponCooldown float
---@field TutorialPlayerCharacterData USBZPlayerCharacterData
ASBZMissionState = {}

---@param DamageEventData FSBZDamageEvent
function ASBZMissionState:ServerPostOnTakenDamageEvent(DamageEventData) end
---@param ObjectName FString
function ASBZMissionState:RewardCompleteExperienceObjective(ObjectName) end
---@param MilestoneName FString
function ASBZMissionState:RewardCompleteExperienceMilestone(MilestoneName) end
function ASBZMissionState:ResetPreplanningAssets() end
---@param InPlayerId FUniqueNetIdRepl
function ASBZMissionState:RemovePreplanningAsset(InPlayerId) end
---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZMissionState:OnStandaloneNetIDEndPlay(Actor, EndPlayReason) end
function ASBZMissionState:OnRep_ServerChangelist() end
function ASBZMissionState:OnRep_RandomSeed() end
function ASBZMissionState:OnRep_PreplanningAssetsApplied() end
function ASBZMissionState:OnRep_PlayersRequiredInEscapeVolume() end
function ASBZMissionState:OnRep_PlayersInEscapeVolume() end
function ASBZMissionState:OnRep_EscapeTimeLeft() end
function ASBZMissionState:OnRep_Difficulty() end
function ASBZMissionState:OnBlackScreenStarted() end
function ASBZMissionState:OnActionPhaseStarted() end
function ASBZMissionState:OnActionPhaseExited() end
---@param MilestoneType ESBZMilestoneType
---@param MilestoneName FString
function ASBZMissionState:NotifyClientPassedMilestone(MilestoneType, MilestoneName) end
function ASBZMissionState:MulticastPreplanningAssetsApplied() end
function ASBZMissionState:Multicast_StartOverkillCooldown() end
---@param InPlayersInVolume uint8
---@param InTotal uint8
function ASBZMissionState:Multicast_SetEscapeVolumeData(InPlayersInVolume, InTotal) end
---@param NewTime int32
function ASBZMissionState:Multicast_SetEscapeTimeLeft(NewTime) end
---@param InMissionResultData FSBZEndMissionResultData
function ASBZMissionState:Multicast_MissionResult(InMissionResultData) end
---@param OutroVariation int32
function ASBZMissionState:Multicast_MissionEnd(OutroVariation) end
---@return boolean
function ASBZMissionState:IsTutorialLevel() end
---@param WorldContextObject UObject
---@return boolean
function ASBZMissionState:IsFBIActive(WorldContextObject) end
---@param InTag FGameplayTag
---@return boolean
function ASBZMissionState:HasSharedKeyItemTag(InTag) end
---@param InTag FGameplayTag
---@param WorldContextObject UObject
---@return boolean
function ASBZMissionState:HasPreplanningTag(InTag, WorldContextObject) end
---@param VariationData USBZVariationSetData
---@return boolean
function ASBZMissionState:HasAttributedAllVariations(VariationData) end
---@param Tag FGameplayTag
---@param Count int32
function ASBZMissionState:HandleSharedKeyItemTagChanged(Tag, Count) end
---@return TArray<ESBZSecurityCompany>
function ASBZMissionState:GetSecurityCompanies() end
---@param WorldContextObject UObject
---@return ASBZMissionState
function ASBZMissionState:GetSBZMissionState(WorldContextObject) end
---@return int32
function ASBZMissionState:GetRandomSeed() end
---@return TArray<FGameplayTag>
function ASBZMissionState:GetPreplanningTags() end
---@param MixSeed int32
---@param WorldContextObject UObject
---@return FRandomStream
function ASBZMissionState:GetMixedRandomStream(MixSeed, WorldContextObject) end
---@param MixSeed int32
---@return int32
function ASBZMissionState:GetMixedRandomSeed(MixSeed) end
---@return float
function ASBZMissionState:GetMissionTime() end
---@return FSBZEndMissionResultData
function ASBZMissionState:GetMissionResultData() end
---@return ESBZEndMissionResult
function ASBZMissionState:GetMissionResult() end
---@return uint8
function ASBZMissionState:GetDifficultyIdx() end
---@return ESBZDifficulty
function ASBZMissionState:GetDifficulty() end
---@param Character ASBZCharacter
---@param MixSeed int32
---@return int32
function ASBZMissionState:GetCharacterSeed(Character, MixSeed) end
---@param bIsHidden boolean
function ASBZMissionState:BP_OnHideAllOutlinesChanged(bIsHidden) end
function ASBZMissionState:ApplyPreplanningAssets() end
---@param InPlayerId FUniqueNetIdRepl
---@param InSkuNo FString
---@return boolean
function ASBZMissionState:AddPreplanningAsset(InPlayerId, InSkuNo) end


---@class ASBZModifiableTimer : AActor
---@field OnTimerDone FSBZModifiableTimerOnTimerDone
---@field OnTimerStarted FSBZModifiableTimerOnTimerStarted
---@field OnProgressionReached FSBZModifiableTimerOnProgressionReached
---@field Duration float
---@field ProgressionValuesToPost TArray<float>
---@field TimeElapsed float
---@field CurrentSpeed float
---@field bIsRunning boolean
---@field NextProgressionToPostIndex int32
ASBZModifiableTimer = {}

function ASBZModifiableTimer:StartTimer() end
---@param NewSpeed float
function ASBZModifiableTimer:SetTimerSpeed(NewSpeed) end
---@param NewDuration float
function ASBZModifiableTimer:SetTimerDuration(NewDuration) end
---@param bStartTimer boolean
function ASBZModifiableTimer:ResetTimer(bStartTimer) end
function ASBZModifiableTimer:PauseTimer() end
function ASBZModifiableTimer:OnRep_IsRunning() end
function ASBZModifiableTimer:Multicast_StartTimer() end
---@param NewSpeed float
function ASBZModifiableTimer:Multicast_SetTimerSpeed(NewSpeed) end
---@param NewTimeElapsed float
function ASBZModifiableTimer:Multicast_SetTimeElapsed(NewTimeElapsed) end
---@param NewDuration float
function ASBZModifiableTimer:Multicast_SetDuration(NewDuration) end
function ASBZModifiableTimer:Multicast_ResetTimerAndStart() end
function ASBZModifiableTimer:Multicast_ResetTimerAndPause() end
function ASBZModifiableTimer:Multicast_PauseTimer() end
---@return float
function ASBZModifiableTimer:GetTimeRemaining() end
---@param TimeToAdd float
function ASBZModifiableTimer:AddTimeElapsed(TimeToAdd) end


---@class ASBZModularWeaponDisplay : AActor
---@field ModularMeshComponent USBZModularMeshComponent
---@field Mesh UMeshComponent
---@field WeaponData USBZBaseWeaponData
---@field WeaponModMap TMap<USBZModularPartSlotBase, FSBZEquippablePartConfigGroup>
ASBZModularWeaponDisplay = {}

---@param Slot USBZModularPartSlotBase
---@param EquippablePart USBZEquippablePartDataAsset
function ASBZModularWeaponDisplay:SwapModPart(Slot, EquippablePart) end
---@param bIsVisible boolean
function ASBZModularWeaponDisplay:SetVisible(bIsVisible) end
---@param InWeaponModMap FSBZEquippableConfig
---@param bBuildNow boolean
function ASBZModularWeaponDisplay:SetupWeaponModMap(InWeaponModMap, bBuildNow) end
---@param InWeaponData USBZBaseWeaponData
---@param bBuildNow boolean
function ASBZModularWeaponDisplay:SetupWeaponData(InWeaponData, bBuildNow) end
---@param Slot USBZModularPartSlotBase
function ASBZModularWeaponDisplay:RemoveSlot(Slot) end
function ASBZModularWeaponDisplay:ModuleMeshLoadingDone() end
---@return FSBZEquippableConfig
function ASBZModularWeaponDisplay:GetWeaponModMap() end
---@return USBZBaseWeaponData
function ASBZModularWeaponDisplay:GetWeaponData() end
function ASBZModularWeaponDisplay:BuildWeapon() end


---@class ASBZModuleActor : AActor
---@field OnStateChangedDelegate FSBZModuleActorOnStateChangedDelegate
---@field HackingModules TArray<ASBZHackingMinigameActor>
---@field CuttingModules TArray<ASBZCuttableActor>
---@field bMustHackAllModules boolean
---@field bMustCutAllModules boolean
---@field DefaultCuttingModule TSubclassOf<ASBZCuttableActor>
---@field DefaultHackingModule TSubclassOf<ASBZHackingMinigameActor>
---@field ConnectedGate ASBZGate
---@field CurrentState ESBZModuleActorState
ASBZModuleActor = {}

---@param bInEnabled boolean
function ASBZModuleActor:SetEnabled(bInEnabled) end
---@param NewState EPD3MiniGameState
function ASBZModuleActor:OnServerHackingStateChanged(NewState) end
---@param CuttableActor ASBZCuttableActor
function ASBZModuleActor:OnServerCuttingComplete(CuttableActor) end
function ASBZModuleActor:OnRep_CurrentState() end
---@param NewState ESBZModuleActorState
function ASBZModuleActor:Multicast_SetState(NewState) end
---@param NewState ESBZModuleActorState
---@param bDoCosmetics boolean
function ASBZModuleActor:BP_OnStateChanged(NewState, bDoCosmetics) end


---@class ASBZMovingSecurityCamera : ASBZSecurityCamera
---@field Splines TArray<ASBZSpline>
---@field MovementSpeed float
---@field ChosenSpline USBZSplineComponent
---@field DistanceAlongSpline float
---@field ServerStartTime float
---@field Seed int32
---@field SplineDistance float
---@field CameraAttachComponent FSBZComponentSelector
---@field CameraAttachment USceneComponent
ASBZMovingSecurityCamera = {}

function ASBZMovingSecurityCamera:OnRep_ServerStartTime() end
function ASBZMovingSecurityCamera:DisableMotionSensor() end


---@class ASBZNarrator : AInfo
---@field VoiceComponent USBZCharacterVoiceComponent
ASBZNarrator = {}



---@class ASBZNavMeshGeneratorVolume : AVolume
ASBZNavMeshGeneratorVolume = {}


---@class ASBZNetworkDebug : AHUD
ASBZNetworkDebug = {}


---@class ASBZNiagaraWwiseActor : AActor
---@field EventToPlayOneShot UAkAudioEvent
---@field EventToPlay UAkAudioEvent
---@field EventToStopPlay UAkAudioEvent
---@field Rtpc UAkRtpc
---@field NiagaraEffectOneShot UNiagaraSystem
---@field NiagaraEffect UNiagaraSystem
---@field AudioComponent USBZAmbientSoundComponent
---@field NiagaraComponent UNiagaraComponent
---@field bPlayFromBeginning boolean
---@field bOneShotEffect boolean
---@field bUpdateRtpc boolean
---@field RtpcUpdateValue float
---@field RtpcInterpolationTimerMS float
ASBZNiagaraWwiseActor = {}

---@param RtpcValue float
---@param RtpcInterpolationValue float
function ASBZNiagaraWwiseActor:UpdateRtpc(RtpcValue, RtpcInterpolationValue) end
function ASBZNiagaraWwiseActor:StopEffectsLoop() end
function ASBZNiagaraWwiseActor:PlayEffectsOneShot() end
function ASBZNiagaraWwiseActor:PlayEffectsLoop() end
function ASBZNiagaraWwiseActor:DestroyComponents() end
function ASBZNiagaraWwiseActor:DeactivateActor() end
function ASBZNiagaraWwiseActor:ActivateActor() end


---@class ASBZNoCookDS : AStaticMeshActor
ASBZNoCookDS = {}


---@class ASBZObjective : AActor
---@field Text FText
---@field DisplayOrder int32
---@field bIsOptional boolean
---@field bUIUseProgressBar boolean
---@field bUIReverseTimer boolean
---@field ProgressTextOption ESBZProgressTextDisplayOption
---@field ObjectiveDescription FText
---@field ObjectiveGroup ESBZObjectiveGroup
---@field ParentObjective ASBZObjective
---@field SubObjectives TArray<ASBZObjective>
---@field OnActivated FSBZObjectiveOnActivated
---@field OnCompleted FSBZObjectiveOnCompleted
---@field OnFailed FSBZObjectiveOnFailed
---@field OnDisabled FSBZObjectiveOnDisabled
---@field OnUpdated FSBZObjectiveOnUpdated
---@field bProgressWhileInactive boolean
---@field bCompleteWhenInactiveFromProgress boolean
---@field bAutoActiveOnParent boolean
---@field SubobjectiveSetting ESBZSubobjectiveComplete
---@field TagContainer FGameplayTagContainer
---@field State ESBZObjectiveState
---@field Progress int32
---@field MaxProgress int32
---@field MaxProgressPerDifficulty int32
---@field StartTimeSeconds float
---@field TimedObjectiveActor TScriptInterface<ISBZTimedObjectiveInterface>
---@field TimedObjectiveActorArray TArray<AActor>
---@field InfoActorArray TArray<AActor>
---@field MarkerAsset USBZMarkerDataAsset
ASBZObjective = {}

---@param Progress int32
function ASBZObjective:SetProgress(Progress) end
function ASBZObjective:OnRep_State() end
function ASBZObjective:OnRep_Progress() end
---@param NewState ESBZObjectiveState
function ASBZObjective:Multicast_OnStateChanged(NewState) end
---@param NewProgress int32
function ASBZObjective:Multicast_OnProgressChanged(NewProgress) end
---@return boolean
function ASBZObjective:IsActive() end
---@param WorldContext UObject
---@param Group ESBZObjectiveGroup
---@return TArray<ASBZObjective>
function ASBZObjective:GetActiveInGroup(WorldContext, Group) end
function ASBZObjective:Fail() end
function ASBZObjective:Disable() end
---@param bEvenWhenInactive boolean
function ASBZObjective:Complete(bEvenWhenInactive) end
---@param Progress int32
function ASBZObjective:AddProgress(Progress) end
---@param bEndActiveInGroup boolean
---@param bCompleteEndedInGroup boolean
function ASBZObjective:Activate(bEndActiveInGroup, bCompleteEndedInGroup) end


---@class ASBZOnlineBeaconClient : AOnlineBeaconClient
ASBZOnlineBeaconClient = {}

---@param PlayerIdToKick FUniqueNetIdRepl
---@param PlayerProposingKick FUniqueNetIdRepl
---@param ModeKick ESBZKickingMode
function ASBZOnlineBeaconClient:VoteToKick(PlayerIdToKick, PlayerProposingKick, ModeKick) end
---@param Message FSBZChatMessage
function ASBZOnlineBeaconClient:SendChatMessage(Message) end
---@param Message FSBZChatMessage
function ASBZOnlineBeaconClient:ReceiveChatMessage(Message) end
---@param NewKickingInfo FSBZKickingInfo
function ASBZOnlineBeaconClient:KickingInProgress(NewKickingInfo) end
---@param KickingError ESBZKickingError
function ASBZOnlineBeaconClient:KickFailed(KickingError) end
---@param PlayerIdToKick FUniqueNetIdRepl
---@param PlayerProposingKick FUniqueNetIdRepl
---@param ModeKick ESBZKickingMode
function ASBZOnlineBeaconClient:InitiateKickRequest(PlayerIdToKick, PlayerProposingKick, ModeKick) end
function ASBZOnlineBeaconClient:HandleKicked() end


---@class ASBZOnlineBeaconHostObject : AOnlineBeaconHostObject
ASBZOnlineBeaconHostObject = {}


---@class ASBZOnlineSlotsSync : AInfo
---@field SlotsData TArray<FSBZSlotData>
---@field OnlineSession USBZOnlineSession
ASBZOnlineSlotsSync = {}

---@param InPlayerState ASBZPlayerState
function ASBZOnlineSlotsSync:UpdatePlayerName(InPlayerState) end
---@param InPlayerState ASBZPlayerState
function ASBZOnlineSlotsSync:UpdatePlatform(InPlayerState) end
---@param InPlayerState ASBZPlayerState
function ASBZOnlineSlotsSync:UpdateInfamyLevel(InPlayerState) end
---@param InPlayerState ASBZPlayerState
function ASBZOnlineSlotsSync:UniqueIdUpdated(InPlayerState) end
function ASBZOnlineSlotsSync:SyncSlotsData() end
function ASBZOnlineSlotsSync:OnRep_SlotsData() end
---@param InPlayerId FUniqueNetIdRepl
function ASBZOnlineSlotsSync:OnRemovePlayerState(InPlayerId) end
---@param GameMode AGameModeBase
function ASBZOnlineSlotsSync:OnGameModeInitialized(GameMode) end
---@param PlayerState APlayerState
function ASBZOnlineSlotsSync:OnAddPlayerState(PlayerState) end


---@class ASBZPartyBeaconClient : ASBZOnlineBeaconClient
---@field PartyState FSBZPartyData
ASBZPartyBeaconClient = {}

---@param ClientId FUniqueNetIdRepl
function ASBZPartyBeaconClient:ServerNotifyLeftLobby(ClientId) end
---@param ClientId FUniqueNetIdRepl
function ASBZPartyBeaconClient:ServerNotifyJoinedLobby(ClientId) end
---@param ClientId FUniqueNetIdRepl
function ASBZPartyBeaconClient:ServerNotifyFailedToJoinLobby(ClientId) end
---@param Client FSBZPartyMemberInfo
function ASBZPartyBeaconClient:ServerLogin(Client) end
function ASBZPartyBeaconClient:OnRep_PartyState() end
function ASBZPartyBeaconClient:LeaveLobby() end
---@param InLobbyNetId FString
function ASBZPartyBeaconClient:ConnectToLobby(InLobbyNetId) end
---@param InNetId FUniqueNetIdRepl
---@param bWasSuccessful boolean
function ASBZPartyBeaconClient:ClientLoginAck(InNetId, bWasSuccessful) end


---@class ASBZPartyBeaconHost : ASBZOnlineBeaconHostObject
---@field OnPartyJoined FSBZPartyBeaconHostOnPartyJoined
---@field OnPartyUpdated FSBZPartyBeaconHostOnPartyUpdated
---@field PartyMembers TArray<FSBZPartyMemberInfo>
---@field PartyTravelTimeout float
---@field PartyDisconnectTimeout float
---@field TravellingMembers TArray<FUniqueNetIdRepl>
---@field TravelTimeoutTimer FTimerHandle
---@field LeavingMembers TArray<FUniqueNetIdRepl>
---@field LeaveLobbyTimeoutTimer FTimerHandle
ASBZPartyBeaconHost = {}

---@param PartyMemberId FUniqueNetIdRepl
function ASBZPartyBeaconHost:NotifyClientLeftLobby(PartyMemberId) end
---@param PartyMemberNetId FUniqueNetIdRepl
function ASBZPartyBeaconHost:NotifyClientFailedConnectionToLobby(PartyMemberNetId) end
---@param PartyMemberNetId FUniqueNetIdRepl
function ASBZPartyBeaconHost:NotifyClientConnectedToLobby(PartyMemberNetId) end
function ASBZPartyBeaconHost:HandlePartyTravelTimeout() end
function ASBZPartyBeaconHost:HandlePartyLeaveLobbyTimeout() end
---@param ChangedPlayerState APlayerState
function ASBZPartyBeaconHost:FirePartyUpdated(ChangedPlayerState) end
---@param Result ESBZOnlineCode
function ASBZPartyBeaconHost:BroadcastPartyTravelled(Result) end
---@param Result ESBZOnlineCode
function ASBZPartyBeaconHost:BroadcastPartyLeftLobby(Result) end


---@class ASBZPatrolPoint : AActor
---@field NextPoints TArray<ASBZPatrolPoint>
---@field bRandomSet boolean
---@field WaitTimeInterval FFloatRange
---@field bUsePointRotation boolean
---@field bIsTesting boolean
ASBZPatrolPoint = {}

---@return boolean
function ASBZPatrolPoint:IsTestingPoint() end
---@param Next ASBZPatrolPoint
function ASBZPatrolPoint:Disconnect(Next) end
---@param Next ASBZPatrolPoint
function ASBZPatrolPoint:Connect(Next) end


---@class ASBZPawnSpawnBase : AActor
---@field Seed int32
---@field bRandomizeSpawnTransformStartingIndex boolean
---@field RotationHandling FSBZSpawnRotationHandlingMethod
---@field SpawnDefinitionArray TArray<FSBZPawnSpawnDefinition>
---@field NextSpawnDefinitionIndex int32
---@field WeightedLocation FVector
ASBZPawnSpawnBase = {}



---@class ASBZPawnSpawnGroup : AActor
---@field PawnSpawnArray TArray<ASBZPawnSpawnBase>
---@field Seed int32
---@field bShouldRandomizeSpawnPoints boolean
---@field SpawnGroupRoom ASBZRoomVolume
ASBZPawnSpawnGroup = {}

---@param DestroyedActor AActor
function ASBZPawnSpawnGroup:OnPawnSpawnDestroyed(DestroyedActor) end


---@class ASBZPawnSpawnPredefined : ASBZPawnSpawnBase
---@field bSpawnOnBeginPlay boolean
---@field bOverrideSpawningMethod boolean
---@field OverridenSpawningMethod ESpawnActorCollisionHandlingMethod
---@field bEnableRandomMeshScale boolean
---@field KilledPawnDelegate FSBZPawnSpawnPredefinedKilledPawnDelegate
---@field PredefinedRequestActionActorRef AActor
---@field SpawnedPawnDelegate FSBZPawnSpawnPredefinedSpawnedPawnDelegate
---@field PredefinedPawnRequest FSBZPawnSpawnRequest
ASBZPawnSpawnPredefined = {}

---@param LatentInfo FLatentActionInfo
function ASBZPawnSpawnPredefined:SpawnPredefinedLatent(LatentInfo) end
---@return FSBZPawnSpawnRequestHandle
function ASBZPawnSpawnPredefined:SpawnPredefined() end
---@param Pawn APawn
function ASBZPawnSpawnPredefined:OnSpawnedPawnKilled(Pawn) end


---@class ASBZPedestrianTrafficNavLink : ASBZSmartNavLink
---@field WaitSlots USBZNavLinkWaitSlotRoot
---@field CrossingEnd FVector
---@field HalfCrossingWidth float
---@field LaneCount int32
---@field CharacterDelayBeforePathing FFloatInterval
---@field LinkedTrafficVolumes TArray<ASBZTrafficVolume>
---@field CrossingCharacters TArray<ASBZAIBaseCharacter>
ASBZPedestrianTrafficNavLink = {}

---@param bAllowed boolean
function ASBZPedestrianTrafficNavLink:SetTrafficAllowed(bAllowed) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function ASBZPedestrianTrafficNavLink:OnHeistStateChanged(OldState, NewState) end


---@class ASBZPerceptionController : AAIController
---@field VisualDetectionComponent USBZAIVisualDetectionComponent
ASBZPerceptionController = {}



---@class ASBZPersistentWorldDamageZone : AActor
---@field Zone USBZPersistentWorldDamageZoneComponent
ASBZPersistentWorldDamageZone = {}



---@class ASBZPersistentWorldDamageZoneManager : AActor
---@field MeshZonesMap TArray<FSBZMeshZones>
ASBZPersistentWorldDamageZoneManager = {}



---@class ASBZPhoneTool : ASBZTool
---@field WidgetComponent FSBZComponentSelector
---@field MiniGameWidget UWidget
---@field GlowMesh UStaticMeshComponent
ASBZPhoneTool = {}

---@param NewScreenState ESBZPhoneScreenState
function ASBZPhoneTool:Multicast_ToggleScreenMode(NewScreenState) end


---@class ASBZPlaceableBase : ASBZEquippable
---@field AttractComment USBZVoiceCommentDataAsset
---@field AttractCommentPriority ESBZVoicePriority
---@field Interactable USBZInteractableComponent
---@field Outline USBZOutlineComponent
---@field AttractorComponent USBZAIAttractorComponent
ASBZPlaceableBase = {}



---@class ASBZPlaceableCharges : ASBZPlaceableBase
---@field OnPlaceableReachedTargetDelegate FSBZPlaceableChargesOnPlaceableReachedTargetDelegate
---@field InitialCharges float
---@field Charges float
---@field bRequiresRelativeLocation boolean
---@field ProjectileMovementComponent UProjectileMovementComponent
---@field BoxComponent UBoxComponent
---@field OutOfBoundsBoxComponent UBoxComponent
---@field CloakerBMMessage TSubclassOf<AStaticMeshActor>
---@field TargetLocation FVector
---@field PlaceableChargeState ESBZPlaceableChargeState
---@field PlacedVoiceComment USBZVoiceCommentDataAsset
---@field CrewAIChatMessage FText
---@field bIsAIPlaced boolean
---@field MeshRelativeLocation FVector
ASBZPlaceableCharges = {}

---@param NewPlaceableChargeState ESBZPlaceableChargeState
function ASBZPlaceableCharges:Server_SetPlaceableChargeState(NewPlaceableChargeState) end
function ASBZPlaceableCharges:OnThrown() end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZPlaceableCharges:OnServerCompleteInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
function ASBZPlaceableCharges:OnRep_TargetLocation() end
---@param OldPlaceableChargeState ESBZPlaceableChargeState
function ASBZPlaceableCharges:OnRep_PlaceableChargeState(OldPlaceableChargeState) end
---@param OldCharges float
function ASBZPlaceableCharges:OnRep_Charges(OldCharges) end
function ASBZPlaceableCharges:OnPlaced() end
---@param OldAttachParentActor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZPlaceableCharges:OnParentActorEndPlay(OldAttachParentActor, EndPlayReason) end
---@param ChargesChangeTo float
---@param bDoCosmetics boolean
function ASBZPlaceableCharges:OnChargesChanged(ChargesChangeTo, bDoCosmetics) end
function ASBZPlaceableCharges:OnCanceled() end
function ASBZPlaceableCharges:OnActivating() end
function ASBZPlaceableCharges:Multicast_SpawnCloakerPlaceable() end
---@param NewPlaceableChargeState ESBZPlaceableChargeState
function ASBZPlaceableCharges:Multicast_SetPlaceableChargeState(NewPlaceableChargeState) end
---@param NewCharges float
function ASBZPlaceableCharges:Multicast_SetCharges(NewCharges) end
---@param InTargetLocation FVector
---@param InTargetRotation FRotator
function ASBZPlaceableCharges:Multicast_ReachedTargetLocation(InTargetLocation, InTargetRotation) end


---@class ASBZPlaceableDroppedWeapon : ASBZPlaceableWeapon
---@field WeaponPoint USceneComponent
---@field AttachedWeapon ASBZWeapon
---@field AmmoLoadedLeft int32
---@field AmmoInventoryLeft int32
ASBZPlaceableDroppedWeapon = {}



---@class ASBZPlaceableSensorTool : ASBZPlaceableToolBase
---@field BoxComponent UBoxComponent
---@field SphereComponent USphereComponent
---@field AutoMarkTickInterval float
---@field SensorRange float
---@field MaxMarkableAICount int32
---@field OnSensorAmmoDepleted FSBZPlaceableSensorToolOnSensorAmmoDepleted
ASBZPlaceableSensorTool = {}

function ASBZPlaceableSensorTool:Multicast_SensorAmmoDepleted() end


---@class ASBZPlaceableSentry : ASBZPlaceableCharges
---@field SentryClassToSpawn TSubclassOf<ASBZSentryGun>
ASBZPlaceableSentry = {}



---@class ASBZPlaceableToolBase : ASBZTool
---@field DetonationTickInterval float
---@field DetonationRange float
ASBZPlaceableToolBase = {}

---@param OldAttachParentActor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZPlaceableToolBase:OnParentActorEndPlay(OldAttachParentActor, EndPlayReason) end


---@class ASBZPlaceableTripMine : ASBZPlaceableToolBase
---@field BoxComponent UBoxComponent
---@field ExplosionInstigator AActor
---@field PlaceableTripMineEffectClass TSubclassOf<UGameplayEffect>
---@field PlaceableTripMineExplodedEvent UAkAudioEvent
---@field DetonationEffect UNiagaraSystem
---@field AIExplosionRange float
---@field PlayerExplosionRange float
---@field bExplosionAffectsAIOnly boolean
---@field AdditionalPlayerRange float
---@field AkComponent UAkComponent
---@field PlayerFeedbackCurve FRuntimeFloatCurve
---@field LocalplayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field HurtReactionData FSBZHurtReactionData
ASBZPlaceableTripMine = {}

function ASBZPlaceableTripMine:Server_SetUnarmed() end
function ASBZPlaceableTripMine:Server_SetArmed() end
---@param Result FSBZExplosionResult
function ASBZPlaceableTripMine:Multicast_ReplicateExplosion(Result) end


---@class ASBZPlaceableWeapon : ASBZPlaceableBase
---@field StoredWeaponConfig FSBZEquippableConfig
---@field BaseMesh UStaticMeshComponent
---@field WeaponMarker USBZMarkerDataAsset
---@field bDestroyOnInteraction boolean
ASBZPlaceableWeapon = {}

---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZPlaceableWeapon:OnServerCompleteInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end


---@class ASBZPlaceableWeaponBagItem : ASBZBagItem
---@field StoredWeaponConfig FSBZEquippableConfig
ASBZPlaceableWeaponBagItem = {}



---@class ASBZPlaceableWeaponBox : ASBZPlaceableWeapon
---@field bIsActive boolean
ASBZPlaceableWeaponBox = {}

---@param bActive boolean
function ASBZPlaceableWeaponBox:SetActiveState(bActive) end
---@param InteractableComponent USBZBaseInteractableComponent
---@param bInNewState boolean
function ASBZPlaceableWeaponBox:OnInteractionEnabledStateChange(InteractableComponent, bInNewState) end


---@class ASBZPlayerCameraManager : ASBZBasePlayerCameraManager
---@field PlayerCameraFeedbackComponent USBZPlayerCameraFeedbackComponent
---@field DepthOfFieldFstop float
---@field DepthOfFieldFocalDistance float
---@field DepthOfFieldDepthBlurAmount float
---@field DepthOfFieldDepthBlurRadius float
---@field TopPassDepthOfFieldFstop float
---@field TopPassDepthOfFieldFocalDistance float
---@field TopPassDepthOfFieldDepthBlurAmount float
---@field TopPassDepthOfFieldDepthBlurRadius float
---@field MotionBlurAmount float
---@field MotionBlurMax float
---@field MotionBlurTargetFPS int32
---@field MotionBlurPerObjectSize float
---@field SBZCameraModifierList TArray<USBZPlayerCameraModifier>
---@field ClampCameraModifier USBZClampCameraRotationModifier
---@field LensEffectParent AActor
---@field ActiveCameraViewRestrictions TArray<FSBZCameraViewRestriction>
---@field ActiveCameraViewRestrictionId int32
---@field ForwardTraceResult FHitResult
---@field ForwardTraceLength float
---@field bUseDynFocalDistanceWhenUnequipped boolean
---@field AudioRaycasting USBZAudioRaycasting
ASBZPlayerCameraManager = {}

---@param InOutId int32
function ASBZPlayerCameraManager:UnlockCamera(InOutId) end
---@param ParticleSystem UNiagaraSystem
---@param LifeTime float
---@return UNiagaraComponent
function ASBZPlayerCameraManager:SpawnLensParticleEffect(ParticleSystem, LifeTime) end
---@param InLockedRotation FRotator
function ASBZPlayerCameraManager:SetCameraLockedReferenceRotation(InLockedRotation) end
---@param RestrictionSettings FSBZCameraViewRestriction
function ASBZPlayerCameraManager:RemoveCameraViewRestriction(RestrictionSettings) end
---@param Data FSBZLockCameraData
---@return int32
function ASBZPlayerCameraManager:LockCamera(Data) end
---@return boolean
function ASBZPlayerCameraManager:IsCameraLocked() end
---@param RestrictionSettings FSBZCameraViewRestriction
function ASBZPlayerCameraManager:AddOrUpdateCameraViewRestriction(RestrictionSettings) end


---@class ASBZPlayerCharacter : ASBZCharacter
---@field VisualDetectionMultiplierSlide FRuntimeFloatCurve
---@field VisualDetectionMultiplierSprinting float
---@field VisualDetectionMultiplierCrouched float
---@field VisualDetectionMultiplierStanding float
---@field AlertnessMultiplierSlide FRuntimeFloatCurve
---@field AlertnessMultiplierSprinting float
---@field AlertnessMultiplierCrouched float
---@field AlertnessMultiplierStanding float
---@field ShoutoutComponent USBZShoutoutComponent
---@field CallComment USBZVoiceCommentDataAsset
---@field HelpComment USBZVoiceCommentDataAsset
---@field DownedComment USBZVoiceCommentDataAsset
---@field GetDownComment USBZVoiceCommentDataAsset
---@field ShoutDownTime float
---@field ShoutDownRange float
---@field IntimidationRange float
---@field FPCameraAttachment USBZFirstPersonCameraAttachment
---@field RecoilComponent USBZRecoilComponent
---@field AimAssistComponent USBZAimAssistComponent
---@field CharacterComponent USBZCharacterComponent
---@field Mesh1P USkeletalMeshComponent
---@field Mesh1PBody USkeletalMeshComponent
---@field Mesh1PSuit USBZCustomizableSuitMeshComponent
---@field Mesh1PGloves USkeletalMeshComponent
---@field Interactor USBZPlayerInteractorComponent
---@field DefaultAnimationCollectionFPP USBZPlayerAnimationCollectionFPP
---@field AnimationCollectionFPP USBZPlayerAnimationCollectionFPP
---@field CasingEyeHeight float
---@field SubduedEyeHeight float
---@field DownedEyeHeight float
---@field BleedoutEyeHeight float
---@field SlideEyeHeight float
---@field CarryTiltSpeed float
---@field CarryTiltDegrees float
---@field WhizzbyActorClass TSubclassOf<AActor>
---@field WhizzbyActor AActor
---@field LandedFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field JumpedFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field ArmorDepletedFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field ArmorReplenishedFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field ArmorDamageFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field DodgeDepletedFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field DodgeReplenishedFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field DodgeDamageFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field HealthDamageFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field SubduedDamageFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field DefeatFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field SlideFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field HumanShieldReachSlotFeedBack TSubclassOf<USBZLocalPlayerFeedback>
---@field TraverseFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field RunFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field DesiredAcceleration FVector_NetQuantize
---@field CameraModifiers TArray<TSubclassOf<UCameraModifier>>
---@field RevivedComment USBZVoiceCommentDataAsset
---@field UncuffedComment USBZVoiceCommentDataAsset
---@field StealthMaskOnComment USBZVoiceCommentDataAsset
---@field LoudMaskOnComment USBZVoiceCommentDataAsset
---@field LowHealthComment USBZVoiceCommentDataAsset
---@field LowHealthLimit float
---@field DownedDialog USBZDialogDataAsset
---@field InCustodyDialog USBZDialogDataAsset
---@field BackFromCustodyDialog USBZDialogDataAsset
---@field CuffedDialog USBZDialogDataAsset
---@field TasedDialog USBZDialogDataAsset
---@field SubduedDialog USBZDialogDataAsset
---@field CurrentCarryNetID uint32
---@field HumanShieldInstigatorLockCameraData FSBZLockCameraData
---@field NormalTargetingHumanShieldMagnification float
---@field OnTopTargetingHumanShieldMagnification float
---@field EscortCircleEffect UNiagaraComponent
---@field UnequippedWeaponData USBZBaseWeaponData
---@field FPZiplineMotorClass TSubclassOf<ASBZZiplineMotor>
---@field PlayerAbilitySystem USBZPlayerAbilitySystemComponent
---@field CancelOnDamageTagContainer FGameplayTagContainer
---@field IgnoreMovementTags FGameplayTagContainer
---@field OnTopBaseFOV float
---@field VisualDetectors TArray<USBZAIVisualDetectionComponent>
---@field VisualDetectionData TArray<FSBZDetectionData>
---@field DefeatState EPD3DefeatState
---@field OldDefeatState EPD3DefeatState
---@field DefeatTime float
---@field ReviveMarker USBZMarkerDataAsset
---@field TasedMarker USBZMarkerDataAsset
---@field CuffedMarker USBZMarkerDataAsset
---@field SubduedMarker USBZMarkerDataAsset
---@field ReviveInvulnerableDuration float
---@field RemoveReviveInvulnerableTagContainer FGameplayTagContainer
---@field PlayerMarkerAsset USBZMarkerDataAsset
---@field PlayerMarkerOffset FVector
---@field PlayerMarkerSocketName FName
---@field DownedOutline USBZOutlineAsset
---@field SBZPlayerState ASBZPlayerState
---@field OldSBZPlayerState ASBZPlayerState
---@field PlayerAttributeSet USBZPlayerAttributeSet
---@field TiltCameraModifier USBZTiltCameraModifier
---@field PitchLookCameraModifier USBZPitchLookCameraModifier
---@field HeightTransitionCameraModifier USBZHeightTransitionCameraModifier
---@field FloorHeightCameraModifier USBZFloorHeightCameraSmoother
---@field SubduedTiltSpeed float
---@field SubduedTiltDegrees float
---@field DownedTiltSpeed float
---@field DownedTiltDegrees float
---@field BleedOutTiltSpeed float
---@field BleedOutTiltDegrees float
---@field SubduedPitchLookSpeed float
---@field SubduedPitchDegrees float
---@field BleedOutPitchLookSpeed float
---@field BleedOutPitchDegrees float
---@field ReviveTiltSpeed float
---@field RequestOverkillWeaponAnimationTime float
---@field FallDamageCurve FRuntimeFloatCurve
---@field MagnificationInputCurve FRuntimeFloatCurve
---@field FallingStartHeight float
---@field bHasTriggeredCoupDeGraceSkill boolean
---@field CurrentFollower AActor
---@field MiniGameDetectionMultiplier float
---@field CuttingToolDetectionMultiplier float
---@field GadgetDetectionMultiplier float
---@field bIsGadgetPlacingIllegal boolean
---@field bIsCurrentNavLocationValid boolean
---@field NavLocationSaveInterval float
---@field ModifiedToolDataArray TArray<USBZToolData>
---@field PrimaryTool ASBZTool
---@field CuttingTool ASBZCuttingTool
---@field CurrentReplicatedPlaceableTool ASBZTool
---@field SlideFeedbackID int32
---@field RunFeedbackID int32
---@field LastAttackerData FSBZLastAttackerData
---@field TasedData USBZTasedData
---@field PlayerMicroCameraOffset FVector
---@field PlayerMicroCameraSocketName FName
---@field MiniGameComponent USBZMiniGameComponent
---@field IntimidateCiviliansWithinRangeArray TArray<TWeakObjectPtr<ASBZAICharacter>>
---@field IntimidateCiviliansInterval FFloatInterval
---@field bIsLocalKillingHumanShield boolean
---@field HumanShieldStartTime float
---@field DefeatControlsReference FSBZControlsReference
---@field DefeatControlsReferenceID int32
---@field MinLandingSlideWalkToRunLerp float
ASBZPlayerCharacter = {}

---@param CameraFeedbackID int32
---@param Intensity float
---@return boolean
function ASBZPlayerCharacter:SetCameraFeedbackIntensity(CameraFeedbackID, Intensity) end
function ASBZPlayerCharacter:ServerStartEquipOverkillWeapon() end
---@param bInPhoneInteractionFlow boolean
function ASBZPlayerCharacter:Server_SetPhoneInteractionFlow(bInPhoneInteractionFlow) end
---@param ID uint32
---@param bIsSimulatedPickup boolean
function ASBZPlayerCharacter:Server_PickupAmmo(ID, bIsSimulatedPickup) end
function ASBZPlayerCharacter:Server_OnMaskInputAbilityComplete() end
---@param InHackable UObject
function ASBZPlayerCharacter:Server_HackingSyncSucceeded(InHackable) end
---@param InHackable UObject
function ASBZPlayerCharacter:Server_HackingSyncStarted(InHackable) end
---@param InHackable UObject
---@param bInSyncedOnEquipped boolean
function ASBZPlayerCharacter:Server_HackingSyncCompleted(InHackable, bInSyncedOnEquipped) end
---@param InHackable UObject
---@param bInIsSynchedAlready boolean
function ASBZPlayerCharacter:Server_HackingSyncAborted(InHackable, bInIsSynchedAlready) end
---@param RemoveID int32
---@return boolean
function ASBZPlayerCharacter:RemoveCameraFeedback(RemoveID) end
function ASBZPlayerCharacter:OnUpdateDefeatTime() end
---@param InPlaceableIndex int32
function ASBZPlayerCharacter:OnUndoToolPlaceableAmmoChange(InPlaceableIndex) end
---@param InPlaceableIndex int32
---@param InCost int32
function ASBZPlayerCharacter:OnUndoToolAmmoChange(InPlaceableIndex, InCost) end
---@param InThrowableIndex int32
function ASBZPlayerCharacter:OnUndoThrowableAmmoChange(InThrowableIndex) end
---@param InPlaceableIndex int32
function ASBZPlayerCharacter:OnUndoPlaceableAmmoChange(InPlaceableIndex) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZPlayerCharacter:OnServerStartInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZPlayerCharacter:OnServerEndInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZPlayerCharacter:OnServerCompleteInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
function ASBZPlayerCharacter:OnRep_DefeatTime() end
---@param DestroyedActor AActor
function ASBZPlayerCharacter:OnPlayerStateDestroyed(DestroyedActor) end
---@param OldState EPD3MiniGameState
---@param NewState EPD3MiniGameState
---@param bInIsLocallyControlled boolean
function ASBZPlayerCharacter:OnOwnMiniGameStateChanged(OldState, NewState, bInIsLocallyControlled) end
function ASBZPlayerCharacter:OnDefeatTimerDone() end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZPlayerCharacter:OnAckCompleteInteraction(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InDefeatTime float
function ASBZPlayerCharacter:Multicast_SetDefeatTime(InDefeatTime) end
---@param EndTime float
function ASBZPlayerCharacter:Multicast_ReviveInteractionStarted(EndTime) end
---@param InDefeatTime float
function ASBZPlayerCharacter:Multicast_ResumeDefeatTime(InDefeatTime) end
function ASBZPlayerCharacter:Multicast_PlayRequestOverkillAnimation() end
function ASBZPlayerCharacter:Multicast_PauseDefeatTime() end
---@param InHackable UObject
function ASBZPlayerCharacter:Multicast_HackingSyncSucceeded(InHackable) end
---@param InHackable UObject
function ASBZPlayerCharacter:Multicast_HackingSyncStarted(InHackable) end
---@param InHackable UObject
---@param bInSyncedOnEquipped boolean
function ASBZPlayerCharacter:Multicast_HackingSyncCompleted(InHackable, bInSyncedOnEquipped) end
---@param InHackable UObject
---@param bInIsSynchedAlready boolean
function ASBZPlayerCharacter:Multicast_HackingSyncAborted(InHackable, bInIsSynchedAlready) end
---@param bWasCompleted boolean
function ASBZPlayerCharacter:Multicast_AbortPhoneInteraction(bWasCompleted) end
---@return boolean
function ASBZPlayerCharacter:IsSeenByAI() end
---@param WorldContextObject UObject
---@param Health float
---@param MaxHealth float
---@return boolean
function ASBZPlayerCharacter:GetHealthAttributes(WorldContextObject, Health, MaxHealth) end
---@return TArray<FSBZDetectionData>
function ASBZPlayerCharacter:GetDetectionData() end
---@param WorldContextObject UObject
---@param Armor float
---@param MaxArmor float
---@return boolean
function ASBZPlayerCharacter:GetArmorAttributes(WorldContextObject, Armor, MaxArmor) end
---@param RemoveID int32
---@param bIsAutoRemoved boolean
---@return boolean
function ASBZPlayerCharacter:FadeOutCameraFeedback(RemoveID, bIsAutoRemoved) end
---@param Location FVector
---@param Yaw float
function ASBZPlayerCharacter:Client_Teleport(Location, Yaw) end
---@param bObserved boolean
function ASBZPlayerCharacter:Client_SetObserved(bObserved) end
---@param EscortCircleHolder AActor
function ASBZPlayerCharacter:Client_SetEscortCircleAttachment(EscortCircleHolder) end
---@param bActive boolean
---@param EscortInstigator AActor
function ASBZPlayerCharacter:Client_SetEscortCircleActive(bActive, EscortInstigator) end
---@param Index uint8
---@param Detector AActor
function ASBZPlayerCharacter:Client_SetDetector(Index, Detector) end
---@param PackedData uint32
function ASBZPlayerCharacter:Client_SetDetectionData(PackedData) end
---@param ID uint32
function ASBZPlayerCharacter:Client_PickupAmmo(ID) end
---@param Parameters FSBZLocalPlayerFeedbackParameters
---@return int32
function ASBZPlayerCharacter:ApplyCameraFeedback(Parameters) end


---@class ASBZPlayerController : ASBZPlayerControllerBase
---@field Faction FSBZFactionIdHelper
---@field DefeatCameraFeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
---@field MinDefeatCameraFeedbackIntensity float
---@field TasedCameraFeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
---@field SubduedCameraFeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
---@field HealthDamageCameraFeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
---@field HealthDamageCameraFeedbackThreshold float
---@field TagFeedbackClassMap TMap<FGameplayTag, TSubclassOf<USBZLocalPlayerFeedback>>
---@field TagFeedbackIDMap TMap<FGameplayTag, int32>
---@field FadedOutTagFeedbackIDMap TMap<FGameplayTag, int32>
---@field ViewTargetCameraFeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
---@field DestroyedViewTargetCameraFeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
---@field ChangedViewTargetCameraFeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
---@field ViewTargetCollection TScriptInterface<ISBZViewTargetCollectionInterface>
---@field CurrentSpectateTargetPlayerID int32
---@field InteractionLockCameraData FSBZLockCameraData
---@field AppliedDefeatState EPD3DefeatState
ASBZPlayerController = {}

---@param InViewTargetCollection TScriptInterface<ISBZViewTargetCollectionInterface>
---@param Offset int32
function ASBZPlayerController:SetViewTargetCollection(InViewTargetCollection, Offset) end
---@param CameraFeedbackID int32
---@param Intensity float
---@return boolean
function ASBZPlayerController:SetCameraFeedbackIntensity(CameraFeedbackID, Intensity) end
function ASBZPlayerController:Server_UnsetViewTargetCollection() end
---@param InViewTargetCollectionObject UObject
---@param InViewTargetIndex int32
function ASBZPlayerController:Server_SetViewTargetCollection(InViewTargetCollectionObject, InViewTargetIndex) end
---@param InViewTargetIndex int32
function ASBZPlayerController:Server_SetCurrentViewTargetIndex(InViewTargetIndex) end
---@param InID int32
function ASBZPlayerController:Server_SetCurrentSpectateTargetPlayerID(InID) end
---@param PlayerID FUniqueNetIdRepl
function ASBZPlayerController:Server_RestartRequested(PlayerID) end
function ASBZPlayerController:Server_RestartLevel() end
---@param Location FVector
---@param Yaw float
function ASBZPlayerController:Server_DebugTeleportTo(Location, Yaw) end
---@param Actor AActor
---@param Montage UAnimMontage
function ASBZPlayerController:Server_DebugPlayMontage(Actor, Montage) end
---@param CameraFeedbackID int32
---@return boolean
function ASBZPlayerController:RemoveCameraFeedback(CameraFeedbackID) end
---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZPlayerController:OnPlayerCameraManagerEndPlay(Actor, EndPlayReason) end
---@return TScriptInterface<ISBZViewTargetCollectionInterface>
function ASBZPlayerController:GetViewTargetCollection() end
---@param CameraFeedbackID int32
---@param bIsAutoRemoved boolean
---@return boolean
function ASBZPlayerController:FadeOutCameraFeedback(CameraFeedbackID, bIsAutoRemoved) end
function ASBZPlayerController:Client_UnsetViewTargetCollection() end
---@param InViewTargetCollectionObject UObject
---@param InViewTargetIndex int32
function ASBZPlayerController:Client_SetViewTargetCollection(InViewTargetCollectionObject, InViewTargetIndex) end
function ASBZPlayerController:Client_RestartTimeExpired() end
---@param SecondsRemaining float
function ASBZPlayerController:Client_RestartInitiate(SecondsRemaining) end
---@param PlayerID FUniqueNetIdRepl
function ASBZPlayerController:Client_RestartAccepted(PlayerID) end
---@param Parameters FSBZLocalPlayerFeedbackParameters
---@return int32
function ASBZPlayerController:ApplyCameraFeedback(Parameters) end


---@class ASBZPlayerControllerBase : APlayerController
---@field SBZPlayerState ASBZPlayerState
ASBZPlayerControllerBase = {}

---@param Loadout FPD3PlayerLoadout
function ASBZPlayerControllerBase:Server_SetLoadout(Loadout) end
---@param InAccelByteUserId FString
---@param InSessionId FString
function ASBZPlayerControllerBase:Server_SetAccelByteSessionInformation(InAccelByteUserId, InSessionId) end


---@class ASBZPlayerControllerMainMenu : ASBZPlayerControllerBase
ASBZPlayerControllerMainMenu = {}


---@class ASBZPlayerEscapeVolume : ASBZPlayerTriggerVolume
---@field OnEscapeTimerDone FSBZPlayerEscapeVolumeOnEscapeTimerDone
---@field EscapeTimeDuration float
---@field bDisableWhenEscapeTimeIsComplete boolean
ASBZPlayerEscapeVolume = {}



---@class ASBZPlayerMicroCamera : AActor
---@field SkeletalMesh USBZToolSkeletalMeshComponent
---@field ReplicatedCameraTargetRotation FVector_NetQuantizeNormal
---@field ReplicatedCameraCurrentRotation FVector_NetQuantizeNormal
---@field YawLimit FFloatInterval
---@field PitchLimit FFloatInterval
---@field RotationSpeed float
---@field InstigatorCharacter ASBZPlayerCharacter
---@field ViewTargetPlayerStateIdArray TArray<int32>
ASBZPlayerMicroCamera = {}

---@param OldViewTargetPlayerStateIdArray TArray<int32>
function ASBZPlayerMicroCamera:OnRep_ViewTargetPlayerStateIdArray(OldViewTargetPlayerStateIdArray) end
function ASBZPlayerMicroCamera:OnRep_CameraTargetRotation() end
function ASBZPlayerMicroCamera:OnRep_CameraCurrentRotation() end
function ASBZPlayerMicroCamera:OnPlayerStateReplicated() end
---@param PlayerId int32
function ASBZPlayerMicroCamera:Multicast_EndViewTarget(PlayerId) end
---@param PlayerId int32
function ASBZPlayerMicroCamera:Multicast_BecomeViewTarget(PlayerId) end
---@param bIsViewTarget boolean
function ASBZPlayerMicroCamera:BP_OnViewTargetChanged(bIsViewTarget) end


---@class ASBZPlayerStartGroup : AActor
---@field PlayerStarts TArray<APlayerStart>
---@field OnSpawnGroupChosen FSBZPlayerStartGroupOnSpawnGroupChosen
---@field Weight float
ASBZPlayerStartGroup = {}



---@class ASBZPlayerState : APlayerState
---@field ReadyStatus EPlayerReadyStatusValue
---@field InfamyLevel int32
---@field Platform ESBZPlatform
---@field FirstPartyPlatform ESBZFirstPartyPlatform
---@field AccelByteDisplayName FString
---@field AccelByteUserName FString
---@field AccelByteUserId FString
---@field AccelByteSessionId FString
---@field ServerRegion FString
---@field ProgressionSaveGame USBZProgressionSaveGame
---@field OnInfamyLevelChangedDynamic FSBZPlayerStateOnInfamyLevelChangedDynamic
---@field AttributeSet USBZPlayerAttributeSet
---@field AbilitySystem USBZPlayerAbilitySystemComponent
---@field UICharacterEffects USBZUICharacterEffectComponent
---@field PlayerSlotId uint8
---@field PlayerColors TArray<FLinearColor>
---@field WeaponTags TArray<FGameplayTagContainer>
---@field EquippablePings TArray<USBZPingCallAsset>
---@field SkillDataLookupMap TMap<FGameplayTag, USBZSkillData>
---@field SkillTagSet TSet<FGameplayTag>
---@field ReplicatedStartReplenishDodgeServerTime float
---@field StartReplenishDodgeServerTime float
---@field StartReplenishDodgeValue float
---@field bIsMaskOn boolean
---@field Loadout FPD3PlayerLoadout
---@field OldLoadout FPD3PlayerLoadout
---@field bIsLocallyControlled boolean
---@field EquipStateAndIndex uint8
---@field ServerReloadState FSBZReplicatedReloadState
---@field CharacterClass TSubclassOf<ASBZPlayerCharacter>
---@field CustodyCharacterClass FSoftObjectPath
---@field bIsValidLoadout boolean
---@field DefeatState EPD3DefeatState
---@field MiniGameState EPD3MiniGameState
---@field ResultData FSBZPlayerEndMissionResultData
---@field bIsNetInitialized boolean
---@field bIsAttributeSetInitialized boolean
---@field bIsAttributeSetInitializedOnce boolean
---@field bIsPendingReconnectData boolean
---@field AmmoPickupLookupMap TMap<uint32, FSBZAmmoPickupLookup>
---@field bIsLoadoutLoaded boolean
---@field bIsApplyingLoadout boolean
---@field LastLoadedAssetRefArray TArray<FSoftObjectPath>
---@field CurrentCharacterData USBZPlayerCharacterData
---@field PlaceableToolsArray TArray<ASBZTool>
---@field TagCounterMap TMap<FGameplayTag, int32>
---@field PlayerCharacterArray TArray<ASBZPlayerCharacter>
---@field AppliedLoadoutEffectArray TArray<FActiveGameplayEffectHandle>
---@field AppliedCrewSkillEffectMap TMap<USBZSkillData, FSBZEffectHandleArray>
---@field PlayerMicroCamera ASBZPlayerMicroCamera
---@field ServerGrenadeProjectileArray TArray<ASBZGrenadeProjectile>
---@field bIsSaveLoadoutPending boolean
---@field SpectateDurationArray float
---@field MinimumSpectateDuration float
---@field SpectateTime float
---@field ReducedCustodyTime float
---@field SpectateDurationModification float
---@field ECMGUIEffectData USBZCharacterEffectDataAsset
---@field SkillTankDisengageActivatedTimeSeconds float
---@field RuntimeActorArray TArray<AActor>
---@field SurrenderedEnemy ASBZAICharacter
---@field EnforcerSkillKillCount int32
---@field EnforcerSkillLastKillTime float
---@field EnforcerAcedSkillKillCount int32
---@field SelectedCharacter FSoftObjectPath
---@field OverkillWeaponProgress float
---@field OverkillWeaponProgressKillIncrease float
---@field OverkillWeaponProgressHeadshotAdditionalIncrease float
---@field OverkillWeaponProgressObjectiveIncrease float
---@field OverkillWeaponProgressSubObjectiveIncrease float
---@field bIsLastArrestedByGuard boolean
---@field bIsTargeting boolean
ASBZPlayerState = {}

function ASBZPlayerState:Server_StopTargeting() end
function ASBZPlayerState:Server_StartTargeting() end
---@param InMiniGameState EPD3MiniGameState
function ASBZPlayerState:Server_SetMiniGameState(InMiniGameState) end
---@param InEquipStateAndIndex uint8
function ASBZPlayerState:Server_SetEquipStateAndIndex(InEquipStateAndIndex) end
---@param Data FSBZDropPlaceableEquippableData
function ASBZPlayerState:Server_SetDropPlaceableEquippableData(Data) end
---@param Command FString
---@param InstigatorContextText FString
---@param bIsLocallyControlledOnly boolean
---@param bIsExecutedOnAll boolean
---@param PlayerIndex int32
function ASBZPlayerState:Server_DebugConsoleCommand(Command, InstigatorContextText, bIsLocallyControlledOnly, bIsExecutedOnAll, PlayerIndex) end
---@param InLoadout FPD3PlayerLoadout
function ASBZPlayerState:Server_CheatSetLoadout(InLoadout) end
---@param OldDuration float
function ASBZPlayerState:OnSpectateDurationModificationChanged(OldDuration) end
---@param InRuntimeActor AActor
function ASBZPlayerState:OnRuntimeSecureLoopExpired(InRuntimeActor) end
---@param InRuntimeActor AActor
function ASBZPlayerState:OnRuntimeRoutedPingExpired(InRuntimeActor) end
---@param InRuntimeActor AActor
function ASBZPlayerState:OnRuntimeActorDestroyed(InRuntimeActor) end
---@param OldSpectateTime float
function ASBZPlayerState:OnRep_SpectateTime(OldSpectateTime) end
function ASBZPlayerState:OnRep_ServerReloadState() end
function ASBZPlayerState:OnRep_ReplicatedStartReplenishDodgeServerTime() end
function ASBZPlayerState:OnRep_ReadyStatus() end
function ASBZPlayerState:OnRep_Platform() end
function ASBZPlayerState:OnRep_OverkillWeaponProgress() end
---@param OldMiniGameState EPD3MiniGameState
function ASBZPlayerState:OnRep_MiniGameState(OldMiniGameState) end
---@param InOldLoadout FPD3PlayerLoadout
function ASBZPlayerState:OnRep_Loadout(InOldLoadout) end
function ASBZPlayerState:OnRep_IsTargeting() end
function ASBZPlayerState:OnRep_IsMaskOn() end
function ASBZPlayerState:OnRep_InfamyLevel() end
function ASBZPlayerState:OnRep_EquipStateAndIndex() end
---@param OldDefeatState EPD3DefeatState
function ASBZPlayerState:OnRep_DefeatState(OldDefeatState) end
function ASBZPlayerState:OnRep_CustodyCharacterClass() end
function ASBZPlayerState:OnRep_AccelByteUserName() end
function ASBZPlayerState:OnRep_AccelByteUserId() end
function ASBZPlayerState:OnRep_AccelByteDisplayName() end
---@param NewCount int32
---@param OldCount int32
---@param AddedTime float
function ASBZPlayerState:OnECMCountChanged(NewCount, OldCount, AddedTime) end
function ASBZPlayerState:Multicast_StopTargeting() end
function ASBZPlayerState:Multicast_StartTargeting() end
---@param InStartReplenishDodgeServerTime float
function ASBZPlayerState:Multicast_StartDodgeReplenish(InStartReplenishDodgeServerTime) end
---@param Time float
function ASBZPlayerState:Multicast_SetSpectateTime(Time) end
---@param Duration float
function ASBZPlayerState:Multicast_SetSpectateDurationModification(Duration) end
---@param InServerReloadState FSBZReplicatedReloadState
function ASBZPlayerState:Multicast_SetServerReloadState(InServerReloadState) end
---@param InPlayerId int32
function ASBZPlayerState:Multicast_SetPlayerId(InPlayerId) end
---@param InMiniGameState EPD3MiniGameState
---@param InWinningParticipant ASBZPlayerState
function ASBZPlayerState:Multicast_SetMiniGameState(InMiniGameState, InWinningParticipant) end
---@param InLoadout FPD3PlayerLoadout
function ASBZPlayerState:Multicast_SetLoadout(InLoadout) end
---@param bInIsLastArrestedByGuard boolean
function ASBZPlayerState:Multicast_SetLastArrestedByGuard(bInIsLastArrestedByGuard) end
---@param InEquipStateAndIndex uint8
function ASBZPlayerState:Multicast_SetEquipStateAndIndex(InEquipStateAndIndex) end
---@param InDefeatState EPD3DefeatState
function ASBZPlayerState:Multicast_SetDefeatState(InDefeatState) end
---@param InCharacterClass FSoftObjectPath
function ASBZPlayerState:Multicast_SetCustodyCharacterClass(InCharacterClass) end
---@param InAccelByteUserName FString
function ASBZPlayerState:Multicast_SetAccelByteUserName(InAccelByteUserName) end
---@param InAccelByteUserId FString
function ASBZPlayerState:Multicast_SetAccelByteUserId(InAccelByteUserId) end
---@param Command FString
---@param InstigatorContextText FString
---@param bIsLocallyControlledOnly boolean
---@param PlayerIndex int32
function ASBZPlayerState:Multicast_DebugConsoleCommand(Command, InstigatorContextText, bIsLocallyControlledOnly, PlayerIndex) end
---@return FText
function ASBZPlayerState:GetPlayerDisplayName() end
---@return ESBZPlatform
function ASBZPlayerState:GetPlatform() end
---@return int32
function ASBZPlayerState:GetInfamyLevel() end
---@return UPaperSprite
function ASBZPlayerState:GetCharacterIcon() end
---@return FString
function ASBZPlayerState:GetAccelBytePlayerName() end
---@param ItemToEquip USBZToolData
function ASBZPlayerState:EquipToolToLoadout(ItemToEquip) end
---@param ItemToEquip USBZThrowableData
function ASBZPlayerState:EquipThrowableToLoadout(ItemToEquip) end
---@param ItemToEquip USBZPlaceableData
function ASBZPlayerState:EquipPlaceableToLoadout(ItemToEquip) end
---@param ItemToEquip USBZMaskData
function ASBZPlayerState:EquipMaskToLoadout(ItemToEquip) end
---@param EquippableToEquip USBZEquippableData
---@param Index int32
function ASBZPlayerState:EquipEquippableToLoadoutAt(EquippableToEquip, Index) end
---@param ItemToEquip USBZToolCuttingData
function ASBZPlayerState:EquipCuttingToolToLoadout(ItemToEquip) end
---@param InSurrenderedEnemy ASBZAICharacter
function ASBZPlayerState:Client_SetSurrenderedEnemy(InSurrenderedEnemy) end
---@param InReducedCustodyTime float
function ASBZPlayerState:Client_SetReducedCustodyTime(InReducedCustodyTime) end
function ASBZPlayerState:Client_SendPlayerReloadProgressionSaveGame() end
---@param InOverkillWeaponProgress float
function ASBZPlayerState:Client_SendOverkillWeaponProgress(InOverkillWeaponProgress) end
function ASBZPlayerState:Client_OnSaveLoadoutPending() end
---@param bInHasInifiniteAmmo boolean
function ASBZPlayerState:Client_CheatSetInfiniteAmmo(bInHasInifiniteAmmo) end


---@class ASBZPlayerTriggerVolume : ATriggerVolume
---@field PlayerPawnParentClass TSubclassOf<APawn>
---@field bShouldStartEnabled boolean
---@field bDisableWhenPlayerBeginsOverlapping boolean
---@field bDisableWhenAllPlayersAreInside boolean
---@field PlayerPawnBeginOverlapping FSBZPlayerTriggerVolumePlayerPawnBeginOverlapping
---@field PlayerPawnEndOverlapping FSBZPlayerTriggerVolumePlayerPawnEndOverlapping
---@field OverlappingAllPlayerPawnsChanged FSBZPlayerTriggerVolumeOverlappingAllPlayerPawnsChanged
ASBZPlayerTriggerVolume = {}

---@param bEnabled boolean
function ASBZPlayerTriggerVolume:SetVolumeEnabled(bEnabled) end
---@return int32
function ASBZPlayerTriggerVolume:GetCurrentNumOverlappingPlayers() end
---@return boolean
function ASBZPlayerTriggerVolume:AreAllPlayerPawnsInside() end


---@class ASBZPlayerTriggeredVoiceVolume : ASBZPlayerTriggerVolume
---@field Dialog USBZDialogDataAsset
---@field Comment USBZVoiceCommentDataAsset
---@field DialogEnded FSBZPlayerTriggeredVoiceVolumeDialogEnded
ASBZPlayerTriggeredVoiceVolume = {}

---@param Reason ESBZDialogEndedReason
function ASBZPlayerTriggeredVoiceVolume:HandleDialogEnded(Reason) end


---@class ASBZPocketDrill : ASBZBreachingEquipmentBase
---@field WidgetComponent FSBZComponentSelector
---@field MeshComponent FSBZComponentSelector
---@field ActivationAreaComponent FSBZComponentSelector
---@field MotorMeshComponent FSBZComponentSelector
---@field DisassembleMarkerAsset USBZMarkerDataAsset
---@field bPauseProgressWhileAdjustingIsNeeded boolean
---@field NumberOfNeededAdjusts int32
---@field SliceOffset float
---@field AdjustTimeSeconds float
---@field bStartActive boolean
---@field UnjamInteraction USBZInteractableComponent
---@field AdjustInteraction USBZInteractableComponent
---@field ActivationInteraction USBZInteractableComponent
---@field AlarmNotificationAsset USBZActionNotificationAsset
---@field MotorEndingXPosition float
---@field MotorStartingXPosition float
---@field AdjustsReached int32
---@field DrillMesh UStaticMeshComponent
---@field bIsEnabled boolean
---@field ProgressPerSecond float
ASBZPocketDrill = {}

---@param bIsActive boolean
function ASBZPocketDrill:SetActive(bIsActive) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZPocketDrill:OnUnjamInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@param bOldValue boolean
function ASBZPocketDrill:OnRep_IsEnabled(bOldValue) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZPocketDrill:OnAdjustInteractionStarted(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZPocketDrill:OnAdjustInteractionAborted(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZPocketDrill:OnAdjustInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZPocketDrill:OnActivationComplete(Interactable, Interactor, bInIsLocallyControlled) end
---@param bInIsEnabled boolean
function ASBZPocketDrill:Multicast_SetEnabled(bInIsEnabled) end
function ASBZPocketDrill:Multicast_ReduceDuration() end


---@class ASBZRandomLevelEventDistributor : AInfo
---@field OnIndexesComplete FSBZRandomLevelEventDistributorOnIndexesComplete
---@field TextArray TArray<FText>
---@field CompletedText FText
---@field HackableInfoActorArray TArray<ASBZHackableInfoActor>
---@field HackableInfoActorCollectionArray TArray<FSBZHackableInfoActorCollection>
---@field Seed int32
---@field ShuffledIndexArray TArray<int32>
---@field EventIndexMap TMap<int32, FSBZEventIndexes>
ASBZRandomLevelEventDistributor = {}

---@param EventIndex int32
function ASBZRandomLevelEventDistributor:OnHackComplete(EventIndex) end


---@class ASBZRandomizedRoom : AActor
---@field LevelName FString
---@field RandomizedRoomPreview FSoftObjectPath
---@field ExpectedRoomSize FVector
---@field ReloadAfterSave boolean
---@field PreviewActors TArray<AActor>
ASBZRandomizedRoom = {}



---@class ASBZRangedProjectileWeapon : ASBZRangedWeapon
ASBZRangedProjectileWeapon = {}


---@class ASBZRangedWeapon : ASBZWeapon
---@field FireEffect UNiagaraSystem
---@field FireEmitterMesh UStaticMesh
---@field FireEffectSocket FName
---@field FireEffectComponent UNiagaraComponent
---@field ShellEffect UNiagaraSystem
---@field ShellEffectSocket FName
---@field bIsRecoilShellEffect boolean
---@field ShellEffectComponent UNiagaraComponent
---@field TraceEffect UNiagaraSystem
---@field TraceEffectLength float
---@field TraceEffectComponentArray TArray<UNiagaraComponent>
---@field ShotsBeforeAutoFire int32
---@field SingleFireEvent UAkAudioEvent
---@field AutoFireStartEvent UAkAudioEvent
---@field AutoFireStopEvent UAkAudioEvent
---@field FPEnterTargetingEvent UAkAudioEvent
---@field FPExitTargetingEvent UAkAudioEvent
---@field DryFireEvent UAkAudioEvent
---@field AmmoInMagazineRTPC FString
ASBZRangedWeapon = {}



---@class ASBZRappellingRope : ASBZCosmeticProp
---@field RappellingRopeComponent USBZRappellingRopeComponent
---@field RappellingRopeData USBZRappellingRopeData
ASBZRappellingRope = {}



---@class ASBZReplayGameMode : AGameModeBase
ASBZReplayGameMode = {}


---@class ASBZReplayPlayerController : ASBZPlayerController
---@field ReplayManager USBZReplayManager
---@field ReplayWidget USBZReplayBaseWidget
ASBZReplayPlayerController = {}

---@return USBZReplayManager
function ASBZReplayPlayerController:GetReplayManager() end


---@class ASBZReplayPlayerState : ASBZPlayerState
ASBZReplayPlayerState = {}


---@class ASBZReplaySpectatorPawn : ASBZGameSpectatorPawn
---@field SpectatorView ESBZReplaySpectatorView
ASBZReplaySpectatorPawn = {}



---@class ASBZReplicatedBinaryStateActor : AActor
---@field bState boolean
---@field bClientDelayStateFromServer boolean
---@field ClientStateDelay float
ASBZReplicatedBinaryStateActor = {}

---@param bNewState boolean
---@param bDoCosmetics boolean
function ASBZReplicatedBinaryStateActor:SetState(bNewState, bDoCosmetics) end
---@param bNewState boolean
---@param bDoCosmetics boolean
function ASBZReplicatedBinaryStateActor:SetLocalState(bNewState, bDoCosmetics) end
---@param bStateToChangeTo boolean
---@param bDoCosmetics boolean
function ASBZReplicatedBinaryStateActor:OnStateChanged(bStateToChangeTo, bDoCosmetics) end
---@param bOldState boolean
function ASBZReplicatedBinaryStateActor:OnRep_State(bOldState) end
---@param bNewState boolean
function ASBZReplicatedBinaryStateActor:Multicast_SetState(bNewState) end


---@class ASBZReplicatedIntStateActor : AActor
---@field State int32
---@field bClientDelayStateFromServer boolean
---@field ClientStateDelay float
ASBZReplicatedIntStateActor = {}

---@param NewState int32
---@param bDoCosmetics boolean
function ASBZReplicatedIntStateActor:SetState(NewState, bDoCosmetics) end
---@param NewState int32
---@param bDoCosmetics boolean
function ASBZReplicatedIntStateActor:SetLocalState(NewState, bDoCosmetics) end
---@param OldState int32
---@param NewState int32
---@param bDoCosmetics boolean
function ASBZReplicatedIntStateActor:OnStateChanged(OldState, NewState, bDoCosmetics) end
---@param OldState int32
function ASBZReplicatedIntStateActor:OnRep_State(OldState) end
---@param NewState int32
function ASBZReplicatedIntStateActor:Multicast_SetState(NewState) end
---@param bDoCosmetics boolean
function ASBZReplicatedIntStateActor:IncreaseState(bDoCosmetics) end
---@param bDoCosmetics boolean
function ASBZReplicatedIntStateActor:DecreaseState(bDoCosmetics) end


---@class ASBZRoomConnectorVolume : ATriggerVolume
---@field bWantsAIBreach boolean
---@field RoomA ASBZRoomVolume
---@field RoomB ASBZRoomVolume
---@field Gate ASBZGate
---@field ConnectorLocation FVector
ASBZRoomConnectorVolume = {}



---@class ASBZRoomPathTest : AActor
---@field StartPosition FVector
---@field EndPosition FVector
ASBZRoomPathTest = {}



---@class ASBZRoomVolume : ATriggerVolume
---@field Priority int32
---@field RoomType ESBZRoomType
---@field RoomName FText
---@field RoomConnections TArray<TScriptInterface<ISBZRoomConnectorInterface>>
---@field Label ESBZRoomLabel
---@field CoverPoints TArray<ASBZCoverPoint>
---@field SearchableCovers TArray<ASBZCoverPoint>
---@field ActorsInRoom TArray<AActor>
---@field AIObjectivesInRoom TArray<USBZAIObjectiveComponent>
ASBZRoomVolume = {}

---@param InRoomType ESBZRoomType
function ASBZRoomVolume:SetRoomType(InRoomType) end
---@param InRoomName FText
function ASBZRoomVolume:SetRoomName(InRoomName) end
---@return ESBZRoomType
function ASBZRoomVolume:GetRoomType() end
---@return FText
function ASBZRoomVolume:GetRoomName() end


---@class ASBZSabotagableVehicle : ASBZWheeledVehicle
---@field OnVehicleSabotageChanged FSBZSabotagableVehicleOnVehicleSabotageChanged
---@field OnVehicleEscortChanged FSBZSabotagableVehicleOnVehicleEscortChanged
---@field SabotagePointClass TSubclassOf<ASBZSabotagePoint>
---@field MovingNavModifier USBZPredefinedBoxNavModifierComponent
---@field SabotageAreaOffset FTransform
---@field SabotagePointInstance ASBZSabotagePoint
---@field EscortCapsule UCapsuleComponent
---@field SpeedPerPlayer float
---@field PlayersOverlapping int32
---@field bEscortModeEnabled boolean
---@field bStartWithEscortModeEnabled boolean
---@field EscortSizePreplanningTag FGameplayTag
---@field EscortCapsulePreplanningRadius float
---@field EscortCapsulePreplanningHalfHeight float
ASBZSabotagableVehicle = {}

function ASBZSabotagableVehicle:UpdateSabotageVehicle() end
function ASBZSabotagableVehicle:SpawnSabotagePoint() end
---@param bEnabled boolean
function ASBZSabotagableVehicle:SetEscortModeEnabled(bEnabled) end
function ASBZSabotagableVehicle:OnStopped() end
function ASBZSabotagableVehicle:OnStartedFollowingSpline() end
---@param bWasSabotaged boolean
function ASBZSabotagableVehicle:OnSabotaged(bWasSabotaged) end
function ASBZSabotagableVehicle:OnRep_EscortModeEnabled() end
function ASBZSabotagableVehicle:OnPathEnded() end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function ASBZSabotagableVehicle:OnEscortCapsuleEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZSabotagableVehicle:OnEscortCapsuleBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param bEnabled boolean
function ASBZSabotagableVehicle:Multicast_SetEscortModeEnabled(bEnabled) end
---@param PlayersEscorting int32
function ASBZSabotagableVehicle:BP_OnPlayersInEscortChanged(PlayersEscorting) end
function ASBZSabotagableVehicle:BP_OnEscortSizePreplanningApplied() end
---@param bEnabled boolean
---@param bDoCosmetics boolean
function ASBZSabotagableVehicle:BP_OnEscortModeChanged(bEnabled, bDoCosmetics) end


---@class ASBZSabotagePoint : AActor
---@field OnSabotaged FSBZSabotagePointOnSabotaged
---@field InteractableComponent USBZInteractableComponent
---@field OutlineComponent USBZOutlineComponent
---@field MarkerAsset USBZMarkerDataAsset
---@field AttractorComponent USBZAIAttractorComponent
---@field LifeActionComponent USBZLifeActionComponent
---@field LifeActionInstance USBZLifeActionInstance
---@field LifeActionSlot USBZLifeActionSlot
---@field bIsInteractable boolean
---@field SabotageCooldownTime float
---@field bDesiredEnabledState boolean
---@field RoomVolumes TArray<ASBZRoomVolume>
---@field MarkerId int32
ASBZSabotagePoint = {}

---@param bEnabled boolean
---@return boolean
function ASBZSabotagePoint:SetEnabled(bEnabled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZSabotagePoint:OnServerCompleteInteraction(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param bNewState boolean
function ASBZSabotagePoint:OnInteractionStateChanged(Interactable, bNewState) end
---@param bIsSabotaged boolean
function ASBZSabotagePoint:BroadcastOnSabotaged(bIsSabotaged) end


---@class ASBZSecurityCamera : APawn
---@field BP_OnCameraStateChanged FSBZSecurityCameraBP_OnCameraStateChanged
---@field OnPlayerViewingChanged FSBZSecurityCameraOnPlayerViewingChanged
---@field Type FGameplayTag
---@field Escalations TMap<FGameplayTag, USBZActionNotificationAsset>
---@field HackableInteractable USBZHackableInteractableComponent
---@field MarkerComponent USBZMarkerComponent
---@field AttractorComponent USBZAIAttractorComponent
---@field CameraBodyRoot FSBZComponentSelector
---@field CameraEyeOffset FVector
---@field LookAtLocation FVector
---@field RotationSpeed float
---@field CurrentRotationSpeedYaw float
---@field CurrentRotationSpeedPitch float
---@field SFXMinimumRotationSpeed float
---@field bIsRotating boolean
---@field WaitTime float
---@field SightRadius float
---@field PeripheralVisionAngleDegrees float
---@field InvestigateEscalation USBZActionNotificationAsset
---@field RuntimeState uint8
---@field CameraState ESBZCameraState
---@field CameraSetting ESBZCameraOptions
---@field SecurityCameraRoot USceneComponent
---@field StartLookAtLocation FVector
---@field EndLookAtLocation FVector
---@field CameraTargetRotation FRotator
---@field CameraCurrentRotation FRotator
---@field CameraLastRotation FRotator
---@field bCanDestroy boolean
---@field Health float
---@field ShoutoutTargetComponent USBZShoutTargetComponent
---@field OutlineComponent USBZOutlineComponent
---@field OutlineAsset USBZOutlineAsset
---@field SuspiciousStartValue float
---@field AlarmStartValue float
---@field AlarmSoundDuration float
---@field CameraSoundComponent USBZAmbientSoundComponent
---@field RotationStartEvent UAkAudioEvent
---@field RotationStopEvent UAkAudioEvent
---@field SuspiciousStartEvent UAkAudioEvent
---@field SuspiciousStopEvent UAkAudioEvent
---@field AlarmStartEvent UAkAudioEvent
---@field AlarmStopEvent UAkAudioEvent
---@field CameraSilentEvent UAkAudioEvent
---@field CameraSuspicionLevelRTPC UAkRtpc
---@field CameraSuspicionLevelPitchRTPC UAkRtpc
---@field CameraRotationVelocityRTPC UAkRtpc
---@field CameraPossessionRTPC UAkRtpc
---@field RotationInterpolationTimeInMs float
---@field PossessionInterpolationTimeInMs float
---@field VisualDetectionComponent USBZAIVisualDetectionComponent
---@field RoughDetection uint8
---@field bShouldTickInEditor boolean
---@field InterestingTags FGameplayTagContainer
---@field POIDetectionSpeed float
---@field bOnlyDetectMovement boolean
---@field AdditionalRuntimeMarkedDuration float
---@field EMPEffectClass TSubclassOf<UGameplayEffect>
---@field EMPExplodedEvent UAkAudioEvent
---@field EMPDetonationEffect UNiagaraSystem
---@field EMPStunDuration float
---@field PlayerExplosionRange float
---@field AIExplosionRange float
---@field HurtReactionData FSBZHurtReactionData
---@field RuntimeLimit float
---@field RuntimeTagsToMark FGameplayTagContainer
---@field AutoAimComponent UBoxComponent
---@field ExplosionInstigator AActor
---@field ViewTargetPlayerStateIdArray TArray<int32>
---@field YawLimit FFloatInterval
---@field PitchLimit FFloatInterval
---@field PerceivedActors TArray<AActor>
---@field DetectedActors TArray<AActor>
---@field StatisticsMarkCamera FString
---@field CurrentRoom ASBZRoomVolume
ASBZSecurityCamera = {}

---@param AudioEvent UAkAudioEvent
function ASBZSecurityCamera:PlaySoundEvent(AudioEvent) end
---@param DetectionComponent USBZAIVisualDetectionComponent
---@param bWasDetected boolean
---@param DetectedTarget AActor
function ASBZSecurityCamera:OnVisualDetection(DetectionComponent, bWasDetected, DetectedTarget) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZSecurityCamera:OnServerAbortInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param AppliedState ESBZRuntimeState
function ASBZSecurityCamera:OnRuntimeStateRemoved(AppliedState) end
---@param AppliedState ESBZRuntimeState
function ASBZSecurityCamera:OnRuntimeStateApplied(AppliedState) end
---@param OldViewTargetPlayerStateIdArray TArray<int32>
function ASBZSecurityCamera:OnRep_ViewTargetPlayerStateIdArray(OldViewTargetPlayerStateIdArray) end
function ASBZSecurityCamera:OnRep_TargetCamRotation() end
function ASBZSecurityCamera:OnRep_RuntimeState() end
function ASBZSecurityCamera:OnRep_RoughDetection() end
function ASBZSecurityCamera:OnRep_CurrentCamRotation() end
function ASBZSecurityCamera:OnRep_CameraState() end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZSecurityCamera:OnPredictedAbortInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param Actor AActor
---@param Stimulus FAIStimulus
function ASBZSecurityCamera:OnPerceptionUpdated(Actor, Stimulus) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function ASBZSecurityCamera:OnHeistStateChanged(OldState, NewState) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZSecurityCamera:OnAckCompleteInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZSecurityCamera:OnAckAbortInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param NewRoughVisualDetectionValue uint8
function ASBZSecurityCamera:Multicast_UpdateRoughDetection(NewRoughVisualDetectionValue) end
function ASBZSecurityCamera:Multicast_StartAlarmSound() end
---@param InExplosionInstigator AActor
function ASBZSecurityCamera:Multicast_SetRuntimeExplosionInstigator(InExplosionInstigator) end
---@param InRuntimeState ESBZRuntimeState
function ASBZSecurityCamera:Multicast_SetRuntimed(InRuntimeState) end
---@param InRuntimeState ESBZRuntimeState
function ASBZSecurityCamera:Multicast_RuntimeExpired(InRuntimeState) end
---@param Result FSBZExplosionResult
function ASBZSecurityCamera:Multicast_ReplicateExplosion(Result) end
---@param InRuntimeToRemove ESBZRuntimeState
function ASBZSecurityCamera:Multicast_RemoveRuntime(InRuntimeToRemove) end
---@param NewState ESBZCameraState
function ASBZSecurityCamera:Multicast_OnChangeState(NewState) end
---@param PlayerId int32
function ASBZSecurityCamera:Multicast_EndViewTarget(PlayerId) end
---@param PlayerId int32
function ASBZSecurityCamera:Multicast_BecomeViewTarget(PlayerId) end
---@return ESBZCameraState
function ASBZSecurityCamera:GetCameraState() end
---@param RTPC UAkRtpc
---@param Value float
---@param InterpolationTime int32
function ASBZSecurityCamera:ChangeRTPC(RTPC, Value, InterpolationTime) end
---@param bIsViewTarget boolean
function ASBZSecurityCamera:BP_OnViewTargetChanged(bIsViewTarget) end
---@param OldState ESBZCameraState
---@param NewState ESBZCameraState
---@param bDoCosmetics boolean
function ASBZSecurityCamera:BP_OnStateChanged(OldState, NewState, bDoCosmetics) end
function ASBZSecurityCamera:BP_OnIndestructibleCamera() end
---@param NewCameraColorState ESBZCameraColorState
function ASBZSecurityCamera:BP_OnCameraColorStateChanged(NewCameraColorState) end


---@class ASBZSecurityRoom : ASBZPawnSpawnPredefined
---@field SecurityCameras TArray<ASBZSecurityCamera>
---@field GuardRoomSpawner ASBZPawnSpawnPredefined
ASBZSecurityRoom = {}

---@param World UWorld
function ASBZSecurityRoom:OnPlayableLevelInitialized(World) end
---@param DestroyedActor AActor
function ASBZSecurityRoom:OnCameraDestroyed(DestroyedActor) end
function ASBZSecurityRoom:EnableSecurityRoom() end
function ASBZSecurityRoom:DisableSecurityRoom() end


---@class ASBZSensorTool : ASBZTool
---@field BlueMarkedTargetsMap TMap<AActor, FSBZSensorMarkingData>
---@field OrangeMarkedTargetsMap TMap<AActor, FSBZSensorMarkingData>
---@field SensorToolTargetVisibleEvent UAkAudioEvent
---@field SensorToolTurnedOnEvent UAkAudioEvent
---@field SensorToolTurnedOffEvent UAkAudioEvent
---@field SensorToolModeSwitchedEvent UAkAudioEvent
---@field OnSensorToolTargetVisibleEventRtpc UAkRtpc
---@field OnSensorToolTurnedOnEventRtpc UAkRtpc
---@field OnSensorToolTurnedOffEventRtpc UAkRtpc
---@field OnSensorToolModeSwitchedEventRtpc UAkRtpc
---@field SensorGlassMeshBounds UStaticMeshComponent
ASBZSensorTool = {}

function ASBZSensorTool:Server_SensorToolTurnedOn() end
function ASBZSensorTool:Server_SensorToolTurnedOff() end
function ASBZSensorTool:Server_SensorToolTargetVisible() end
function ASBZSensorTool:Server_SensorToolModeSwitched() end
---@param ScanLineDuration float
function ASBZSensorTool:OnSensorToolTurnedOn(ScanLineDuration) end
function ASBZSensorTool:OnSensorToolTurnedOff() end
function ASBZSensorTool:OnSensorToolModeSwitched() end
function ASBZSensorTool:OnSensorTargetVisible() end
---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZSensorTool:OnMarkedTargetEndPlay(Actor, EndPlayReason) end
function ASBZSensorTool:Multicast_SensorToolTurnedOn() end
function ASBZSensorTool:Multicast_SensorToolTurnedOff() end
function ASBZSensorTool:Multicast_SensorToolTargetVisible() end
function ASBZSensorTool:Multicast_SensorToolModeSwitched() end


---@class ASBZSentryGun : ASBZArmedPawn
---@field FireCooldown float
---@field FireTime float
---@field YawRotation float
---@field RotationCooldown float
---@field RotationSpeed float
---@field SelfOverheatDamagePerShot float
---@field DeployMontage UAnimMontage
---@field CurrentTarget AActor
---@field LastTarget AActor
---@field CurrentMarkedTarget ASBZCharacter
---@field CurrentScanTargetDirection FVector
---@field AttributeSet USBZSentryGunAttributeSet
---@field AudioComponent UAkComponent
---@field RotationEvent UAkAudioEvent
---@field RotationStopEvent UAkAudioEvent
---@field OverheatEvent UAkAudioEvent
---@field DetonationEvent UAkAudioEvent
---@field Interactable USBZInteractableComponent
---@field OwnerPlayerState ASBZPlayerState
---@field SkeletalMeshComponent USkeletalMeshComponent
---@field CurrentSentryRotation FRotator
---@field LastSentryRotation FRotator
---@field CurrentSentryRotationCooldown float
---@field ExplosionRange float
---@field DetonationEffect UNiagaraSystem
---@field DamageGameplayEffectClass TSubclassOf<UGameplayEffect>
---@field DamageTypeClass TSubclassOf<USBZDamageType>
---@field LocalplayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field PlayerFeedbackCurve FRuntimeFloatCurve
---@field HurtReactionData FSBZHurtReactionData
---@field DamageDistanceArray TArray<FSBZDamageDistance>
---@field FriendlyPlayerDamageScale float
---@field bUseInstigatorPlayerDamageScale boolean
---@field InstigatorPlayerDamageScale float
---@field ExplosionArmorPenetration float
---@field PostDamagePhysicsEffectData FSBZExplosivePhysicsEffectData
---@field OutOfBoundsBoxComponent UBoxComponent
---@field BoxComponent UBoxComponent
---@field ProjectileMovementComponent UProjectileMovementComponent
---@field TargetLocation FVector
ASBZSentryGun = {}

---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZSentryGun:OnServerCompleteInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end
---@param InCharacter ASBZCharacter
---@param InDuration float
function ASBZSentryGun:OnSentryEnemyMarked(InCharacter, InDuration) end
function ASBZSentryGun:OnRep_YawRotation() end
function ASBZSentryGun:OnRep_TargetLocation() end
function ASBZSentryGun:OnRep_OwnerPlayerState() end
---@param OldAttachParentActor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZSentryGun:OnParentActorEndPlay(OldAttachParentActor, EndPlayReason) end
---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZSentryGun:OnOwnerEndPlay(Actor, EndPlayReason) end
function ASBZSentryGun:OnOverheated() end
---@param InHealth float
function ASBZSentryGun:OnOverheatDamageTaken(InHealth) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZSentryGun:OnAckCompleteInteraction(InInteractable, InInteractor, bIsLocallyControlledInteractor) end
---@param NewCurrentTarget AActor
function ASBZSentryGun:Multicast_SetCurrentTarget(NewCurrentTarget) end
---@param Result FSBZExplosionResult
function ASBZSentryGun:Multicast_ReplicateExplosion(Result) end
---@param InTargetLocation FVector
---@param InTargetRotation FRotator
function ASBZSentryGun:Multicast_ReachedTargetLocation(InTargetLocation, InTargetRotation) end


---@class ASBZSingleBagGenerator : AActor
---@field OnServerBagPickedUp FSBZSingleBagGeneratorOnServerBagPickedUp
---@field BagType USBZBagType
---@field SecondaryBagType USBZBagType
---@field BagHandle FSBZBagHandle
---@field Interactable USBZInteractableComponent
---@field Outline USBZOutlineComponent
---@field bIsSecondaryTypeUsed boolean
ASBZSingleBagGenerator = {}

---@param bEnabled boolean
function ASBZSingleBagGenerator:SetInteractionEnabled(bEnabled) end
---@param bEnabled boolean
function ASBZSingleBagGenerator:SetEnabled(bEnabled) end
function ASBZSingleBagGenerator:OnRep_ShouldUseSecondaryType() end
function ASBZSingleBagGenerator:Multicast_ChangeToSecondaryType() end
---@param InteractableComponent USBZBaseInteractableComponent
---@param bEnabled boolean
function ASBZSingleBagGenerator:HandleInteractionEnabledStateChanged(InteractableComponent, bEnabled) end
---@param Comp USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZSingleBagGenerator:HandleInteraction(Comp, Interactor, bInIsLocallyControlled) end
function ASBZSingleBagGenerator:ChangeToSecondaryType() end
---@param bDoCosmetics boolean
function ASBZSingleBagGenerator:BP_OnChangedToSecondaryType(bDoCosmetics) end


---@class ASBZSkeletalDebris : AActor
---@field SkeletalMeshComponent USkeletalMeshComponent
ASBZSkeletalDebris = {}



---@class ASBZSmallCosmeticDestruction : ASBZNoCookDS
---@field bMoveToDebris boolean
---@field bDestroyWhenActivated boolean
---@field bCanBeActivatedByPlayerOverlap boolean
---@field bReceivesDamageFromMelee boolean
---@field MinimumImpactForce float
---@field PhysicalMaterial UPhysicalMaterial
---@field MeshComponent UStaticMeshComponent
ASBZSmallCosmeticDestruction = {}

---@param HitComp UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param NormalImpulse FVector
---@param Hit FHitResult
function ASBZSmallCosmeticDestruction:OnHit(HitComp, OtherActor, OtherComp, NormalImpulse, Hit) end
---@param OverlappedComp UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZSmallCosmeticDestruction:OnBeginOverlap(OverlappedComp, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
function ASBZSmallCosmeticDestruction:OnActivated() end
---@param DamagedActor AActor
---@param Damage float
---@param InstigatedBy AController
---@param HitInfos TArray<FHitResult>
---@param Params FRadialDamageParams
---@param Origin FVector
---@param DamageType UDamageType
---@param DamageCauser AActor
function ASBZSmallCosmeticDestruction:HandleTakeRadialDamage(DamagedActor, Damage, InstigatedBy, HitInfos, Params, Origin, DamageType, DamageCauser) end
---@param DamagedActor AActor
---@param Damage float
---@param InstigatedBy AController
---@param HitLocation FVector
---@param FHitComponent UPrimitiveComponent
---@param BoneName FName
---@param ShotFromDirection FVector
---@param DamageType UDamageType
---@param DamageCauser AActor
function ASBZSmallCosmeticDestruction:HandleTakePointDamage(DamagedActor, Damage, InstigatedBy, HitLocation, FHitComponent, BoneName, ShotFromDirection, DamageType, DamageCauser) end
---@param DamagedActor AActor
---@param Damage float
---@param InstigatedBy AController
---@param HitInfos TArray<FHitResult>
---@param OriginDirection FVector
---@param DamageType UDamageType
---@param DamageCauser AActor
function ASBZSmallCosmeticDestruction:HandleTakeOverlapDamage(DamagedActor, Damage, InstigatedBy, HitInfos, OriginDirection, DamageType, DamageCauser) end
---@param Hit FHitResult
function ASBZSmallCosmeticDestruction:CreateImpactPoint(Hit) end


---@class ASBZSmartNavLink : AActor
---@field OnSmartLinkReached FSBZSmartNavLinkOnSmartLinkReached
---@field NavigationLink FNavigationLink
---@field bDisableNavLinkWhenUsed boolean
---@field bCanBeBlocked boolean
---@field NavLinkUserId uint32
---@field bCustomMove boolean
---@field bLinkEnabled boolean
---@field bLinkBlocked boolean
---@field bLinkInUse boolean
---@field AllowedBlockingCharacter ASBZCharacter
---@field AllowedBlockingController AController
---@field DefaultRightPointOffset FVector
---@field DefaultLeftPointOffset FVector
---@field SpriteComponent UBillboardComponent
ASBZSmartNavLink = {}

---@param AreaClass TSubclassOf<UNavArea>
function ASBZSmartNavLink:SetNavArea(AreaClass) end
---@param bInLinkEnabled boolean
function ASBZSmartNavLink:SetLinkEnabled(bInLinkEnabled) end
---@return boolean
function ASBZSmartNavLink:IsLinkEnabled() end
---@return TSubclassOf<UNavArea>
function ASBZSmartNavLink:GetNavArea() end


---@class ASBZSmokeGrenade : ASBZGasGrenade
ASBZSmokeGrenade = {}


---@class ASBZSoundEnvironment : AVolume
---@field LateReverbComponent UAkLateReverbComponent
---@field RoomComponent UAkRoomComponent
---@field AkComponent UAkComponent
---@field EnterEvents TArray<UAkAudioEvent>
---@field ExitEvents TArray<UAkAudioEvent>
---@field AcousticState FName
---@field EchoState FName
---@field EnvironmentProximity TArray<ASBZSoundEnvironment>
---@field SoundPortals TArray<ASBZAkAcousticPortal>
---@field SoundEnvironmentManager USBZSoundEnvironmentManager
---@field bDebugEnabled boolean
---@field DebugTimer float
---@field BrushComponentPointer UBrushComponent
ASBZSoundEnvironment = {}

---@param OverlappedComp UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZSoundEnvironment:OnOverlapBegin(OverlappedComp, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param TargetEnvironment ASBZSoundEnvironment
function ASBZSoundEnvironment:OnDebugLoggingSoundEnvironment(TargetEnvironment) end
---@param AudioEvent UAkAudioEvent
function ASBZSoundEnvironment:OnDebugLoggingPostEvent(AudioEvent) end
---@param TargetPortal ASBZAkAcousticPortal
function ASBZSoundEnvironment:OnDebugLoggingPortal(TargetPortal) end
function ASBZSoundEnvironment:Activate() end


---@class ASBZSpawnCloset : AActor
---@field ClosetVolume TSoftObjectPtr<ASBZRoomVolume>
---@field SpawnGroupsInCloset TArray<APD3PawnSpawnGroup>
---@field Reactors TArray<AActor>
---@field bStayOpenDuringStealth boolean
---@field NumberOfBlockingActors int32
---@field bActorsInVolume boolean
---@field bIsStealth boolean
ASBZSpawnCloset = {}

---@param OverlappedActor AActor
---@param OtherActor AActor
function ASBZSpawnCloset:OnRoomVolumeEndOverlap(OverlappedActor, OtherActor) end
---@param OverlappedActor AActor
---@param OtherActor AActor
function ASBZSpawnCloset:OnRoomVolumeBeginOverlap(OverlappedActor, OtherActor) end
function ASBZSpawnCloset:OnHeistGoneLoud() end
function ASBZSpawnCloset:BindRoomVolumeOverlaps() end


---@class ASBZSpawnLocationHandler : AActor
---@field OnLocationSelected FSBZSpawnLocationHandlerOnLocationSelected
---@field OnKeyItemPickedUp FSBZSpawnLocationHandlerOnKeyItemPickedUp
---@field bShouldRandomizeOnBeginPlay boolean
---@field SpawnLocationArray TArray<FSBZSpawnLocation>
---@field Seed int32
---@field HackableActor ASBZHackableActor
---@field HackableActorArray TArray<ASBZHackableActor>
---@field HackableEmailIndex int32
---@field ImportantItem TSubclassOf<ASBZInteractionActor>
---@field RandomLootToSpawnMap TMap<TSubclassOf<AActor>, int32>
---@field RandomIndex int32
ASBZSpawnLocationHandler = {}

function ASBZSpawnLocationHandler:TriggerSpawnManually() end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZSpawnLocationHandler:OnServerImportantLootPickedUp(Interactable, Interactor, bInIsLocallyControlled) end


---@class ASBZSpawnNotifyOnce : AInfo
---@field Spawner ASBZPawnSpawnPredefined
---@field SpawnNotifyReactors TArray<AActor>
ASBZSpawnNotifyOnce = {}

---@param SpawnedPawn APawn
function ASBZSpawnNotifyOnce:OnSpawnComplete(SpawnedPawn) end


---@class ASBZSpectatorPawn : ASpectatorPawn
ASBZSpectatorPawn = {}


---@class ASBZSpline : AActor
---@field OnEntered FSBZSplineOnEntered
---@field OnLeft FSBZSplineOnLeft
---@field OnEndReached FSBZSplineOnEndReached
---@field OnStop FSBZSplineOnStop
---@field SplineComponent USBZSplineComponent
ASBZSpline = {}

---@return TArray<ASBZSpline>
function ASBZSpline:GetOutputSplines() end
---@return TArray<ASBZSpline>
function ASBZSpline:GetInputSplines() end


---@class ASBZStandaloneMaskDisplayDebug : AActor
---@field UserMaskData USBZMaskPreconfigData
---@field ModDataMap TMap<USBZModularPartSlotBase, FSBZMaskPartConfigGroup>
---@field SpawnTransform FTransform
---@field SpawnedMask ASBZMask
ASBZStandaloneMaskDisplayDebug = {}



---@class ASBZStandaloneWeaponDisplay : AActor
---@field WeaponConfig FSBZEquippableConfig
---@field SpawnTransform FTransform
---@field bMergeWeaponMeshes boolean
---@field bRespawnAlways boolean
---@field SpawnedWeapon ASBZWeapon
---@field PivotPointToSpawn TSubclassOf<AActor>
---@field bForceWithoutPivotPoint boolean
---@field FOVMultiplier float
ASBZStandaloneWeaponDisplay = {}

---@param InWeaponData USBZBaseWeaponData
function ASBZStandaloneWeaponDisplay:SetupWeaponData(InWeaponData) end
---@param InWeaponConfig FSBZEquippableConfig
function ASBZStandaloneWeaponDisplay:SetupWeaponConfig(InWeaponConfig) end
---@param Slot USBZModularPartSlotBase
---@param PartAsset USBZEquippablePartDataAsset
---@param PartConfig USBZEquippablePartConfig
function ASBZStandaloneWeaponDisplay:SetPart(Slot, PartAsset, PartConfig) end
---@param Slot USBZModularPartSlotBase
function ASBZStandaloneWeaponDisplay:RemovePart(Slot) end
function ASBZStandaloneWeaponDisplay:OnWeaponSpawned() end


---@class ASBZStandaloneWeaponDisplayDebug : ASBZStandaloneWeaponDisplay
---@field WeaponPreset USBZWeaponPresetConfigData
---@field WeaponData USBZEquippableData
---@field ModData TArray<FSBZDebugModularConfigItem>
ASBZStandaloneWeaponDisplayDebug = {}

function ASBZStandaloneWeaponDisplayDebug:Setup() end


---@class ASBZStateMachineDebug : AHUD
ASBZStateMachineDebug = {}


---@class ASBZStaticInteractionActor : ASBZInteractionActor
ASBZStaticInteractionActor = {}


---@class ASBZStaticInteractionBinaryState : AActor
---@field OnStateChanged FSBZStaticInteractionBinaryStateOnStateChanged
---@field InteractableComponent USBZInteractableComponent
---@field bState boolean
ASBZStaticInteractionBinaryState = {}

---@param bEnabled boolean
function ASBZStaticInteractionBinaryState:SetInteractionEnabled(bEnabled) end
function ASBZStaticInteractionBinaryState:OnRep_CurrentState() end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZStaticInteractionBinaryState:OnAckCompleteInteraction(Interactable, Interactor, bIsLocallyControlledInteractor) end
---@param bNewState boolean
---@param bDoCosmentics boolean
function ASBZStaticInteractionBinaryState:BP_OnStateChanged(bNewState, bDoCosmentics) end


---@class ASBZStaticMeshHandheldEquippable : ASBZHandheldEquippable
ASBZStaticMeshHandheldEquippable = {}

---@return UStaticMeshComponent
function ASBZStaticMeshHandheldEquippable:GetStaticMeshComponent() end


---@class ASBZStaticReplicatedActor : AActor
ASBZStaticReplicatedActor = {}


---@class ASBZStaticVehicle : AStaticMeshActor
---@field LightsCPDGraph TMap<int32, FSBZVehicleLights>
---@field ActiveLightsBitmask uint8
---@field VariationData USBZVariationSetData
---@field Seed int32
---@field AlarmEquippedChance float
---@field bHasAlarm boolean
---@field bAlarmActivated boolean
---@field AkComponent UAkComponent
---@field AlarmStartEvent UAkAudioEvent
---@field AlarmStopEvent UAkAudioEvent
ASBZStaticVehicle = {}

function ASBZStaticVehicle:TryActivateAlarm() end
---@param LightType ESBZVehicleLightType
---@param bIsOn boolean
function ASBZStaticVehicle:SetLightType(LightType, bIsOn) end
---@param CPDIndex int32
---@param LightBit ESBZVehicleLightCPD
---@param bIsBroken boolean
function ASBZStaticVehicle:SetLightCPDBroken(CPDIndex, LightBit, bIsBroken) end


---@class ASBZTestGameMode : APD3HeistGameMode
ASBZTestGameMode = {}


---@class ASBZTestGameState : APD3HeistGameState
ASBZTestGameState = {}


---@class ASBZThermalLance : ASBZHeavyBreachingEquipmentBase
---@field OnBolted FSBZThermalLanceOnBolted
---@field OnDisassemblyNeeded FSBZThermalLanceOnDisassemblyNeeded
---@field IgnitionInteraction USBZInteractableComponent
---@field RemoveCanisterInteraction USBZInteractableComponent
---@field AddCanisterInteraction USBZInteractableComponent
---@field DisassembleInteraction USBZInteractableComponent
---@field BoltingInteractions TArray<USBZInteractableComponent>
---@field BoltingInteractionWaypointLocation FVector
---@field DissassemblyWaypointLocation FVector
---@field bNeedsDisassemblyWhenFinished boolean
---@field bShouldSpawnBagsWhenCompleted boolean
---@field BagTriggerVolume ASBZBagTriggerVolume
---@field RequiredBagType USBZBagType
---@field DisassembleInteractionWaitTime float
---@field WidgetSelector FSBZComponentSelector
---@field BoltedEvent UAkAudioEvent
---@field RemoveCannisterEvent UAkAudioEvent
---@field AddCannisterEvent UAkAudioEvent
ASBZThermalLance = {}

---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZThermalLance:OnServerRemovedCanister(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZThermalLance:OnServerAddedCanister(Interactable, Interactor, bInIsLocallyControlled) end
function ASBZThermalLance:OnRefuelingReached() end
function ASBZThermalLance:OnRanOutOfFuel() end
---@param Interactable USBZBaseInteractableComponent
---@param bEnabled boolean
function ASBZThermalLance:OnInteractStateChanged(Interactable, bEnabled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZThermalLance:OnIgnitionComplete(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZThermalLance:OnDisassembled(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZThermalLance:OnBoltingComplete(Interactable, Interactor, bInIsLocallyControlled) end
---@param Volume ASBZBagTriggerVolume
---@param BagItem ASBZBagItem
---@param BagHandle FSBZBagHandle
function ASBZThermalLance:OnBagEntered(Volume, BagItem, BagHandle) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZThermalLance:OnAckRemovedCanister(Interactable, Interactor, bInIsLocallyControlled) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function ASBZThermalLance:OnAckAddedCanister(Interactable, Interactor, bInIsLocallyControlled) end
---@param Amount int32
---@param BoltIndex int32
function ASBZThermalLance:BP_OnBolted(Amount, BoltIndex) end


---@class ASBZThermalScopeWeapon : ASBZRangedWeapon
---@field ThermalMaterialArray TArray<UMaterialInstanceDynamic>
---@field TargetSocketName FName
ASBZThermalScopeWeapon = {}



---@class ASBZThermite : AActor
---@field OnThermiteComplete FSBZThermiteOnThermiteComplete
---@field OnIgnited FSBZThermiteOnIgnited
---@field OnFlashOver FSBZThermiteOnFlashOver
---@field OnPrimaryThermiteSet FSBZThermiteOnPrimaryThermiteSet
---@field OnBagEntered FSBZThermiteOnBagEntered
---@field BagOverlapBoxComponent UBoxComponent
---@field IgnitionInteractableComponent USBZInteractableComponent
---@field BurnDuration float
---@field CriticalBurnInterval FFloatInterval
---@field ExplosionChance float
---@field TimeBetweenExplosionChecks float
---@field InitialBagTypeTag FGameplayTag
---@field AdditionalBagTypeTag FGameplayTag
---@field bShouldDestroyOnComplete boolean
---@field bStartEnabled boolean
---@field ElapsedBurnTime float
---@field CurrentBurnState ESBZThermiteBurnState
---@field CriticalBurnTimeLeft float
---@field Seed int32
---@field bIsInterfered boolean
---@field BurnModifier float
---@field TimeSinceLastExplosionCheck float
---@field InitialSeed int32
ASBZThermite = {}

---@param bInActive boolean
function ASBZThermite:SetOutsideInterferenceActive(bInActive) end
---@param bInEnabled boolean
function ASBZThermite:SetBagOverlapBoxEnabled(bInEnabled) end
function ASBZThermite:OnRep_Seed() end
function ASBZThermite:OnRep_IsInterfered() end
---@param OldState ESBZThermiteBurnState
function ASBZThermite:OnRep_CurrentState(OldState) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZThermite:OnBoxComponentBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZThermite:OnAckCompleteIgnition(Interactable, Interactor, bIsLocallyControlledInteractor) end
---@param bIsInitialBag boolean
function ASBZThermite:Multicast_ThermiteBagOverlapped(bIsInitialBag) end
---@param NewState ESBZThermiteBurnState
function ASBZThermite:Multicast_SetState(NewState) end
---@param bInIsActive boolean
function ASBZThermite:Multicast_SetOutsideInterference(bInIsActive) end
---@param bIsInitialBag boolean
function ASBZThermite:BP_OnThermiteBagOverlapped(bIsInitialBag) end
function ASBZThermite:BP_OnSteamExplosion() end
---@param OldState ESBZThermiteBurnState
---@param NewState ESBZThermiteBurnState
---@param bDoCosmetics boolean
function ASBZThermite:BP_OnStateChanged(OldState, NewState, bDoCosmetics) end
---@param bInterfered boolean
function ASBZThermite:BP_OnInterferenceChanged(bInterfered) end
function ASBZThermite:BP_OnFlashOver() end


---@class ASBZThrowable : ASBZEquippable
---@field MarkerAsset USBZMarkerDataAsset
---@field MarkerOffset FVector
---@field MarkerActivationDelay float
---@field StaticMesh UMeshComponent
---@field Data USBZThrowableData
---@field OwnerCharacter ASBZCharacter
---@field ThrowableState ESBZThrowableState
---@field PlayerState ASBZPlayerState
---@field ProjectileMovementComponent UProjectileMovementComponent
---@field bReduceBouncinessPerBounce boolean
---@field BouncinessReductionValue float
---@field MaxTimesToReduceBounciness int32
---@field MaxBounces int32
---@field bEnablePhysicsOnStopped boolean
---@field OverrideAudioEvent UAkAudioEvent
---@field OverrideAudioRTPC UAkRtpc
---@field AudioImpactForceModifierValue float
ASBZThrowable = {}

---@param NewThrowableState ESBZThrowableState
function ASBZThrowable:Server_SetThrowableState(NewThrowableState) end
function ASBZThrowable:OnThrowStillAttached() end
---@param OverlappedComp UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param NormalImpulse FVector
---@param Hit FHitResult
function ASBZThrowable:OnThrownActorHit(OverlappedComp, OtherActor, OtherComp, NormalImpulse, Hit) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZThrowable:OnThrownActorBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
function ASBZThrowable:OnThrow() end
function ASBZThrowable:OnRep_ThrowableState() end
function ASBZThrowable:OnReady() end
---@param InHitResult FHitResult
function ASBZThrowable:OnProjectileStopped(InHitResult) end
---@param InHitResult FHitResult
---@param ImpactVelocity FVector
function ASBZThrowable:OnProjectileBounce(InHitResult, ImpactVelocity) end
---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZThrowable:OnInstigatorEndPlay(Actor, EndPlayReason) end
function ASBZThrowable:OnDetachForThrow() end
function ASBZThrowable:OnAttachForThrow() end
---@param ThrowDirection FVector_NetQuantizeNormal
function ASBZThrowable:Multicast_SetThrowVelocity(ThrowDirection) end
---@param NewThrowState ESBZThrowableState
function ASBZThrowable:Multicast_SetThrowState(NewThrowState) end
---@param InBreakableHitResult FHitResult
function ASBZThrowable:Multicast_DestroyBreakable(InBreakableHitResult) end
---@param Hit FHitResult
---@param Velocity float
function ASBZThrowable:CreateImpactPoint(Hit, Velocity) end


---@class ASBZThrowableKnife : ASBZThrowable
---@field BoxCollision UBoxComponent
---@field OverrideThrowableProjectileHitEvent UAkAudioEvent
---@field OverrideThrowableProjectileBounceHitEvent UAkAudioEvent
---@field AmmoPickupAsset TSubclassOf<ASBZThrowableKnifePickup>
---@field ThrowableKnifePOIClass TSubclassOf<ASBZAIPointOfInterest>
---@field ThrowableKnifePOIInstance ASBZAIPointOfInterest
---@field LastHitComponent UPrimitiveComponent
---@field AmmoPickup ASBZAmmoPickup
ASBZThrowableKnife = {}

---@param TargetData FSBZKnifeProjectileTargetData
function ASBZThrowableKnife:Server_ReplicateDamage(TargetData) end
function ASBZThrowableKnife:Server_PickedUp() end
---@param bInShouldBladeBounce boolean
---@param bInHasRetrieverSkill boolean
---@param InHitComponent UPrimitiveComponent
---@param InBoneName FName
---@param InRelativeLocation FVector
function ASBZThrowableKnife:Server_CreateImpact(bInShouldBladeBounce, bInHasRetrieverSkill, InHitComponent, InBoneName, InRelativeLocation) end
---@param OldAttachParentActor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZThrowableKnife:OnParentActorEndPlay(OldAttachParentActor, EndPlayReason) end
---@param TargetData FSBZKnifeProjectileTargetData
function ASBZThrowableKnife:Multicast_FireKnife(TargetData) end
---@param bInShouldBladeBounce boolean
---@param bInHasRetrieverSkill boolean
function ASBZThrowableKnife:Multicast_CreateImpact(bInShouldBladeBounce, bInHasRetrieverSkill) end


---@class ASBZThrowableKnifePickup : ASBZAmmoPickup
ASBZThrowableKnifePickup = {}


---@class ASBZToggleGadget : ASBZGadget
ASBZToggleGadget = {}


---@class ASBZTool : ASBZEquippable
---@field SkeletalMesh USBZToolSkeletalMeshComponent
---@field Data USBZToolData
---@field ToolState ESBZToolState
---@field InstigatorCharacter ASBZCharacter
---@field OnReadyEvent UAkAudioEvent
---@field OnActivatedEvent UAkAudioEvent
---@field OnActivatedIdleEvent UAkAudioEvent
---@field OnActivatedUsingEvent UAkAudioEvent
---@field OnCanceledEvent UAkAudioEvent
---@field StopAllSoundsEvent UAkAudioEvent
---@field OnReadyEventRtpc UAkRtpc
---@field OnActivatedEventRtpc UAkRtpc
---@field OnActivatedIdleEventRtpc UAkRtpc
---@field OnActivatedUsingEventRtpc UAkRtpc
---@field OnCanceledRtpc UAkRtpc
---@field LockedPlayerController APlayerController
---@field ActivePlayerController ASBZPlayerController
---@field EquipPlayerController ASBZPlayerController
---@field ActiveUsingPlayerController ASBZPlayerController
---@field EquipPlayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field ActivePlayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field ActiveUsingPlayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
ASBZTool = {}

function ASBZTool:StopAllSounds() end
---@param NewToolState ESBZToolState
function ASBZTool:Server_SetToolState(NewToolState) end
---@param bInIsEquippedAnimationReady boolean
function ASBZTool:Server_SetEquippedAnimationFullyPlayed(bInIsEquippedAnimationReady) end
function ASBZTool:Server_CallReady() end
---@param OldToolState ESBZToolState
function ASBZTool:OnRep_ToolState(OldToolState) end
function ASBZTool:OnReady() end
---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function ASBZTool:OnInstigatorEndPlay(Actor, EndPlayReason) end
function ASBZTool:OnCanceled() end
function ASBZTool:OnActivatedUsing() end
function ASBZTool:OnActivatedIdle() end
function ASBZTool:OnActivated() end
---@param NewToolState ESBZToolState
function ASBZTool:Multicast_SetToolState(NewToolState) end


---@class ASBZTrafficLights : AActor
---@field PoolArray TArray<FSBZTrafficLightPool>
---@field PoolStates TArray<FSBZTrafficLightPoolState>
---@field ActivePoolIndex int32
---@field NextPoolTimer float
---@field TrafficManager USBZTrafficManager
---@field TrafficSettings USBZTrafficSettings
ASBZTrafficLights = {}

---@param Status ESBZTrafficLightStatus
---@param Pool TArray<UStaticMeshComponent>
---@param PedestrianSoundEmitters TArray<USBZAmbientSoundComponent>
function ASBZTrafficLights:UpdatePool(Status, Pool, PedestrianSoundEmitters) end
function ASBZTrafficLights:Rep_ActivePoolStateIndex() end
---@param NewActivePoolIndex int32
function ASBZTrafficLights:Multicast_SetActivePool(NewActivePoolIndex) end


---@class ASBZTrafficSpline : ASBZSpline
---@field TrafficManager USBZTrafficManager
---@field SplineTypeFlags int32
---@field VehicleTypeFlags int32
ASBZTrafficSpline = {}



---@class ASBZTrafficVolume : AVolume
---@field TrafficLightActor ASBZTrafficLights
---@field TrafficLightIndex int32
ASBZTrafficVolume = {}



---@class ASBZTraversalNavLink : ASBZSmartNavLink
---@field NavLinkTraversalComponent USBZNavLinkTraversalComponent
ASBZTraversalNavLink = {}



---@class ASBZTutorialPopUpActor : AActor
---@field TutorialPopUpArray TArray<USBZTutorialPopUpDataAsset>
---@field SideBarNotificationArray TArray<FSBZSideBarNotificationData>
---@field ControlsReferenceArray TArray<FSBZControlsReference>
ASBZTutorialPopUpActor = {}

---@param TutorialIndex int32
---@param InTutorialPopUpClosed FShowTutorialPopUpInTutorialPopUpClosed
function ASBZTutorialPopUpActor:ShowTutorialPopUp(TutorialIndex, InTutorialPopUpClosed) end
---@param NotificationIndex int32
function ASBZTutorialPopUpActor:ShowSideBarNotification(NotificationIndex) end
---@param ReferenceIndex int32
function ASBZTutorialPopUpActor:ShowControlsReference(ReferenceIndex) end
function ASBZTutorialPopUpActor:Server_CloseTutorialPopUp() end
function ASBZTutorialPopUpActor:OnActionPhaseEntered() end
---@param ClosingActionName FName
function ASBZTutorialPopUpActor:CloseTutorialPopUp(ClosingActionName) end
---@param Index int32
function ASBZTutorialPopUpActor:Client_ShowTutorialPopUp(Index) end
---@param Index int32
function ASBZTutorialPopUpActor:Client_ShowSideBarNotification(Index) end
---@param Index int32
function ASBZTutorialPopUpActor:Client_ShowControlsReference(Index) end


---@class ASBZVantagePoint : AActor
ASBZVantagePoint = {}

---@param Pawn APawn
function ASBZVantagePoint:OnOccupantKilled(Pawn) end


---@class ASBZVariationEditActor : AActor
---@field VariationComponent USBZVariationEditComponent
---@field SkeletalMeshComponent USkeletalMeshComponent
---@field StaticMeshComponent UStaticMeshComponent
ASBZVariationEditActor = {}



---@class ASBZVariationViewActor : AActor
---@field SkeletalMeshComponent USkeletalMeshComponent
---@field StaticMeshComponent UStaticMeshComponent
ASBZVariationViewActor = {}



---@class ASBZViewTargetCollectionInteraction : AActor
---@field ViewTargetCollection AActor
---@field Interactable USBZInteractableComponent
ASBZViewTargetCollectionInteraction = {}

---@param InActor AActor
function ASBZViewTargetCollectionInteraction:SetViewTargetCollection(InActor) end
---@param InInteractable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZViewTargetCollectionInteraction:OnCompleteInteraction(InInteractable, Interactor, bIsLocallyControlledInteractor) end


---@class ASBZVotingReplicatedProxy : AInfo
---@field bDummy boolean
ASBZVotingReplicatedProxy = {}

---@param PlayerId FUniqueNetIdRepl
function ASBZVotingReplicatedProxy:Server_NotifySendVoteRecall(PlayerId) end
---@param VoteType ESBZVotingType
---@param VoteInitArgs TArray<FString>
---@param PlayerInitiated FUniqueNetIdRepl
---@param bVotePositive boolean
function ASBZVotingReplicatedProxy:Server_NotifySendVoteInitiate(VoteType, VoteInitArgs, PlayerInitiated, bVotePositive) end
---@param PlayerId FUniqueNetIdRepl
---@param VotingAnswer ESBZVotingAnswer
function ASBZVotingReplicatedProxy:Server_NotifySendVoteAnswer(PlayerId, VotingAnswer) end
---@param PlayerId FUniqueNetIdRepl
function ASBZVotingReplicatedProxy:MulticastReceiveVoteRecall(PlayerId) end
---@param VoteType ESBZVotingType
---@param VoteInitArgs TArray<FString>
---@param PlayerInitiated FUniqueNetIdRepl
---@param TimeStarted FDateTime
---@param PlayersPending TArray<FUniqueNetIdRepl>
function ASBZVotingReplicatedProxy:MulticastReceiveVoteInitiate(VoteType, VoteInitArgs, PlayerInitiated, TimeStarted, PlayersPending) end
---@param PlayerId FUniqueNetIdRepl
---@param VotingAnswer ESBZVotingAnswer
function ASBZVotingReplicatedProxy:MulticastReceiveVoteAnswer(PlayerId, VotingAnswer) end
---@param FormatLocaleKey FString
---@param ExportedArgsNames TArray<FString>
---@param ExportedArgsStrings TArray<FString>
---@param ArgsToLocalizeNames TArray<FString>
---@param ArgsToLocalizeLocaleKeys TArray<FString>
function ASBZVotingReplicatedProxy:MulticastReceiveLocalizedChatMessage(FormatLocaleKey, ExportedArgsNames, ExportedArgsStrings, ArgsToLocalizeNames, ArgsToLocalizeLocaleKeys) end
---@param Message FString
function ASBZVotingReplicatedProxy:MulticastReceiveChatMessage(Message) end
function ASBZVotingReplicatedProxy:MulticastExecuteAction() end
function ASBZVotingReplicatedProxy:MulticastClearCurrentVote() end


---@class ASBZWaypoint : AActor
---@field bShowMarkerOnSpawn boolean
---@field MarkerAsset USBZMarkerDataAsset
ASBZWaypoint = {}

function ASBZWaypoint:RemoveMarker() end
function ASBZWaypoint:AddMarker() end


---@class ASBZWeapon : ASBZEquippable
---@field bMergeMeshes boolean
---@field ModularMeshComponent USBZModularMeshComponent
---@field WeaponTags FGameplayTagContainer
---@field AnimationState ESBZWeaponAnimationState
---@field AmmoMeshComponentArray TArray<UStaticMeshComponent>
---@field CurrentAmmoData USBZWeaponAmmoData
---@field ShaderSightOffset float
---@field VelocityTrackedComponentMap TMap<FGameplayTag, FSBZVelocityTrackedComponentArrayData>
---@field PrespawnedActorMap TMap<FGameplayTag, AActor>
---@field WeaponCustomizationFOV float
ASBZWeapon = {}



---@class ASBZWeaponCharm : ASBZEquippableCharm
ASBZWeaponCharm = {}


---@class ASBZWheeledVehicle : AWheeledVehicle
---@field OnBeginStop FSBZWheeledVehicleOnBeginStop
---@field OnStopped FSBZWheeledVehicleOnStopped
---@field OnSplineEntered FSBZWheeledVehicleOnSplineEntered
---@field OnSplineLeft FSBZWheeledVehicleOnSplineLeft
---@field OnSplineEndReached FSBZWheeledVehicleOnSplineEndReached
---@field OnPathEndReached FSBZWheeledVehicleOnPathEndReached
---@field OnBeginObstacle FSBZWheeledVehicleOnBeginObstacle
---@field OnEndObstacle FSBZWheeledVehicleOnEndObstacle
---@field AudioComponent USBZWheeledVehicleAudioComponent
---@field RadioComponent USBZAmbientSoundRadioComponent
---@field LightsCPDGraph TMap<int32, FSBZVehicleLights>
---@field ActiveLightsBitmask uint8
---@field AnimationCollection USBZVehicleAnimationCollection
---@field VariationSetData USBZVariationSetData
---@field NavModifierComponent USBZWheeledVehicleNavModifierComponent
---@field CollisionExtentShrinkFactor FVector
---@field DoorStatesPerType TArray<FSBZVehicleDoorStatePerType>
---@field FXs TArray<FSBZWheeledVehicleFX>
---@field SplineFollowingComponent USBZVehicleSplineFollowingComponent
---@field Obstacles TArray<AActor>
---@field CachedCoverPoints TArray<ASBZCoverPoint>
---@field ObstacleCheckInterval float
---@field RepMove FSBZWheeledVehicleReplicatedMovement
---@field Seed int32
---@field DebugSnapshots TArray<FSBZDebugSnapshot>
---@field DebugLocation FVector
---@field DebugServerLocation0 FVector
---@field DebugServerLocation1 FVector
ASBZWheeledVehicle = {}

---@param LightType ESBZVehicleLightType
---@param bIsOn boolean
function ASBZWheeledVehicle:SetLightType(LightType, bIsOn) end
---@param CPDIndex int32
---@param LightBit ESBZVehicleLightCPD
---@param bIsBroken boolean
function ASBZWheeledVehicle:SetLightCPDBroken(CPDIndex, LightBit, bIsBroken) end
---@param DoorType ESBZVehicleDoorType
---@param DoorState ESBZVehicleDoorState
function ASBZWheeledVehicle:SetDoorState(DoorType, DoorState) end
---@param Spline ASBZSpline
function ASBZWheeledVehicle:OnSwitchSplineDirectionCallback(Spline) end
function ASBZWheeledVehicle:OnStoppedCallback() end
---@param Spline ASBZSpline
function ASBZWheeledVehicle:OnSplineLeftCallback(Spline) end
---@param Spline ASBZSpline
---@param bPathEntered boolean
---@param bTeleportToPathStart boolean
function ASBZWheeledVehicle:OnSplineEnteredCallback(Spline, bPathEntered, bTeleportToPathStart) end
---@param Spline ASBZSpline
function ASBZWheeledVehicle:OnSplineEndReachedCallback(Spline) end
function ASBZWheeledVehicle:OnRep_Seed() end
function ASBZWheeledVehicle:OnRep_RepMove() end
function ASBZWheeledVehicle:OnRep_DoorStatesPerType() end
function ASBZWheeledVehicle:OnPathEndReachedCallback() end
function ASBZWheeledVehicle:OnBeginStopCallback() end
---@param DoorType ESBZVehicleDoorType
---@param DoorState ESBZVehicleDoorState
function ASBZWheeledVehicle:Multicast_SetDoorState(DoorType, DoorState) end
---@return USBZVehicleSplineFollowingComponent
function ASBZWheeledVehicle:GetVehicleSplineFollowingComponent() end
---@param DoorType ESBZVehicleDoorType
---@return ESBZVehicleDoorState
function ASBZWheeledVehicle:GetDoorState(DoorType) end


---@class ASBZWhizzby : AActor
---@field PlayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field PlayerCameraFeedbackComponent USBZPlayerCameraFeedbackComponent
ASBZWhizzby = {}



---@class ASBZWindow : ASBZGate
ASBZWindow = {}


---@class ASBZWorldSettings : AWorldSettings
---@field SurfaceTypesConfig USBZSurfaceTypesConfig
---@field OverrideSoftSurfaceTypesConfig TSoftObjectPtr<USBZSurfaceTypesConfig>
---@field MusicEvent UAkAudioEvent
---@field StopMusicEvent UAkAudioEvent
---@field MusicSwitches TMap<FName, FName>
---@field KeyItemDataMap TMap<FGameplayTag, USBZKeyItemData>
---@field bStartMusicOnBeginPlay boolean
---@field bIsSoloMusicStartOnActionPhase boolean
---@field bStopMusicOnEndPlay boolean
---@field bIsMusicMainMenu boolean
---@field bSkipNegotiation boolean
---@field bSkipFirstResponders boolean
---@field TimeToNextState float
---@field bStartInCasing boolean
---@field bAICrewStartInCasing boolean
---@field bStartWithAICrew boolean
---@field bIsInRandomSublevel boolean
---@field AssaultManagerSettings UPD3AssaultSettings
---@field VehicleSpawnSettings TArray<FSBZVehicleSpawnData>
---@field NegotiationManagerSettings USBZNegotiationSettings
---@field CivilianManagerSettings USBZCivilianManagerSettings
---@field TrafficManagerSettings USBZTrafficSettings
---@field LifeActionSettings USBZLifeActionSettings
---@field SmallTalkCollections TArray<USBZAISmallTalkCollection>
---@field PhoneSmallTalkCollections TArray<USBZAISmallTalkCollection>
---@field GlobalMaterialParameters FSBZGlobalMaterialParameters
---@field SoloPlayerLoadoutOverride USBZPlayerLoadoutAsset
---@field LoadedDynamicMarkerAssetSet TSet<USBZMarkerDataAsset>
---@field CoverRoomConnection TMap<TSoftObjectPtr<ASBZCoverPoint>, TSoftObjectPtr<ASBZRoomVolume>>
---@field ConnectorGateConnection TMap<TSoftObjectPtr<ASBZRoomConnectorVolume>, TSoftObjectPtr<ASBZGate>>
---@field DespawnRoomConnection TMap<TSoftObjectPtr<ASBZDespawnVolume>, TSoftObjectPtr<ASBZRoomVolume>>
---@field DefenseRoomConnection TMap<TSoftObjectPtr<ASBZAIDefensePoint>, TSoftObjectPtr<ASBZRoomVolume>>
---@field ProtectRoomConnection TMap<TSoftObjectPtr<ASBZAIProtectPoint>, TSoftObjectPtr<ASBZRoomVolume>>
---@field AgilityNavlinkConnection TMap<TSoftObjectPtr<ASBZAgilityNavLink>, FSBZAgilityNavlinkRooms>
---@field ConnectorComponentConnection TMap<TSoftObjectPtr<AActor>, FSBZAgilityNavlinkRooms>
---@field AcousticPortalConnection TMap<TSoftObjectPtr<ASBZAkAcousticPortal>, TSoftObjectPtr<ASBZGate>>
---@field LifeActionMontages TArray<UAnimMontage>
---@field LifeActionComponents TArray<USBZLifeActionComponent>
ASBZWorldSettings = {}



---@class ASBZZipTieEquippable : ASBZEquippable
---@field BrokenMesh UStaticMesh
ASBZZipTieEquippable = {}



---@class ASBZZipline : AActor
---@field NavLinkStart FVector
---@field NavLinkEnd FVector
---@field bSnapNavLinkEnd boolean
---@field bSnapNavLinkStart boolean
---@field ZiplineType ESBZZiplineType
---@field OverlapBox UBoxComponent
---@field SplineComponent USplineComponent
---@field StartPointMesh UStaticMeshComponent
---@field EndPointMesh UStaticMeshComponent
---@field InteractableComponent USBZInteractableComponent
---@field NavLink ASBZLongNavLink
---@field StartDropoffVelocity FVector
---@field EndDropoffVelocity FVector
---@field MaxDistanceSolverIterations int32
---@field ExitLaunchSpeed float
---@field bDisabledAtStart boolean
---@field bZiplineEnabled boolean
---@field DistanceFromEndToStop float
---@field HalfExtentSizeToAdd float
ASBZZipline = {}

---@param bEnabled boolean
function ASBZZipline:SetZiplineEnabled(bEnabled) end
function ASBZZipline:OnZiplineEnabledCallback() end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ASBZZipline:OnZiplineBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
function ASBZZipline:OnRep_ZiplineEnabled() end
---@param MovingActor AActor
---@param DestinationPoint FVector
function ASBZZipline:OnNavLinkReached(MovingActor, DestinationPoint) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bIsLocallyControlledInteractor boolean
function ASBZZipline:OnCompleteInteraction(Interactable, Interactor, bIsLocallyControlledInteractor) end
---@param bEnabled boolean
function ASBZZipline:Multicast_ZiplineEnabled(bEnabled) end
---@param bEnabled boolean
---@param bDoCosmetics boolean
function ASBZZipline:BP_OnZiplineEnabledChanged(bEnabled, bDoCosmetics) end


---@class ASBZZiplineMotor : ASBZCosmeticProp
---@field AheadOffsetFromZipLiner float
---@field VerticalAheadOffsetFromZipLiner float
---@field OffsetFromZipLine FTransform
---@field ZipLiner TScriptInterface<ISBZZiplinerInterface>
---@field CableComponent USBZCableComponent
ASBZZiplineMotor = {}



---@class FAsyncLoadLevelParams
FAsyncLoadLevelParams = {}


---@class FChallengeLocalizationEntry
---@field ChallengeId FString
---@field InternalName FString
---@field InternalDescription FString
---@field InGameName FString
---@field InGameDescription FString
FChallengeLocalizationEntry = {}



---@class FChallengeRequest
FChallengeRequest = {}


---@class FColliderDataContainer
---@field Collider UPrimitiveComponent
---@field AssociatedInteractable int32
FColliderDataContainer = {}



---@class FECommerenceRewardNotifPayload
---@field rewardTopic FString
---@field rewardCode FString
---@field rewardCondition FString
---@field EntitlementSummaries TArray<FAccelByteModelsEntitlementSummary>
---@field CreditSummaries TArray<FAccelByteModelsCreditSummary>
FECommerenceRewardNotifPayload = {}



---@class FHostMigrationInfo
---@field MigratableHosts TArray<FMigratableHost>
---@field MissionSeed int32
FHostMigrationInfo = {}



---@class FInteractableDataContainer
---@field Interactable USBZInteractableComponent
---@field InteractableOwner int32
---@field InteractionLocation FVector
---@field MoveToLocation FVector
FInteractableDataContainer = {}



---@class FMapConfigurationData
---@field LoudBaseExperience int32
---@field StealthBaseExperience int32
---@field DifficultyExperienceModifierArray TArray<float>
---@field StealthDifficultyCashRewardModifierArray TArray<FSBZCashRewardModifier>
---@field LoudDifficultyCashRewardModifierArray TArray<FSBZCashRewardModifier>
---@field LoudLootValuesArray TArray<FSBZLootValueArray>
---@field StealthLootValuesArray TArray<FSBZLootValueArray>
---@field InstantLootValues FSBZInstantLootValues
---@field ObjectivesToExperienceRewardMap TMap<FString, float>
---@field LoudMilestoneToExperienceRewardMap TMap<FString, float>
---@field StealthMilestoneToExperienceRewardMap TMap<FString, float>
---@field PerformanceBonusMap TMap<FString, FSBZPerformanceBonusArray>
---@field ItemIdRewardMap TMap<FString, float>
---@field LoudLevelCompletedStatistics TMap<FString, FSBZPlayerStatisticArray>
---@field StealthLevelCompletedStatistics TMap<FString, FSBZPlayerStatisticArray>
FMapConfigurationData = {}



---@class FMigratableHost
---@field PlayerUniqueId FUniqueNetIdRepl
---@field HostAddress FString
FMigratableHost = {}



---@class FPD3AssaulSustainPhaseSettings
---@field StartAtProgression float
---@field SustainPhaseDuration float
FPD3AssaulSustainPhaseSettings = {}



---@class FPD3AssaultDifficultySettings
---@field MaxAliveAISpawnCount int32
---@field bAllowMixing boolean
---@field ProgressionArray TArray<FPD3AssaultProgressionSettings>
---@field WaitPhaseDurationProgressionArray TArray<FPD3AssaultWaitPhaseSettings>
---@field SustainPhaseDurationProgressionArray TArray<FPD3AssaulSustainPhaseSettings>
---@field SquadLimits TMap<TSoftClassPtr<USBZAISquadOrder>, FSBZSquadLimits>
FPD3AssaultDifficultySettings = {}



---@class FPD3AssaultPlatformSettings
---@field MaxTotalAISpawnCountModifier int32
---@field MaxAliveAISpawnCountModifier int32
---@field MaxSpawnGroupQueryCountModifier int32
FPD3AssaultPlatformSettings = {}



---@class FPD3AssaultProgressionSettings
---@field StartAtProgression float
---@field SquadArray TArray<FPD3SpawnSquad>
FPD3AssaultProgressionSettings = {}



---@class FPD3AssaultWaitPhaseSettings
---@field StartAtProgression float
---@field WaitPhaseDuration float
FPD3AssaultWaitPhaseSettings = {}



---@class FPD3CallerReason
---@field Reason USBZActionNotificationAsset
FPD3CallerReason = {}



---@class FPD3DramaSettings
---@field FullyDecaySeconds float
---@field DecayDelayTime float
---@field PlayerHurtChange float
---@field PlayerHurtDistanceMultiplier FRuntimeFloatCurve
---@field PlayerDefeatedChange float
---@field PlayerKilledChange float
---@field AIKillDistance float
---@field AIKillDramaIncreaseAmount float
---@field AITypesToIgnore FGameplayTagContainer
---@field DramaAlivePlayersModifier TArray<float>
---@field DramaCooldownTime float
---@field DramaSpawnModifier float
FPD3DramaSettings = {}



---@class FPD3ModifiableLoadoutData
---@field ToolData USBZToolData
---@field ModifiedToolData USBZToolData
FPD3ModifiableLoadoutData = {}



---@class FPD3PagerHeistData
---@field MaxAnswerCount uint8
---@field TimedOutCountIncrease uint8
FPD3PagerHeistData = {}



---@class FPD3PawnVariationArray
---@field PawnArray TArray<TSubclassOf<APawn>>
FPD3PawnVariationArray = {}



---@class FPD3PlayerLoadout
---@field PreferredCharacterDataArray TArray<USBZPlayerCharacterData>
---@field EquippableConfigArray TArray<FSBZEquippableConfig>
---@field OverkillWeaponConfig FSBZEquippableConfig
---@field ThrowableConfigArray TArray<FSBZThrowableConfig>
---@field MaskData USBZMaskData
---@field SuitData USBZSuitData
---@field GloveData USBZGloveData
---@field MaskConfig FSBZMaskConfig
---@field SuitConfig FSBZSuitConfig
---@field ArmorData USBZArmorData
---@field SkillArray TArray<USBZSkillData>
---@field ModifiableLoadoutDataArray TArray<FPD3ModifiableLoadoutData>
---@field AbilityData USBZPlayerAbilityData
FPD3PlayerLoadout = {}



---@class FPD3SpawnSquad
---@field PawnArray TArray<UPD3SpawnSquadPawn>
---@field Weight float
---@field CachedPawnTypes FGameplayTagContainer
FPD3SpawnSquad = {}



---@class FPD3SquadSpawnReservation
FPD3SquadSpawnReservation = {}


---@class FPD3TickerSettings
---@field DisplayText FText
---@field Text FText
---@field TextColor FLinearColor
---@field BackgroundColor FLinearColor
FPD3TickerSettings = {}



---@class FPD3VehicleSpawnRequest
---@field SpawnData USBZAssaultVehicleSpawnerData
---@field EnterSpline ASBZSpline
---@field ExitSpline ASBZSpline
FPD3VehicleSpawnRequest = {}



---@class FPlayerWaitingActionPhaseState
FPlayerWaitingActionPhaseState = {}


---@class FPlayerWaitingForReady
---@field AutoReadyTimer FTimerHandle
---@field PlayerId FUniqueNetIdRepl
FPlayerWaitingForReady = {}



---@class FSBZAIAlertnessComment
---@field RaisedTo USBZVoiceCommentDataAsset
---@field LoweredTo USBZVoiceCommentDataAsset
FSBZAIAlertnessComment = {}



---@class FSBZAIAlertnessDialogRules
---@field bBlock boolean
---@field bInterrupt boolean
FSBZAIAlertnessDialogRules = {}



---@class FSBZAIConfigDPSData
---@field Damage float
---@field Interval float
FSBZAIConfigDPSData = {}



---@class FSBZAIConfigEvade
---@field MaxTimeSinceUnderFireToEvade float
---@field MaxTimeAfterUnderFireToEvade float
---@field FastEvadeCoolDown float
---@field SlowEvadeCoolDown float
---@field MinFireDist float
---@field MinSlowEvadeDist float
---@field MinFastEvadeDist float
---@field MaxAngleToStopSlowEvade float
---@field MaxAngleToStartSlowEvade float
---@field MaxMovingSpeed float
---@field MinTimeSinceDamage float
FSBZAIConfigEvade = {}



---@class FSBZAICrewChatEvent : FSBZGameEventStructBase
---@field CrewState ASBZAICrewState
---@field Message FString
FSBZAICrewChatEvent = {}



---@class FSBZAICrewDefeatStateChangedData : FSBZDefeatStateChangedData
---@field AICrewState ASBZAICrewState
FSBZAICrewDefeatStateChangedData = {}



---@class FSBZAIDataProvider_NavQueryFilter : FAIDataProviderTypedValue
---@field DefaultValue TSubclassOf<UNavigationQueryFilter>
FSBZAIDataProvider_NavQueryFilter = {}



---@class FSBZAIEscortStateData
---@field EscortStateBehavior UBehaviorTree
---@field Priority uint8
---@field NavQueryFilterOverride TSubclassOf<UNavigationQueryFilter>
FSBZAIEscortStateData = {}



---@class FSBZAIGasGrenadeDifficultyData
---@field DamagePerSecond float
---@field DurationSeconds float
---@field TickSeconds float
---@field ArmorPenetration float
---@field DropDamage float
FSBZAIGasGrenadeDifficultyData = {}



---@class FSBZAIMontageMoveRequest
FSBZAIMontageMoveRequest = {}


---@class FSBZAIRepositionType
---@field Predicate TSubclassOf<USBZAIRepositionPredicate>
---@field EQSRequest FEQSParametrizedQueryExecutionRequest
FSBZAIRepositionType = {}



---@class FSBZAISquadOrderData
---@field TargetActor AActor
FSBZAISquadOrderData = {}



---@class FSBZAITeamStimulusEvent
---@field Enemy AActor
---@field Broadcaster AActor
FSBZAITeamStimulusEvent = {}



---@class FSBZAITouchEvent
---@field TouchReceiver AAIController
---@field OtherActor AActor
FSBZAITouchEvent = {}



---@class FSBZAIUtilityDeciderDebugData
FSBZAIUtilityDeciderDebugData = {}


---@class FSBZAIUtilityScorerDebugData
FSBZAIUtilityScorerDebugData = {}


---@class FSBZAIVisibilityLeafNode
FSBZAIVisibilityLeafNode = {}


---@class FSBZAIVisibilitySerializablePayload
---@field CrouchDistances TArray<uint16>
---@field StandDistances TArray<uint16>
---@field UpAzymut15Distances TArray<uint16>
---@field UpAzymut30Distances TArray<uint16>
---@field UpAzymut45Distances TArray<uint16>
---@field UpAzymut60Distances TArray<uint16>
---@field Center FIntVector
FSBZAIVisibilitySerializablePayload = {}



---@class FSBZAbilityBuffTypeActivation
---@field Action ESBZAbilityBuffTypeAction
---@field Type ESBZPlayerAbilityBuffType
FSBZAbilityBuffTypeActivation = {}



---@class FSBZAccelerationBasedAngle
---@field Speed float
---@field Acceleration float
---@field Deceleration float
FSBZAccelerationBasedAngle = {}



---@class FSBZActionControlReference : FSBZBaseControlReference
---@field ActionList TArray<FName>
FSBZActionControlReference = {}



---@class FSBZActionMetaData
---@field Action USBZAIAction
---@field bUseMaxAge boolean
---@field MaxAge float
---@field bUseMinAge boolean
---@field MinAge float
---@field RequiredTags FGameplayTagContainer
---@field ExecutorRequiredTags FGameplayTagContainer
FSBZActionMetaData = {}



---@class FSBZActiveDialogData
---@field DialogDataAsset USBZDialogDataAsset
---@field Performers TArray<AActor>
FSBZActiveDialogData = {}



---@class FSBZActorFilterDefinition
---@field Identifier FName
---@field ActorClass TSubclassOf<AActor>
---@field DesiredCountRange FInt32Range
FSBZActorFilterDefinition = {}



---@class FSBZActorMultiHitResult
---@field ActorPtr TWeakObjectPtr<AActor>
FSBZActorMultiHitResult = {}



---@class FSBZActorPool
---@field Actors TArray<AActor>
FSBZActorPool = {}



---@class FSBZActorSpawnRequest
---@field Data USBZActorSpawnRequestData
---@field Spawner TSoftObjectPtr<ASBZActorSpawnBase>
FSBZActorSpawnRequest = {}



---@class FSBZActorSpawnRequestHandle
FSBZActorSpawnRequestHandle = {}


---@class FSBZActorThrowNetData
---@field ActorToThrow AActor
---@field ThrowForce FVector
FSBZActorThrowNetData = {}



---@class FSBZAdditiveMoveData
---@field AdditiveMoveAlpha FRuntimeFloatCurve
---@field AdditiveCameraAlpha FRuntimeFloatCurve
---@field AdditiveMovePlayRate FRuntimeFloatCurve
FSBZAdditiveMoveData = {}



---@class FSBZAgentAvoidance
---@field AvoidanceUID int32
---@field LockedVelocity FVector
---@field Timer float
---@field BottleNeckDetectionTimer float
---@field RadiusModifier float
---@field TargetRadiusModifier float
FSBZAgentAvoidance = {}



---@class FSBZAgentData
---@field Id TArray<uint8>
---@field Pawn TArray<APawn>
---@field PawnUniqueId TArray<int32>
---@field Mesh TArray<USkeletalMeshComponent>
---@field Movement TArray<USBZAICharacterMovementComponent>
---@field Settings TArray<FSBZAgentSettings>
---@field Position TArray<FVector>
---@field SimulatedPosition TArray<FVector>
---@field Rotation TArray<FQuat>
---@field SimulatedRotation TArray<FQuat>
---@field TargetRotation TArray<FQuat>
---@field RemoteViewYaw TArray<uint8>
---@field RemoteDesiredViewYaw TArray<uint8>
---@field Velocity TArray<FVector>
---@field bVelocityIsRequested TArray<boolean>
---@field ActualVelocity TArray<FVector>
---@field DesiredAcceleration TArray<FVector>
---@field MaxSpeed TArray<uint16>
---@field Extent TArray<FVector>
---@field MovementMode TArray<ESBZMovementMode>
---@field CharacterMovementState TArray<ESBZCharacterMovementState>
---@field TurnDirection TArray<ESBZTurnDirection>
---@field OverlapTimer TArray<float>
---@field Flags TArray<uint8>
---@field Collision TArray<FSBZAgentMeshCollision>
---@field MontageHash TArray<uint32>
---@field RMTargetWorldWS TArray<FVector>
---@field SkeletalMeshInfos TArray<FSBZSkeletalMeshInfos>
---@field CapsuleInfos TArray<FSBZCapsuleInfos>
FSBZAgentData = {}



---@class FSBZAgentDataClient
---@field ServerPosition TArray<FVector>
---@field ServerTimestamp TArray<float>
---@field ServerLocalTimestamp TArray<float>
---@field PrevServerPosition TArray<FVector>
---@field PrevServerTimestamp TArray<float>
---@field ServerRotation TArray<FQuat>
---@field ServerVelocity TArray<FVector>
---@field ServerAcceleration TArray<FVector>
---@field GoalPosition TArray<FVector>
---@field GoalRotation TArray<FQuat>
---@field RotationAtLastGoal TArray<FQuat>
---@field RemoteViewYawAtLastGoal TArray<uint8>
---@field GoalLocalTimestamp TArray<float>
---@field PredictedServerPosition TArray<FVector>
---@field PredictedServerVelocity TArray<FVector>
---@field bClearVelocity TArray<boolean>
---@field SimulatedPositionWarpTimer TArray<float>
---@field ServerMontageHash TArray<uint32>
---@field ServerMontagePosition TArray<uint8>
---@field RealServerPosition TArray<FVector>
---@field RealServerRotation TArray<FQuat>
---@field RealServerMontagePosition TArray<float>
---@field BoostSpeed TArray<float>
---@field ReplicationGroupIndex TArray<uint8>
---@field RepMoveQueue TArray<FSBZRepMoveQueue>
---@field CurrentRepMove TArray<FSBZAgentState>
FSBZAgentDataClient = {}



---@class FSBZAgentDataServer
---@field PreviousYaw TArray<float>
---@field MontagePosition TArray<float>
---@field MontageLength TArray<float>
---@field CollideWithOtherAgentsTimer TArray<float>
---@field Avoidance TArray<FSBZAgentAvoidance>
---@field NavState TArray<FSBZAgentNavState>
---@field NavRestrict TArray<FSBZAgentNavRestrict>
---@field CorridorDebugMesh TArray<FSBZMesh>
---@field bForceReplication TArray<boolean>
---@field ReplicationGroupIndices TArray<FSBZReplicationGroupIndices>
FSBZAgentDataServer = {}



---@class FSBZAgentDeltaState : FSBZAgentStateBase
---@field StreamIndex int32
---@field SourceFrameId uint8
FSBZAgentDeltaState = {}



---@class FSBZAgentManagerPostPhysicsTickFunction : FTickFunction
FSBZAgentManagerPostPhysicsTickFunction = {}


---@class FSBZAgentMeshCollision
---@field BodyIndex TArray<int16>
---@field BoneIndex TArray<int16>
---@field BoneNames TArray<FName>
---@field Transform TArray<FTransform>
---@field PhysicalMaterial TArray<UPhysicalMaterial>
---@field Shapes TArray<FSBZShape>
---@field bTransformsUpToDate boolean
FSBZAgentMeshCollision = {}



---@class FSBZAgentNavRestrict
---@field bIsCorridorValid boolean
---@field bIsRecomputingPath boolean
FSBZAgentNavRestrict = {}



---@class FSBZAgentNavState
---@field LastFloorCheckZ float
---@field ProjectionTimer float
---@field CachedProjectedNavMeshHitResult FSBZHitResultLite
FSBZAgentNavState = {}



---@class FSBZAgentSettings
---@field MaxAcceleration float
---@field MaxAngularSpeed float
---@field Friction float
---@field Radius float
---@field TraceRadius float
---@field Height float
---@field NeighbourDetectionRange float
---@field bNavProjection boolean
---@field NavMeshProjectionInterval float
---@field NavMeshProjectionHeightScaleUp float
---@field NavMeshProjectionHeightScaleDown float
---@field MinNavMeshProjectionHeightUp float
---@field NavMeshProjectionInterpSpeed float
---@field RVOGroupMask int32
---@field RVOGroupsToAvoid int32
---@field RVOGroupsToIgnore int32
---@field RVOWeight float
---@field RVOTestRadius float
---@field JogSpeed float
FSBZAgentSettings = {}



---@class FSBZAgentState : FSBZAgentStateBase
---@field DeltaTime float
---@field Timestamp float
FSBZAgentState = {}



---@class FSBZAgentStateBase : FSBZAgentStateVariables
---@field Id uint8
FSBZAgentStateBase = {}



---@class FSBZAgentStateVariables
---@field Position FIntVector
---@field DesiredAcceleration FIntVector
---@field MontageHash uint32
---@field MaxSpeed uint16
---@field Yaw uint8
---@field RemoteViewYaw uint8
---@field RemoteDesiredViewYaw uint8
---@field MovementMode ESBZMovementMode
---@field CharacterMovementState ESBZCharacterMovementState
---@field TurnDirection ESBZTurnDirection
---@field bClearVelocity uint8
---@field MontagePosition uint8
---@field ReplicationGroupIndex uint8
---@field bVelocityIsRequested uint8
FSBZAgentStateVariables = {}



---@class FSBZAgilityAnimationQueryData
FSBZAgilityAnimationQueryData = {}


---@class FSBZAgilityAnimationQueryFilter
---@field StartAgilityType ESBZAgilityPointType
---@field EndAgilityType ESBZAgilityPointType
---@field DistanceRange FFloatInterval
---@field DistanceRangeAxis ESBZAgilitySegmentAxis
FSBZAgilityAnimationQueryFilter = {}



---@class FSBZAgilityAnimationQueryParam
---@field AnimationName FName
---@field EntrySpeed FFloatInterval
---@field EntryRotationDiff FFloatInterval
---@field AlignmentAngle FFloatInterval
---@field AreaClass TSubclassOf<UNavAreaBase>
---@field AnimationFilters TArray<FSBZAgilityAnimationQueryFilter>
---@field AgilityMontages TArray<FSBZAgilityMontage>
FSBZAgilityAnimationQueryParam = {}



---@class FSBZAgilityMontage
---@field CharacterClass TSoftClassPtr<ASBZAICharacter>
---@field Montage UAnimMontage
FSBZAgilityMontage = {}



---@class FSBZAgilityNavlinkRooms
---@field LeftRoom TSoftObjectPtr<ASBZRoomVolume>
---@field RightRoom TSoftObjectPtr<ASBZRoomVolume>
FSBZAgilityNavlinkRooms = {}



---@class FSBZAgilityRowQueryParam
---@field AgilityTypeName FName
---@field AgilityType ESBZAgilityType
---@field AnimationQueryParams TArray<FSBZAgilityAnimationQueryParam>
FSBZAgilityRowQueryParam = {}



---@class FSBZAgilitySweepParams
---@field World UWorld
FSBZAgilitySweepParams = {}



---@class FSBZAgilityTrajectory
---@field AgilityType ESBZAgilityType
---@field Points TArray<FSBZAgilityTrajectoryPoint>
---@field bValid boolean
---@field ForcedMontage UAnimMontage
---@field bRecomputeEndUsingAnimation boolean
---@field AreaClass TSubclassOf<UNavAreaBase>
FSBZAgilityTrajectory = {}



---@class FSBZAgilityTrajectoryDebugSettings
---@field bDrawTrajectory boolean
---@field bDrawDebug boolean
---@field DrawStep int16
---@field bDrawOnlyCurrentStep boolean
FSBZAgilityTrajectoryDebugSettings = {}



---@class FSBZAgilityTrajectoryPoint
---@field Location FVector
---@field Rotation FRotator
---@field AgilityPointType ESBZAgilityPointType
FSBZAgilityTrajectoryPoint = {}



---@class FSBZAgilityTraversalQueryParamsRow
---@field AgilityType ESBZAgilityTraversalType
---@field ObstacleHeight FFloatRange
---@field SpeedLimit FSBZFloatLimit
---@field TraverseDistancePerSpeed FFloatRange
---@field TriggerDistancePerSpeed FFloatRange
---@field DistAfterObstaclePerSpeed FFloatRange
---@field MinFallHeight float
---@field JumpSpeedCurve FRuntimeFloatCurve
---@field bEntrySpeedOverridesJumpCurve boolean
---@field TraversalSpeedCurve FRuntimeFloatCurve
---@field bEntrySpeedOverridesTraversalCurve boolean
---@field LandingSpeedCurve FRuntimeFloatCurve
---@field bEntrySpeedOverridesLandCurve boolean
---@field EyeHeight float
---@field LockCameraData FSBZLockCameraData
---@field DebugColor FColor
FSBZAgilityTraversalQueryParamsRow = {}



---@class FSBZAgilityTraversalSplineHandler
FSBZAgilityTraversalSplineHandler = {}


---@class FSBZAgilityTraversalTrajectory
---@field WallImpactNormal FVector
---@field WallImpactLocation FVector
---@field JumpPoint FSBZAgilityTraversalTrajectoryPoint
---@field EdgePointFront FSBZAgilityTraversalTrajectoryPoint
---@field EdgePointBack FSBZAgilityTraversalTrajectoryPoint
---@field LandPoint FSBZAgilityTraversalTrajectoryPoint
---@field AgilityType ESBZAgilityTraversalType
---@field bEndsFalling boolean
---@field bEndsInCrouchState boolean
---@field bIsValid boolean
FSBZAgilityTraversalTrajectory = {}



---@class FSBZAgilityTraversalTrajectoryPoint
---@field bIsColliding boolean
---@field Radius float
---@field Height float
---@field Center FVector
FSBZAgilityTraversalTrajectoryPoint = {}



---@class FSBZAllowedStanceTransition
---@field PreviousStance ESBZCharacterStance
---@field CurrentStance ESBZCharacterStance
---@field BlockingTags FGameplayTagContainer
FSBZAllowedStanceTransition = {}



---@class FSBZAmmoPickupLookup
---@field Actor ASBZAmmoPickup
FSBZAmmoPickupLookup = {}



---@class FSBZAnimMode_LipSync : FAnimNode_Base
---@field SourcePose FPoseLink
---@field PhonemeBlendInType EAlphaBlendOption
---@field PhonemeBlendOutType EAlphaBlendOption
---@field PhonemeStrength float
---@field DialogAnimDataWrapper FSBZDialogAnimDataWrapper
---@field DialogStartTime float
---@field Alpha float
---@field AlphaBoolBlend FInputAlphaBoolBlend
---@field AlphaCurveName FName
---@field AlphaScaleBiasClamp FInputScaleBiasClamp
---@field AlphaInputType EAnimAlphaInputType
---@field bAlphaBoolEnabled boolean
---@field LODThreshold int32
---@field LODInterpolateTime float
---@field LODInterpolateTimer float
FSBZAnimMode_LipSync = {}



---@class FSBZAnimMode_OrientationWarping : FAnimNode_Base
---@field BasePose FPoseLink
---@field LocomotionAngle float
---@field Settings FSBZAxisSettings
---@field PelvisBone FBoneReference
---@field SpineBones TArray<FSBZBoneRef>
---@field IKFootRootBone FBoneReference
---@field Alpha float
---@field AlphaBoolBlend FInputAlphaBoolBlend
---@field AlphaCurveName FName
---@field AlphaScaleBiasClamp FInputScaleBiasClamp
---@field AlphaInputType EAnimAlphaInputType
---@field bAlphaBoolEnabled boolean
---@field LODThreshold int32
---@field LODInterpolateTime float
---@field LODInterpolateTimer float
FSBZAnimMode_OrientationWarping = {}



---@class FSBZAnimNode_ApplyAdditiveLayeredOneBone : FAnimNode_Base
---@field Base FPoseLink
---@field Additive FPoseLink
---@field Alpha float
---@field AlphaLayerOne float
---@field AlphaOthers float
---@field LayerOneBoneName FName
---@field AlphaScaleBias FInputScaleBias
---@field LODThreshold int32
---@field LODInterpolateTime float
---@field LODInterpolateTimer float
---@field AlphaBoolBlend FInputAlphaBoolBlend
---@field AlphaCurveName FName
---@field AlphaScaleBiasClamp FInputScaleBiasClamp
---@field AlphaInputType EAnimAlphaInputType
---@field bAlphaBoolEnabled boolean
---@field Space EAdditiveAnimationType
FSBZAnimNode_ApplyAdditiveLayeredOneBone = {}



---@class FSBZAnimNode_ApplyBoneOffsetFromPose : FAnimNode_Base
---@field BasePose FPoseLink
---@field RefPose FPoseLink
---@field Bone FBoneReference
---@field RefBone FBoneReference
FSBZAnimNode_ApplyBoneOffsetFromPose = {}



---@class FSBZAnimNode_BoneKeepRefPose : FAnimNode_SkeletalControlBase
---@field BonesToConstrain FSBZBoneRefArrayParam
FSBZAnimNode_BoneKeepRefPose = {}



---@class FSBZAnimNode_BoneLocker : FAnimNode_SkeletalControlBase
---@field BoneLockers TArray<FSBZBoneLocker>
---@field bComponentSpace boolean
FSBZAnimNode_BoneLocker = {}



---@class FSBZAnimNode_BuiltInAnimMontagePlayer : FAnimNode_SkeletalControlBase
---@field BonesToModify TArray<FBoneReference>
---@field AnimMontagesHandler USBZBuiltInAnimMontagesHandler
FSBZAnimNode_BuiltInAnimMontagePlayer = {}



---@class FSBZAnimNode_ChangeChamberAnimatedBullet : FAnimNode_SkeletalControlBase
---@field BoneToAnimateName FName
---@field AnimatedBoneName FName
FSBZAnimNode_ChangeChamberAnimatedBullet = {}



---@class FSBZAnimNode_CopyBoneDeltaMultiTargets : FAnimNode_SkeletalControlBase
---@field SourceBone FSBZBoneRefParam
---@field TargetBones FSBZBoneRefArrayParam
---@field bCopyTranslation boolean
---@field bCopyRotation boolean
---@field bCopyScale boolean
---@field CopyMode CopyBoneDeltaMode
---@field TranslationMultiplier float
---@field RotationMultiplier float
---@field ScaleMultiplier float
FSBZAnimNode_CopyBoneDeltaMultiTargets = {}



---@class FSBZAnimNode_CurveMatchedBlendSpacePlayer : FAnimNode_AssetPlayerBase
---@field X float
---@field Y float
---@field Z float
---@field BlendSpace UBlendSpaceBase
---@field CurveName FName
---@field CurveTarget float
---@field PlayRate float
---@field BlendFilter FBlendFilter
---@field BlendSampleDataCache TArray<FBlendSampleData>
---@field PreviousBlendSpace UBlendSpaceBase
FSBZAnimNode_CurveMatchedBlendSpacePlayer = {}



---@class FSBZAnimNode_CurveMatchedSequencePlayer : FAnimNode_AssetPlayerBase
---@field Sequence UAnimSequenceBase
---@field CurveName FName
---@field CurveTarget float
---@field bAutoPlay boolean
---@field PreviousSequence UAnimSequenceBase
FSBZAnimNode_CurveMatchedSequencePlayer = {}



---@class FSBZAnimNode_HipsZBlending : FAnimNode_SkeletalControlBase
---@field HipsBoneRef FBoneReference
---@field bCanStartNewBlending boolean
---@field bReset boolean
---@field BlendDuration float
---@field BlendEaseExp float
FSBZAnimNode_HipsZBlending = {}



---@class FSBZAnimNode_PoseMatchingBlendSpacePlayer : FAnimNode_AssetPlayerBase
---@field X float
---@field Y float
---@field Z float
---@field BlendSpace UBlendSpaceBase
---@field CurveName FName
---@field CurveTarget FVector2D
---@field PlayRate float
---@field bOnlyOnInitialize boolean
---@field bStartSearchFromCurrentTime boolean
---@field BlendFilter FBlendFilter
---@field BlendSampleDataCache TArray<FBlendSampleData>
---@field PreviousBlendSpace UBlendSpaceBase
FSBZAnimNode_PoseMatchingBlendSpacePlayer = {}



---@class FSBZAnimNode_ProceduralFootPlacement : FAnimNode_SkeletalControlBase
---@field bNewRendered boolean
---@field PelvisBone FBoneReference
---@field LeftIKFootBone FBoneReference
---@field LeftFootBone FBoneReference
---@field LeftFootToeBaseBone FBoneReference
---@field RightIKFootBone FBoneReference
---@field RightFootBone FBoneReference
---@field RightFootToeBaseBone FBoneReference
---@field SpineAdjustmentAlpha float
---@field SpineBone FBoneReference
---@field MaxFloorPitchForSpine float
---@field MaxFloorRollForSpine float
---@field LeftFootLocker FSBZBoneLocker
---@field RightFootLocker FSBZBoneLocker
---@field LeftFootPlacementBone FSBZFootPlacementBoneInfo
---@field RightFootPlacementBone FSBZFootPlacementBoneInfo
---@field FootRotationInterpSpeed float
---@field DeltaYaw float
---@field MinFootZOffsetInterSpeed float
---@field ImpactZInterSpeedFactor float
---@field FootZOffsetInterval FFloatInterval
---@field FootMaxPitch FFloatInterval
---@field FootMaxRoll FFloatInterval
---@field FootZUpOffsetToFixAnkleInterval FFloatInterval
---@field AnkleAdjustmentAlpha float
---@field MaxFootLiftZDist float
---@field AnklePitchAxis EAxis::Type
---@field PelvisZOffsetInterval FFloatInterval
---@field PelvisMinHeight float
---@field PelvisInterpSpeed float
---@field PelvisHigherHeightInterpSpeedModifier float
---@field MinZDistToPelvis float
---@field CharacterSpeed float
---@field RootReconciliationSpeedInterval FFloatInterval
---@field RootSpeedMultiplier float
FSBZAnimNode_ProceduralFootPlacement = {}



---@class FSBZAnimNode_SpeedWarping : FAnimNode_SkeletalControlBase
---@field IKFootRootBone FBoneReference
---@field FeetDefinitions TArray<FSBZSpeedWarpingFootDefinition>
---@field PelvisBone FBoneReference
---@field Space EBoneControlSpace
---@field Direction FVector
---@field SpeedScaling float
---@field PelvisZOffset float
---@field LegsZOffset float
---@field PelvisLegsInterpSpeed float
---@field PelvisLegsAdjustmentAlpha float
---@field bClampIKUsingFKLeg boolean
FSBZAnimNode_SpeedWarping = {}



---@class FSBZAnimNode_TransitionPose : FAnimNode_Base
---@field TransitionDuration float
---@field bActivateInertialization boolean
---@field BasePose FPoseLink
FSBZAnimNode_TransitionPose = {}



---@class FSBZAnimationContainer
---@field bOverride boolean
---@field Animations TArray<UAnimationAsset>
FSBZAnimationContainer = {}



---@class FSBZAnimationContainerCopy
FSBZAnimationContainerCopy = {}


---@class FSBZAnimationSpawnedActorCPD
---@field CPDIndex int32
---@field CPDValue float
FSBZAnimationSpawnedActorCPD = {}



---@class FSBZAnimationsPerEquippablesContainer
---@field AnimationContainers TMap<FName, FSBZAnimationContainer>
---@field GamePlayTagBasedMontageContainers TMap<FGameplayTag, FSBZSoftMontageContainer>
---@field AnimationPerSpecificEquippablesContainers TMap<TSoftClassPtr<ASBZEquippable>, FSBZAnimationsPerSpecificEquippablesContainer>
---@field AnimationLeftHandEquippedContainers TMap<TSoftClassPtr<ASBZEquippable>, FSBZAnimationsPerSpecificEquippablesContainer>
FSBZAnimationsPerEquippablesContainer = {}



---@class FSBZAnimationsPerSpecificEquippablesContainer
---@field AnimationContainers TMap<FName, FSBZAnimationContainer>
FSBZAnimationsPerSpecificEquippablesContainer = {}



---@class FSBZAnimationsPerStancesContainer
---@field AnimationContainersPerEquippables TMap<ESBZEquippableFamily, FSBZAnimationsPerEquippablesContainer>
FSBZAnimationsPerStancesContainer = {}



---@class FSBZArmadaInfo
---@field IP FString
---@field PortGame int32
---@field PortBeacon int32
---@field MatchID FString
---@field ServerVersion FString
---@field Region FString
FSBZArmadaInfo = {}



---@class FSBZArmorDamageScaleOverrideData
---@field Tag FGameplayTag
---@field Override float
FSBZArmorDamageScaleOverrideData = {}



---@class FSBZArmorInventoryItem : FSBZInventoryItem
---@field ArmorData USBZArmorData
FSBZArmorInventoryItem = {}



---@class FSBZArmorVariationInfo
---@field Name FName
---@field Index int32
---@field Bit uint8
FSBZArmorVariationInfo = {}



---@class FSBZAsyncLoadingProgress : FSBZGameEventStructBase
---@field Progress float
FSBZAsyncLoadingProgress = {}



---@class FSBZAttackInfo
FSBZAttackInfo = {}


---@class FSBZAudioRaycastingData
FSBZAudioRaycastingData = {}


---@class FSBZAxisSettings
---@field YawRotationAxis EAxis::Type
---@field BodyOrientationAlpha float
FSBZAxisSettings = {}



---@class FSBZBagFilter
---@field FilterTypes TArray<USBZBagType>
---@field FilterTags FGameplayTagContainer
FSBZBagFilter = {}



---@class FSBZBagHandle
---@field Id int32
---@field BagType USBZBagType
FSBZBagHandle = {}



---@class FSBZBagPersistentData
---@field Handle FSBZBagHandle
---@field Secured boolean
---@field CurrentActor AActor
---@field LastClaimedByPlayer ASBZPlayerCharacter
---@field ServerTimeAtFirstPickup float
FSBZBagPersistentData = {}



---@class FSBZBagTriggerData
---@field BasicFilter FSBZBagFilter
---@field FilterDelegate FSBZBagTriggerDataFilterDelegate
---@field Target int32
---@field Count int32
---@field CompleteDelegate FSBZBagTriggerDataCompleteDelegate
---@field SecuredDelegate FSBZBagTriggerDataSecuredDelegate
FSBZBagTriggerData = {}



---@class FSBZBaseControlReference
---@field DisplayText FText
---@field bIsAction boolean
---@field bIsInputRegistered boolean
---@field EventType EInputEvent
---@field bIsInputConsumed boolean
FSBZBaseControlReference = {}



---@class FSBZBaseImpactData
---@field Effect UNiagaraSystem
---@field Decals TArray<UMaterialInterface>
---@field OverrideMaterialSoundSwitchState FString
FSBZBaseImpactData = {}



---@class FSBZBlackMarketUIVendorData
---@field VendorData USBZVendorData
---@field UIStoreItemArray TArray<FSBZStoreItemUIGroup>
---@field bHasFetchedStoreData boolean
FSBZBlackMarketUIVendorData = {}



---@class FSBZBlockedPlayer
---@field AccelbyteUserId FString
FSBZBlockedPlayer = {}



---@class FSBZBlockedPlayers
---@field Platform FString
---@field BlockedPlayers TArray<FSBZBlockedPlayer>
FSBZBlockedPlayers = {}



---@class FSBZBoneAnimContraint
---@field BoneToConstrain FName
---@field ConstraintType ESBZBoneAnimConstraintType
---@field BoneToFollow FName
FSBZBoneAnimContraint = {}



---@class FSBZBoneDamageMultiplier
---@field bIsCritical boolean
---@field Multiplier float
---@field CriticalMultiplierReduction float
FSBZBoneDamageMultiplier = {}



---@class FSBZBoneHurtReaction
---@field DefaultBoneName FName
---@field BoneMap TMap<FName, FSBZHurtReactionDirection>
FSBZBoneHurtReaction = {}



---@class FSBZBoneLocker
---@field BoneRef FBoneReference
---@field LockCurveName FName
---@field LockAlphaThreshold float
---@field YawAxis FVector
---@field MaxDist float
---@field MaxYaw float
---@field bTranslationLock2D boolean
---@field InterpSpeed float
FSBZBoneLocker = {}



---@class FSBZBoneRef
---@field Bone FBoneReference
FSBZBoneRef = {}



---@class FSBZBoneRefArrayParam
---@field BoneRefArray TArray<FBoneReference>
FSBZBoneRefArrayParam = {}



---@class FSBZBoneRefParam
---@field BoneRef FBoneReference
FSBZBoneRefParam = {}



---@class FSBZBonusExpMapEntry
---@field PerformanceObjective FString
---@field GainedExp int32
FSBZBonusExpMapEntry = {}



---@class FSBZBreachingEquipmentTimes
---@field RedZoneTimeSeconds float
---@field YellowZoneTimeSeconds float
---@field GreenZoneTimeSeconds float
---@field TotalFuelTime float
FSBZBreachingEquipmentTimes = {}



---@class FSBZBuiltInAnimMontageBoneTrack
---@field BoneName FName
---@field BoneModificationMode EBoneModificationMode
---@field ValueTracks TArray<FSBZBuiltInAnimMontageValueTrack>
FSBZBuiltInAnimMontageBoneTrack = {}



---@class FSBZBuiltInAnimMontageInstance
---@field AnimMontage USBZBuiltInAnimMontage
FSBZBuiltInAnimMontageInstance = {}



---@class FSBZBuiltInAnimMontageValueTrack
---@field TrackType ESBZBuiltInAnimMontageTrackType
---@field Curve FRuntimeFloatCurve
---@field PlayRate float
FSBZBuiltInAnimMontageValueTrack = {}



---@class FSBZBundleItem : FSBZStoreBaseItem
---@field ItemCategory ESBZItemCategory
---@field BundleItemData USBZInventoryBaseData
---@field Quantity int32
FSBZBundleItem = {}



---@class FSBZButtonControlReference : FSBZBaseControlReference
---@field ButtonAction FName
FSBZButtonControlReference = {}



---@class FSBZButtonControlsReference
---@field ActionList TArray<FSBZButtonControlReference>
FSBZButtonControlsReference = {}



---@class FSBZCDPTableRow : FTableRowBase
---@field CDP_id int32
---@field Tooltip FText
---@field Variable_type ESBZCDPType
---@field FloatValue float
---@field IntValue float
---@field SelectValue float
---@field ColorValue FLinearColor
---@field BoolValue boolean
---@field BitPosition uint8
---@field CollisionNames TArray<FString>
FSBZCDPTableRow = {}



---@class FSBZCableCollisionPlane
---@field Plane FPlane
---@field bOverrideFriction boolean
---@field Friction float
FSBZCableCollisionPlane = {}



---@class FSBZCablePointAttachment
---@field PointIndex int32
---@field Location FVector
---@field AttachTo FComponentReference
---@field AttachToSocketName FName
---@field bAutoUpdatePointIndex boolean
---@field SegmentStretchFactor float
---@field bRelativeToCableLength boolean
---@field bAutoWinding boolean
---@field WindingSpeed float
FSBZCablePointAttachment = {}



---@class FSBZCachedNavLinkPoints
---@field NavLink TScriptInterface<ISBZBlockableNavlinkInterface>
FSBZCachedNavLinkPoints = {}



---@class FSBZCachedWeaponTargeting
---@field SightData USBZWeaponSightData
---@field TargetingTransitionTime float
FSBZCachedWeaponTargeting = {}



---@class FSBZCameraDOF
---@field bUseStaticFocalDistance boolean
---@field DepthOfFieldFocalDistance float
---@field DepthOfFieldFstop float
---@field DepthOfFieldDepthBlurAmount float
---@field DepthOfFieldDepthBlurRadius float
FSBZCameraDOF = {}



---@class FSBZCameraViewRestriction
---@field YawMin float
---@field YawMax float
---@field PitchMin float
---@field PitchMax float
---@field RollMin float
---@field RollMax float
---@field Priority int32
FSBZCameraViewRestriction = {}



---@class FSBZCameraViewRestrictionHandle
FSBZCameraViewRestrictionHandle = {}


---@class FSBZCapsuleInfos
---@field WorldTransform FTransform
---@field CapsuleHalfHeight float
---@field CapsuleRadius float
FSBZCapsuleInfos = {}



---@class FSBZCapsuleShadowingSettings
---@field Quality int32
---@field CapsuleIndirectShadowMinVisibility float
---@field UpdateInterval float
---@field DistanceInterval FFloatInterval
---@field ZDeactivationInterval FFloatInterval
FSBZCapsuleShadowingSettings = {}



---@class FSBZCashRewardBagData
---@field Count int32
---@field CashDifference int32
FSBZCashRewardBagData = {}



---@class FSBZCashRewardData
---@field TotalCashValue int32
---@field TotalCashEarned int32
---@field LootCashValue int32
---@field CashRewardReductionData TArray<FSBZCashRewardReductionData>
---@field CashRewardEventData TArray<FSBZCashRewardEventData>
---@field CashRewardBagData TArray<FSBZCashRewardBagData>
---@field CashRewardOperationResult ESBZMetaRequestResult
FSBZCashRewardData = {}



---@class FSBZCashRewardEventData
---@field DifferencePercentage int32
---@field CashDifference int32
---@field EventType ESBZMetaEventType
FSBZCashRewardEventData = {}



---@class FSBZCashRewardModifier
---@field BaseReward int32
---@field MaxReward int32
FSBZCashRewardModifier = {}



---@class FSBZCashRewardReductionData
---@field Count int32
---@field ReductionPercentage int32
---@field ReductionCash int32
---@field ReductionType ESBZRewardReductionType
FSBZCashRewardReductionData = {}



---@class FSBZChallengeData
---@field ChallengeId FName
---@field ChallengeName FString
---@field AccelbyteChallengeId FGuid
---@field PrerequisiteChallengeIds TArray<FString>
---@field PrerequisiteStatData TArray<FSBZChallengeProgressStat>
---@field PrerequisiteItemData TArray<FSBZChallengeProgressItem>
---@field ObjectiveStatData TArray<FSBZChallengeProgressStat>
---@field RewardItemsData TArray<FSBZChallengeRewardItem>
---@field Tags TArray<FString>
---@field ChallengeStatus EChallengeStatusEnum
---@field InfamyPointReward int32
---@field TotalProgress int32
---@field TotalTarget int32
---@field ChallengeConversion ESBZChallengeConversion
FSBZChallengeData = {}



---@class FSBZChallengeProgressItem
---@field AccelbyteItemId FGuid
---@field CurrentQuantity int32
---@field TargetQuantity int32
---@field Item USBZInventoryBaseData
FSBZChallengeProgressItem = {}



---@class FSBZChallengeProgressStat
---@field StatId FName
---@field TargetProgress float
FSBZChallengeProgressStat = {}



---@class FSBZChallengeRewardItem
---@field AccelbyteItemId FGuid
---@field Quantity int32
---@field Item USBZInventoryBaseData
FSBZChallengeRewardItem = {}



---@class FSBZCharacterCommentAssets
---@field TakeDamage USBZVoiceCommentDataAsset
---@field OnDeath USBZVoiceCommentDataAsset
---@field GruntLight USBZVoiceCommentDataAsset
---@field GruntHeavy USBZVoiceCommentDataAsset
---@field GruntHurtLight USBZVoiceCommentDataAsset
---@field GruntHurtHeavy USBZVoiceCommentDataAsset
---@field GruntUpwards USBZVoiceCommentDataAsset
---@field GruntDownwards USBZVoiceCommentDataAsset
FSBZCharacterCommentAssets = {}



---@class FSBZCharacterEffectRuntime
---@field CharacterEffectData USBZCharacterEffectDataAsset
---@field CurrentProgress float
---@field CharacterEffectValue int32
---@field CooldownAnimationTime float
---@field CooldownTimer float
---@field bHidesWhenActive boolean
---@field bIsAutoRemove boolean
FSBZCharacterEffectRuntime = {}



---@class FSBZCharacterEffectSpawnParams
---@field InitialProgress float
---@field InitialCharacterEffectValue int32
---@field bHidesWhenActive boolean
FSBZCharacterEffectSpawnParams = {}



---@class FSBZCharacterEndMissionExpBonusData
---@field TotalExp int32
---@field LoudMilestoneRatio float
---@field LoudBaseExp int32
---@field StealthMilestoneRatio float
---@field StealthBaseExp int32
---@field DifficultyModifier float
---@field PerformanceModifier float
---@field ExperiencePointsFromObjectivesModifier float
---@field MilestoneRewardDataArray TArray<FSBZMilestoneRewardData>
FSBZCharacterEndMissionExpBonusData = {}



---@class FSBZCharacterEndMissionResultData
---@field EquippableArray TArray<FSBZEquippableEndMissionResultData>
---@field BeenDefeatedCount int32
---@field BeenRevivedCount int32
---@field BeenKilledCount int32
---@field HaveKilledCount int32
---@field HaveSpecialKilledCount int32
---@field HaveCivilianKilledCount int32
FSBZCharacterEndMissionResultData = {}



---@class FSBZCharacterInventoryData
---@field CharacterData USBZPlayerCharacterData
---@field bCharacterLocked boolean
---@field SelectedIndex int32
FSBZCharacterInventoryData = {}



---@class FSBZCharacterMeshScaleData
---@field ScaleFactors TArray<float>
FSBZCharacterMeshScaleData = {}



---@class FSBZCharacterMovementSetting
---@field Stances int32
---@field BaseEyeHeight float
---@field MaxWalkSpeedCrouched float
---@field MaxRunSpeed float
---@field MaxSprintSpeed float
---@field MaxTargetingSpeed float
---@field MaxAcceleration float
---@field MaxAccelerationRunning float
---@field BrakingDecelerationWalking float
---@field FrictionSpeedBased FFloatInterval
---@field FrictionSpeedBasedSpeedRange FFloatInterval
---@field RotationRate FRotator
---@field bSlowDownOnCurvedPath boolean
---@field MinRunSpeedOnCurvedPath float
---@field PathAngleForMinSpeed float
---@field AvoidanceConsiderationRadius float
---@field AvoidanceDefaultTimeToLive float
---@field AvoidanceLockTimeAfterAvoid float
---@field AvoidanceLockTimeAfterClean float
---@field AvoidanceDeltaTimeToPredict float
---@field AvoidanceArtificialRadiusExpansion float
---@field bAvoidanceCanSlowDownMovement boolean
---@field MinAvoidanceSpeed float
---@field NeighbourCollisionInnerRadius float
---@field NeighbourCollisionOuterRadius float
---@field NeighbourCollisionHardCollisionFactor float
---@field NeighbourCollisionSoftCollisionFactor float
---@field NeighbourCollisionMaxDuration float
---@field ControlRotationYaw FSBZAccelerationBasedAngle
---@field ControlRotationPitch FSBZAccelerationBasedAngle
---@field PathFocalDistance float
---@field PathViewFocalDistance float
---@field AnimationData USBZCharacterAnimationDataTP
---@field MaxWalkSpeeds TArray<float>
FSBZCharacterMovementSetting = {}



---@class FSBZCharacterSlotData
---@field CharacterInventoryData FSBZCharacterInventoryData
---@field IndexInInventory int32
---@field SlotStatus ESBZCharacterSlotStatus
FSBZCharacterSlotData = {}



---@class FSBZChatCommand : FTableRowBase
---@field CommandAsString FText
---@field CommandToExecute ESBZChatCommandTypes
FSBZChatCommand = {}



---@class FSBZChatMessage
---@field Type ESBZChatType
---@field FromString FString
---@field ToString FString
---@field Message FString
---@field From FUniqueNetIdRepl
---@field To FUniqueNetIdRepl
FSBZChatMessage = {}



---@class FSBZChatMessageInfo
---@field Timestamp FString
---@field Sender FString
---@field Message FString
---@field Channel ESBZChatChannelType
---@field Status ESBZChatMessageStatus
FSBZChatMessageInfo = {}



---@class FSBZCheckInteractableScreenInputData
---@field Interactor USBZInteractorComponent
---@field AgentManager USBZAgentManager
FSBZCheckInteractableScreenInputData = {}



---@class FSBZCheckInteractableScreenOutputData
---@field Interactable USBZBaseInteractableComponent
---@field HitResult FHitResult
---@field ReqData FSBZInteractReqData
FSBZCheckInteractableScreenOutputData = {}



---@class FSBZCodeViewerSet
---@field PossibleCodeViewers TArray<AActor>
FSBZCodeViewerSet = {}



---@class FSBZCoinStoreItem : FSBZStoreBaseItem
---@field CoinData USBZCoinData
FSBZCoinStoreItem = {}



---@class FSBZCombinedReloadState
---@field State ESBZReloadState
---@field bIsCycleNeeded boolean
FSBZCombinedReloadState = {}



---@class FSBZCommandArray
FSBZCommandArray = {}


---@class FSBZComponentSelector
---@field ComponentType TSubclassOf<UActorComponent>
---@field ComponentName FName
---@field Component UActorComponent
FSBZComponentSelector = {}



---@class FSBZConfigRepClass
---@field Name FName
---@field Type ERepNodeRoutingStrategy
---@field DistancePriorityScale float
---@field StarvationPriorityScale float
---@field CullDistance float
---@field ReplicationPeriodFrame uint16
---@field FastPath_ReplicationPeriodFrame uint16
---@field ActorChannelFrameTimeout uint16
---@field bMustReplicateOnInitialFrame boolean
FSBZConfigRepClass = {}



---@class FSBZControlsReference
---@field ActionList TArray<FSBZActionControlReference>
---@field DisplayTime float
FSBZControlsReference = {}



---@class FSBZControlsReferenceRuntime
---@field ControlsReference FSBZControlsReference
---@field ID int32
FSBZControlsReferenceRuntime = {}



---@class FSBZCosmeticDestructionContext
---@field HitLocation FVector
---@field FromDirection FVector
---@field Origin FVector
---@field ImpactNormal FVector
FSBZCosmeticDestructionContext = {}



---@class FSBZCosmeticPanelDefaultParams
---@field HasDefault boolean
---@field DisplayName FText
FSBZCosmeticPanelDefaultParams = {}



---@class FSBZCosmeticPanelInitParams
---@field DefaultItem FSBZCosmeticPanelDefaultParams
---@field CosmeticInventoryItems TArray<FSBZCosmeticsInventoryItem>
FSBZCosmeticPanelInitParams = {}



---@class FSBZCosmeticsInventoryItem : FSBZInventoryItem
---@field CosmeticsDataAsset USBZCosmeticsDataAsset
FSBZCosmeticsInventoryItem = {}



---@class FSBZCoverPointVisibilityCheckData
---@field CoverPoint ASBZCoverPoint
---@field Enemies TArray<AActor>
FSBZCoverPointVisibilityCheckData = {}



---@class FSBZCoverShootingPointAiVisibilityInfo
FSBZCoverShootingPointAiVisibilityInfo = {}


---@class FSBZCoverShootingPoints
---@field Offset FVector
---@field MaxLineTraceLength float
---@field ShootingType ESBZShootingPointType
FSBZCoverShootingPoints = {}



---@class FSBZCreditsRow : FTableRowBase
---@field Type ESBZCreditsType
---@field Text FText
---@field String FString
---@field TextSecond FText
---@field StringSecond FString
---@field Texture UTexture2D
FSBZCreditsRow = {}



---@class FSBZCreditsText
---@field Text FText
---@field String FString
FSBZCreditsText = {}



---@class FSBZCrosshairSettings
---@field BarWidth float
---@field BarLength float
---@field DotSize float
---@field MinCrosshairScale float
---@field MaxCrosshairScale float
---@field CrosshairBarColor FLinearColor
---@field CrosshairDotColor FLinearColor
FSBZCrosshairSettings = {}



---@class FSBZCurrency
---@field CurrencyType ESBZCurrencyCode
---@field Amount int32
---@field LifetimeAmount int32
FSBZCurrency = {}



---@class FSBZCustomPrimitiveData
---@field Data float
---@field MorphTargets TMap<FName, float>
FSBZCustomPrimitiveData = {}



---@class FSBZCutProgressData
---@field AccumulatedDeltaTime float
---@field LineCutLength float
---@field bHasInitialCut boolean
---@field StartCutTimeSeconds float
---@field LastUsedSkillSpeedModifier float
---@field CurrentSplineTime float
FSBZCutProgressData = {}



---@class FSBZCuttableTargetData : FGameplayAbilityTargetData
---@field CuttableActor AActor
FSBZCuttableTargetData = {}



---@class FSBZCutterSkillSettingData
---@field CuttingDurationDecreaseBase float
---@field MinCuttingMaterialTierBase ESBZCuttingMaterialTier
---@field AmmoIncreaseAcedBase int32
---@field CuttingDurationDecreaseMastery float
---@field MinCuttingMaterialTierUpgrade01 ESBZCuttingMaterialTier
---@field AmmoIncreaseUpgrade03 int32
FSBZCutterSkillSettingData = {}



---@class FSBZDamageAndTimePair
FSBZDamageAndTimePair = {}


---@class FSBZDamageDistance
---@field Damage float
---@field Distance float
FSBZDamageDistance = {}



---@class FSBZDamageEvent : FSBZGameEventStructBase
---@field Attacker AActor
---@field Causer AActor
---@field Victim AActor
---@field EquippableData USBZEquippableData
---@field ThrowableData USBZThrowableData
---@field Damage float
---@field ArmorDamage float
---@field HealthDamage float
---@field bCritical boolean
---@field bWasArmorBroken boolean
---@field bIsKillshot boolean
---@field bIsFrequent boolean
---@field Origin FVector
---@field DamageTypeTagContainer FGameplayTagContainer
FSBZDamageEvent = {}



---@class FSBZDamageMultiplierDistance
---@field Multiplier float
---@field Distance float
FSBZDamageMultiplierDistance = {}



---@class FSBZDbgCapsuleParams
---@field Location FVector
---@field HalfHeight float
---@field Radius float
---@field Rotation FQuat
---@field Thickness float
---@field Color FColor
---@field bPersistent boolean
---@field Life float
---@field Priority uint8
FSBZDbgCapsuleParams = {}



---@class FSBZDbgLineParams
---@field Start FVector
---@field End FVector
---@field Thickness float
---@field Color FColor
---@field bPersistent boolean
---@field Life float
---@field Priority uint8
FSBZDbgLineParams = {}



---@class FSBZDbgPointParams
---@field Location FVector
---@field Size float
---@field Color FColor
---@field bPersistent boolean
---@field Life float
---@field Priority uint8
FSBZDbgPointParams = {}



---@class FSBZDbgSphereParams
---@field Location FVector
---@field Radius float
---@field Segments int32
---@field Color FColor
---@field bPersistent boolean
---@field Life float
---@field Priority uint8
FSBZDbgSphereParams = {}



---@class FSBZDbgTextParams
---@field Colour FLinearColor
---@field Text FString
---@field TimeToDisplay float
---@field OutputLocation ESBZDbgDisplayOutput
FSBZDbgTextParams = {}



---@class FSBZDebugModularConfigItem
---@field Slot USBZModularPartSlotBase
---@field Part USBZEquippablePartDataAsset
---@field Config USBZEquippablePartConfig
FSBZDebugModularConfigItem = {}



---@class FSBZDebugSelection
---@field Object UObject
---@field SocketName FName
---@field DepthStencil int32
FSBZDebugSelection = {}



---@class FSBZDebugSnapshot
---@field ServerState FSBZWheeledVehicleReplicatedMovement
---@field ClientState FSBZWheeledVehicleReplicatedMovement
---@field LocalTimestamp float
---@field WorldTimeSeconds float
---@field ServerWorldTimeSeconds float
---@field FrameCounter uint64
FSBZDebugSnapshot = {}



---@class FSBZDefeatStateAnimationHandler
---@field IdleSubdued UAnimSequenceBase
---@field IdleDowned UAnimSequenceBase
---@field IdleBleedOut UAnimSequenceBase
---@field DownedAimOffset UBlendSpaceBase
---@field bDefeated boolean
---@field bSubdued boolean
---@field bDowned boolean
---@field bBleedOut boolean
FSBZDefeatStateAnimationHandler = {}



---@class FSBZDefeatStateChangedData : FSBZGameEventStructBase
---@field OldDefeatState EPD3DefeatState
---@field NewDefeatState EPD3DefeatState
---@field bIsInitialDefeatStateChange boolean
FSBZDefeatStateChangedData = {}



---@class FSBZDetectionData
---@field Detector AActor
---@field Detection uint8
FSBZDetectionData = {}



---@class FSBZDialogAnimData
---@field PhonemeDataTable TSoftObjectPtr<UDataTable>
---@field bOverrideFacialEmotion boolean
---@field FacialEmotion ESBZFacialEmotion
---@field Phonemes TArray<FSBZPhoneme>
FSBZDialogAnimData = {}



---@class FSBZDialogAnimDataWrapper
FSBZDialogAnimDataWrapper = {}


---@class FSBZDialogLineDefinition
---@field Performer ESBZDialogPerformer
---@field AudioEvent UAkAudioEvent
---@field CommentState FString
---@field Delay float
FSBZDialogLineDefinition = {}



---@class FSBZDialogPlaylist
FSBZDialogPlaylist = {}


---@class FSBZDifficultyConfiguration
---@field LevelShortName FString
---@field Description FString
---@field Normal TArray<FString>
---@field Hard TArray<FString>
---@field VeryHard TArray<FString>
---@field Overkill TArray<FString>
FSBZDifficultyConfiguration = {}



---@class FSBZDownedByTypeVO
---@field DownedByVO USBZVoiceCommentDataAsset
---@field TypeTag FGameplayTag
FSBZDownedByTypeVO = {}



---@class FSBZDrillMatData
---@field ProgressPerSec float
---@field HeatPerSec float
FSBZDrillMatData = {}



---@class FSBZDrillRepData
---@field State ESBZDrillState
---@field ProgressLast float
---@field HeatLast float
---@field HeatPerSec float
---@field ProgressPerSec float
---@field LastTime float
---@field bFastSpeed boolean
---@field CurrentMaterial USBZDrillMaterial
FSBZDrillRepData = {}



---@class FSBZDropPlaceableEquippableData
---@field Location FVector_NetQuantize
---@field Quat FSBZQuat_NetQuantizeNormal
---@field LinearVelocity FVector_NetQuantize
---@field AngularVelocity FVector_NetQuantize
FSBZDropPlaceableEquippableData = {}



---@class FSBZECMCountData
---@field CurrentECMJammerCount int32
---@field LastAddedECMTime float
FSBZECMCountData = {}



---@class FSBZEditVariationSetData
---@field SkeletalMesh USkeletalMesh
---@field StaticMesh UStaticMesh
---@field OverrideMaterials TArray<UMaterialInterface>
---@field CDPFormat UDataTable
FSBZEditVariationSetData = {}



---@class FSBZEffectHandleArray
FSBZEffectHandleArray = {}


---@class FSBZEmotions
---@field Emotions TArray<ESBZFacialEmotion>
FSBZEmotions = {}



---@class FSBZEndMissionRequestData
---@field MissionResult ESBZEndMissionResult
---@field OutroVariation int32
FSBZEndMissionRequestData = {}



---@class FSBZEndMissionResultData
---@field MissionResult ESBZEndMissionResult
---@field MissionTime float
---@field SecuredBags TArray<FSBZEndMissionSecuredBag>
---@field BagTotal int32
---@field ExperienceObjectiveArray TArray<FSBZObjectiveData>
---@field ExperienceMilestoneArray TArray<FSBZMilestoneData>
---@field PlayerResultArray TArray<FSBZPlayerEndMissionResultData>
---@field AllPlayerAIsResult FSBZPlayerEndMissionResultData
---@field AllOtherCharacterResult FSBZCharacterEndMissionResultData
---@field InstantLootArray TArray<FSBZInstantLootData>
FSBZEndMissionResultData = {}



---@class FSBZEndMissionSecuredBag
---@field BagType TSoftObjectPtr<USBZBagType>
---@field Count int32
FSBZEndMissionSecuredBag = {}



---@class FSBZEquippableConfig
---@field EquippableData USBZEquippableData
---@field OriginalEquippableData USBZEquippableData
---@field ModDataArray TArray<USBZEquippablePartDataAsset>
---@field ModDataMap TMap<USBZModularPartSlotBase, FSBZEquippablePartConfigGroup>
FSBZEquippableConfig = {}



---@class FSBZEquippableEndMissionResultData
---@field UseCount int32
---@field UseSuccessCount int32
FSBZEquippableEndMissionResultData = {}



---@class FSBZEquippablePartConfigGroup
---@field Part USBZEquippablePartDataAsset
---@field Config USBZEquippablePartConfig
FSBZEquippablePartConfigGroup = {}



---@class FSBZEquippablePartUIData
---@field PositiveModifications TArray<FSBZWeaponModificationUIData>
---@field NegativeModifications TArray<FSBZWeaponModificationUIData>
FSBZEquippablePartUIData = {}



---@class FSBZEquippableRuntime
---@field GadgetDataArray TArray<USBZEquippableGadgetData>
---@field GadgetActorArray TArray<ASBZGadget>
---@field SightArray TArray<USBZWeaponSightData>
---@field CurrentSightIndex int32
---@field CurrentSightData USBZWeaponSightData
FSBZEquippableRuntime = {}



---@class FSBZEventIndexes
---@field IndexArray TArray<int32>
FSBZEventIndexes = {}



---@class FSBZEventRequest
---@field VoiceComment USBZVoiceCommentDataAsset
---@field VoicePriority ESBZVoicePriority
---@field EQSQuery UEnvQuery
---@field TargetFinder USBZTargetFinder
---@field bShouldLoopFromBeginPlay boolean
---@field SoundLoopInterval FFloatRange
FSBZEventRequest = {}



---@class FSBZEventRequestContainer
---@field EventRequests TArray<FSBZEventRequest>
FSBZEventRequestContainer = {}



---@class FSBZExplosionBox
---@field Location FVector
---@field Quat FQuat
---@field HalfExtent FVector
FSBZExplosionBox = {}



---@class FSBZExplosionResult
FSBZExplosionResult = {}


---@class FSBZExplosivePhysicsEffectData
---@field UpwardImpulse float
---@field bUpwardImpulseAsVel boolean
---@field TorqueStrength FFloatInterval
FSBZExplosivePhysicsEffectData = {}



---@class FSBZFacialAnimationContainer
---@field Animations TArray<UAnimSequence>
FSBZFacialAnimationContainer = {}



---@class FSBZFactionAttitude
---@field SourceFaction FSBZFactionNameHelper
---@field TargetFaction FSBZFactionNameHelper
---@field Attitude ESBZFactionAttitude
FSBZFactionAttitude = {}



---@class FSBZFactionIdHelper
---@field FactionId uint8
FSBZFactionIdHelper = {}



---@class FSBZFactionInfo
---@field Name FString
---@field PrimaryColor FColor
---@field SecondaryColor FColor
FSBZFactionInfo = {}



---@class FSBZFactionNameHelper
---@field FactionName FName
FSBZFactionNameHelper = {}



---@class FSBZFallDamageTargetData : FGameplayAbilityTargetData
FSBZFallDamageTargetData = {}


---@class FSBZFloatLimit
---@field Limit float
---@field Type ESBZComparisonType
FSBZFloatLimit = {}



---@class FSBZFlooredIntervalDetectionSettings
---@field bUseDisablingCurve boolean
---@field DisablingCurve FName
---@field bUseDisablingFrameInterval boolean
---@field MinFrame int16
---@field MaxFrame int16
---@field ToeBaseHeightThreshold float
---@field ToeBasePitchThreshold float
---@field FloorBoneHeightThreshold float
---@field FloorBonePitchThreshold float
---@field bAutoComputeLooping boolean
---@field bIsLooping boolean
---@field bIsDoingToeToTip boolean
---@field bDebug boolean
---@field MinIntervalFrameCount int32
---@field bCreateContactCurves boolean
---@field bCreateContactNotifies boolean
---@field FootContactNotifyTrackName FName
---@field RootBoneName FName
---@field LeftCurveName FName
---@field RightCurveName FName
---@field LeftFloorBoneName FName
---@field LeftToeBaseBoneName FName
---@field RightFloorBoneName FName
---@field RightToeBaseBoneName FName
FSBZFlooredIntervalDetectionSettings = {}



---@class FSBZFootBoneModifier
---@field BoneName FName
---@field Offset float
FSBZFootBoneModifier = {}



---@class FSBZFootPlacementBoneInfo
FSBZFootPlacementBoneInfo = {}


---@class FSBZFootPlacementCachedData
FSBZFootPlacementCachedData = {}


---@class FSBZFrameDebugData : FSBZStageDebugData
---@field FrameId int32
---@field DeltaTime float
FSBZFrameDebugData = {}



---@class FSBZFriendListEntry
---@field FriendName FText
---@field HiddenFriendName FText
---@field UserId FString
---@field PlatformUserId FString
---@field PlatformFriendName FText
---@field PlatformId FString
---@field IP FString
---@field PortGame int32
---@field PortBeacon int32
---@field ServerVersion FString
---@field BuildVersion FString
---@field MatchID FString
---@field LevelIdx int32
---@field FriendStatus EFriendStatus
---@field PartyCode FString
---@field JoinType ESBZOnlineJoinType
---@field bPlatformBlocked boolean
---@field bPlatformPlayer boolean
---@field PlatformUserIds TMap<FString, FString>
---@field PlatformIcon UPaperSprite
---@field NebulaIcon UPaperSprite
---@field bCrossPlayEnabled boolean
---@field bInCrossPlayLobby boolean
---@field bCrossPlayAllowed boolean
---@field bCanCommunicateWith boolean
FSBZFriendListEntry = {}



---@class FSBZGameDifficultyChangedEvent : FSBZGameEventStructBase
---@field DifficultyIdx uint8
FSBZGameDifficultyChangedEvent = {}



---@class FSBZGameEventStructBase
FSBZGameEventStructBase = {}


---@class FSBZGameInfo
---@field Changelist int32
---@field DateTime FString
---@field Platform FString
---@field Address FString
FSBZGameInfo = {}



---@class FSBZGameTimeSince
---@field WorldContextObject UObject
FSBZGameTimeSince = {}



---@class FSBZGameTimeTo
---@field WorldContextObject UObject
FSBZGameTimeTo = {}



---@class FSBZGamepadBinding
---@field NameLocalized FText
---@field Name FName
---@field InputActions TArray<FSBZGamepadBindingInputAction>
---@field Button FInputChord
FSBZGamepadBinding = {}



---@class FSBZGamepadBindingInputAction
---@field ActionName FName
FSBZGamepadBindingInputAction = {}



---@class FSBZGamepadBindingsPreset
---@field NameLocalized FText
---@field Name FName
---@field Bindings TArray<FSBZGamepadBinding>
FSBZGamepadBindingsPreset = {}



---@class FSBZGameplayAbilityActorInfo : FGameplayAbilityActorInfo
FSBZGameplayAbilityActorInfo = {}


---@class FSBZGameplayEffectContext : FGameplayEffectContext
FSBZGameplayEffectContext = {}


---@class FSBZGameplayEffectData
---@field GameplayEffectClass TSubclassOf<UGameplayEffect>
---@field Level float
---@field StackCount int32
FSBZGameplayEffectData = {}



---@class FSBZGameplayTagContainerComparison
---@field GameplayTagContainer FGameplayTagContainer
---@field MatchType EGameplayContainerMatchType
---@field FailedMessage FText
---@field FailedIcon UTexture2D
FSBZGameplayTagContainerComparison = {}



---@class FSBZGasCellHitData
---@field HitComponent UPrimitiveComponent
FSBZGasCellHitData = {}



---@class FSBZGasExplosionData
---@field ExplosionLocation FVector_NetQuantize
---@field RemainingLifeTime float
FSBZGasExplosionData = {}



---@class FSBZGasGrenadeTarget
---@field Character ASBZCharacter
---@field PendingTimeSeconds float
---@field bHasReceivedDamage boolean
FSBZGasGrenadeTarget = {}



---@class FSBZGateExplosionData
---@field bIsCalculated boolean
---@field CalculatedClosePaddingX float
---@field BoxArray TArray<FSBZExplosionBox>
---@field ForceOrigin FVector
---@field GameplayEffectClass TSubclassOf<UGameplayEffect>
---@field PlayerImpulse float
---@field DamageWeight ESBZDamageWeight
---@field DamageWeightModifier float
FSBZGateExplosionData = {}



---@class FSBZGateMeshData
---@field MeshSelector FSBZComponentSelector
---@field BoundSelector FSBZComponentSelector
---@field LocalBoundBox FBox
---@field LocalActorBoundBox FBox
---@field bIsHingedRight boolean
---@field SnapPointsArray TArray<FVector>
FSBZGateMeshData = {}



---@class FSBZGlobalMaterialParameters
---@field WindDirection FVector
---@field WindSpeed float
---@field ActionOriginActor AActor
---@field FXGlobalEmissive FLinearColor
---@field FXGlobalBaseColor FLinearColor
---@field EnemyBacklightInfluence FLinearColor
---@field EnemyBacklightFade FLinearColor
---@field EnemyBacklightRangeFuzz FLinearColor
FSBZGlobalMaterialParameters = {}



---@class FSBZGlobalVoiceCommentPermission
---@field CoolDown float
---@field Radius float
FSBZGlobalVoiceCommentPermission = {}



---@class FSBZGloveConfigInventorySaveData
---@field GloveConfigSlots TArray<FSBZGloveInventorySlot>
FSBZGloveConfigInventorySaveData = {}



---@class FSBZGloveInventoryItem : FSBZInventoryItem
---@field GloveData USBZGloveData
FSBZGloveInventoryItem = {}



---@class FSBZGloveInventorySlot : FSBZInventorySlot
---@field GloveInSlotEntitlementId FGuid
---@field GloveInSlotAccelByteItemId FGuid
---@field GloveData USBZGloveData
FSBZGloveInventorySlot = {}



---@class FSBZGloveStoreItem : FSBZStoreBaseItem
---@field GloveData USBZGloveData
FSBZGloveStoreItem = {}



---@class FSBZHUDNotificationData
---@field DisplayText FText
---@field DisplayTime float
FSBZHUDNotificationData = {}



---@class FSBZHackableDisplayText
---@field Header FText
---@field Description FText
---@field ImportantInfo FText
---@field AdditionalText FText
FSBZHackableDisplayText = {}



---@class FSBZHackableInfoActorCollection
---@field Array TArray<ASBZHackableInfoActor>
FSBZHackableInfoActorCollection = {}



---@class FSBZHackableProgressData
---@field CurrentProgress uint8
---@field UpdateFrequency float
FSBZHackableProgressData = {}



---@class FSBZHackableToolTargetData : FGameplayAbilityTargetData
---@field HackableActor AActor
FSBZHackableToolTargetData = {}



---@class FSBZHackerSkillSettingData
---@field MaxDistanceModifierBase float
---@field AdditionalBatteriesAcedBase int32
---@field HackableDurationDecreaseMastery float
FSBZHackerSkillSettingData = {}



---@class FSBZHackingZoneData
FSBZHackingZoneData = {}


---@class FSBZHeightTransitionCameraSettings
---@field TransitionSpeed float
---@field BlendOption EAlphaBlendOption
---@field BlendCustomCurve UCurveFloat
FSBZHeightTransitionCameraSettings = {}



---@class FSBZHeistCollection
---@field HeistCollectionName FText
---@field LevelPaths TArray<FSoftObjectPath>
FSBZHeistCollection = {}



---@class FSBZHeistDataLevelPair
---@field HeistData UPD3HeistDataAsset
---@field LevelPath FSoftObjectPath
FSBZHeistDataLevelPair = {}



---@class FSBZHelmetHideInfo
---@field CPDIndex uint8
---@field Bit uint8
FSBZHelmetHideInfo = {}



---@class FSBZHitIndicatorSettings
---@field HitIndicatorColorHit FLinearColor
---@field HitIndicatorColorCrit FLinearColor
---@field HitIndicatorColorKill FLinearColor
---@field HitIndicatorScale float
FSBZHitIndicatorSettings = {}



---@class FSBZHitResult
---@field ComponentPtr TWeakObjectPtr<UPrimitiveComponent>
---@field PhysMaterialPtr TWeakObjectPtr<UPhysicalMaterial>
FSBZHitResult = {}



---@class FSBZHitResultLite
---@field TraceStart FVector
---@field TraceEnd FVector
---@field ImpactPoint FVector
---@field Normal FVector
---@field bBlockingHit boolean
---@field bRaycastHit boolean
FSBZHitResultLite = {}



---@class FSBZHumanShieldDirection
---@field AllowedCategories uint8
---@field MinimumAngleAroundTarget float
---@field MaximumAngleAroundTarget float
---@field Tag FString
FSBZHumanShieldDirection = {}



---@class FSBZHumanShieldSlotParameters
---@field HumanShieldEnterType ESBZHumanShieldEnterType
---@field Offset FVector
FSBZHumanShieldSlotParameters = {}



---@class FSBZHurtReactionAnimation
---@field Montage UAnimMontage
---@field Index int32
FSBZHurtReactionAnimation = {}



---@class FSBZHurtReactionArray
---@field MontageArray TArray<FSBZHurtReactionAnimation>
FSBZHurtReactionArray = {}



---@class FSBZHurtReactionData
---@field HurtReactionWeightCurve UCurveVector
---@field HurtReactionWeightModifier float
---@field DesiredHurtReactionWeight ESBZDamageWeight
---@field HurtReactionWeightBuildupModifier float
---@field CriticalHurtReactionWeightBuildupModifier float
FSBZHurtReactionData = {}



---@class FSBZHurtReactionDirection
---@field Forward TArray<FSBZHurtReactionAnimation>
---@field Right TArray<FSBZHurtReactionAnimation>
---@field Backward TArray<FSBZHurtReactionAnimation>
---@field Left TArray<FSBZHurtReactionAnimation>
FSBZHurtReactionDirection = {}



---@class FSBZHurtReactionLookup
---@field Montage UAnimMontage
---@field Weight ESBZDamageWeight
---@field Pose ESBZHurtReactionPose
---@field Direction ESBZHurtReactionDirection
---@field BoneName FName
---@field Tag FGameplayTag
FSBZHurtReactionLookup = {}



---@class FSBZHurtReactionPose
---@field Standing FSBZBoneHurtReaction
---@field Crouching FSBZBoneHurtReaction
---@field LyingOnFront FSBZBoneHurtReaction
---@field LyingOnBack FSBZBoneHurtReaction
FSBZHurtReactionPose = {}



---@class FSBZHurtReactionPrediction
FSBZHurtReactionPrediction = {}


---@class FSBZInertializationBoneDiff
FSBZInertializationBoneDiff = {}


---@class FSBZInertializationPose
FSBZInertializationPose = {}


---@class FSBZInertializationPoseDiff
FSBZInertializationPoseDiff = {}


---@class FSBZInfamyContentData
---@field InfamyLevel int32
---@field InfamyPoints int32
---@field InfamyRewards TArray<FSBZInfamyRewardData>
FSBZInfamyContentData = {}



---@class FSBZInfamyRewardData
---@field ContentGivenType FString
---@field ContentGivenValue int32
FSBZInfamyRewardData = {}



---@class FSBZInfamySaveData
---@field InfamyExperience int32
---@field InfamyLevel int32
FSBZInfamySaveData = {}



---@class FSBZInfoPopupText
---@field HeaderText FText
---@field BodyText FText
---@field bHasPlaystationSpecificBodyText boolean
---@field BodyTextPlaystation FText
---@field bHasXboxSpecificBodyText boolean
---@field BodyTextXbox FText
FSBZInfoPopupText = {}



---@class FSBZInputActionKeyboardBinding
---@field ActionName FName
---@field KeyPrimary FKey
---@field KeySecondary FKey
FSBZInputActionKeyboardBinding = {}



---@class FSBZInputAxisKeyboardBinding
---@field AxisName FName
---@field Scale float
---@field KeyPrimary FKey
---@field KeySecondary FKey
FSBZInputAxisKeyboardBinding = {}



---@class FSBZInstantLootData
---@field Name FString
---@field Counter int32
FSBZInstantLootData = {}



---@class FSBZInstantLootValues
---@field StealthMaxPayoutArray TArray<int32>
---@field LoudMaxPayoutArray TArray<int32>
---@field TotalPoints int32
---@field NameToPointMap TMap<FString, int32>
FSBZInstantLootValues = {}



---@class FSBZInteractDisplayData
---@field bCanInteract boolean
---@field ModeArray TArray<FSBZInteractModeDisplayData>
---@field Component USBZBaseInteractableComponent
---@field Prio int32
---@field FailPrio int32
FSBZInteractDisplayData = {}



---@class FSBZInteractDisplayDataCollection
---@field FrontData FSBZInteractDisplayData
---@field SelfData FSBZInteractDisplayData
FSBZInteractDisplayDataCollection = {}



---@class FSBZInteractModeDisplayData
---@field bIsInstant boolean
---@field bIsFailed boolean
---@field bIsAllowed boolean
---@field bIsIllegal boolean
---@field Text FText
FSBZInteractModeDisplayData = {}



---@class FSBZInteractReqData
---@field FailTextArray TArray<FText>
---@field SuccessTextOverrideArray TArray<FText>
---@field IsHiddenFailArray TArray<boolean>
FSBZInteractReqData = {}



---@class FSBZInteractableModeData
---@field Text FText
---@field Duration float
---@field bIsInputConsumed boolean
---@field bDistanceBreaksInteraction boolean
---@field bIsAllowedInCasing boolean
---@field bIsSignalInteract boolean
---@field bIsIllegal boolean
---@field Priority int32
---@field AnimationName FName
FSBZInteractableModeData = {}



---@class FSBZInventoryItem
---@field UseCount int32
---@field ItemType ESBZItemType
---@field ItemId FGuid
FSBZInventoryItem = {}



---@class FSBZInventorySlot
---@field ItemInventorySlotAvailability ESBZItemInventorySlotAvailability
---@field ConfigSlotEntitlementId FGuid
---@field ConfigSlotItemId FGuid
FSBZInventorySlot = {}



---@class FSBZInventorySlotStoreItem : FSBZStoreBaseItem
---@field InventorySlotData USBZInventorySlotData
FSBZInventorySlotStoreItem = {}



---@class FSBZInvestigateData
---@field Location FVector
---@field Target AActor
FSBZInvestigateData = {}



---@class FSBZInvestigationData
---@field Target AActor
---@field Instigator AActor
---@field Investigator APawn
---@field OrderInstance USBZAIOrder_Investigate
---@field Escalation USBZActionNotificationAsset
FSBZInvestigationData = {}



---@class FSBZInvestigationRequest
---@field Target AActor
---@field Instigator AActor
---@field Room ASBZRoomVolume
---@field Location FVector
---@field Mode ESBZInvestigationMode
---@field EscalationReason USBZActionNotificationAsset
---@field bIsUrgent boolean
FSBZInvestigationRequest = {}



---@class FSBZItemBundleStoreItem : FSBZStoreBaseItem
---@field ItemBundleData USBZItemBundleData
---@field BundleContentArray TArray<FSBZBundleItem>
FSBZItemBundleStoreItem = {}



---@class FSBZItemConfigInventorySaveData
---@field PrimaryWeaponConfigSlots TArray<FSBZWeaponInventorySlot>
---@field SecondaryWeaponConfigSlots TArray<FSBZWeaponInventorySlot>
---@field OverkillWeaponConfigSlots TArray<FSBZWeaponInventorySlot>
FSBZItemConfigInventorySaveData = {}



---@class FSBZItemEntitlementArray
---@field PlayerItemEntitlementsIds TArray<FGuid>
FSBZItemEntitlementArray = {}



---@class FSBZItemProvidedBySkill
---@field bIsAvailable boolean
---@field SkillLineToUnlock USBZSkillLine
---@field InventoryBaseData USBZInventoryBaseData
FSBZItemProvidedBySkill = {}



---@class FSBZKeyItemCountChangedEvent : FSBZGameEventStructBase
---@field PlayerState APlayerState
---@field KeyTagName FName
---@field KeyItem USBZKeyItemData
---@field OldValue int32
---@field NewValue int32
FSBZKeyItemCountChangedEvent = {}



---@class FSBZKeyPropertyModeData
---@field DeadZoneArray float
FSBZKeyPropertyModeData = {}



---@class FSBZKickingInfo
---@field bActive boolean
---@field PlayerToKick FUniqueNetIdRepl
---@field PlayerProposed FUniqueNetIdRepl
---@field KickVotes TArray<FUniqueNetIdRepl>
---@field KeepVotes TArray<FUniqueNetIdRepl>
---@field VotesNeededToKick int32
---@field ModeKick ESBZKickingMode
---@field PlayersVoted TArray<FUniqueNetIdRepl>
---@field TimeLeft float
---@field TimeKickStarted FDateTime
---@field bWasClientKicked boolean
FSBZKickingInfo = {}



---@class FSBZKnifeProjectileTargetData : FSBZProjectileTargetData
FSBZKnifeProjectileTargetData = {}


---@class FSBZLaserPattern
---@field LaserIndexes TArray<int32>
FSBZLaserPattern = {}



---@class FSBZLaserPointConnection
---@field PointA FSBZComponentSelector
---@field PointB FSBZComponentSelector
FSBZLaserPointConnection = {}



---@class FSBZLastAttackerData : FSBZGameEventStructBase
FSBZLastAttackerData = {}


---@class FSBZLevelTimesStruct
---@field LoudTime float
---@field StealthTime float
FSBZLevelTimesStruct = {}



---@class FSBZLevelVOInfo
---@field StringTable FSoftObjectPath
---@field GSheetId FString
FSBZLevelVOInfo = {}



---@class FSBZLifeActionActorTagEvent
---@field EventTag FGameplayTag
---@field Actor AActor
---@field bHandleEventStart boolean
---@field bHandleEventEnd boolean
FSBZLifeActionActorTagEvent = {}



---@class FSBZLifeActionAffinity
---@field AffinityName FName
---@field Actions FGameplayTagContainer
---@field CharacterScale FFloatInterval
FSBZLifeActionAffinity = {}



---@class FSBZLifeActionAffinityList
---@field Affinities TArray<FSBZLifeActionAffinity>
FSBZLifeActionAffinityList = {}



---@class FSBZLifeActionAnimationTags
---@field EnterAnimationTag FGameplayTag
---@field AnimationTag FGameplayTag
---@field ExitAnimationTag FGameplayTag
FSBZLifeActionAnimationTags = {}



---@class FSBZLifeActionAnimationTagsRandomizer
---@field Chance float
---@field AnimationTags TArray<FSBZLifeActionAnimationTags>
FSBZLifeActionAnimationTagsRandomizer = {}



---@class FSBZLifeActionRandomAnimationTagsPicker
---@field AnimationTagsRandomizers TArray<FSBZLifeActionAnimationTagsRandomizer>
FSBZLifeActionRandomAnimationTagsPicker = {}



---@class FSBZLifeActionRequest
---@field SpecificActionComponentOwner AActor
---@field SpecificActionComponent USBZLifeActionComponent
---@field SpecificActionInstance USBZLifeActionInstance
---@field SpecificActionSlot USBZLifeActionSlot
---@field ActionTag FGameplayTag
---@field SlotTag FGameplayTag
---@field SpecificAffinityData USBZLifeActionAffinitytData
FSBZLifeActionRequest = {}



---@class FSBZLifeTimeLensParticleHandle
---@field ParticleEffect UNiagaraComponent
---@field TimerHandle FTimerHandle
FSBZLifeTimeLensParticleHandle = {}



---@class FSBZLoadoutSlotStoreItem : FSBZStoreBaseItem
---@field LoadoutSlotData USBZLoadoutSlotData
FSBZLoadoutSlotStoreItem = {}



---@class FSBZLobbyCharacterInfo
---@field PlayerUid FUniqueNetIdRepl
---@field bIsPlayerReady boolean
---@field bPlayerAcceptedMatch boolean
---@field LevelIdx int32
---@field PowerLevel int32
---@field Nickname FString
FSBZLobbyCharacterInfo = {}



---@class FSBZLobbyCharacterInfoUi
---@field PawnClass TSubclassOf<APawn>
---@field PawnSoftClass TSoftClassPtr<APawn>
---@field bAsyncLoadInProgress boolean
---@field bIsPlayerReady boolean
---@field bPlayerAcceptedMatch boolean
---@field LevelIdx int32
---@field PowerLevel int32
---@field Nickname FString
---@field AccelBytePlayerName FString
---@field PlayerUidString FString
---@field PlayerUId FUniqueNetIdRepl
---@field SlotStatus ESBZSlotStatus
---@field PreplanningAssetSku FString
---@field Platform ESBZPlatform
---@field InfamyLevel int32
---@field Loadout FPD3PlayerLoadout
---@field SelectedCharacter FSoftObjectPath
FSBZLobbyCharacterInfoUi = {}



---@class FSBZLocalGasLocation : FFastArraySerializerItem
---@field X int16
---@field Y int16
---@field Z int16
FSBZLocalGasLocation = {}



---@class FSBZLocalGasLocations : FFastArraySerializer
---@field Locations TArray<FSBZLocalGasLocation>
FSBZLocalGasLocations = {}



---@class FSBZLocalPlayerFeedbackInfo
---@field PlayerFeedback USBZLocalPlayerFeedback
---@field ID int32
FSBZLocalPlayerFeedbackInfo = {}



---@class FSBZLocalPlayerFeedbackParameters
---@field FeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
---@field Intensity float
---@field bIsAutoRemoved boolean
---@field bCameraAsOrigin boolean
---@field Origin FTransform
---@field SustainTime float
FSBZLocalPlayerFeedbackParameters = {}



---@class FSBZLocationInformation
---@field MainInformation FText
---@field SecondaryInformation FText
---@field AdditionalInformation FText
FSBZLocationInformation = {}



---@class FSBZLockCameraData
---@field PitchLimit FFloatInterval
---@field YawLimit FFloatInterval
---@field MinDampeningScale float
---@field MaxDampeningScale float
---@field StartScaleDampeningPitch FFloatInterval
---@field StartScaleDampeningYaw FFloatInterval
---@field EndScaleDampeningPitch FFloatInterval
---@field EndScaleDampeningYaw FFloatInterval
---@field bIsClampRelativeToCurrent boolean
---@field bIsDampeningUsed boolean
---@field bIsDampeningOnlyTowardLimit boolean
---@field bIsControlRotationAffected boolean
---@field bIsControlRotationChangeAllowed boolean
---@field bIsOnlyControlRotationAffected boolean
---@field Priority int8
FSBZLockCameraData = {}



---@class FSBZLoginFieldInfo
---@field Username FString
---@field Password FString
FSBZLoginFieldInfo = {}



---@class FSBZLookFocusHandler
---@field Goal ASBZCharacter
---@field Animation UAnimSequenceBase
FSBZLookFocusHandler = {}



---@class FSBZLookFocusParameters
---@field YawInterval FFloatInterval
---@field PitchInterval FFloatInterval
---@field MinBlendInTime float
---@field BlendInEaseExp float
---@field MinBlendOutTime float
---@field BlendOutEaseExp float
---@field SignificancePercentInterval FFloatInterval
---@field DistanceForMaxSignificance float
---@field Speed float
---@field MaxDistFromGoal float
---@field RotationInterpSpeed float
---@field NotifyFilterType ENotifyFilterType::Type
---@field NotifyFilterLOD int32
FSBZLookFocusParameters = {}



---@class FSBZLookInputSettings
---@field InputDeadZone FFloatInterval
---@field NormalStance FSBZLookInputStanceSettings
---@field TargetingStance FSBZLookInputStanceSettings
FSBZLookInputSettings = {}



---@class FSBZLookInputStanceSettings
---@field CardinalDeadZoneForXInput float
---@field CardinalDeadZoneForYInput float
---@field HorizontalSensitivityCurve FRuntimeFloatCurve
---@field VerticalSensitivityCurve FRuntimeFloatCurve
---@field AccelerationDeadZone float
---@field AccelerationMultiplier float
---@field AccelerationTime float
FSBZLookInputStanceSettings = {}



---@class FSBZLootTypeData
---@field LootValue int32
---@field MaxValueForLootType int32
FSBZLootTypeData = {}



---@class FSBZLootValueArray
---@field LootName FString
---@field LootValueDifficultyArray TArray<FSBZLootTypeData>
FSBZLootValueArray = {}



---@class FSBZMainteneanceBoxSequence
---@field Sequence TArray<int32>
FSBZMainteneanceBoxSequence = {}



---@class FSBZMarkerReplication
---@field ID uint32
---@field MarkerAsset USBZMarkerDataAsset
---@field Location FVector
FSBZMarkerReplication = {}



---@class FSBZMarkerRuntime
---@field MarkerAsset USBZMarkerDataAsset
---@field MarkerWidget USBZMarkerWidget
---@field PanelSlot UCanvasPanelSlot
---@field Component USceneComponent
FSBZMarkerRuntime = {}



---@class FSBZMaskConfig
---@field MaskData USBZMaskData
---@field OriginalMaskData USBZMaskData
---@field ModDataArray TArray<USBZModularPartDataAsset>
---@field ModDataMap TMap<USBZModularPartSlotBase, FSBZMaskPartConfigGroup>
FSBZMaskConfig = {}



---@class FSBZMaskConfigInventorySaveData
---@field MaskConfigSlots TArray<FSBZMaskInventorySlot>
FSBZMaskConfigInventorySaveData = {}



---@class FSBZMaskInventorySlot : FSBZInventorySlot
---@field MaskInSlotEntitlementId FGuid
---@field MaskInSlotAccelByteItemId FGuid
---@field MaskInventorySlotType ESBZItemInventorySlotType
---@field MaskConfig FSBZMaskConfig
---@field MaskPresetConfig FSBZMaskPresetConfig
FSBZMaskInventorySlot = {}



---@class FSBZMaskMouldStoreItem : FSBZStoreBaseItem
---@field MaskMouldData USBZMaskMouldData
FSBZMaskMouldStoreItem = {}



---@class FSBZMaskPartConfigGroup
---@field Part USBZModularPartDataAsset
---@field Config USBZMaskPartConfig
FSBZMaskPartConfigGroup = {}



---@class FSBZMaskPatternStoreItem : FSBZStoreBaseItem
---@field MaskPatternData USBZMaskPatternData
FSBZMaskPatternStoreItem = {}



---@class FSBZMaskPreconfigStoreItem : FSBZStoreBaseItem
---@field MaskPreconfigData USBZMaskPreconfigData
FSBZMaskPreconfigStoreItem = {}



---@class FSBZMaskPresetConfig
---@field MaskPresetData USBZMaskPresetData
---@field OriginalMaskPresetData USBZMaskPresetData
FSBZMaskPresetConfig = {}



---@class FSBZMaskPresetStoreItem : FSBZStoreBaseItem
---@field MaskData USBZMaskData
FSBZMaskPresetStoreItem = {}



---@class FSBZMaskVFXStoreItem : FSBZStoreBaseItem
---@field MaskVFXData USBZMaskVFXData
FSBZMaskVFXStoreItem = {}



---@class FSBZMatchmakingSessionResult
FSBZMatchmakingSessionResult = {}


---@class FSBZMeleeImpactData : FSBZStandardImpactData
---@field CategoryDecalScale TMap<ESBZMeleeAttackCategory, float>
FSBZMeleeImpactData = {}



---@class FSBZMeleeTargetData : FGameplayAbilityTargetData
FSBZMeleeTargetData = {}


---@class FSBZMenuACCharacterEquippableSlots
---@field CharacterSlots FSBZMenuACSlots
---@field EquippableSlots FSBZMenuACSlots
FSBZMenuACCharacterEquippableSlots = {}



---@class FSBZMenuACEquippablePerCharacterSlot
---@field Slots TMap<TSoftClassPtr<ASBZPlayerCharacter>, FSBZMenuACCharacterEquippableSlots>
FSBZMenuACEquippablePerCharacterSlot = {}



---@class FSBZMenuACPerCharacterSlot
---@field Slots TMap<TSoftClassPtr<ASBZPlayerCharacter>, FSBZMenuACSlots>
FSBZMenuACPerCharacterSlot = {}



---@class FSBZMenuACSlots
---@field bOverride boolean
---@field Animations TArray<TSoftObjectPtr<UAnimationAsset>>
FSBZMenuACSlots = {}



---@class FSBZMesh
---@field Vertices TArray<FVector>
---@field Indices TArray<int32>
FSBZMesh = {}



---@class FSBZMeshZones
---@field Mesh TSoftObjectPtr<UMeshComponent>
---@field Zones TArray<TSoftObjectPtr<USBZPersistentWorldDamageZoneComponent>>
FSBZMeshZones = {}



---@class FSBZMetaEventData
---@field Active boolean
---@field EventType ESBZMetaEventType
---@field StartDate FDateTime
---@field StopDate FDateTime
---@field Description FString
---@field Modifiers TArray<FSBZMetaEventModifierData>
FSBZMetaEventData = {}



---@class FSBZMetaEventModifierData
---@field ModifierType ESBZMetaEventModifierType
---@field Multiplier float
FSBZMetaEventModifierData = {}



---@class FSBZMetaNotification
---@field MetaResult ESBZMetaRequestResult
---@field DisplayText FText
FSBZMetaNotification = {}



---@class FSBZMicroCameraSkillSettingData
---@field AmountUpgradeBase float
---@field DurationMastery01 float
FSBZMicroCameraSkillSettingData = {}



---@class FSBZMilestoneData
---@field MilestoneId FString
---@field bCompleted boolean
FSBZMilestoneData = {}



---@class FSBZMilestoneRewardData
---@field MilestoneName FString
---@field MilestoneRewardRatio float
FSBZMilestoneRewardData = {}



---@class FSBZMinimalAgilityTraversalTrajectory
---@field JumpPointLocation FVector
---@field EdgePointFrontLocation FVector
---@field EdgePointBackLocation FVector
---@field LandPointLocation FVector
---@field EntrySpeed int16
---@field AgilityType ESBZAgilityTraversalType
---@field bEndsInCrouchState boolean
---@field bEndsFalling boolean
FSBZMinimalAgilityTraversalTrajectory = {}



---@class FSBZMissionInfo
---@field LevelIdx int32
---@field DifficultyIdx uint8
FSBZMissionInfo = {}



---@class FSBZModularMeshData
---@field SkeletalMesh TSoftObjectPtr<USkeletalMesh>
---@field SkeletalMeshClass TSubclassOf<USkeletalMeshComponent>
---@field SpawnSlot USBZModularPartSlotBase
---@field SpawnStep ESBZModularMeshSpawnStep
---@field bModifiesBaseMesh boolean
---@field AppliedPartBoneToRig TArray<FName>
---@field DontApplyPartBone TArray<FName>
---@field DontApplyPartBoneIfAlreadyChanged TArray<FName>
---@field MapPartBoneToRigBone TMap<FName, FName>
---@field RigBoneAnimConstraints TArray<FSBZBoneAnimContraint>
---@field AttachBoneParentOverride FName
---@field bNotAnimatedPart boolean
---@field SpawnOnlyIfAllTagsArePresent FGameplayTagContainer
---@field DontSpawnIfTagIsPresent FGameplayTagContainer
---@field VisibilityTag FGameplayTag
---@field bVisibilityTagState boolean
---@field TagContainer FGameplayTagContainer
---@field ParentSlot USBZModularPartSlotBase
---@field ParentPart USBZModularPartDataAsset
FSBZModularMeshData = {}



---@class FSBZModularMeshVisibility
---@field ModularMesh USkeletalMeshComponent
---@field Tag FGameplayTag
---@field bVisibilityState boolean
FSBZModularMeshVisibility = {}



---@class FSBZModularPartSlotConfiguration
---@field DefaultPart USBZModularPartDataAsset
---@field UniqueModParts TArray<USBZModularPartDataAsset>
---@field SharedParts TArray<USBZSharedPartList>
FSBZModularPartSlotConfiguration = {}



---@class FSBZModularSlotPart
---@field PartSlot USBZModularPartSlotBase
---@field PartDataAsset USBZModularPartDataAsset
FSBZModularSlotPart = {}



---@class FSBZMontageSectionSwitchRequest
---@field NotifyState USBZAutoSectionSwitchNotifyState
---@field Montage UAnimMontage
FSBZMontageSectionSwitchRequest = {}



---@class FSBZNavButtonParameters
---@field StackValue FName
---@field DisplayValue FText
---@field bHasPlaystationSpecificDisplayValue boolean
---@field DisplayValuePlaystation FText
---@field bHasXBoxSpecificDisplayValue boolean
---@field DisplayValueXBox FText
---@field bShowOnlyOnWindowsPlatform boolean
FSBZNavButtonParameters = {}



---@class FSBZNavLinkWaitSlot
---@field Location FVector
---@field Occupant TWeakObjectPtr<ASBZAIBaseCharacter>
FSBZNavLinkWaitSlot = {}



---@class FSBZNegotiationDifficultySettings
---@field BaseNrHostagesRequired uint32
---@field NrHostagesToAddPerDemand uint32
---@field BaseTime float
---@field BonusTime float
---@field DemandInterval float
---@field RemainingTimeDemandThreshold float
---@field DelayAssaultSeconds float
---@field ReducePlayerSpectateSeconds float
---@field CivilianKilledExtraTime float
---@field MaxExtraCustodyTime float
FSBZNegotiationDifficultySettings = {}



---@class FSBZNewsFeedEntry
---@field Title FString
---@field Body FString
---@field ImageUrl FString
FSBZNewsFeedEntry = {}



---@class FSBZNewsFeedList
---@field NewsList TArray<FSBZNewsFeedEntry>
FSBZNewsFeedList = {}



---@class FSBZNode
---@field Connector TScriptInterface<ISBZRoomConnectorInterface>
---@field Room ASBZRoomVolume
FSBZNode = {}



---@class FSBZObjectiveData
---@field ObjectiveId FString
---@field bCompleted boolean
FSBZObjectiveData = {}



---@class FSBZObjectiveKeysOverrides
---@field KeysOverrides TMap<FString, FString>
FSBZObjectiveKeysOverrides = {}



---@class FSBZOnlineMatchmakingParams
---@field bQuickMatch boolean
---@field LevelIdx int32
---@field DifficultyIdx uint8
---@field SecurityCompanies TArray<ESBZSecurityCompany>
---@field MatchmakingRandomSeed int32
---@field Command ESBZMatchmakingCommand
FSBZOnlineMatchmakingParams = {}



---@class FSBZOnlinePartyParamsUi
---@field PartyType ESBZOnlineJoinType
FSBZOnlinePartyParamsUi = {}



---@class FSBZOnlineSearchResult
---@field Name FString
---@field SessionId FString
---@field Parameters FSBZOnlineSessionParams
FSBZOnlineSearchResult = {}



---@class FSBZOnlineSessionParams
---@field SessionPhase ESBZOnlineSessionPhase
---@field bIsParty boolean
---@field JoinType ESBZOnlineJoinType
---@field LevelIdx int32
---@field DifficultyIdx int32
---@field SecurityCompaniesList FString
---@field bIsDebugSession boolean
---@field FreeSlots int32
---@field bIgnoreFullSession boolean
---@field SessionType ESBZServerSessionType
---@field NetworkVersion int32
---@field MatchMakingGroup FString
---@field MatchMakingGroupLabel FString
---@field HostingIpAddress FString
---@field PingInMs int32
FSBZOnlineSessionParams = {}



---@class FSBZOverkillWeaponInventoryItem : FSBZInventoryItem
---@field OverkillWeaponData USBZEquippableData
FSBZOverkillWeaponInventoryItem = {}



---@class FSBZOverrideConfigWeaponMaterials
---@field WeaponMaterialPerMesh TArray<UMaterialInterface>
FSBZOverrideConfigWeaponMaterials = {}



---@class FSBZPartyData
---@field OwnerId int32
---@field OwnerIndex int32
---@field Members TArray<FSBZPartyMemberInfo>
---@field HostState ESBZOnlineSessionPhase
---@field bIsQuickPlay boolean
---@field MissionSchematicIdx int32
---@field MissionDifficultyIdx int32
FSBZPartyData = {}



---@class FSBZPartyInvitation
---@field InvitationId FString
---@field PartyId FString
---@field PlayerId FString
---@field InviteExpirationTimer FTimerHandle
---@field Type ESBZPartyInvitationType
FSBZPartyInvitation = {}



---@class FSBZPartyMember
---@field PlayerId FString
---@field Username FString
---@field PlatformUserName FString
---@field PlatformIcon UPaperSprite
---@field NebulaIcon UPaperSprite
---@field Platform ESBZPlatform
---@field bIsPartyLeader boolean
FSBZPartyMember = {}



---@class FSBZPartyMemberInfo
---@field PlayerUId FUniqueNetIdRepl
---@field Nickname FString
FSBZPartyMemberInfo = {}



---@class FSBZPartyMessageAB
---@field Topic FString
---@field Payload FString
FSBZPartyMessageAB = {}



---@class FSBZPathFocusHandler
---@field CurrentEnemy AActor
---@field TargetActor AActor
---@field Settings USBZPathFocusSettings
FSBZPathFocusHandler = {}



---@class FSBZPatrolNext
---@field Point ASBZPatrolPoint
FSBZPatrolNext = {}



---@class FSBZPawnPlatformSpawnSettings
---@field AllowedSpawnSignificance ESBZSpawnSignificance
---@field PopulationLimit int32
---@field MaximumSpawnsPerFrame int32
---@field MaximumDestroysPerFrame int32
FSBZPawnPlatformSpawnSettings = {}



---@class FSBZPawnSpawnDefinition
---@field Transform FTransform
---@field NameType FName
FSBZPawnSpawnDefinition = {}



---@class FSBZPawnSpawnRequest
---@field Data USBZPawnSpawnRequestData
---@field Spawner TSoftObjectPtr<ASBZPawnSpawnBase>
---@field Action USBZAIAction
---@field Significance ESBZSpawnSignificance
---@field GameplayEffectClass TSubclassOf<UGameplayEffect>
FSBZPawnSpawnRequest = {}



---@class FSBZPawnSpawnRequestHandle
FSBZPawnSpawnRequestHandle = {}


---@class FSBZPawnVariationData
---@field PawnClass TSubclassOf<APawn>
---@field bOverrideEquipmentData boolean
---@field EquipmentData USBZAIEquipmentData
---@field bOverrideInitialEquippableIndex boolean
---@field InitialEquippableIndex int32
---@field bOverrideVariationData boolean
---@field VariationData USBZVariationSetData
---@field bOverrideVariationDataIntervals boolean
---@field VariationCategoryIndexIntervals FInt32Interval
FSBZPawnVariationData = {}



---@class FSBZPayDayCreditStoreItem : FSBZStoreBaseItem
---@field PayDayCreditData USBZPayDayCreditData
FSBZPayDayCreditStoreItem = {}



---@class FSBZPendingUsingSpawnedCarryData
---@field User ASBZCharacter
FSBZPendingUsingSpawnedCarryData = {}



---@class FSBZPerformanceBonusArray
---@field PerformanceBonusEntryArray TArray<FSBZPerformanceBonusEntry>
FSBZPerformanceBonusArray = {}



---@class FSBZPerformanceBonusEntry
---@field Min int32
---@field Max int32
---@field Modifier float
FSBZPerformanceBonusEntry = {}



---@class FSBZPhoneHackingTargetData : FGameplayAbilityTargetData
---@field HackableActor AActor
FSBZPhoneHackingTargetData = {}



---@class FSBZPhoneme
---@field BlendInStartTime uint16
---@field BlendInStartValue uint8
---@field BlendInEndTime uint16
---@field BlendInEndValue uint8
---@field ControlStartTime uint16
---@field ControlStartValue uint8
---@field BlendOutStartTime uint16
---@field BlendOutEndTime uint16
---@field BlendOutStartValue uint8
---@field BlendOutEndValue uint8
---@field Phoneme ESBZPhonemeType
FSBZPhoneme = {}



---@class FSBZPhonemeDataTableRow : FTableRowBase
---@field m1v float
---@field ev float
---@field cv float
---@field c float
---@field e float
---@field i float
---@field m2v float
---@field sv float
---@field s float
---@field m1 float
---@field m2 float
---@field t FString
FSBZPhonemeDataTableRow = {}



---@class FSBZPivotSwitchHandler
---@field bActive boolean
---@field Angle float
---@field AimOffsetAngle float
---@field CurValue float
FSBZPivotSwitchHandler = {}



---@class FSBZPlaceItemTargetData : FGameplayAbilityTargetData
FSBZPlaceItemTargetData = {}


---@class FSBZPlaceToolTargetData : FGameplayAbilityTargetData
---@field AttachParent UPrimitiveComponent
FSBZPlaceToolTargetData = {}



---@class FSBZPlaceableInventoryItem : FSBZInventoryItem
---@field PlaceableData USBZPlaceableData
FSBZPlaceableInventoryItem = {}



---@class FSBZPlaceableToolActivationTargetData : FGameplayAbilityTargetData
FSBZPlaceableToolActivationTargetData = {}


---@class FSBZPlatformsBlockedPlayersInfo
---@field PlatformBlockedPlayers TArray<FSBZBlockedPlayers>
FSBZPlatformsBlockedPlayersInfo = {}



---@class FSBZPlayerCallEvent : FSBZGameEventStructBase
---@field PlayerState ASBZPlayerState
---@field Call USBZPingCallAsset
FSBZPlayerCallEvent = {}



---@class FSBZPlayerCharacterInventoryItem : FSBZInventoryItem
---@field PlayerCharacterData USBZPlayerCharacterData
FSBZPlayerCharacterInventoryItem = {}



---@class FSBZPlayerChatEvent : FSBZGameEventStructBase
---@field PlayerState APlayerState
---@field Message FString
FSBZPlayerChatEvent = {}



---@class FSBZPlayerCosmeticsConfig
---@field MaskConfigSlotIndex int32
---@field SuitConfigSlotIndex int32
---@field GloveConfigSlotIndex int32
FSBZPlayerCosmeticsConfig = {}



---@class FSBZPlayerCurrencyBalanceData
---@field Cash FSBZCurrency
---@field Gold FSBZCurrency
---@field Credit FSBZCurrency
FSBZPlayerCurrencyBalanceData = {}



---@class FSBZPlayerDebuggerOptions
---@field bIsGod boolean
---@field bIsInfiniteAmmo boolean
---@field bIsInvisible boolean
---@field bIsInaudible boolean
FSBZPlayerDebuggerOptions = {}



---@class FSBZPlayerDefeatStateChangedData : FSBZDefeatStateChangedData
---@field PlayerState ASBZPlayerState
FSBZPlayerDefeatStateChangedData = {}



---@class FSBZPlayerEndMissionResultData : FSBZCharacterEndMissionResultData
---@field bPlayerRewardsUpdated boolean
---@field PlayerStateId int32
---@field CharacterEndMissionExpBonusData FSBZCharacterEndMissionExpBonusData
---@field CashRewardData FSBZCashRewardData
---@field RandomItemRewardArray TArray<USBZInventoryBaseData>
---@field WeaponProgressionUpdateArray TArray<FSBZWeaponProgressionUpdateData>
---@field SkillRewardData FSBZSkillRewardData
FSBZPlayerEndMissionResultData = {}



---@class FSBZPlayerInEscapeChangedEvent : FSBZGameEventStructBase
---@field Inside int32
---@field Total int32
FSBZPlayerInEscapeChangedEvent = {}



---@class FSBZPlayerItemInfo
---@field ItemProgressionSource ESBZItemProgressionSource
---@field InfamyLevel int32
---@field SkillLine USBZSkillLineData
---@field InventoryBaseData USBZInventoryBaseData
FSBZPlayerItemInfo = {}



---@class FSBZPlayerLoadoutConfig
---@field LoadoutName FString
---@field PrimaryWeaponConfigSlotIndex int32
---@field SecondaryWeaponConfigSlotIndex int32
---@field OverkillWeapon USBZEquippableData
---@field Throwable USBZThrowableData
---@field Tool USBZToolData
---@field Placeable USBZPlaceableData
---@field Skills TArray<USBZSkillData>
---@field Armor USBZArmorData
FSBZPlayerLoadoutConfig = {}



---@class FSBZPlayerPingEvent : FSBZGameEventStructBase
---@field PlayerState APlayerState
---@field ShoutoutTarget USBZShoutTargetComponent
FSBZPlayerPingEvent = {}



---@class FSBZPlayerReadyInfo : FFastArraySerializerItem
---@field PlayerId FUniqueNetIdRepl
---@field PlayerNamePlatform FString
---@field PlayerNameAccelbyte FString
---@field AccelByteUserName FString
---@field AccelByteDisplayName FString
---@field AccelByteUserId FString
---@field PlayerReadyStatusValue EPlayerReadyStatusValue
---@field Platform ESBZPlatform
---@field InfamyLevel int32
FSBZPlayerReadyInfo = {}



---@class FSBZPlayerSlotInfo
---@field PlayerId FUniqueNetIdRepl
---@field BackendPlayerId FString
---@field PartyCode FString
---@field bIsPartyLeader boolean
FSBZPlayerSlotInfo = {}



---@class FSBZPlayerStateAddedEvent : FSBZGameEventStructBase
---@field PlayerState APlayerState
FSBZPlayerStateAddedEvent = {}



---@class FSBZPlayerStateRemovedEvent : FSBZGameEventStructBase
---@field PlayerState APlayerState
---@field Name FString
FSBZPlayerStateRemovedEvent = {}



---@class FSBZPlayerStatisticArray
---@field PlayerStatisticEntryArray TArray<FString>
FSBZPlayerStatisticArray = {}



---@class FSBZPlayerStatisticsValue
---@field CurrentValue float
---@field PreviousValue float
FSBZPlayerStatisticsValue = {}



---@class FSBZPlayerStoreItemData
---@field PrimaryWeaponMap TMap<FGuid, FSBZWeaponStoreItem>
---@field SecondaryWeaponMap TMap<FGuid, FSBZWeaponStoreItem>
---@field GloveMap TMap<FGuid, FSBZGloveStoreItem>
---@field SuitPresetMap TMap<FGuid, FSBZSuitPresetStoreItem>
---@field SuitBaseMap TMap<FGuid, FSBZSuitBaseStoreItem>
---@field WatchMap TMap<FGuid, FSBZWatchStoreItem>
---@field PreplanningAssetMap TMap<FGuid, FSBZPreplanningAssetStoreItem>
---@field PrimaryInventorySlotMap TMap<FGuid, FSBZInventorySlotStoreItem>
---@field SecondaryInventorySlotMap TMap<FGuid, FSBZInventorySlotStoreItem>
---@field MaskInventorySlotMap TMap<FGuid, FSBZInventorySlotStoreItem>
---@field SuitInventorySlotMap TMap<FGuid, FSBZInventorySlotStoreItem>
---@field GloveInventorySlotMap TMap<FGuid, FSBZInventorySlotStoreItem>
---@field PrimaryWeaponPresetMap TMap<FGuid, FSBZWeaponPresetStoreItem>
---@field SecondaryWeaponPresetMap TMap<FGuid, FSBZWeaponPresetStoreItem>
---@field LoadoutSlotMap TMap<FGuid, FSBZLoadoutSlotStoreItem>
---@field SprayCanMap TMap<FGuid, FSBZSprayCanStoreItem>
---@field WeaponCharmMap TMap<FGuid, FSBZWeaponCharmStoreItem>
---@field WeaponPatternMap TMap<FGuid, FSBZWeaponPatternStoreItem>
---@field WeaponStickerMap TMap<FGuid, FSBZWeaponStickerStoreItem>
---@field MaskMouldMap TMap<FGuid, FSBZMaskMouldStoreItem>
---@field MaskPresetMap TMap<FGuid, FSBZMaskPresetStoreItem>
---@field MaskPreconfigMap TMap<FGuid, FSBZMaskPreconfigStoreItem>
---@field MaskPatternMap TMap<FGuid, FSBZMaskPatternStoreItem>
---@field MaskVFXMap TMap<FGuid, FSBZMaskVFXStoreItem>
---@field SuitMaterialMap TMap<FGuid, FSBZSuitMaterialStoreItem>
---@field SuitPatternMap TMap<FGuid, FSBZSuitPatternStoreItem>
---@field CoinMap TMap<FGuid, FSBZCoinStoreItem>
---@field ItemBundleMap TMap<FGuid, FSBZItemBundleStoreItem>
FSBZPlayerStoreItemData = {}



---@class FSBZPlayerUiItemInfo
---@field bIsAvailable boolean
---@field InfamyLevel int32
---@field ItemProgressionSource ESBZItemProgressionSource
---@field SkillLineToUnlock USBZSkillLineData
---@field InventoryBaseData USBZInventoryBaseData
FSBZPlayerUiItemInfo = {}



---@class FSBZPlayersReadyStatusStateArray : FFastArraySerializer
---@field SBZPlayersReadyInfo TArray<FSBZPlayerReadyInfo>
FSBZPlayersReadyStatusStateArray = {}



---@class FSBZPreplanningAsset
---@field PlayerId FUniqueNetIdRepl
---@field SkuNo FString
FSBZPreplanningAsset = {}



---@class FSBZPreplanningAssetStoreItem : FSBZStoreBaseItem
---@field PreplanningAssetData USBZPreplanningAssetData
FSBZPreplanningAssetStoreItem = {}



---@class FSBZPreplanningInventoryItem : FSBZInventoryItem
---@field PreplanningData USBZPreplanningAssetData
FSBZPreplanningInventoryItem = {}



---@class FSBZPreplanningModifierSettingsData
---@field PagerIncreaseAmount uint8
---@field HostageReduceAmount uint32
---@field AmmoPickupIncreasePercent float
---@field NegotiationTimeIncrease float
FSBZPreplanningModifierSettingsData = {}



---@class FSBZProgressionSaveGameData
---@field Loadout FPD3PlayerLoadout
---@field ActiveLoadoutIndex int32
---@field PlayerLoadoutConfigArray TArray<FSBZPlayerLoadoutConfig>
---@field PlayerCosmeticsConfig FSBZPlayerCosmeticsConfig
---@field PlayerPreferredCharacterArray TArray<USBZPlayerCharacterData>
---@field ItemConfigInventorySaveData FSBZItemConfigInventorySaveData
---@field MaskConfigInventorySaveData FSBZMaskConfigInventorySaveData
---@field SuitConfigInventorySaveData FSBZSuitConfigInventorySaveData
---@field GloveConfigInventorySaveData FSBZGloveConfigInventorySaveData
---@field ResearchMarker FString
---@field CurrentRequestedPriceProgressionLevel TMap<FString, int32>
---@field LastTimeEventCheck int64
---@field InfamySaveData FSBZInfamySaveData
---@field StoryProgression int32
FSBZProgressionSaveGameData = {}



---@class FSBZProjectileTargetData : FGameplayAbilityTargetData
FSBZProjectileTargetData = {}


---@class FSBZProjectileTypeImpactData : FSBZBaseImpactData
---@field ImpactType ESBZProjectileImpactType
---@field DecalMultiplier float
FSBZProjectileTypeImpactData = {}



---@class FSBZPropDamageContext
---@field FromDirection FVector
---@field CharacterInstigator ACharacter
FSBZPropDamageContext = {}



---@class FSBZPropDamagePool
---@field PrimitiveComponent FSBZComponentSelector
---@field DamageTypeTags FGameplayTagContainer
---@field MaxHealth float
---@field MaxHits int32
---@field Health float
---@field Hits int32
FSBZPropDamagePool = {}



---@class FSBZQuat_NetQuantizeNormal : FQuat
FSBZQuat_NetQuantizeNormal = {}


---@class FSBZQueuedAbilityData
---@field AbilityCDO USBZGameplayAbility
FSBZQueuedAbilityData = {}



---@class FSBZQueuedJoinLobby
---@field FriendEntry FSBZFriendListEntry
---@field ArmadaInfo FSBZArmadaInfo
---@field bHasQueuedJoinLobby boolean
FSBZQueuedJoinLobby = {}



---@class FSBZRagdollInfo
---@field Character ASBZCharacter
---@field ServerHipsLocation FVector_NetQuantize
---@field ClientHipsLocation FVector
---@field PrevClientHipsLocation FVector
---@field MotionlessTimer float
---@field NetID uint32
---@field bIsCharacterInitialized boolean
---@field bIsServerHipsLocationValid boolean
FSBZRagdollInfo = {}



---@class FSBZRagdollSyncData
---@field HipsLocation FVector_NetQuantize
---@field NetID uint32
FSBZRagdollSyncData = {}



---@class FSBZRandomDefaultSwitchStates
---@field SwitchGroups TArray<FString>
---@field States TArray<FString>
FSBZRandomDefaultSwitchStates = {}



---@class FSBZRandomRoomDynData
FSBZRandomRoomDynData = {}


---@class FSBZRappellingRopeSettings
---@field RappellingRopeClassToSpawn TSubclassOf<ASBZRappellingRope>
---@field DespawnDelay float
---@field bAttachStart boolean
---@field StartAttachment FSBZCablePointAttachment
---@field PointAttachments TArray<FSBZCablePointAttachment>
---@field bAttachEnd boolean
---@field EndAttachment FSBZCablePointAttachment
---@field bEnableCollisionPlane boolean
---@field bEnableStiffness boolean
---@field MinSegmentLength float
---@field MaxSegmentCount int32
FSBZRappellingRopeSettings = {}



---@class FSBZReactionData
FSBZReactionData = {}


---@class FSBZReconnectPlayerStateData
---@field UniqueId FUniqueNetIdRepl
---@field SavedNetworkAddress FString
---@field Name FString
---@field PlayerId int32
---@field Loadout FSBZReconnectPlayerStateLoadoutData
---@field ResultData FSBZPlayerEndMissionResultData
---@field CiviliansKilledBeforeCustody int32
---@field ServerSentryKillCount int32
---@field SkillTankDisengageActivatedTimeSeconds float
---@field EnforcerSkillKillCount int32
---@field EnforcerSkillLastKillTime float
---@field EnforcerAcedSkillKillCount int32
---@field OverkillWeaponProgress float
---@field bIsMaskOn boolean
---@field SpectateDurationModification float
---@field ReducedCustodyTime float
---@field SpectateTime float
---@field DefeatState EPD3DefeatState
---@field bIsLastArrestedByGuard boolean
FSBZReconnectPlayerStateData = {}



---@class FSBZReconnectPlayerStateLoadoutData
---@field HealthScale float
---@field ArmorTrauma float
---@field ArmorScale float
---@field DownedCount float
---@field EquippableAmmoLoadedScaleArray TArray<float>
---@field EquippableAmmoInventoryScaleArray TArray<float>
---@field ThrowableAmmoInventoryScaleArray TArray<float>
---@field ToolPlaceableAmmoInventoryScaleArray TArray<float>
---@field ToolAmmoInventoryScaleArray TArray<float>
FSBZReconnectPlayerStateLoadoutData = {}



---@class FSBZRefPoseConstraint
---@field TargetBone FBoneReference
FSBZRefPoseConstraint = {}



---@class FSBZRegistrationFieldInfo
---@field Email FString
---@field Password FString
---@field Username FString
---@field Displayname FString
---@field Country FString
---@field DOB FString
FSBZRegistrationFieldInfo = {}



---@class FSBZReloadTargetData : FGameplayAbilityTargetData
FSBZReloadTargetData = {}


---@class FSBZRelocateRequest
FSBZRelocateRequest = {}


---@class FSBZRemoteEventWithActorParams
---@field Actor AActor
FSBZRemoteEventWithActorParams = {}



---@class FSBZRemoteEventWithActorsArrayParams
---@field Actor TArray<AActor>
FSBZRemoteEventWithActorsArrayParams = {}



---@class FSBZRepMoveQueue
---@field RepMoves TArray<FSBZAgentState>
FSBZRepMoveQueue = {}



---@class FSBZRepSharedKeyItemTags
---@field Tag FGameplayTag
---@field Count int32
FSBZRepSharedKeyItemTags = {}



---@class FSBZReplayEventInfo
---@field EventGroup ESBZReplayEvent
---@field MetaData FString
---@field Time float
---@field Percent float
FSBZReplayEventInfo = {}



---@class FSBZReplayInfo
---@field LevelIdx int32
---@field ReplayName FString
---@field FriendlyName FString
---@field Timestamp FDateTime
---@field LengthInMS int32
---@field bIsValid boolean
---@field ReplayDisplayTotalTime FString
---@field ReplayDisplayCreationTime FString
---@field ChangeList int32
FSBZReplayInfo = {}



---@class FSBZReplicatedInteractionData
---@field CurrentInteraction USBZBaseInteractableComponent
---@field ModeIndex int8
FSBZReplicatedInteractionData = {}



---@class FSBZReplicatedMontage
---@field Montage UAnimMontage
---@field Position float
FSBZReplicatedMontage = {}



---@class FSBZReplicatedReloadState
---@field Array FSBZCombinedReloadState
---@field bIsPlaying boolean
---@field bIsPlayingCycleNeeded boolean
FSBZReplicatedReloadState = {}



---@class FSBZReplicationGroupIndices
---@field ReplicationGroupIndices uint32
FSBZReplicationGroupIndices = {}



---@class FSBZReportPlayerInfo
---@field UserId FString
---@field Comment FString
---@field Reason FString
FSBZReportPlayerInfo = {}



---@class FSBZRespawnMinimumAttributeData
---@field bForceValues boolean
---@field Health float
---@field PercentOfMaxChunkCount float
---@field DownedCount int32
---@field WeaponAmmoMagazineCount int32
---@field ThrowableAmmo int32
---@field EquippableAmmo int32
FSBZRespawnMinimumAttributeData = {}



---@class FSBZRestartLevelInfo
---@field LevelIdx int32
FSBZRestartLevelInfo = {}



---@class FSBZRevertDamageAttributeSetContainer
---@field AttributeSetDataArray TArray<FSBZRevertDamageAttributeSetData>
FSBZRevertDamageAttributeSetContainer = {}



---@class FSBZRevertDamageAttributeSetData
---@field Character ASBZCharacter
---@field ByteArray TArray<uint8>
FSBZRevertDamageAttributeSetData = {}



---@class FSBZReviveEvent : FSBZGameEventStructBase
---@field Reviver ASBZPlayerCharacter
---@field CharacterBeingRevived ASBZPlayerCharacter
FSBZReviveEvent = {}



---@class FSBZRewardRecuctionData
---@field RewardReductionType ESBZRewardReductionType
---@field ReductionPercentage int32
---@field MaxReductionPercentage int32
FSBZRewardRecuctionData = {}



---@class FSBZRoomPath
---@field Connectors TArray<TScriptInterface<ISBZRoomConnectorInterface>>
---@field Rooms TArray<ASBZRoomVolume>
FSBZRoomPath = {}



---@class FSBZRoomPathQuery
---@field StartRoom ASBZRoomVolume
---@field EndRoom ASBZRoomVolume
---@field Owner UObject
FSBZRoomPathQuery = {}



---@class FSBZSabotageAnimationData
---@field AnimMontage UAnimMontage
---@field AcceptedHeights FFloatInterval
FSBZSabotageAnimationData = {}



---@class FSBZSecurityCompanySettingData
---@field IndestructibleCamerasMask uint8
---@field CameraRuntimeLimitMask uint8
---@field LeadGuardMask uint8
FSBZSecurityCompanySettingData = {}



---@class FSBZSecurityFirmRotation
---@field Configurations TArray<FSBZDifficultyConfiguration>
FSBZSecurityFirmRotation = {}



---@class FSBZSelectedMissionInfo
---@field LevelSchematicIdx int32
---@field DifficultyIdx int32
FSBZSelectedMissionInfo = {}



---@class FSBZSensorMarkingData
---@field MarkedTimeSeconds float
---@field MarkingTimerHandle FTimerHandle
FSBZSensorMarkingData = {}



---@class FSBZSensorToolTargetData : FGameplayAbilityTargetData
---@field ToggledActor AActor
FSBZSensorToolTargetData = {}



---@class FSBZSentryGunAngleBouncer
---@field BounceFrequency float
---@field BounceStrength float
FSBZSentryGunAngleBouncer = {}



---@class FSBZSequenceViewerSet
---@field SequenceViewerArray TArray<AActor>
FSBZSequenceViewerSet = {}



---@class FSBZSequentialScatterPlot
---@field Points TArray<FVector2D>
FSBZSequentialScatterPlot = {}



---@class FSBZSettingData
---@field SettingNameLocalized FText
---@field bHasPlaystationSpecificSettingNameLocalized boolean
---@field SettingNameLocalizedPlaystation FText
---@field bHasXBoxSpecificSettingNameLocalized boolean
---@field SettingNameLocalizedXBox FText
---@field SettingName FName
---@field ControlType ESBZControlType
---@field SettingHelperPanelName FName
---@field bApplyChangeImmediately boolean
---@field bAskChangeConfirmation boolean
---@field bCanResetToDefault boolean
---@field GetButtonVisibilityFunctionName FName
---@field bShowOnlyOnWindowsPlatform boolean
---@field bHideInShippingBuild boolean
---@field bHideInAnyBuild boolean
---@field GetDefaultValueFunctionName FName
---@field GetValueFunctionName FName
---@field SetValueFunctionName FName
---@field GetDefaultKeyPrimaryFunctionName FName
---@field GetKeyPrimaryFunctionName FName
---@field SetKeyPrimaryFunctionName FName
---@field GetDefaultKeySecondaryFunctionName FName
---@field GetKeySecondaryFunctionName FName
---@field SetKeySecondaryFunctionName FName
---@field ButtonVisibilityPrevious boolean
---@field ButtonVisibilityCurrent boolean
---@field ToggleName FString
---@field BoolValue boolean
---@field LastBoolValue boolean
---@field MultipleChoiceName FString
---@field Int64Value int64
---@field LastInt64Value int64
---@field FloatMinValue float
---@field FloatMaxValue float
---@field FloatIncrementValue float
---@field FloatValue float
---@field LastFloatValue float
---@field StringValue FString
---@field LastStringValue FString
---@field ColorValue FLinearColor
---@field LastColorValue FLinearColor
---@field IntPointValue FIntPoint
---@field LastIntPointValue FIntPoint
---@field InputActions TArray<FSBZSettingsMenuInputAction>
---@field InputAxes TArray<FSBZSettingsMenuInputAxis>
---@field PrimaryBinding FInputChord
---@field SecondaryBinding FInputChord
---@field LastPrimaryBinding FInputChord
---@field LastSecondaryBinding FInputChord
---@field ParentName FName
---@field bIsDirty boolean
---@field bHasDefaultValue boolean
---@field bActive boolean
FSBZSettingData = {}



---@class FSBZSettingsMenuCategoryInfo
---@field CategoryNameLocalized FText
---@field bHasPlaystationSpecificCategoryNameLocalized boolean
---@field CategoryNameLocalizedPlaystation FText
---@field bHasXBoxSpecificCategoryNameLocalized boolean
---@field CategoryNameLocalizedXBox FText
---@field CategoryName FName
---@field SettingsFunctions TSubclassOf<USBZSettingsFunctions>
---@field SettingsGroups TArray<FSBZSettingsMenuGroupInfo>
FSBZSettingsMenuCategoryInfo = {}



---@class FSBZSettingsMenuChildData
---@field ParentName FName
---@field ChildsName TArray<FName>
FSBZSettingsMenuChildData = {}



---@class FSBZSettingsMenuGroupInfo
---@field GroupNameLocalized FText
---@field bHasPlaystationSpecificGroupNameLocalized boolean
---@field GroupNameLocalizedPlaystation FText
---@field bHasXBoxSpecificGroupNameLocalized boolean
---@field GroupNameLocalizedXBox FText
---@field GroupName FName
---@field bShowOnlyOnWindowsPlatform boolean
---@field bHideInShippingBuild boolean
---@field Settings TArray<FSBZSettingData>
FSBZSettingsMenuGroupInfo = {}



---@class FSBZSettingsMenuInputAction
---@field ActionName FName
FSBZSettingsMenuInputAction = {}



---@class FSBZSettingsMenuInputAxis
---@field AxisName FName
---@field Scale float
FSBZSettingsMenuInputAxis = {}



---@class FSBZShape
---@field Rotation FQuat
---@field Center FVector
---@field Type ESBZShapeType
FSBZShape = {}



---@class FSBZSharedAnimBehavior
---@field SharedMontageInfos TMap<FName, FSBZSharedMontageInfo>
FSBZSharedAnimBehavior = {}



---@class FSBZSharedKeyItemTagChangedEvent : FSBZGameEventStructBase
---@field Tag FGameplayTag
---@field Count int32
---@field KeyItem USBZKeyItemData
FSBZSharedKeyItemTagChangedEvent = {}



---@class FSBZSharedMontageInfo
---@field CharacterAnimMontage UAnimMontage
---@field EquippableAnimMontage UAnimMontage
---@field LeftEquippableAnimMontage UAnimMontage
---@field CharacterAnimInstance USBZCharacterAnimation
---@field EquippableAnimInstance UAnimInstance
---@field LeftEquippableAnimInstance UAnimInstance
FSBZSharedMontageInfo = {}



---@class FSBZShotgunSpreadPattern
---@field PelletSpreadAngles TArray<FVector2D>
FSBZShotgunSpreadPattern = {}



---@class FSBZShoveHumanShieldTargetData : FGameplayAbilityTargetData
FSBZShoveHumanShieldTargetData = {}


---@class FSBZSideBarNotificationData
---@field HeaderText FText
---@field DescriptionText FText
---@field DisplayTime float
---@field InventoryItem USBZInventoryBaseData
FSBZSideBarNotificationData = {}



---@class FSBZSimplePhysicsState
---@field LastPos FVector
---@field LastRot FQuat
---@field bEnsurePos boolean
FSBZSimplePhysicsState = {}



---@class FSBZSkeletalMeshInfos
---@field SkeletalMesh USkeletalMesh
---@field WorldTransform FTransform
---@field BoneSpaceTransforms TArray<FTransform>
---@field CustomPrimitiveData FCustomPrimitiveData
---@field LODIndex int32
FSBZSkeletalMeshInfos = {}



---@class FSBZSkillFloatValue : FSBZSkillValue
---@field Value float
FSBZSkillFloatValue = {}



---@class FSBZSkillIntValue : FSBZSkillValue
---@field Value int32
FSBZSkillIntValue = {}



---@class FSBZSkillLineCountData
---@field SkillLine USBZSkillLineData
---@field Count int32
FSBZSkillLineCountData = {}



---@class FSBZSkillRewardData
---@field ExperiencePoints float
---@field ResearchedSkillLine FName
---@field ProgressedSkillLines TArray<FName>
FSBZSkillRewardData = {}



---@class FSBZSkillSettingData
---@field Hacker FSBZHackerSkillSettingData
---@field MicroCamera FSBZMicroCameraSkillSettingData
---@field Cutter FSBZCutterSkillSettingData
FSBZSkillSettingData = {}



---@class FSBZSkillTriggeredHurtTargetData : FSBZMeleeTargetData
FSBZSkillTriggeredHurtTargetData = {}


---@class FSBZSkillValue
---@field Name FName
---@field FormatType ESBZSkillValueFormat
FSBZSkillValue = {}



---@class FSBZSlotData
---@field PlayerInfo FSBZPlayerSlotInfo
---@field PlayerState ASBZPlayerState
---@field Status ESBZSlotStatus
---@field Nickname FString
---@field AccelByteUserName FString
---@field AccelByteDisplayName FString
---@field bMatchAccepted boolean
---@field bPreMatchReady boolean
---@field bJobOverviewReady boolean
---@field bHaveGameState boolean
---@field bReserved boolean
---@field bLoadingComplete boolean
---@field bTraveling boolean
---@field ClientLoadout FPD3PlayerLoadout
---@field PreferredCharacters TArray<FSoftObjectPath>
---@field InventoryCharacters TArray<FSoftObjectPath>
---@field SelectedCharacter FSoftObjectPath
---@field bHasLoadoutData boolean
---@field bStayAsParty boolean
---@field Platform ESBZPlatform
---@field InfamyLevel int32
---@field bCrossPlayEnabled boolean
FSBZSlotData = {}



---@class FSBZSoftMontageContainer
---@field bOverride boolean
---@field Montages TArray<TSoftObjectPtr<UAnimMontage>>
FSBZSoftMontageContainer = {}



---@class FSBZSpawnActorLocationData
---@field SpawnActor AActor
---@field ActorLocationInfo FSBZLocationInformation
---@field RoomLocationIndex int32
---@field SpawnAttachDataArray TArray<FSBZSpawnAttachData>
FSBZSpawnActorLocationData = {}



---@class FSBZSpawnAttachData
---@field AttachComponent USceneComponent
---@field SpawnTransform FTransform
FSBZSpawnAttachData = {}



---@class FSBZSpawnLocation
---@field LocationInformation FSBZLocationInformation
---@field PossibleSpawningActors TArray<AActor>
FSBZSpawnLocation = {}



---@class FSBZSpawnRequestOptions
---@field Priority uint8
---@field Delay float
---@field Spacing float
---@field Timeout float
---@field CollisionHandlingMethod ESpawnActorCollisionHandlingMethod
FSBZSpawnRequestOptions = {}



---@class FSBZSpawnRotationHandlingMethod
---@field MaximumAngleVariation float
---@field Method ESBZSpawnRotationMethod
---@field HeadingAngle float
FSBZSpawnRotationHandlingMethod = {}



---@class FSBZSpawnedCarryData
---@field Quat FQuat
---@field Location FVector_NetQuantize
---@field ActorClass TSubclassOf<AActor>
---@field NetID uint32
---@field Seed int32
---@field SpawnedActor AActor
---@field bIsPagerEnabled boolean
FSBZSpawnedCarryData = {}



---@class FSBZSpectateCameraSettings
---@field CameraViewRestriction FSBZCameraViewRestriction
---@field TargetSpringArmLength float
---@field TargetSpringArmLengthInterpSpeed float
FSBZSpectateCameraSettings = {}



---@class FSBZSpeedWarpingData
---@field Alpha float
---@field SpeedScaling float
---@field PelvisZOffset float
---@field LegsZOffset float
---@field PlayRate float
FSBZSpeedWarpingData = {}



---@class FSBZSpeedWarpingFootDefinition
---@field IKFootBone FBoneReference
---@field ThighBone FBoneReference
FSBZSpeedWarpingFootDefinition = {}



---@class FSBZSprayCanStoreItem : FSBZStoreBaseItem
---@field SprayCanData USBZSprayCanData
FSBZSprayCanStoreItem = {}



---@class FSBZSquadLimits
---@field MaxNumSquadsAlive int32
---@field MaxNumSquadsPerWave int32
---@field MaxNumPawnsAlive int32
---@field MaxNumPawnsPerPlayer int32
---@field SquadCooldown float
FSBZSquadLimits = {}



---@class FSBZStageDebugData
---@field StageName FName
---@field MiscDebugData TArray<FSBZStageMiscDebugData>
---@field InputVariableValues TArray<FSBZVariableValue>
---@field OutputVariableValues TArray<FSBZVariableValue>
FSBZStageDebugData = {}



---@class FSBZStageMiscDebugData
---@field ElementId int32
---@field Name FName
---@field String FString
---@field Color FColor
---@field V0 FVector
---@field V1 FVector
---@field Q FQuat
---@field Type ESBZStageMiscDebugDataType
FSBZStageMiscDebugData = {}



---@class FSBZStandardImpactData : FSBZBaseImpactData
---@field DecalScale FFloatInterval
---@field DecalDepth float
---@field DecalMaxStretchCosAngle float
---@field DecalMaxStretchScaler FFloatInterval
FSBZStandardImpactData = {}



---@class FSBZStartMoveHandler
---@field BlendSpace UBlendSpaceBase
---@field Animation UAnimSequence
FSBZStartMoveHandler = {}



---@class FSBZStatData
---@field Progress float
FSBZStatData = {}



---@class FSBZStatisticCodeCollection
---@field ReviveCrewmate FString
---@field SlideDistance FString
---@field SlideKills FString
---@field SlideHeadshotKills FString
---@field JumpKills FString
---@field JumpHeadshotKills FString
---@field HumanShieldTime FString
---@field HumanShieldKills FString
---@field HumanShieldHeadshotKills FString
---@field DozerFaceplate FString
---@field DestroyTaserBattery FString
---@field DestroyGrenadeBelt FString
---@field BreakShieldVisor FString
---@field BreakDisplayCase FString
---@field HostagesTraded FString
---@field DoorSprint FString
---@field CloakerSave FString
---@field TaserSave FString
---@field CutObjects FString
---@field LockPicked FString
---@field DetectedKills FString
---@field DevicesHacked FString
FSBZStatisticCodeCollection = {}



---@class FSBZStatisticCriteriaDataCollection
---@field PutOnMask USBZStatisticCriteriaData
---@field InsurancePolicy USBZStatisticCriteriaData
---@field CrowdControl USBZStatisticCriteriaData
---@field UnlimitedPower USBZStatisticCriteriaData
---@field TaserPackStuns USBZTaserPackStunsCriteriaData
---@field SmashAndGrab USBZSmashAndGrabStatisticCriteriaData
---@field SentryKills USBZSentryKillsStatisticCriteriaData
---@field AfterParty USBZAssaultCountStatisticCriteriaData
---@field ColorMeSurprised USBZStatisticCriteriaData
---@field SpecOps USBZStatisticCriteriaData
FSBZStatisticCriteriaDataCollection = {}



---@class FSBZSteeringSpline
FSBZSteeringSpline = {}


---@class FSBZStimuliReaction
---@field Description FText
---@field AllowedStates uint16
---@field AllowedBehaviors uint8
---@field Tags FGameplayTagContainer
---@field Action USBZAIAction
---@field bShouldSetToIsAlert boolean
---@field Predicate USBZReactionPredicate
FSBZStimuliReaction = {}



---@class FSBZStoreBaseItem
---@field ItemId FGuid
---@field Price int32
---@field CurrencyCode ESBZCurrencyCode
---@field Platform ESBZStoreItemPlatform
---@field RealMoneyCurrencyCode FString
---@field AvailableAtInfamyLevel int32
---@field AvailableToBuy boolean
---@field ItemLockReason ESBZItemLockReason
---@field MaxCountPerUser int32
---@field PriceProgression int32
---@field PriceProgressionGroup FString
---@field DiscountPercentage int32
---@field DiscountAmount int32
---@field DiscountedPrice int32
---@field CurrencyType ESBZItemCurrencyType
---@field PurchaseAt FDateTime
---@field ExpireAt FDateTime
---@field DiscountPurchaseAt FDateTime
---@field DiscountExpireAt FDateTime
---@field VendorData USBZVendorData
---@field ItemRarity ESBZItemRarity
FSBZStoreBaseItem = {}



---@class FSBZStoreItemUIData
---@field StoreItemUIIdSource ESBZStoreItemUIIdSource
---@field ItemUID FGuid
---@field ExternalItemId FString
---@field InventoryItem USBZInventoryBaseData
---@field StoreItem FSBZStoreBaseItem
FSBZStoreItemUIData = {}



---@class FSBZStoreItemUIGroup
---@field ItemCategory ESBZStoreItemUICategory
---@field CategoryItems TArray<FSBZStoreItemUIData>
FSBZStoreItemUIGroup = {}



---@class FSBZStorymodeStruct
---@field VideoURL FFilePath
---@field DisplayIcon TSoftObjectPtr<UPaperSprite>
---@field ButtonText FText
FSBZStorymodeStruct = {}



---@class FSBZSuitBaseStoreItem : FSBZStoreBaseItem
---@field SuitBaseData USBZSuitBaseData
FSBZSuitBaseStoreItem = {}



---@class FSBZSuitBaseVariant
---@field SkeletalMesh3P TSoftObjectPtr<USkeletalMesh>
---@field LowerPartMaterialSlotIndex TArray<uint32>
---@field UpperPartMaterialSlotIndex TArray<uint32>
FSBZSuitBaseVariant = {}



---@class FSBZSuitConfig
---@field SuitData USBZSuitData
---@field OriginalSuitData USBZSuitData
---@field SuitBaseData USBZSuitBaseData
---@field ModDataMapArray TArray<FSBZSuitConfigModDataMap>
FSBZSuitConfig = {}



---@class FSBZSuitConfigInventorySaveData
---@field SuitConfigSlots TArray<FSBZSuitInventorySlot>
FSBZSuitConfigInventorySaveData = {}



---@class FSBZSuitConfigModDataMap
---@field ModDataMap TMap<USBZModularPartSlotBase, FSBZSuitPartConfigGroup>
FSBZSuitConfigModDataMap = {}



---@class FSBZSuitInventoryItem : FSBZInventoryItem
---@field SuitData USBZSuitData
FSBZSuitInventoryItem = {}



---@class FSBZSuitInventorySlot : FSBZInventorySlot
---@field SuitInSlotEntitlementId FGuid
---@field SuitInSlotAccelByteItemId FGuid
---@field SuitInventorySlotType ESBZItemInventorySlotType
---@field SuitConfig FSBZSuitConfig
---@field SuitPresetConfig FSBZSuitPresetConfig
FSBZSuitInventorySlot = {}



---@class FSBZSuitMaterialStoreItem : FSBZStoreBaseItem
---@field SuitMaterialData USBZSuitMaterialData
FSBZSuitMaterialStoreItem = {}



---@class FSBZSuitPartConfigGroup
---@field Part USBZModularPartDataAsset
---@field Config USBZSuitPartConfig
FSBZSuitPartConfigGroup = {}



---@class FSBZSuitPatternStoreItem : FSBZStoreBaseItem
---@field SuitPatternData USBZSuitPatternData
FSBZSuitPatternStoreItem = {}



---@class FSBZSuitPresetConfig
---@field SuitPresetData USBZSuitPresetData
---@field OriginalSuitPresetData USBZSuitPresetData
FSBZSuitPresetConfig = {}



---@class FSBZSuitPresetStoreItem : FSBZStoreBaseItem
---@field SuitPresetData USBZSuitPresetData
FSBZSuitPresetStoreItem = {}



---@class FSBZSurfaceImpactConfig
---@field DecalLod FSBZSurfaceImpactLod
---@field DecalAmount int32
---@field DecalInstanceAmount int32
---@field DecalFadeOutDuration float
---@field ParticleLod FSBZSurfaceImpactLod
---@field SoundLod FSBZSurfaceImpactLod
---@field SoundEvent UAkAudioEvent
---@field StopSoundEvent UAkAudioEvent
---@field SoundRtpc UAkRtpc
FSBZSurfaceImpactConfig = {}



---@class FSBZSurfaceImpactLod
---@field Distance float
---@field FarRange float
FSBZSurfaceImpactLod = {}



---@class FSBZSurfaceSoundEvents
---@field Footstep UAkAudioEvent
---@field Sliding UAkAudioEvent
---@field SlidingCancel UAkAudioEvent
---@field Mantling UAkAudioEvent
---@field StepUp UAkAudioEvent
---@field ProjectileHit UAkAudioEvent
---@field ThrowableProjectileHit UAkAudioEvent
---@field ThrowableProjectileBounceHit UAkAudioEvent
---@field MeleeHit UAkAudioEvent
---@field ExplosionHit UAkAudioEvent
---@field ObjectImpact UAkAudioEvent
---@field ObjectRolling UAkAudioEvent
---@field DebrisImpact UAkAudioEvent
---@field DebrisRolling UAkAudioEvent
---@field ThrowableImpact UAkAudioEvent
---@field BagItemImpact UAkAudioEvent
---@field ObjectImpactRtpc UAkRtpc
---@field ObjectRollingRtpc UAkRtpc
---@field MeleeHitRtpc UAkRtpc
---@field DebrisImpactRtpc UAkRtpc
---@field DebrisRollingRtpc UAkRtpc
---@field ThrowableImpactRtpc UAkRtpc
FSBZSurfaceSoundEvents = {}



---@class FSBZSurfaceType
---@field AISoundSurfaceType ESBZAISoundSurfaceTypes
---@field ProjectileImpactConfig USBZProjectileImpactConfig
---@field ThrowableProjectileImpactConfig USBZThrowableProjectileImpactConfig
---@field MeleeImpactConfig USBZMeleeImpactConfig
---@field ExplosionImpactConfig USBZExplosionImpactConfig
---@field FootstepImpactConfig USBZFootstepImpactConfig
---@field SlidingImpactConfig USBZSlidingImpactConfig
---@field MantlingImpactConfig USBZMantlingImpactConfig
---@field StepUpImpactConfig USBZStepUpImpactConfig
---@field ObjectImpactConfig USBZObjectImpactConfig
---@field DebrisImpactConfig USBZDebrisImpactConfig
---@field ThrowableImpactConfig USBZThrowableImpactConfig
---@field BagItemImpactConfig USBZBagItemImpactConfig
---@field BloodSplatterImpactConfig USBZBloodSplatterImpactConfig
---@field MaterialSoundSwitchState FString
FSBZSurfaceType = {}



---@class FSBZSuspectData
---@field Target AActor
FSBZSuspectData = {}



---@class FSBZSystemChatEvent : FSBZGameEventStructBase
---@field Message FString
FSBZSystemChatEvent = {}



---@class FSBZTagReaction
---@field ActivateStanding FSBZTagReactionActivation
---@field ActivateCrouching FSBZTagReactionActivation
---@field ActivateLyingOnFront FSBZTagReactionActivation
---@field ActivateLyingOnBack FSBZTagReactionActivation
---@field DeactivateStanding FSBZTagReactionActivation
---@field DeactivateCrouching FSBZTagReactionActivation
---@field DeactivateLyingOnFront FSBZTagReactionActivation
---@field DeactivateLyingOnBack FSBZTagReactionActivation
---@field Priority uint8
---@field TagReactionEffect UNiagaraSystem
---@field TagReactionStartedComment USBZVoiceCommentDataAsset
---@field TagReactionEndedComment USBZVoiceCommentDataAsset
---@field EffectDurationName FName
---@field EffectSocket FName
---@field BlockingTags FGameplayTagContainer
FSBZTagReaction = {}



---@class FSBZTagReactionActivation
---@field MontageArray TArray<UAnimMontage>
---@field RandomOffset float
FSBZTagReactionActivation = {}



---@class FSBZTagReactionEffect
---@field TagReactionEffect UNiagaraComponent
FSBZTagReactionEffect = {}



---@class FSBZTagStanceMapping
---@field Tags FGameplayTagContainer
---@field Stance ESBZCharacterStance
FSBZTagStanceMapping = {}



---@class FSBZTargetCandidate
---@field Target AActor
FSBZTargetCandidate = {}



---@class FSBZThreeWayBlendHandler
---@field Instance1 FSBZThreeWayBlendInstance
---@field Instance2 FSBZThreeWayBlendInstance
---@field Instance3 FSBZThreeWayBlendInstance
FSBZThreeWayBlendHandler = {}



---@class FSBZThreeWayBlendInstance
---@field Animation UAnimSequence
---@field Alpha float
FSBZThreeWayBlendInstance = {}



---@class FSBZThrowItemTargetData : FGameplayAbilityTargetData
FSBZThrowItemTargetData = {}


---@class FSBZThrowableConfig
---@field Data USBZThrowableData
---@field OriginalData USBZThrowableData
FSBZThrowableConfig = {}



---@class FSBZThrowableInventoryItem : FSBZInventoryItem
---@field ThrowableData USBZThrowableData
FSBZThrowableInventoryItem = {}



---@class FSBZTitleData
---@field TitleData FString
FSBZTitleData = {}



---@class FSBZToolInventoryItem : FSBZInventoryItem
---@field ToolData USBZToolData
FSBZToolInventoryItem = {}



---@class FSBZTrackedDamageData
FSBZTrackedDamageData = {}


---@class FSBZTrackedDamageWrapper
FSBZTrackedDamageWrapper = {}


---@class FSBZTrackedVariable
---@field VarName FName
---@field Type ESBZTrackedVariableType
FSBZTrackedVariable = {}



---@class FSBZTrafficCivilians
---@field VehicleArray TArray<TSubclassOf<ASBZWheeledVehicle>>
---@field WeightedVehicleArray TArray<FSBZVehicleArrayElement>
---@field AmountVehicleToSpawnEachInterval FInt32Interval
---@field MaxAmountVehiclesInLevel int32
---@field VehicleSpawnInterval FFloatInterval
---@field VehicleDriveOffSpeed float
---@field VehicleDriveOffTurnSpeed float
FSBZTrafficCivilians = {}



---@class FSBZTrafficControl
---@field Vehicle ASBZWheeledVehicle
---@field ControlType ESBZTrafficVehicleControlType
---@field Value float
---@field ServerSpeed float
---@field TraveledDistance float
---@field Path TArray<ASBZSpline>
FSBZTrafficControl = {}



---@class FSBZTrafficDestinationNode
---@field bOccupied boolean
---@field SpawnerArray TArray<ASBZTrafficSpline>
---@field RouteArrayGraph TMap<ASBZTrafficSpline, FSBZTrafficRouteArray>
FSBZTrafficDestinationNode = {}



---@class FSBZTrafficFBIVan
---@field WeightedVehicleArray TArray<FSBZVehicleArrayElement>
---@field SpawnChance float
---@field WaveSpawnChance float
FSBZTrafficFBIVan = {}



---@class FSBZTrafficFirstResponders
---@field VehicleArray TArray<TSubclassOf<ASBZWheeledVehicle>>
---@field WeightedVehicleArray TArray<FSBZVehicleArrayElement>
---@field AmountVehiclesToSpawn int32
---@field AmountVehiclesToWaitOn int32
FSBZTrafficFirstResponders = {}



---@class FSBZTrafficGridlockInfo
---@field VehicleArray TArray<ASBZWheeledVehicle>
---@field GridlockBreakTimer float
FSBZTrafficGridlockInfo = {}



---@class FSBZTrafficLightPool
---@field BlockerArray TArray<ASBZTrafficVolume>
---@field MeshArray TArray<AStaticMeshActor>
---@field GreenTimer float
---@field SwitchToGreenTimer float
---@field SwitchToRedTimer float
FSBZTrafficLightPool = {}



---@class FSBZTrafficLightPoolState
---@field CachedMeshComponentArray TArray<UStaticMeshComponent>
---@field PedestrianSoundEmitters TArray<USBZAmbientSoundComponent>
---@field Status ESBZTrafficLightStatus
---@field Timer float
FSBZTrafficLightPoolState = {}



---@class FSBZTrafficNode
---@field ForwardArray TArray<ASBZTrafficSpline>
---@field Distance float
---@field SplineTypeFlags int32
---@field VehicleTypeFlags int32
---@field bIsSpawner boolean
---@field bIsDestination boolean
FSBZTrafficNode = {}



---@class FSBZTrafficObstacleInfo
---@field ObstacleActor AActor
---@field ObstacleVehicle ASBZWheeledVehicle
---@field ObstacleTrafficVolume ASBZTrafficVolume
FSBZTrafficObstacleInfo = {}



---@class FSBZTrafficObstacle_Debug
---@field Vehicle ASBZWheeledVehicle
---@field ObstacleActor AActor
FSBZTrafficObstacle_Debug = {}



---@class FSBZTrafficRoute
---@field Distance float
---@field VehicleTypeFlags int32
---@field Path TArray<ASBZTrafficSpline>
FSBZTrafficRoute = {}



---@class FSBZTrafficRouteArray
---@field RouteArray TArray<FSBZTrafficRoute>
FSBZTrafficRouteArray = {}



---@class FSBZTrafficSoundHorn
---@field TrafficLightBaseTimer FFloatInterval
---@field TrafficLightQueueAddition FFloatInterval
---@field TrafficLightQueueStart int32
---@field TrafficLightChance float
---@field StopWaitTimer FFloatInterval
---@field StopWaitChance float
FSBZTrafficSoundHorn = {}



---@class FSBZTrafficSpawnInfo
---@field VehicleActorClass TSubclassOf<ASBZWheeledVehicle>
---@field VehicleType ESBZTrafficVehicleType
---@field SpawnTransform FTransform
FSBZTrafficSpawnInfo = {}



---@class FSBZTrafficSpawnerNode
---@field RouteArray TArray<ASBZTrafficSpline>
---@field DestinationArray TArray<ASBZTrafficSpline>
---@field RouteArrayGraph TMap<ASBZTrafficSpline, FSBZTrafficRouteArray>
FSBZTrafficSpawnerNode = {}



---@class FSBZTrafficSwatVans
---@field VehicleArray TArray<TSubclassOf<ASBZWheeledVehicle>>
---@field WeightedVehicleArray TArray<FSBZVehicleArrayElement>
FSBZTrafficSwatVans = {}



---@class FSBZTrafficVehicleInfo
---@field Vehicle ASBZWheeledVehicle
---@field CurrentRoute TArray<ASBZSpline>
---@field VehicleType ESBZTrafficVehicleType
---@field ObstacleArray TArray<FSBZTrafficObstacleInfo>
---@field BehindVehicleArray TArray<ASBZWheeledVehicle>
---@field WantedCruisingSpeed float
---@field WantedTurnCruisingSpeed float
---@field WantedAcceleration float
---@field WantedDeceleration float
---@field CurrentCruisingSpeed float
---@field CurrentAcceleration float
---@field CurrentDeceleration float
---@field bIsBraking boolean
---@field bStopped boolean
---@field StopLocation FVector
FSBZTrafficVehicleInfo = {}



---@class FSBZTranslucentTimer
---@field PrimitiveComponent UPrimitiveComponent
---@field TimerHandle FTimerHandle
FSBZTranslucentTimer = {}



---@class FSBZTraverseAnimationHandler
---@field bStart boolean
---@field bTraverse boolean
---@field bExitTraverse boolean
---@field bLand boolean
---@field bFall boolean
---@field bEndsInFalling boolean
---@field bIsPlaying boolean
---@field bMantle boolean
---@field VerticalDistToFrontEdge float
---@field VerticalDistFromBackEdge float
---@field ExitTraverseTime float
---@field StartAnim UAnimSequenceBase
---@field ExitTraverseAnim UAnimSequenceBase
---@field LandAnim UAnimSequenceBase
---@field EndMontage UAnimMontage
FSBZTraverseAnimationHandler = {}



---@class FSBZTurnAnimationContainer
---@field TurnAnimationStand UAnimSequenceBase
---@field TurnAnimationCrouch UAnimSequenceBase
FSBZTurnAnimationContainer = {}



---@class FSBZUIDefaultSoundEvents
---@field ButtonFocusedEvent UAkAudioEvent
FSBZUIDefaultSoundEvents = {}



---@class FSBZUIFullscreenNotificationData
---@field HeaderText FText
---@field DescriptionText FText
---@field NotificationType ESBZNotificationType
FSBZUIFullscreenNotificationData = {}



---@class FSBZUIHUDContext
---@field bIsPlayerHUDDisplayed boolean
FSBZUIHUDContext = {}



---@class FSBZUIPopupData
---@field HeaderText FText
---@field DescriptionText FText
---@field PopUpControlsReference FSBZButtonControlsReference
---@field WidgetBody UUserWidget
FSBZUIPopupData = {}



---@class FSBZUIStackChangedEvent
---@field NewValue FName
---@field OldValue FName
---@field bWasAddedEvent boolean
FSBZUIStackChangedEvent = {}



---@class FSBZUITrainingData
---@field Config FSBZEquippableConfig
---@field WantedStats FSBZWeaponStats
FSBZUITrainingData = {}



---@class FSBZUIWeaponStatWeightContainer
---@field MeanInputArray TArray<float>
---@field VarianceInputArray TArray<float>
---@field WeightHiddenArray TArray<float>
---@field BiasHiddenArray TArray<float>
---@field WeightOutputArray TArray<float>
---@field BiasOutputArray TArray<float>
FSBZUIWeaponStatWeightContainer = {}



---@class FSBZVariableValue
---@field Value TArray<uint8>
FSBZVariableValue = {}



---@class FSBZVariationDataIndexTracker
---@field VariationData TWeakObjectPtr<USBZVariationSetData>
FSBZVariationDataIndexTracker = {}



---@class FSBZVariationSeedGenerator
---@field VariationDataIndexTrackers TArray<FSBZVariationDataIndexTracker>
FSBZVariationSeedGenerator = {}



---@class FSBZVehicleArrayElement
---@field Vehicle TSubclassOf<ASBZWheeledVehicle>
---@field Weight float
FSBZVehicleArrayElement = {}



---@class FSBZVehicleDoorAnimationContainer
---@field DoorAnimations TMap<ESBZVehicleDoorType, USBZBuiltInAnimMontage>
FSBZVehicleDoorAnimationContainer = {}



---@class FSBZVehicleDoorStatePerType
---@field DoorType ESBZVehicleDoorType
---@field DoorState ESBZVehicleDoorState
FSBZVehicleDoorStatePerType = {}



---@class FSBZVehicleInfo
FSBZVehicleInfo = {}


---@class FSBZVehicleLights
---@field Headlights uint8
---@field TailLights uint8
---@field FogLights uint8
---@field BrakeLights uint8
---@field ReverseLights uint8
---@field TurnLeft uint8
---@field TurnRight uint8
---@field Broken uint8
FSBZVehicleLights = {}



---@class FSBZVehicleReplicatedMovementBase
---@field Location FVector_NetQuantize10
---@field Rotation FQuat
---@field ServerTimestamp float
FSBZVehicleReplicatedMovementBase = {}



---@class FSBZVehicleSpawnData
---@field Paths TArray<FSBZVehicleSplineData>
---@field VehicleSpawnData USBZAssaultVehicleSpawnerData
---@field bEnabled boolean
FSBZVehicleSpawnData = {}



---@class FSBZVehicleSplineData
---@field EnterSpline TSoftObjectPtr<ASBZSpline>
---@field ExitSpline TSoftObjectPtr<ASBZSpline>
---@field bStartsEnabled boolean
FSBZVehicleSplineData = {}



---@class FSBZVehicleSplineFollowingComponentReplicatedProperties
---@field Path TArray<ASBZSpline>
---@field TraveledDistance float
FSBZVehicleSplineFollowingComponentReplicatedProperties = {}



---@class FSBZVelocityTrackedComponentArrayData
FSBZVelocityTrackedComponentArrayData = {}


---@class FSBZVelocityTrackedComponentData
FSBZVelocityTrackedComponentData = {}


---@class FSBZVisualDetectionValues
---@field Target AActor
FSBZVisualDetectionValues = {}



---@class FSBZVoiceEventData
---@field AudioEvent UAkAudioEvent
---@field SwitchGroup FString
FSBZVoiceEventData = {}



---@class FSBZVoiceInfoCallback
FSBZVoiceInfoCallback = {}


---@class FSBZVoiceSwitchPerPerformer
---@field Performer ESBZDialogPerformer
---@field AllowedVoiceSwitches TArray<FString>
FSBZVoiceSwitchPerPerformer = {}



---@class FSBZVolumeDamageData
---@field Object UObject
FSBZVolumeDamageData = {}



---@class FSBZVolumeTypeSetting
---@field RTPC FName
---@field SoundClass USoundClass
FSBZVolumeTypeSetting = {}



---@class FSBZVoteFactoryFunctions
FSBZVoteFactoryFunctions = {}


---@class FSBZVotingChatEvent : FSBZGameEventStructBase
---@field Message FString
FSBZVotingChatEvent = {}



---@class FSBZVotingMsgArgs
FSBZVotingMsgArgs = {}


---@class FSBZVotingMsgArgsServer
FSBZVotingMsgArgsServer = {}


---@class FSBZWatchInventoryItem : FSBZInventoryItem
---@field WatchData USBZWatchData
FSBZWatchInventoryItem = {}



---@class FSBZWatchStoreItem : FSBZStoreBaseItem
---@field WatchData USBZWatchData
FSBZWatchStoreItem = {}



---@class FSBZWeakpointHideInfo
---@field CPDIndex uint8
---@field Bit uint8
FSBZWeakpointHideInfo = {}



---@class FSBZWeaponAimAssistData
---@field DetectionSideDistance float
---@field DetectionDistancePriority float
---@field MinTargetSelectionDuration float
---@field MinDuration float
---@field MaxDuration float
---@field bIsTriggeredByWeaponFire boolean
---@field StickyAimDurationOnWeaponFire float
---@field EscapeSpeedIn float
---@field EscapeSpeedOut float
---@field AimAssistSpeed float
---@field MinDistance float
---@field SensitivityModifier float
---@field MagnetismDistanceDataArray TArray<FSBZWeaponAimAssistMagnetismData>
---@field bUseAllSockets boolean
FSBZWeaponAimAssistData = {}



---@class FSBZWeaponAimAssistMagnetismData
---@field MaxDistance float
---@field BulletDeviationDistance float
---@field BulletMagnetismSpread float
---@field bIgnoreSpread boolean
FSBZWeaponAimAssistMagnetismData = {}



---@class FSBZWeaponAttributIdentifier
---@field Name FName
---@field Context FString
---@field bIsParent boolean
---@field ChildAttributeArray TArray<ESBZWeaponAttribute>
---@field DisplayName FText
FSBZWeaponAttributIdentifier = {}



---@class FSBZWeaponCharmStoreItem : FSBZStoreBaseItem
---@field WeaponCharmData USBZWeaponCharmData
FSBZWeaponCharmStoreItem = {}



---@class FSBZWeaponConfigInventorySlot
---@field EquippableConfig FSBZEquippableConfig
---@field PayedWeaponPartAttachmentItemIdArray TArray<FString>
FSBZWeaponConfigInventorySlot = {}



---@class FSBZWeaponGunKickBackData
---@field SpeedDeflect float
---@field SpeedRecover float
---@field DeflectCurve FRuntimeFloatCurve
---@field RecoverCurve FRuntimeFloatCurve
---@field Distance float
---@field MaxDistance float
FSBZWeaponGunKickBackData = {}



---@class FSBZWeaponGunKickData
---@field SpeedDeflect float
---@field SpeedRecover float
---@field DeflectCurve FRuntimeFloatCurve
---@field RecoverCurve FRuntimeFloatCurve
---@field VerticalTop FFloatInterval
---@field VerticalBottom FFloatInterval
---@field VerticalMultiplier FSBZWeaponGunKickMultiplierData
---@field HorizontalRight FFloatInterval
---@field HorizontalLeft FFloatInterval
---@field HorizontalMultiplier FSBZWeaponGunKickMultiplierData
FSBZWeaponGunKickData = {}



---@class FSBZWeaponGunKickMultiplierData
---@field Start float
---@field Increment float
---@field Max float
---@field Threshold float
FSBZWeaponGunKickMultiplierData = {}



---@class FSBZWeaponInventorySlot : FSBZInventorySlot
---@field WeaponInSlotEntitlementId FGuid
---@field WeaponInSlotAccelByteItemId FGuid
---@field WeaponInSlotAccelByteItemSku FString
---@field WeaponInventorySlotType ESBZItemInventorySlotType
---@field WeaponConfigInventorySlot FSBZWeaponConfigInventorySlot
---@field WeaponPresetConfigInventorySlot FSBZWeaponPresetConfigInventorySlot
FSBZWeaponInventorySlot = {}



---@class FSBZWeaponMaterialsPerMesh
---@field WeaponMaterialPerMesh TMap<USkeletalMesh, FSBZOverrideConfigWeaponMaterials>
FSBZWeaponMaterialsPerMesh = {}



---@class FSBZWeaponModificationData
---@field WeaponStatsAssetPath TSoftObjectPtr<USBZUIWeaponStatsAsset>
---@field SuppressorDisplayName FText
---@field MagazineDisplayName FText
---@field AttributeIdentifierMap TMap<ESBZWeaponAttribute, FSBZWeaponAttributIdentifier>
FSBZWeaponModificationData = {}



---@class FSBZWeaponModificationUIData
---@field DisplayName FText
FSBZWeaponModificationUIData = {}



---@class FSBZWeaponPartProgression
---@field ProgressionLevel uint32
---@field WeaponPartData TArray<FSBZWeaponPartProgressionData>
FSBZWeaponPartProgression = {}



---@class FSBZWeaponPartProgressionArray
---@field BaseWeapon USBZBaseWeaponData
---@field WeaponPartProgressionArray TArray<FSBZWeaponPartProgression>
FSBZWeaponPartProgressionArray = {}



---@class FSBZWeaponPartProgressionCurrent
---@field ProgressionLevel int32
---@field WeaponPart USBZWeaponPartDataAsset
---@field WeaponPartApplyStatus ESBZWeaponPartApplyStatus
---@field Price int32
---@field CurrencyCode ESBZCurrencyCode
---@field DiscountAmount int32
---@field DiscountPercentage int32
---@field DiscountedPrice int32
---@field CurrencyType ESBZItemCurrencyType
---@field PurchaseAt FDateTime
---@field ExpireAt FDateTime
---@field DiscountPurchaseAt FDateTime
---@field DiscountExpireAt FDateTime
FSBZWeaponPartProgressionCurrent = {}



---@class FSBZWeaponPartProgressionData
---@field WeaponPart USBZWeaponPartDataAsset
---@field AttachmentItemSku FString
FSBZWeaponPartProgressionData = {}



---@class FSBZWeaponPatternAreaDefinition
---@field PartsInArea TArray<FSBZWeaponPatternAreaPart>
FSBZWeaponPatternAreaDefinition = {}



---@class FSBZWeaponPatternAreaPart
---@field PartIndex int8
---@field bIncludeFullPart boolean
---@field SubPartIndexes TArray<int8>
FSBZWeaponPatternAreaPart = {}



---@class FSBZWeaponPatternDataSingleColorAreaList
---@field AreaList TArray<USBZWeaponPatternAreaData>
FSBZWeaponPatternDataSingleColorAreaList = {}



---@class FSBZWeaponPatternStoreItem : FSBZStoreBaseItem
---@field WeaponPatternData USBZWeaponPatternData
FSBZWeaponPatternStoreItem = {}



---@class FSBZWeaponPresetConfigInventorySlot
---@field WeaponPresetConfigData USBZWeaponPresetConfigData
FSBZWeaponPresetConfigInventorySlot = {}



---@class FSBZWeaponPresetModularConfigItem
---@field Part USBZEquippablePartDataAsset
---@field Config USBZEquippablePartConfig
FSBZWeaponPresetModularConfigItem = {}



---@class FSBZWeaponPresetStoreItem : FSBZStoreBaseItem
---@field WeaponPresetConfigData USBZWeaponPresetConfigData
FSBZWeaponPresetStoreItem = {}



---@class FSBZWeaponProgressionStats
---@field WeaponProgressionLevel int32
---@field WeaponProgressionPoints int32
FSBZWeaponProgressionStats = {}



---@class FSBZWeaponProgressionUpdateData
---@field EquippableData USBZEquippableData
---@field OldPoints int32
---@field OldLevel int32
---@field NewPoints int32
---@field NewLevel int32
---@field CurrentLevelPoints int32
---@field NextLevelPoints int32
---@field UnlockedPartArray TArray<USBZWeaponPartDataAsset>
FSBZWeaponProgressionUpdateData = {}



---@class FSBZWeaponSettingData
---@field SuppressorEffectValue float
FSBZWeaponSettingData = {}



---@class FSBZWeaponSpread
FSBZWeaponSpread = {}


---@class FSBZWeaponSpreadStanceMultipliers
---@field Spread float
---@field TasedSpread float
---@field Start float
---@field Cap float
---@field Increment float
---@field ResetTime float
---@field DecayRate float
FSBZWeaponSpreadStanceMultipliers = {}



---@class FSBZWeaponSpreadStances
---@field Stand FSBZWeaponSpreadStanceMultipliers
---@field StandMove FSBZWeaponSpreadStanceMultipliers
---@field Crouch FSBZWeaponSpreadStanceMultipliers
---@field CrouchMove FSBZWeaponSpreadStanceMultipliers
---@field Target FSBZWeaponSpreadStanceMultipliers
---@field TargetMove FSBZWeaponSpreadStanceMultipliers
FSBZWeaponSpreadStances = {}



---@class FSBZWeaponStats
---@field Damage float
---@field Recoil float
---@field Stability float
---@field Accuracy float
---@field Handling float
---@field FireRate float
FSBZWeaponStats = {}



---@class FSBZWeaponStickerPosition
---@field PartIndex int8
---@field Scale float
---@field Rotation float
---@field bOnOtherSide boolean
---@field Position FVector2D
FSBZWeaponStickerPosition = {}



---@class FSBZWeaponStickerStoreItem : FSBZStoreBaseItem
---@field WeaponStickerData USBZWeaponStickerData
FSBZWeaponStickerStoreItem = {}



---@class FSBZWeaponStoreItem : FSBZStoreBaseItem
---@field WeaponData USBZBaseWeaponData
FSBZWeaponStoreItem = {}



---@class FSBZWeaponSwayDataStruct
---@field CameraOffset FVector
---@field MinTranslation FVector
---@field MaxTranslation FVector
---@field TranslationInfluence FVector
---@field FinalTranslationMultiplier FVector
---@field OvershootTranslationDeltaMultiplier FVector
---@field TranslationRecoverySpeed float
---@field XAxisTranslationRecoverySpeed float
---@field MinRotation FRotator
---@field MaxRotation FRotator
---@field RotationInfluence FVector
---@field FinalRotationMultiplier FVector
---@field OvershootRotationDeltaMultiplier FVector
---@field YawRecoverySpeed float
---@field PitchRecoverySpeed float
---@field RollRecoverySpeed float
---@field YTranslationToRollInfluence float
FSBZWeaponSwayDataStruct = {}



---@class FSBZWeaponTargetingOverrideData
---@field TargetingXAxisOffset float
FSBZWeaponTargetingOverrideData = {}



---@class FSBZWeaponViewKickBackData : FSBZWeaponGunKickBackData
FSBZWeaponViewKickBackData = {}


---@class FSBZWeaponViewKickData
---@field SpeedDeflect float
---@field SpeedRecover float
---@field RecoverWaitTime float
---@field DeflectCurve FRuntimeFloatCurve
---@field RecoverCurve FRuntimeFloatCurve
---@field GraphDisplacementList FSBZSequentialScatterPlot
---@field DisplacementResetTime float
---@field DisplacementGraphLoopStart int32
---@field DisplacementGraphInitialNum int32
---@field DisplacementHipFireMultiplier float
FSBZWeaponViewKickData = {}



---@class FSBZWheeledVehicleFX
---@field Asset UNiagaraSystem
---@field Socket FName
---@field MaxDistance float
---@field SpeedThresholdMinMax FFloatRange
---@field NiagaraComponent UNiagaraComponent
FSBZWheeledVehicleFX = {}



---@class FSBZWheeledVehicleReplicatedMovement : FSBZVehicleReplicatedMovementBase
---@field Steering int8
FSBZWheeledVehicleReplicatedMovement = {}



---@class FSBZWhisperInfo
---@field ReplicatedUniqueID FUniqueNetIdRepl
---@field Name FString
FSBZWhisperInfo = {}



---@class FSBZWorldHandIKHandler
FSBZWorldHandIKHandler = {}


---@class FSBZWrinkleCPDData
---@field CPDIndex int32
---@field PackedFloatDataArray TArray<FSBZWrinklePackedFloatData>
FSBZWrinkleCPDData = {}



---@class FSBZWrinklePackedFloatData
---@field PackedFloatIndex int32
---@field CurveName FName
FSBZWrinklePackedFloatData = {}



---@class FSBZWrinklesHandler
---@field WrinkleCPDDataArray TArray<FSBZWrinkleCPDData>
FSBZWrinklesHandler = {}



---@class FSBZYawControl
---@field YawCurve FRuntimeFloatCurve
---@field BlendCurve FRuntimeFloatCurve
---@field Bounds FFloatInterval
FSBZYawControl = {}



---@class FSkelMeshMergeSectionMapping_BP
---@field SectionIDs TArray<int32>
FSkelMeshMergeSectionMapping_BP = {}



---@class FSkelMeshMergeUVTransform
---@field UVTransforms TArray<FTransform>
FSkelMeshMergeUVTransform = {}



---@class FSkelMeshMergeUVTransformMapping
---@field UVTransformsPerMesh TArray<FSkelMeshMergeUVTransform>
FSkelMeshMergeUVTransformMapping = {}



---@class FSkeletalMeshMergeParams
---@field MeshSectionMappings TArray<FSkelMeshMergeSectionMapping_BP>
---@field UVTransformsPerMesh TArray<FSkelMeshMergeUVTransformMapping>
---@field MeshesToMerge TArray<FSrcMesh_BP>
---@field StripTopLODS int32
---@field bNeedsCpuAccess boolean
---@field bSkeletonBefore boolean
---@field Skeleton USkeleton
FSkeletalMeshMergeParams = {}



---@class FSrcMesh_BP
---@field SrcSkeletalMesh USkeletalMesh
---@field SrcSkinnedSkeletalMesh USkinnedMeshComponent
FSrcMesh_BP = {}



---@class FStatLocalizationEntry
---@field StatCode FString
---@field Name FString
---@field Description FString
---@field ObjectiveMultiple FString
---@field ObjectiveSingle FString
---@field ObjectiveOverrides TMap<FString, FString>
FStatLocalizationEntry = {}



---@class ISBZAIActionInteractableInterface : IInterface
ISBZAIActionInteractableInterface = {}


---@class ISBZAIAttractorInterface : IInterface
ISBZAIAttractorInterface = {}

---@param bEnabled boolean
---@return boolean
function ISBZAIAttractorInterface:SetEnabled(bEnabled) end
---@param Instigator APawn
function ISBZAIAttractorInterface:SetAttractorInstigator(Instigator) end


---@class ISBZAIObjectiveInterface : IInterface
ISBZAIObjectiveInterface = {}


---@class ISBZAISightBlockerInterface : IInterface
ISBZAISightBlockerInterface = {}

---@param Start FVector
---@param End FVector
---@return float
function ISBZAISightBlockerInterface:GetSightModifier(Start, End) end


---@class ISBZAIUtilityControlled : IInterface
ISBZAIUtilityControlled = {}


---@class ISBZAIVisibilityRelevant : IInterface
ISBZAIVisibilityRelevant = {}


---@class ISBZAIVisualDetectionGeneratorInterface : IInterface
ISBZAIVisualDetectionGeneratorInterface = {}


---@class ISBZAIVisualDetectorInterface : IInterface
ISBZAIVisualDetectorInterface = {}


---@class ISBZAerialVehicleState : IInterface
ISBZAerialVehicleState = {}


---@class ISBZAgilityObstacleInterface : IInterface
ISBZAgilityObstacleInterface = {}


---@class ISBZAgilityTrajectoryInterface : IInterface
ISBZAgilityTrajectoryInterface = {}


---@class ISBZAssetDatabaseManagerInterface : IInterface
ISBZAssetDatabaseManagerInterface = {}


---@class ISBZAsyncLoadLevelInterface : IInterface
ISBZAsyncLoadLevelInterface = {}


---@class ISBZAutoAimInterface : IInterface
ISBZAutoAimInterface = {}


---@class ISBZBlockableNavlinkInterface : IInterface
ISBZBlockableNavlinkInterface = {}


---@class ISBZBreakableInterface : IInterface
ISBZBreakableInterface = {}


---@class ISBZCameraViewInterface : IInterface
ISBZCameraViewInterface = {}


---@class ISBZCodeViewerInterface : IInterface
ISBZCodeViewerInterface = {}

---@param GeneratedCodes TArray<int32>
---@param TrueCodeIndex int32
function ISBZCodeViewerInterface:UpdateCodeViewer(GeneratedCodes, TrueCodeIndex) end
---@param Widget UWidgetComponent
function ISBZCodeViewerInterface:InitializeWidget(Widget) end
---@return int32
function ISBZCodeViewerInterface:GetNumberOfCodeWidgets() end
---@param Widget UWidgetComponent
---@param CodeToShow int32
function ISBZCodeViewerInterface:BP_SetCode(Widget, CodeToShow) end


---@class ISBZCoverPointContainerInterface : IInterface
ISBZCoverPointContainerInterface = {}


---@class ISBZCrewStateInterface : IInterface
ISBZCrewStateInterface = {}


---@class ISBZCuttableInterface : IInterface
ISBZCuttableInterface = {}

---@param NewCuttableState ESBZCuttableState
function ISBZCuttableInterface:OnCuttableStateChanged(NewCuttableState) end
---@return UNiagaraComponent
function ISBZCuttableInterface:GetNiagaraComponent() end
---@return UStaticMeshComponent
function ISBZCuttableInterface:GetMeltingMesh() end
---@return USBZCuttableSplineComponent
function ISBZCuttableInterface:GetCuttableSplineComponent() end
---@return USBZCuttableComponent
function ISBZCuttableInterface:GetCuttableComponent() end


---@class ISBZDamageInstigatorInterface : IInterface
ISBZDamageInstigatorInterface = {}


---@class ISBZExplosive : IInterface
ISBZExplosive = {}


---@class ISBZGameplaySystemInterface : IInterface
ISBZGameplaySystemInterface = {}


---@class ISBZGateNavAgentInterface : IInterface
ISBZGateNavAgentInterface = {}


---@class ISBZHurtReactionDataInterface : IInterface
ISBZHurtReactionDataInterface = {}


---@class ISBZMaintenanceBoxSequenceViewerInterface : IInterface
ISBZMaintenanceBoxSequenceViewerInterface = {}

---@param SequenceIndex int32
---@param CorrectSequence TArray<int32>
function ISBZMaintenanceBoxSequenceViewerInterface:UpdateSequenceHint(SequenceIndex, CorrectSequence) end


---@class ISBZMarkableInterface : IInterface
ISBZMarkableInterface = {}


---@class ISBZModularMeshContainer : IInterface
ISBZModularMeshContainer = {}


---@class ISBZModularSlotMeshContainer : IInterface
ISBZModularSlotMeshContainer = {}


---@class ISBZObjectiveInformationInterface : IInterface
ISBZObjectiveInformationInterface = {}


---@class ISBZPawnInterface : IInterface
ISBZPawnInterface = {}


---@class ISBZPawnLifetime : IInterface
ISBZPawnLifetime = {}


---@class ISBZPlayerStatisticsManagerInterface : IInterface
ISBZPlayerStatisticsManagerInterface = {}


---@class ISBZPoolableActorInterface : IInterface
ISBZPoolableActorInterface = {}

function ISBZPoolableActorInterface:OnUnpooled() end
function ISBZPoolableActorInterface:OnPooled() end


---@class ISBZPopupWidgetInterface : IInterface
ISBZPopupWidgetInterface = {}


---@class ISBZProgressionSaveGameInterface : IInterface
ISBZProgressionSaveGameInterface = {}


---@class ISBZProjectileInterface : IInterface
ISBZProjectileInterface = {}


---@class ISBZRappellingRopeInterface : IInterface
ISBZRappellingRopeInterface = {}


---@class ISBZReactionDataInterface : IInterface
ISBZReactionDataInterface = {}

---@return FSBZReactionData
function ISBZReactionDataInterface:GetReactionData() end


---@class ISBZRoomConnectorInterface : IInterface
ISBZRoomConnectorInterface = {}


---@class ISBZRoomVolumeInterface : IInterface
ISBZRoomVolumeInterface = {}

---@param RoomVolume ASBZRoomVolume
function ISBZRoomVolumeInterface:LeaveRoom(RoomVolume) end
---@return ASBZRoomVolume
function ISBZRoomVolumeInterface:GetCurrentRoom() end
---@param RoomVolume ASBZRoomVolume
function ISBZRoomVolumeInterface:EnterRoom(RoomVolume) end


---@class ISBZRuntimeInterface : IInterface
ISBZRuntimeInterface = {}


---@class ISBZSaveManagerInterface : IInterface
ISBZSaveManagerInterface = {}


---@class ISBZSensorBlockingInterface : IInterface
ISBZSensorBlockingInterface = {}


---@class ISBZSensorInterface : IInterface
ISBZSensorInterface = {}

---@return USBZOutlineComponent
function ISBZSensorInterface:GetSensorOutlineComponent() end
---@return USBZSensorComponent
function ISBZSensorInterface:GetSensorComponent() end


---@class ISBZSpawnClosetReactorInterface : IInterface
ISBZSpawnClosetReactorInterface = {}

---@param bActorsInCloset boolean
---@param bDoCosmetics boolean
function ISBZSpawnClosetReactorInterface:ReactToCloset(bActorsInCloset, bDoCosmetics) end


---@class ISBZSpawnStaticInteractionInterface : IInterface
ISBZSpawnStaticInteractionInterface = {}

---@param InOutSpawnDataMap TMap<USceneComponent, FTransform>
function ISBZSpawnStaticInteractionInterface:PopulateSpawnInformationMap(InOutSpawnDataMap) end
---@param SpawnedActor AActor
---@param AttachParent USceneComponent
function ISBZSpawnStaticInteractionInterface:OnActorSpawned(SpawnedActor, AttachParent) end


---@class ISBZTagEventInterface : IInterface
ISBZTagEventInterface = {}

---@param EventTag FGameplayTag
---@param bActive boolean
function ISBZTagEventInterface:HandleTagActive(EventTag, bActive) end


---@class ISBZTimedObjectiveInterface : IInterface
ISBZTimedObjectiveInterface = {}


---@class ISBZToolHackableInterface : IInterface
ISBZToolHackableInterface = {}

function ISBZToolHackableInterface:RemoveFromWorldRuntime() end
function ISBZToolHackableInterface:OnHackingSyncSucceeded() end
function ISBZToolHackableInterface:OnHackingSyncStarted() end
function ISBZToolHackableInterface:OnHackingSyncCompleted() end
---@param bInIsSynchedAlready boolean
function ISBZToolHackableInterface:OnHackingSyncAborted(bInIsSynchedAlready) end
---@param bInHighlight boolean
function ISBZToolHackableInterface:HighlightHackable(bInHighlight) end
---@return USBZHackingComponent
function ISBZToolHackableInterface:GetHackingComponent() end
---@return USBZMiniGameComponent
function ISBZToolHackableInterface:GetHackableMiniGameComponent() end
---@return FVector
function ISBZToolHackableInterface:GetHackableLocation() end
---@return USBZHackableInteractableComponent
function ISBZToolHackableInterface:GetHackableInteractableComponent() end
function ISBZToolHackableInterface:AddToWorldRuntime() end


---@class ISBZToolSnapInterface : IInterface
ISBZToolSnapInterface = {}


---@class ISBZTraversalTrajectoryInterface : IInterface
ISBZTraversalTrajectoryInterface = {}


---@class ISBZTypeInterface : IInterface
ISBZTypeInterface = {}


---@class ISBZVehicleInterface : IInterface
ISBZVehicleInterface = {}

---@return USBZVehicleSplineFollowingComponent
function ISBZVehicleInterface:GetSplineFollowingComponent() end
---@return USBZVehicleSpawnComponent
function ISBZVehicleInterface:GetSpawnComponent() end


---@class ISBZViewTargetCollectionInterface : IInterface
ISBZViewTargetCollectionInterface = {}

---@param ViewTarget AActor
---@return int32
function ISBZViewTargetCollectionInterface:GetViewTargetIndex(ViewTarget) end
---@return int32
function ISBZViewTargetCollectionInterface:GetViewTargetCount() end
---@param InViewTargetIndex int32
---@return AActor
function ISBZViewTargetCollectionInterface:GetViewTarget(InViewTargetIndex) end
---@return AActor
function ISBZViewTargetCollectionInterface:GetCurrentViewTarget() end


---@class ISBZVoiceComponentInterface : IInterface
ISBZVoiceComponentInterface = {}


---@class ISBZVolumeDamageInterface : IInterface
ISBZVolumeDamageInterface = {}

---@return boolean
function ISBZVolumeDamageInterface:IsVolumeDamageReady() end
---@return TSubclassOf<USBZDamageType>
function ISBZVolumeDamageInterface:GetVolumeDamageType() end
---@return float
function ISBZVolumeDamageInterface:GetVolumeDamageTickSeconds() end
---@return float
function ISBZVolumeDamageInterface:GetVolumeDamagePerSecond() end
---@param ThisObject UObject
---@return AActor
function ISBZVolumeDamageInterface:GetVolumeDamageOwner(ThisObject) end
---@return TSubclassOf<USBZVolumeDamageEffect>
function ISBZVolumeDamageInterface:GetVolumeDamageEffectClass() end
---@return float
function ISBZVolumeDamageInterface:GetVolumeDamageArmorPenetration() end
---@return FGameplayTagContainer
function ISBZVolumeDamageInterface:GetVolumeDamageAddedTagContainer() end
---@return TMap<FName, float>
function ISBZVolumeDamageInterface:GetTacticianDiscombobulateVolumeDamageEffectValueMap() end
---@return TSubclassOf<UGameplayEffect>
function ISBZVolumeDamageInterface:GetTacticianDiscombobulateVolumeDamageEffectClass() end


---@class ISBZZiplinerInterface : IInterface
ISBZZiplinerInterface = {}


---@class UDEPRECATED_SBZAlertnessDataComponent : UActorComponent
---@field AlertState int8
---@field AlertMarkerAsset USBZMarkerDataAsset
---@field MarkerOffset FVector
---@field MarkerSocketName FName
---@field Component FSBZComponentSelector
---@field SightDetectionCurve FRuntimeFloatCurve
UDEPRECATED_SBZAlertnessDataComponent = {}

function UDEPRECATED_SBZAlertnessDataComponent:OnRep_AlertState() end
---@param RepAlertState int8
function UDEPRECATED_SBZAlertnessDataComponent:Multicast_SetAlertState(RepAlertState) end


---@class UDEPRECATED_SBZAllowSprintDeathForwardNotifyState : UAnimNotifyState
UDEPRECATED_SBZAllowSprintDeathForwardNotifyState = {}


---@class UDEPRECATED_SBZAllowSprintHurtForwardNotifyState : UAnimNotifyState
UDEPRECATED_SBZAllowSprintHurtForwardNotifyState = {}


---@class UDEPRECATED_SBZBTDecorator_AbortOnPositionChange : UBTDecorator_BlackboardBase
UDEPRECATED_SBZBTDecorator_AbortOnPositionChange = {}


---@class UDEPRECATED_SBZBTDecorator_FirePermissionGuard : UBTDecorator
---@field bClearAllTokens boolean
---@field TokenType ESBZFireTokenType
UDEPRECATED_SBZBTDecorator_FirePermissionGuard = {}



---@class UDEPRECATED_SBZBTDecorator_NeighboursIncreased : UBTDecorator
UDEPRECATED_SBZBTDecorator_NeighboursIncreased = {}


---@class UDEPRECATED_SBZBTService_Patrol : UBTService
---@field PatrolPointKey FBlackboardKeySelector
UDEPRECATED_SBZBTService_Patrol = {}



---@class UDEPRECATED_SBZBTTask_RequestFirePermission : UBTTaskNode
---@field EnemyKey FBlackboardKeySelector
---@field TokenType ESBZFireTokenType
UDEPRECATED_SBZBTTask_RequestFirePermission = {}



---@class UDEPRECATED_SBZFirePermissionManager : UActorComponent
---@field TokenLimits TMap<ESBZFireTokenType, int32>
UDEPRECATED_SBZFirePermissionManager = {}

---@param Obj UObject
function UDEPRECATED_SBZFirePermissionManager:OnTargetRemoved(Obj) end
---@param Obj UObject
function UDEPRECATED_SBZFirePermissionManager:OnTargetAdded(Obj) end


---@class UMeshMergeFunctionLibrary : UBlueprintFunctionLibrary
UMeshMergeFunctionLibrary = {}

---@param Params FSkeletalMeshMergeParams
---@return USkeletalMesh
function UMeshMergeFunctionLibrary:MergeMeshes(Params) end


---@class UPD3ActionNotificationWidget : USBZPawnWidget
---@field HUDNotifications TArray<FSBZHUDNotificationData>
---@field Text_ActionText UTextBlock
---@field FadeOutAnimation UWidgetAnimation
---@field CasingNotification FSBZHUDNotificationData
---@field CasingControlsReference FSBZControlsReference
---@field KilledCivilianNotification FSBZHUDNotificationData
UPD3ActionNotificationWidget = {}

---@param ReviveEventData FSBZReviveEvent
function UPD3ActionNotificationWidget:OnRevive(ReviveEventData) end
---@param InNotificationAdded FSBZHUDNotificationData
function UPD3ActionNotificationWidget:OnNotificationAdded(InNotificationAdded) end
---@param DamageEventData FSBZDamageEvent
function UPD3ActionNotificationWidget:HandleTakenDamageEvent(DamageEventData) end
---@param InNotification FSBZHUDNotificationData
function UPD3ActionNotificationWidget:DisplayNotification(InNotification) end
---@param HUDNotification FSBZHUDNotificationData
function UPD3ActionNotificationWidget:AddNotification(HUDNotification) end


---@class UPD3AmmoAttributeWidget : USBZWidgetBase
---@field AmmoLoadedGameplayAttribute FGameplayAttribute
---@field AmmoInventoryGameplayAttribute FGameplayAttribute
---@field SBZPlayerState ASBZPlayerState
UPD3AmmoAttributeWidget = {}

---@param AmmoLoadedSetup float
---@param AmmoInventorySetup float
---@param AmmoTotal float
function UPD3AmmoAttributeWidget:OnSetup(AmmoLoadedSetup, AmmoInventorySetup, AmmoTotal) end
---@param AmmoLoadedUpdated float
---@param AmmoInventoryUpdated float
---@param AmmoTotal float
function UPD3AmmoAttributeWidget:OnAmmoUpdated(AmmoLoadedUpdated, AmmoInventoryUpdated, AmmoTotal) end
---@param InSBZPlayerState ASBZPlayerState
function UPD3AmmoAttributeWidget:InitializePlayerState(InSBZPlayerState) end


---@class UPD3AssaultManager : UObject
---@field Settings UPD3AssaultSettings
---@field SpawnGroupSet TSet<APD3PawnSpawnGroup>
---@field CloakerSquad FPD3SpawnSquad
---@field CountedTypes FGameplayTagContainer
---@field ECMBlockedTypes FGameplayTagContainer
---@field VehicleSpawnRequests TArray<FPD3VehicleSpawnRequest>
---@field ThrowableTypeCooldown float
UPD3AssaultManager = {}

function UPD3AssaultManager:StartEndlessAssault() end
---@param Spline ASBZSpline
---@param bEnabled boolean
function UPD3AssaultManager:SetVehicleSpawnEnabled(Spline, bEnabled) end
---@param InLevelProgression float
function UPD3AssaultManager:SetLevelProgression(InLevelProgression) end
---@param bIsActive boolean
function UPD3AssaultManager:SetAssaultActive(bIsActive) end
---@param VehicleData USBZAssaultVehicleSpawnerData
---@param EnterSpline ASBZSpline
---@param ExitSpline ASBZSpline
function UPD3AssaultManager:RequestVehicleSpawn(VehicleData, EnterSpline, ExitSpline) end
---@param Players TArray<UObject>
function UPD3AssaultManager:OnPlayersAliveChanged(Players) end
---@param SpawnManager USBZSpawnManager
---@param Pawn APawn
function UPD3AssaultManager:OnPawnSpawned(SpawnManager, Pawn) end
---@param Pawn APawn
function UPD3AssaultManager:OnPawnKilled(Pawn) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function UPD3AssaultManager:OnHeistStateChanged(OldState, NewState) end
---@param NewCount int32
---@param OldCount int32
---@param AddedTime float
function UPD3AssaultManager:OnECMCountChanged(NewCount, OldCount, AddedTime) end
---@param DamageEventdata FSBZDamageEvent
function UPD3AssaultManager:OnDamageTakenEvent(DamageEventdata) end
---@return boolean
function UPD3AssaultManager:IsAssaultActive() end
---@param WorldContextObject UObject
---@return UPD3AssaultManager
function UPD3AssaultManager:Get(WorldContextObject) end


---@class UPD3AssaultSettings : UDataAsset
---@field CheckIntervalSeconds float
---@field AnticipationPhaseDurationSeconds float
---@field BuildPhaseDurationSeconds float
---@field MinFadePhaseDurationSeconds float
---@field MinAliveAISpawnCountTimeoutSeconds float
---@field MinDramaAndEngagementTimeoutSeconds float
---@field EndFadePhaseMinDramaScale float
---@field RegroupPhaseDurationSeconds float
---@field EndFadePhaseMinAliveAISpawnCount int32
---@field MaxTotalAISpawnCount int32
---@field MaxTotalAISpawnCountModifierCurve FRuntimeFloatCurve
---@field MaxAliveAIPlayerModifier TArray<float>
---@field MaxAliveAIProgressionModifierCurve FRuntimeFloatCurve
---@field MaxSpawnGroupQueryCount int32
---@field PlatformSettingsArray FPD3AssaultPlatformSettings
---@field DifficultySettingsArray FPD3AssaultDifficultySettings
---@field DramaDifficultySettingsArray FPD3DramaSettings
---@field SpawnGroupCooldownSeconds FFloatInterval
---@field PreferredSpawnDistance float
---@field SpawnerTimeScoreWeight float
---@field SpawnerDistScoreWeight float
---@field TypeLimits TMap<FGameplayTag, int32>
---@field TypeCooldowns TMap<FGameplayTag, float>
---@field TypesToIgnoreDuringFirstBuildup FGameplayTagContainer
---@field VehicleCheckInterval FFloatInterval
---@field MaxNumVehicleSpawnRequests int32
---@field VehicleSpawnChance float
---@field CloakerControlSpawnDelay FFloatInterval
---@field CloakerRegroupSpawnChance float
---@field AttackingAiPerPlayer FInt32Interval
---@field MaxNrAttackers uint8
UPD3AssaultSettings = {}



---@class UPD3AttributePercentWidget : USBZPlayerStateWidgetBase
---@field ValueGameplayAttribute FGameplayAttribute
---@field MaxGameplayAttribute FGameplayAttribute
UPD3AttributePercentWidget = {}

---@param CurrentValueSetup float
---@param MaxValueSetup float
---@param PercentageSetup float
function UPD3AttributePercentWidget:OnSetup(CurrentValueSetup, MaxValueSetup, PercentageSetup) end
---@param NewValue float
---@param OldPercentage float
---@param NewPercentage float
function UPD3AttributePercentWidget:OnMaxAttributeUpdate(NewValue, OldPercentage, NewPercentage) end
---@param NewValue float
---@param OldPercentage float
---@param NewPercentage float
function UPD3AttributePercentWidget:OnCurrentAttributeUpdate(NewValue, OldPercentage, NewPercentage) end


---@class UPD3CustodyTimerWidget : USBZWidgetBase
---@field PlayerState ASBZPlayerState
---@field TitleText UTextBlock
---@field TimerText UTextBlock
UPD3CustodyTimerWidget = {}



---@class UPD3DefeatTimerWidget : USBZCrewStateWidget
---@field TimerText UTextBlock
UPD3DefeatTimerWidget = {}

---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function UPD3DefeatTimerWidget:OnHeistStateChanged(OldState, NewState) end


---@class UPD3DetectionMeter : USBZWidgetBase
---@field CurrentValue float
---@field DetectingActor AActor
UPD3DetectionMeter = {}

function UPD3DetectionMeter:OnStoppedBeingDetected() end
function UPD3DetectionMeter:OnPlayerDetected() end
---@param InDetectingActor AActor
---@param InDetectionValue float
function UPD3DetectionMeter:OnNewDetector(InDetectingActor, InDetectionValue) end
---@param InDetectionValue float
function UPD3DetectionMeter:OnDetectionValueUpdated(InDetectionValue) end


---@class UPD3DetectionMeterContainer : USBZPlayerStatePawnWidgetBase
---@field DetectionMeterClass TSubclassOf<UPD3DetectionMeter>
---@field Overlay_DetectionMeters UOverlay
---@field DetectedAudioEvent UAkAudioEvent
---@field DetectedAudioEventCooldown float
---@field DetectionMeters TArray<UPD3DetectionMeter>
---@field TimeLastPlayedDetectedAudio float
---@field bIsBeingDetected boolean
UPD3DetectionMeterContainer = {}

---@param bObserved boolean
function UPD3DetectionMeterContainer:OnObservedChanged(bObserved) end
---@param bIsObserved boolean
function UPD3DetectionMeterContainer:OnObserved(bIsObserved) end
function UPD3DetectionMeterContainer:HandleHeistGoneLoud() end


---@class UPD3Dispatcher : UObject
---@field Caller FPD3CallerReason
---@field CallData UObject
UPD3Dispatcher = {}

---@param CallerReason USBZActionNotificationAsset
function UPD3Dispatcher:Multicast_CallDispatcherByAsset(CallerReason) end
---@param WorldContextObject UObject
---@return UPD3Dispatcher
function UPD3Dispatcher:GetDispatcher(WorldContextObject) end
---@param CallerReason USBZActionNotificationAsset
---@param InDispatcherCallData UObject
function UPD3Dispatcher:CallDispatcherByAsset(CallerReason, InDispatcherCallData) end
---@param InCaller EPD3DispatchCaller
---@param InReason EPD3DispatchCallerReason
function UPD3Dispatcher:CallDispatcher(InCaller, InReason) end


---@class UPD3GameIntensityAnalyzer : UObject
---@field SystemStates UAkStateValue
---@field MusicSwitches UAkSwitchValue
---@field SuspenseSwitches TArray<UAkSwitchValue>
---@field AnticipationDialog USBZDialogDataAsset
---@field AssaultDialog USBZDialogDataAsset
---@field ControlDialog USBZDialogDataAsset
---@field PointOfNoReturnDialog USBZDialogDataAsset
---@field PointOfNoReturnReminderDialog USBZDialogDataAsset
---@field PointOfNoReturnReminderDelaySeconds FFloatInterval
---@field ThreatDialog TMap<FGameplayTag, USBZDialogDataAsset>
---@field SquadDialog TMap<TSubclassOf<USBZAIOrder>, USBZDialogDataAsset>
UPD3GameIntensityAnalyzer = {}

---@param NewValue uint8
function UPD3GameIntensityAnalyzer:HandleSuspenseValueChanged(NewValue) end
function UPD3GameIntensityAnalyzer:HandleProgressionIndexChanged() end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function UPD3GameIntensityAnalyzer:HandleGameStateChanged(OldState, NewState) end
---@param WorldContextObject UObject
---@return UPD3GameIntensityAnalyzer
function UPD3GameIntensityAnalyzer:GetGameIntensityAnalyzer(WorldContextObject) end


---@class UPD3HUDAICrewStatusWidget : USBZWidgetBase
---@field Image_AICrewIcon UImage
---@field Text_AICrewName UTextBlock
---@field Widget_AICrewDefeatState UPD3HUDPlayerDefeatStateWidget
---@field Widget_DefeatTimer UPD3DefeatTimerWidget
---@field AICrewState ASBZAICrewState
UPD3HUDAICrewStatusWidget = {}



---@class UPD3HUDEscapeVolumeWidget : USBZWidgetBase
UPD3HUDEscapeVolumeWidget = {}

---@param PlayerInEscapeChangedEvent FSBZPlayerInEscapeChangedEvent
function UPD3HUDEscapeVolumeWidget:OnPlayersInEscapeChangedEvent(PlayerInEscapeChangedEvent) end
---@param PlayersInVolumeOnEntered int32
---@param TotalPlayers int32
function UPD3HUDEscapeVolumeWidget:OnPlayersEnteredVolume(PlayersInVolumeOnEntered, TotalPlayers) end
---@param PlayersInVolumeOnChanged int32
---@param TotalPlayers int32
function UPD3HUDEscapeVolumeWidget:OnPlayerCountChanged(PlayersInVolumeOnChanged, TotalPlayers) end
---@param NewTime int32
function UPD3HUDEscapeVolumeWidget:OnEscapeTimerChanged(NewTime) end
---@param PlayersInVolumeOnLeft int32
---@param TotalPlayers int32
function UPD3HUDEscapeVolumeWidget:OnAllPlayersLeftVolume(PlayersInVolumeOnLeft, TotalPlayers) end


---@class UPD3HUDGameTimerWidget : USBZWidgetBase
---@field Text_Timer UTextBlock
UPD3HUDGameTimerWidget = {}



---@class UPD3HUDKeyItemWidget : USBZPlayerStateWidgetBase
---@field KeyItemData USBZKeyItemData
---@field Image_KeyItem UImage
---@field KeyItemCount int32
UPD3HUDKeyItemWidget = {}

---@param InKeyItemData USBZKeyItemData
---@param InitialCount int32
function UPD3HUDKeyItemWidget:OnKeyItemPickedUp(InKeyItemData, InitialCount) end
function UPD3HUDKeyItemWidget:OnKeyItemDataCleared() end
---@param InKeyItemCount int32
function UPD3HUDKeyItemWidget:OnKeyItemCountChanged(InKeyItemCount) end


---@class UPD3HUDPagerWidget : USBZWidgetBase
UPD3HUDPagerWidget = {}

---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function UPD3HUDPagerWidget:OnHeistStateChangedEvent(OldState, NewState) end
---@param NewState EPD3HeistState
function UPD3HUDPagerWidget:OnHeistStateChanged(NewState) end
---@param AnswerPagerValue int32
---@param MaxAnswerPagerValue int32
function UPD3HUDPagerWidget:OnAnswerPagerValueChanged(AnswerPagerValue, MaxAnswerPagerValue) end


---@class UPD3HUDPartyContainerWidget : USBZWidgetBase
---@field PartyClientWidgetClass TSubclassOf<UPD3HUDPlayerStatusWidget>
---@field PartyAICrewWidgetClass TSubclassOf<UPD3HUDAICrewStatusWidget>
---@field Widget_SharedKeyItemContainer UPD3KeyItemContainer
---@field Panel_PartyPlayerWidgetContainer UPanelWidget
---@field Panel_PartyAICrewWidgetContainer UPanelWidget
UPD3HUDPartyContainerWidget = {}



---@class UPD3HUDPlayerCarryWidget : USBZPlayerStatePawnWidgetBase
---@field DefaultControlsReference FSBZControlsReference
---@field CurrentCarryType USBZCarryType
---@field CurrentControlsReferenceID int32
UPD3HUDPlayerCarryWidget = {}

---@param PickedUpCarryType USBZCarryType
function UPD3HUDPlayerCarryWidget:OnCarryTypePickedUp(PickedUpCarryType) end
---@param DroppedCarryType USBZCarryType
function UPD3HUDPlayerCarryWidget:OnCarryTypeDropped(DroppedCarryType) end


---@class UPD3HUDPlayerCombinedHealthWidget : USBZPlayerStateWidgetBase
---@field Widget_HealthGauge UPD3AttributePercentWidget
---@field Widget_ArmorGauge UPD3AttributePercentWidget
---@field MaskOffOpacity float
---@field MaskOnOpacity float
UPD3HUDPlayerCombinedHealthWidget = {}

function UPD3HUDPlayerCombinedHealthWidget:Setup() end
---@param bIsReplenishingArmor boolean
function UPD3HUDPlayerCombinedHealthWidget:BP_OnReplenishArmorChanged(bIsReplenishingArmor) end


---@class UPD3HUDPlayerDefeatStateWidget : USBZCrewStateWidget
UPD3HUDPlayerDefeatStateWidget = {}

---@param OldState EPD3DefeatState
---@param NewState EPD3DefeatState
function UPD3HUDPlayerDefeatStateWidget:OnDefeatStateChanged(OldState, NewState) end


---@class UPD3HUDPlayerStatusWidget : USBZPlayerStateWidgetBase
---@field Widget_CombinedHealthBar UPD3HUDPlayerCombinedHealthWidget
---@field Widget_DownedCounter USBZPlayerStateWidgetBase
---@field Widget_PrimaryWeaponAmmo UPD3WeaponStatusWidget
---@field Widget_SecondaryWeaponAmmo UPD3WeaponStatusWidget
---@field Widget_OverkillWeaponAmmo UPD3WeaponStatusWidget
---@field Image_PlayerIcon UImage
---@field Text_PlayerName UTextBlock
---@field Widget_PlayerDefeatState UPD3HUDPlayerDefeatStateWidget
---@field Widget_DefeatTimer UPD3DefeatTimerWidget
---@field Widget_CarryStatus UPD3HUDPlayerCarryWidget
---@field Widget_Revive UPD3ReviveInteractionWidget
---@field Widget_Reticle USBZReticleWidget
---@field Widget_Throwable UPD3ThrowableStatusWidget
---@field Widget_RequestOverkillWeapon UPD3OverkillWeaponRequestWidget
---@field Widget_Placeable UPD3PlaceableStatusWidget
---@field Widget_ToolStatus UPD3ToolStatusWidget
---@field Widget_RoomStatus UPD3HUDRoomStatusWidget
---@field Widget_Interaction USBZInteractionWidget
---@field Widget_DetectionMeterContainer UPD3DetectionMeterContainer
---@field Widget_KeyItemContainer UPD3KeyItemContainer
---@field Widget_CharacterEffectsContainer USBZCharacterEffectContainer
UPD3HUDPlayerStatusWidget = {}

---@param InPlayerState ASBZPlayerState
function UPD3HUDPlayerStatusWidget:OnPlatformChanged(InPlayerState) end
---@param InPlayerState ASBZPlayerState
function UPD3HUDPlayerStatusWidget:OnInfamyLevelChanged(InPlayerState) end


---@class UPD3HUDRoomStatusWidget : USBZPlayerStatePawnWidgetBase
---@field RoomType ESBZRoomType
---@field InFeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
---@field bHasGoneLoud boolean
UPD3HUDRoomStatusWidget = {}

---@param InRoomVolume ASBZRoomVolume
function UPD3HUDRoomStatusWidget:RoomVolumeChanged(InRoomVolume) end
---@param NewRoomType ESBZRoomType
function UPD3HUDRoomStatusWidget:RoomTypeChanged(NewRoomType) end
---@param InRoomType ESBZRoomType
function UPD3HUDRoomStatusWidget:OnRoomTypeChanged(InRoomType) end
---@param RoomVolume ASBZRoomVolume
function UPD3HUDRoomStatusWidget:OnRoomChanged(RoomVolume) end
function UPD3HUDRoomStatusWidget:OnNoRoomData() end
function UPD3HUDRoomStatusWidget:OnHeistGoneLoud() end
function UPD3HUDRoomStatusWidget:HandleHeistGoneLoud() end


---@class UPD3HeistDataAsset : UDataAsset
---@field HeistDisplayName FText
---@field HeistLocation FText
---@field Hour int32
---@field Minute int32
---@field EstimatedPayoutArray FInt32Interval
---@field HeistComplexity ESBZHeistComplexity
---@field bHasIntroSequence boolean
---@field bHasOutroSequence boolean
---@field SoloIntroVideo FSBZStorymodeStruct
---@field SoloSuccessOutroVideo FSBZStorymodeStruct
---@field SoloFailOutroVideo FSBZStorymodeStruct
---@field SuccessResultBackgroundVideoURL FFilePath
---@field FailResultBackgroundVideoURL FFilePath
---@field HeistReference FString
---@field HeistDescription FText
---@field HeistDisplayIcon TSoftObjectPtr<UPaperSprite>
---@field HeistBannerImage TSoftObjectPtr<UPaperSprite>
---@field HeistContractorIcon TSoftObjectPtr<UPaperSprite>
---@field HeistContractorName FText
---@field LevelPath FSoftObjectPath
---@field MapCoordinates FVector2D
---@field bIsTutorialLevel boolean
---@field HeistButtonHoverPlayEvent UAkAudioEvent
---@field HeistDescriptionPlayEvent UAkAudioEvent
---@field HeistDescriptionStopEvent UAkAudioEvent
---@field HeistResultSuccessStealthPlayEvent UAkAudioEvent
---@field HeistResultSuccessLoudPlayEvent UAkAudioEvent
---@field HeistResultFailurePlayEvent UAkAudioEvent
---@field PrePlanningTagContainer FGameplayTagContainer
UPD3HeistDataAsset = {}

---@return FText
function UPD3HeistDataAsset:GetHeistTimeShort() end
---@param Diffculty ESBZDifficulty
---@param OutMin int32
---@param OutMax int32
function UPD3HeistDataAsset:GetEstimatedPayout(Diffculty, OutMin, OutMax) end
---@param OutDisplayName FText
---@param OutHasText boolean
function UPD3HeistDataAsset:GetDisplayName(OutDisplayName, OutHasText) end


---@class UPD3KeyItemContainer : USBZPlayerStateWidgetBase
---@field Panel_KeyItems UPanelWidget
---@field MaxDisplayedKeyItems int32
---@field bIsShared boolean
---@field KeyItemWidgetClass TSubclassOf<UPD3HUDKeyItemWidget>
---@field OnKeyItemCountChangedDelegate FPD3KeyItemContainerOnKeyItemCountChangedDelegate
---@field KeyItemWidgets TArray<UPD3HUDKeyItemWidget>
UPD3KeyItemContainer = {}

---@param SharedKeyItemTagChangedEventData FSBZSharedKeyItemTagChangedEvent
function UPD3KeyItemContainer:OnSharedKeyItemCountChanged(SharedKeyItemTagChangedEventData) end
---@param KeyItemCountChangedEventData FSBZKeyItemCountChangedEvent
function UPD3KeyItemContainer:OnKeyItemCountChanged(KeyItemCountChangedEventData) end


---@class UPD3LoadoutAsyncLoader : UObject
UPD3LoadoutAsyncLoader = {}


---@class UPD3MaskOnNotificationWidget : USBZPawnWidget
---@field bIsPuttingOnMask boolean
UPD3MaskOnNotificationWidget = {}

---@param InProgress float
function UPD3MaskOnNotificationWidget:OnProgressChanged(InProgress) end
---@param bInIsPuttingOnMask boolean
function UPD3MaskOnNotificationWidget:MaskOnChanged(bInIsPuttingOnMask) end
---@return float
function UPD3MaskOnNotificationWidget:GetMaskOnProgress() end


---@class UPD3MiniGameWidgetBase : USBZWidgetBase
---@field bShouldBindAxis boolean
---@field XAxisName FName
---@field YAxisName FName
---@field AxisThreshold float
---@field UpdateWaitTime float
---@field XAxisLastUpdateTime float
---@field YAxisLastUpdateTime float
UPD3MiniGameWidgetBase = {}

---@param NewState EPD3MiniGameState
function UPD3MiniGameWidgetBase:SetMiniGameState(NewState) end
---@param MiniGameComponet USBZMiniGameComponent
function UPD3MiniGameWidgetBase:OnOwningMiniGameComponent(MiniGameComponet) end
---@param AkComponent UAkComponent
function UPD3MiniGameWidgetBase:OnMiniGameWidgetPlaced(AkComponent) end
---@param HeistDifficulty ESBZDifficulty
---@param MiniGameDifficulty uint8
function UPD3MiniGameWidgetBase:OnMiniGameDifficulty(HeistDifficulty, MiniGameDifficulty) end
---@param NewState EPD3MiniGameState
function UPD3MiniGameWidgetBase:MiniGameStateChanged(NewState) end
---@param Tag FGameplayTag
---@return boolean
function UPD3MiniGameWidgetBase:HasTag(Tag) end
---@param Tag FGameplayTag
---@return boolean
function UPD3MiniGameWidgetBase:HasSkill(Tag) end
---@param Value float
function UPD3MiniGameWidgetBase:BP_OnYAxisChanged(Value) end
---@param Value float
function UPD3MiniGameWidgetBase:BP_OnXAxisChanged(Value) end


---@class UPD3OverkillWeaponRequestWidget : USBZPlayerStatePawnWidgetBase
---@field Widget_AbilityAction USBZAbilityInputActionWidget
UPD3OverkillWeaponRequestWidget = {}

function UPD3OverkillWeaponRequestWidget:OnOverkillWeaponRequestReady() end
function UPD3OverkillWeaponRequestWidget:OnOverkillWeaponRequestNotReady() end
---@param NewProgress float
function UPD3OverkillWeaponRequestWidget:OnOverkillProgressChanged(NewProgress) end


---@class UPD3PawnVariation : UDataAsset
---@field PawnTypeArray FPD3PawnVariationArray
UPD3PawnVariation = {}



---@class UPD3PlaceableStatusWidget : USBZPlayerStatePawnWidgetBase
---@field Widget_AbilityAction USBZAbilityInputActionWidget
---@field bHasValidPlaceableIndex boolean
---@field CurrentPlaceableIndex int32
---@field AmmoInventory int32
UPD3PlaceableStatusWidget = {}

---@param InIcon TSoftObjectPtr<UPaperSprite>
function UPD3PlaceableStatusWidget:OnIconChanged(InIcon) end
---@param InAmmoInventory int32
function UPD3PlaceableStatusWidget:OnAmmoInventoryChanged(InAmmoInventory) end


---@class UPD3ReviveInteractionWidget : USBZPlayerStatePawnWidgetBase
---@field Progress float
UPD3ReviveInteractionWidget = {}

---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function UPD3ReviveInteractionWidget:OnReviveInteractionEnded(InInteractable, InInteractor, bInIsLocallyControlled) end


---@class UPD3SecurityCompanyDataAsset : UDataAsset
---@field SecurityCompanyName FText
---@field SecurityCompanyLogo UPaperSprite
---@field SecurityCompanyDescription FString
UPD3SecurityCompanyDataAsset = {}



---@class UPD3SegmentedPercentWidget : UPD3AttributePercentWidget
---@field ChunkCountGameplayAttribute FGameplayAttribute
---@field ChunkGameplayAttribute FGameplayAttribute
---@field TraumaGameplayAttribute FGameplayAttribute
---@field NumberOfChunks int32
UPD3SegmentedPercentWidget = {}

---@param StartOffset float
---@param EndOffset float
function UPD3SegmentedPercentWidget:OnTraumaRatioChanged(StartOffset, EndOffset) end
function UPD3SegmentedPercentWidget:BuildChunks() end


---@class UPD3SpawnSquadPawn : UDataAsset
---@field PawnVariation UPD3PawnVariation
---@field CachedPawnType FGameplayTag
UPD3SpawnSquadPawn = {}



---@class UPD3ThrowableStatusWidget : USBZPlayerStatePawnWidgetBase
---@field Widget_AbilityAction USBZAbilityInputActionWidget
---@field bHasValidThrowableIndex boolean
---@field CurrentThrowableIndex int32
---@field AmmoInventory int32
UPD3ThrowableStatusWidget = {}

---@param InIcon TSoftObjectPtr<UPaperSprite>
function UPD3ThrowableStatusWidget:OnIconChanged(InIcon) end
---@param InAmmoInventory int32
function UPD3ThrowableStatusWidget:OnAmmoInventoryChanged(InAmmoInventory) end
function UPD3ThrowableStatusWidget:OnAmmoAdded() end


---@class UPD3TickerWidget : USBZPawnWidget
---@field ShowAnimation UWidgetAnimation
---@field HideAnimation UWidgetAnimation
---@field TickerSettings FPD3TickerSettings
---@field Prefix FString
---@field Postfix FString
UPD3TickerWidget = {}

---@param Text FText
---@param TextColor FLinearColor
---@param BackgroundColor FLinearColor
function UPD3TickerWidget:OnTickerModeChanged(Text, TextColor, BackgroundColor) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function UPD3TickerWidget:OnHeistStateChanged(OldState, NewState) end


---@class UPD3ToolStatusWidget : USBZPlayerStateWidgetBase
---@field Widget_AbilityAction USBZAbilityInputActionWidget
---@field bHasValidPlaceableIndex boolean
---@field AmmoInventory int32
---@field Icon TSoftObjectPtr<UPaperSprite>
UPD3ToolStatusWidget = {}

---@param InIcon TSoftObjectPtr<UPaperSprite>
function UPD3ToolStatusWidget:OnIconChanged(InIcon) end
---@param InAmmoInventory int32
function UPD3ToolStatusWidget:OnAmmoInventoryChanged(InAmmoInventory) end


---@class UPD3WeaponStatusWidget : USBZPlayerStatePawnWidgetBase
---@field WeaponIndex int32
UPD3WeaponStatusWidget = {}

---@param OldCombinedState FSBZCombinedReloadState
---@param NewCombinedState FSBZCombinedReloadState
---@param bWasPlaying boolean
---@param bIsPlaying boolean
function UPD3WeaponStatusWidget:OnReloadStateChanged(OldCombinedState, NewCombinedState, bWasPlaying, bIsPlaying) end
---@param bIsEquippedNewValue boolean
function UPD3WeaponStatusWidget:OnEquippedChanged(bIsEquippedNewValue) end
---@param AmmoLoadedInit int32
---@param AmmoInventoryInit int32
---@param AmmoTotalInit int32
function UPD3WeaponStatusWidget:OnAmmoValuesInitialized(AmmoLoadedInit, AmmoInventoryInit, AmmoTotalInit) end
---@param NewState EPD3AmmoState
function UPD3WeaponStatusWidget:OnAmmoTotalStateChanged(NewState) end
---@param AmmoTotalChanged int32
function UPD3WeaponStatusWidget:OnAmmoTotalChanged(AmmoTotalChanged) end
---@param NewState EPD3AmmoState
function UPD3WeaponStatusWidget:OnAmmoLoadedStateChanged(NewState) end
---@param AmmoLoadedChanged int32
function UPD3WeaponStatusWidget:OnAmmoLoadedChanged(AmmoLoadedChanged) end
---@param NewState EPD3AmmoState
function UPD3WeaponStatusWidget:OnAmmoInventoryStateChanged(NewState) end
---@param AmmoInventoryChanged int32
function UPD3WeaponStatusWidget:OnAmmoInventoryChanged(AmmoInventoryChanged) end
---@param AmmoAddedCount int32
function UPD3WeaponStatusWidget:OnAmmoAdded(AmmoAddedCount) end


---@class USBTutorialCharacterSetting : USBZDeveloperSettings
---@field CharacterGuid FGuid
---@field CharacterSku FString
USBTutorialCharacterSetting = {}

---@return FString
function USBTutorialCharacterSetting:GetTutorialPlayerSku() end
---@return FGuid
function USBTutorialCharacterSetting:GetTutorialPlayerGuid() end


---@class USBZAIAbilitySystemComponent : USBZAbilitySystemComponent
USBZAIAbilitySystemComponent = {}

---@param HurtReactionPrediction FSBZHurtReactionPrediction
function USBZAIAbilitySystemComponent:Multicast_ApplyHurtInterrupt(HurtReactionPrediction) end


---@class USBZAIAction : UObject
---@field ApplicablePawnTypes FGameplayTagContainer
---@field Chance float
---@field bIsInstanced boolean
---@field TargetActor AActor
---@field ActionData USBZAIActionData
USBZAIAction = {}



---@class USBZAIActionData : UObject
USBZAIActionData = {}


---@class USBZAIActionData_FirstResponder : USBZAIActionData
USBZAIActionData_FirstResponder = {}


---@class USBZAIActionData_FreeHostage : USBZAIActionData
---@field Target ASBZCharacter
---@field Mode ESBZAIOrderMode
USBZAIActionData_FreeHostage = {}



---@class USBZAIActionData_Investigate : USBZAIActionData
---@field InvestigateActor AActor
USBZAIActionData_Investigate = {}



---@class USBZAIActionData_LifeAction : USBZAIActionData
---@field Request FSBZLifeActionRequest
---@field bUseRequestOnlyOnce boolean
---@field CompatibleStances int32
---@field AllowedHeistStates int32
---@field UtilityScore float
---@field GrantedTags FGameplayTagContainer
---@field ExecutionMode ESBZLifeActionDataExecutionMode
---@field bOverrideBehavior boolean
---@field Behavior UBehaviorTree
---@field bOverrideIsPersistent boolean
---@field bIsPersistent boolean
---@field CompleteOrderForResults int32
USBZAIActionData_LifeAction = {}



---@class USBZAIActionData_LookAndComment : USBZAIActionData
---@field LookAtLocation FVector
---@field VoiceComment USBZVoiceCommentDataAsset
USBZAIActionData_LookAndComment = {}



---@class USBZAIActionData_Patrol : USBZAIActionData
---@field PatrolPoint ASBZPatrolPoint
USBZAIActionData_Patrol = {}



---@class USBZAIActionData_Revive : USBZAIActionData
---@field Target ASBZCharacter
USBZAIActionData_Revive = {}



---@class USBZAIActionData_SetHostile : USBZAIActionData
---@field Hostile AActor
---@field bShouldCheckSightPerception boolean
USBZAIActionData_SetHostile = {}



---@class USBZAIActionData_Surrender : USBZAIActionData
USBZAIActionData_Surrender = {}


---@class USBZAIAction_AddTags : USBZAIAction
---@field TagsToAdd FGameplayTagContainer
USBZAIAction_AddTags = {}



---@class USBZAIAction_BumpedByCharacter : USBZAIAction
---@field VoiceComment USBZVoiceCommentDataAsset
---@field VoicePriority ESBZVoicePriority
USBZAIAction_BumpedByCharacter = {}



---@class USBZAIAction_CrewAIMarking : USBZAIAction
USBZAIAction_CrewAIMarking = {}


---@class USBZAIAction_DelayedSurrender : USBZAIAction
---@field MinAimDist float
---@field AIController ASBZAIController
---@field SelectedMontage UAnimMontage
USBZAIAction_DelayedSurrender = {}

---@param DamagedActor AActor
---@param Damage float
---@param DamageType UDamageType
---@param InstigatedBy AController
---@param DamageCauser AActor
function USBZAIAction_DelayedSurrender:OnTakeDamage(DamagedActor, Damage, DamageType, InstigatedBy, DamageCauser) end
---@param Montage UAnimMontage
---@param bInterrupted boolean
function USBZAIAction_DelayedSurrender:OnMontageEnded(Montage, bInterrupted) end


---@class USBZAIAction_FirstResponder : USBZAIAction_Order
USBZAIAction_FirstResponder = {}


---@class USBZAIAction_FreeHostage : USBZAIAction_Order
USBZAIAction_FreeHostage = {}


---@class USBZAIAction_GetDownOnGround : USBZAIAction
---@field QueueGoDownTagContainer FGameplayTagContainer
---@field AICharacterOwner ASBZAICharacter
USBZAIAction_GetDownOnGround = {}



---@class USBZAIAction_HogTie : USBZAIAction
USBZAIAction_HogTie = {}


---@class USBZAIAction_Investigate : USBZAIAction
---@field bSendOnlyOneInvestigator boolean
---@field bIsUrgent boolean
---@field EscalationReason USBZActionNotificationAsset
USBZAIAction_Investigate = {}



---@class USBZAIAction_LifeAction : USBZAIAction_Order
USBZAIAction_LifeAction = {}


---@class USBZAIAction_Lobotomize : USBZAIAction
USBZAIAction_Lobotomize = {}


---@class USBZAIAction_LookAndComment : USBZAIAction_Order
USBZAIAction_LookAndComment = {}


---@class USBZAIAction_Order : USBZAIAction
---@field ActionOrder USBZAIOrder
---@field OrderInstance USBZAIOrder
USBZAIAction_Order = {}

---@param Order USBZAIOrder
---@param OrderPawn APawn
---@param Result EBTNodeResult::Type
function USBZAIAction_Order:OnOrderStopped(Order, OrderPawn, Result) end
---@param Order USBZAIOrder
---@param OrderPawn APawn
function USBZAIAction_Order:OnOrderStarted(Order, OrderPawn) end
---@param Order USBZAIOrder
---@param OrderPawn APawn
---@param Result EBTNodeResult::Type
function USBZAIAction_Order:OnOrderCompleted(Order, OrderPawn, Result) end


---@class USBZAIAction_OrderSetTarget : USBZAIAction_Order
USBZAIAction_OrderSetTarget = {}


---@class USBZAIAction_Patrol : USBZAIAction_Order
USBZAIAction_Patrol = {}


---@class USBZAIAction_PlayVoiceComment : USBZAIAction
---@field VoiceComment USBZVoiceCommentDataAsset
---@field VoicePriority ESBZVoicePriority
USBZAIAction_PlayVoiceComment = {}



---@class USBZAIAction_Revive : USBZAIAction_Order
USBZAIAction_Revive = {}


---@class USBZAIAction_SecurityRoom : USBZAIAction
---@field OwnerController ASBZAIController
---@field Gates TArray<ASBZGate>
USBZAIAction_SecurityRoom = {}

---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZAIAction_SecurityRoom:OnHeistStateChanged(OldState, NewState) end
function USBZAIAction_SecurityRoom:ClearDelegates() end


---@class USBZAIAction_SetBBValue : USBZAIAction
---@field EQSRequest FEQSParametrizedQueryExecutionRequest
---@field BlackboardKey FName
USBZAIAction_SetBBValue = {}



---@class USBZAIAction_SetEnemy : USBZAIAction
USBZAIAction_SetEnemy = {}


---@class USBZAIAction_SetEnemyOfFriend : USBZAIAction
USBZAIAction_SetEnemyOfFriend = {}


---@class USBZAIAction_SetHostile : USBZAIAction
---@field AttractorOwner USBZAIAttractorComponent
---@field Hostile AActor
---@field bShouldCheckSightPerception boolean
USBZAIAction_SetHostile = {}



---@class USBZAIAction_Surrender : USBZAIAction
USBZAIAction_Surrender = {}


---@class USBZAIAction_ThrowGrenade : USBZAIAction_Order
USBZAIAction_ThrowGrenade = {}


---@class USBZAIAction_TouchReaction : USBZAIAction_Order
---@field PrivateVoiceComment USBZVoiceCommentDataAsset
---@field PublicVoiceComment USBZVoiceCommentDataAsset
---@field ResumeVoiceComment USBZVoiceCommentDataAsset
---@field VoicePriority ESBZVoicePriority
---@field Escalation USBZActionNotificationAsset
---@field PrivateToPublicTags FGameplayTagContainer
---@field ForbiddenTags FGameplayTagContainer
USBZAIAction_TouchReaction = {}



---@class USBZAIAgilityAbility : USBZGameplayAbility
---@field PlayingMontage UAnimMontage
USBZAIAgilityAbility = {}



---@class USBZAIAgilityTagEventNotify : UAnimNotify
---@field EventTag FGameplayTag
USBZAIAgilityTagEventNotify = {}



---@class USBZAIAnticipateExplosionAbility : USBZGameplayAbility
---@field DiveRange float
---@field DetectionSettings USBZGrenadeDetectionSettings
---@field ObservedGrenade ASBZGrenade
---@field PlayedMontage UAnimMontage
USBZAIAnticipateExplosionAbility = {}



---@class USBZAIArmedCharacterAnimationCollection : USBZAICharacterAnimationCollection
USBZAIArmedCharacterAnimationCollection = {}


---@class USBZAIArmedCharacterLinkedAnimation : USBZAICharacterLinkedAnimation
---@field bIsInCover boolean
---@field bIsEnteringCover boolean
---@field bIsAlreadyInCoverPose boolean
---@field bIsCoverAction boolean
---@field bWasCrouchBeforeCover boolean
---@field bWasInCrouchCover boolean
---@field bIsCrouching boolean
---@field bIsTurning boolean
---@field CrouchBlendingAlpha float
---@field CrouchToCrouchCover UAnimSequenceBase
---@field CrouchToStandCover UAnimSequenceBase
---@field StandToCrouchCover UAnimSequenceBase
---@field StandToStandCover UAnimSequenceBase
---@field CrouchCoverLoop UAnimSequenceBase
---@field StandCoverLoop UAnimSequenceBase
---@field CrouchCoverToCrouch UAnimSequenceBase
---@field CrouchCoverToStand UAnimSequenceBase
---@field StandCoverToCrouch UAnimSequenceBase
---@field StandCoverToStand UAnimSequenceBase
---@field StandCoverToCrouchCover UAnimSequenceBase
---@field CrouchCoverToStandCover UAnimSequenceBase
USBZAIArmedCharacterLinkedAnimation = {}



---@class USBZAIAttractorComponent : UActorComponent
---@field RegisterAsSourceForSenses TArray<TSubclassOf<UAISense>>
---@field DefaultSense TSubclassOf<UAISense>
---@field MaxHeistStateToBeEnabled EPD3HeistState
---@field Priority ESBZAIAttractorPriority
---@field Radius float
---@field MaxConcurrentUsers int32
---@field MaxUses int32
---@field bDestroyOnComplete boolean
---@field bIsReusable boolean
---@field Tags FGameplayTagContainer
---@field AttractorPredicate TSubclassOf<USBZAttractorPredicate>
---@field StealthAttractorPredicate TSubclassOf<USBZAttractorPredicate>
---@field Actions TArray<USBZAIAction>
---@field ActionMetaData TArray<FSBZActionMetaData>
---@field ActiveUsers TArray<TWeakObjectPtr<AActor>>
---@field DormantUsers TArray<TWeakObjectPtr<AActor>>
---@field CompletedUsers TArray<TWeakObjectPtr<AActor>>
---@field IgnoreActors TArray<AActor>
---@field DormantActions TArray<TWeakObjectPtr<USBZAIAction>>
---@field ActiveActions TArray<TWeakObjectPtr<USBZAIAction>>
---@field AttractorInstigator APawn
---@field bIsEnabledAfteSearch boolean
---@field bIsEnabled boolean
USBZAIAttractorComponent = {}

function USBZAIAttractorComponent:UnregisterFromPerceptionSystem() end
---@param bEnabled boolean
---@return boolean
function USBZAIAttractorComponent:SetEnabled(bEnabled) end
---@param Instigator APawn
function USBZAIAttractorComponent:SetAttractorInstigator(Instigator) end
function USBZAIAttractorComponent:RegisterWithPerceptionSystem() end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZAIAttractorComponent:OnHeistStateChanged(OldState, NewState) end


---@class USBZAIAvoidVehicleAbility : USBZGameplayAbility
---@field AICharacter ASBZAIBaseCharacter
---@field CurrentVehicle ASBZWheeledVehicle
USBZAIAvoidVehicleAbility = {}

---@param DeltaSeconds float
function USBZAIAvoidVehicleAbility:Tick(DeltaSeconds) end


---@class USBZAICharacterAbilityData : USBZCharacterAbilityData
---@field ArmorHardness float
USBZAICharacterAbilityData = {}



---@class USBZAICharacterAnimationCollection : USBZCharacterAnimationCollection
USBZAICharacterAnimationCollection = {}


---@class USBZAICharacterAttributeSet : USBZCharacterAttributeSet
---@field AccuracyPenalty FGameplayAttributeData
USBZAICharacterAttributeSet = {}



---@class USBZAICharacterInteractableComponent : USBZCharacterInteractableComponent
---@field ModeArray TArray<ESBZAICharacterInteractableMode>
---@field ModeDataArray FSBZInteractableModeData
USBZAICharacterInteractableComponent = {}



---@class USBZAICharacterLinkedAnimation : USBZCharacterLinkedAnimation
---@field bIsDownOnGround boolean
---@field bIsDownOnGroundPanic boolean
---@field DownOnGroundIdle UAnimSequenceBase
---@field EnterDownOnGroundIdlePanic UAnimSequenceBase
---@field DownOnGroundIdlePanic UAnimSequenceBase
---@field ExitDownOnGroundIdlePanic UAnimSequenceBase
---@field AICharacter ASBZAICharacter
USBZAICharacterLinkedAnimation = {}



---@class USBZAICharacterMovementComponent : USBZCharacterMovementComponent
---@field AgentManager USBZAgentManager
---@field MaxSprintSpeed float
---@field MaxAccelerationRunning float
---@field MaxDecelerationWalking float
---@field bSlowDownOnCurvedPath boolean
---@field MinRunSpeedOnCurvedPath float
---@field PathAngleForMinSpeed float
---@field bCanRunWhileFocusing boolean
---@field bCanRunWhileStrafing boolean
---@field bCanSprintWhileFocusing boolean
---@field NeighbourCollisionInnerRadius float
---@field NeighbourCollisionOuterRadius float
---@field NeighbourCollisionHardCollisionFactor float
---@field NeighbourCollisionSoftCollisionFactor float
---@field NeighbourCollisionMaxDuration float
---@field bNeighbourCollisionEnabled boolean
---@field MaxStepHeightRootMotion float
USBZAICharacterMovementComponent = {}



---@class USBZAICharacterVoiceComponent : USBZCharacterVoiceComponent
USBZAICharacterVoiceComponent = {}

---@param HostageState uint8
function USBZAICharacterVoiceComponent:HandleOnHostageStateChanged(HostageState) end
---@param Victim ASBZAICharacter
---@param Instigator ASBZCharacter
---@param bHumanShield boolean
function USBZAICharacterVoiceComponent:HandleHumanShieldChanged(Victim, Instigator, bHumanShield) end
---@param OldCategory ESBZAIBehaviorCategory
---@param NewCategory ESBZAIBehaviorCategory
function USBZAICharacterVoiceComponent:HandleAIBehaviorCategoryChanged(OldCategory, NewCategory) end


---@class USBZAICloakerFlailAbility : USBZMeleeAbility
USBZAICloakerFlailAbility = {}


---@class USBZAICloakerMeleeAbility : USBZMeleeAbility
---@field HitAcceptanceRadius float
---@field TauntDuringAssault USBZVoiceCommentDataAsset
---@field CloakerTakedown UAkAudioEvent
---@field OutlineAsset USBZOutlineAsset
---@field CloakerTarget ASBZPlayerCharacter
---@field RegisteredPlayerState ASBZPlayerState
---@field AICharacter ASBZAICharacter
---@field CurrentMeleeMontage UAnimMontage
---@field CurrentBeatOnGroundMontage UAnimMontage
USBZAICloakerMeleeAbility = {}



---@class USBZAICloakerMeleeEffect : UGameplayEffect
USBZAICloakerMeleeEffect = {}


---@class USBZAICloakerMeleeExecutionCalculation : UGameplayEffectExecutionCalculation
USBZAICloakerMeleeExecutionCalculation = {}


---@class USBZAIConfig : UObject
---@field bTimeSliceDecidersLoop boolean
---@field DecidersLoopTimeSlicingBudget double
---@field DeployableCooldown float
---@field DeployableIgnoreTime float
---@field DeployableConsumedTime float
---@field Threats TMap<FGameplayTag, EPD3ThreatLevel>
---@field Evade FSBZAIConfigEvade
---@field ShootingPoints FSBZCoverShootingPoints
---@field FriendlyFireRadius float
---@field CrewAIStealthMarkingCooldown FFloatInterval
---@field StealthMarkingRange float
---@field LowHealthConsideration float
---@field LowArmorConsideration float
---@field LowAmmoConsideration float
---@field MaxDeployablesAllowed int32
---@field TauntTimeFiredThreshold float
---@field SurrenderGracePeriod float
---@field GoDownDistanceDelayRange float
---@field GoDownRandomDelay FFloatInterval
---@field EscortCircleSize float
---@field DPS FSBZAIConfigDPSData
---@field ActionClasses TMap<FName, TSubclassOf<USBZAIAction>>
---@field OrderClasses TMap<FName, TSubclassOf<USBZAIOrder>>
USBZAIConfig = {}

---@return TArray<FSBZCoverShootingPoints>
function USBZAIConfig:GetShootingPoints() end
---@return USBZAIConfig
function USBZAIConfig:Get() end


---@class USBZAICrewCharacterAbilityData : USBZAICharacterAbilityData
---@field DownedHealth float
---@field DefeatDownedDuration float
---@field DefeatCuffedDuration float
---@field ReviveHealth float
USBZAICrewCharacterAbilityData = {}



---@class USBZAICrewCharacterAnimationCollection : USBZAIArmedCharacterAnimationCollection
USBZAICrewCharacterAnimationCollection = {}


---@class USBZAICrewCharacterInteractableComponent : USBZCharacterInteractableComponent
---@field ModeArray TArray<ESBZAICrewCharacterInteractableMode>
---@field ModeDataArray FSBZInteractableModeData
USBZAICrewCharacterInteractableComponent = {}



---@class USBZAICrewCharacterLinkedAnimation : USBZCharacterLinkedAnimation
---@field AICrewCharacter ASBZAICrewCharacter
---@field UpperBodyAimRotation FRotator
---@field DefeatStateAnimationHandler FSBZDefeatStateAnimationHandler
USBZAICrewCharacterLinkedAnimation = {}



---@class USBZAICrewEquipmentData : USBZAIEquipmentData
---@field MaskData USBZMaskData
USBZAICrewEquipmentData = {}



---@class USBZAIDataProvider_DefensePointAngle : UAIDataProvider
---@field FloatValue float
USBZAIDataProvider_DefensePointAngle = {}



---@class USBZAIDataProvider_NavQueryFilter_AICharacter : UAIDataProvider
---@field NQFClass TSubclassOf<UNavigationQueryFilter>
USBZAIDataProvider_NavQueryFilter_AICharacter = {}



---@class USBZAIDataProvider_PreferredCoverDistance : UAIDataProvider
---@field FloatValue float
USBZAIDataProvider_PreferredCoverDistance = {}



---@class USBZAIDataProvider_PreferredRange : UAIDataProvider
---@field FloatValue float
USBZAIDataProvider_PreferredRange = {}



---@class USBZAIDataProvider_PrimaryIsEquipped : UAIDataProvider
---@field bBoolValue boolean
USBZAIDataProvider_PrimaryIsEquipped = {}



---@class USBZAIDisableLookFocus : UAnimNotifyState
USBZAIDisableLookFocus = {}


---@class USBZAIDroneAttributeSet : USBZPawnAttributeSet
USBZAIDroneAttributeSet = {}


---@class USBZAIEquipmentData : UDataAsset
---@field EquippableConfigArray TArray<FSBZEquippableConfig>
---@field ThrowableConfigArray TArray<FSBZThrowableConfig>
---@field ThrowableCooldown float
USBZAIEquipmentData = {}



---@class USBZAIExplosiveWeakPoint : USBZAIWeakPoint
---@field GameplayEffectClass TSubclassOf<UGameplayEffect>
---@field AIExplosionRange float
---@field PlayerExplosionRange float
---@field HurtReactionData FSBZHurtReactionData
USBZAIExplosiveWeakPoint = {}

---@param Result FSBZExplosionResult
function USBZAIExplosiveWeakPoint:Multicast_ReplicateExplosion(Result) end


---@class USBZAIFireRangedWeaponAbility : USBZFireRangedWeaponAbility
---@field BurstPattern TArray<boolean>
USBZAIFireRangedWeaponAbility = {}



---@class USBZAIFireTaserAbility : USBZAIFireRangedWeaponAbility
---@field TasedCharacter ASBZPlayerCharacter
---@field RegisteredPlayerState ASBZPlayerState
---@field TaserDamageContextHandle FGameplayEffectContextHandle
USBZAIFireTaserAbility = {}



---@class USBZAIFragGrenadeData : USBZFragGrenadeData
---@field Damage TMap<ESBZDifficulty, float>
---@field DamageModifierCurve UCurveFloat
USBZAIFragGrenadeData = {}



---@class USBZAIGasGrenadeData : USBZGasGrenadeData
---@field DifficultyArray FSBZAIGasGrenadeDifficultyData
USBZAIGasGrenadeData = {}



---@class USBZAIGrenadeBelt : USBZAIExplosiveWeakPoint
---@field PlayerGameplayEffectClass TSubclassOf<UGameplayEffect>
---@field AIExplosionDamage TMap<ESBZDifficulty, float>
---@field PlayerExplosionDamage TMap<ESBZDifficulty, float>
---@field DamageModifierCurve UCurveFloat
---@field PlayerStaggerDuration float
USBZAIGrenadeBelt = {}



---@class USBZAIGrenadeBeltDamageExecutionCalculation : UGameplayEffectExecutionCalculation
USBZAIGrenadeBeltDamageExecutionCalculation = {}


---@class USBZAIHitByVehicleAbility : USBZGameplayAbility
---@field MinHeistState EPD3HeistState
---@field CompatibleStances int32
---@field DeadlyVehicleSpeedHit float
---@field MinDeadlyVehicleImpactWidth float
USBZAIHitByVehicleAbility = {}



---@class USBZAIHumanShieldVictimAbility : USBZGameplayAbility
USBZAIHumanShieldVictimAbility = {}


---@class USBZAIInteractBreakGlassHandler : UObject
USBZAIInteractBreakGlassHandler = {}

function USBZAIInteractBreakGlassHandler:OnBreakGlassInteractionCompleted() end


---@class USBZAIInteractCutGlassHandler : UObject
USBZAIInteractCutGlassHandler = {}

function USBZAIInteractCutGlassHandler:OnCutGlassInteractionCompleted() end


---@class USBZAIInteractHandler : UObject
USBZAIInteractHandler = {}

---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function USBZAIInteractHandler:OnInteractionStarted(InInteractable, InInteractor, bInIsLocallyControlled) end
---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bIsLocallyControlled boolean
function USBZAIInteractHandler:OnInteractionCompleted(InInteractable, InInteractor, bIsLocallyControlled) end


---@class USBZAIInteractThrowHandler : UObject
USBZAIInteractThrowHandler = {}

---@param Volume ASBZBagTriggerVolume
---@param BagItem ASBZBagItem
---@param BagHandle FSBZBagHandle
function USBZAIInteractThrowHandler:OnThrowBagInteractionCompleted(Volume, BagItem, BagHandle) end


---@class USBZAIInteractorComponent : USBZInteractorComponent
USBZAIInteractorComponent = {}


---@class USBZAILibrary : UBlueprintFunctionLibrary
USBZAILibrary = {}

---@param Character ASBZAICharacter
---@param InAbility ESBZAbilityInput
function USBZAILibrary:TriggerAbility(Character, InAbility) end
---@param Character ASBZCharacter
---@param InStance ESBZCharacterStance
function USBZAILibrary:SetStance(Character, InStance) end
---@param Owner UObject
---@param Data USBZAIActionData
---@return USBZAIAction
function USBZAILibrary:PushAction(Owner, Data) end
---@param WorldContextObject UObject
---@return FVector
function USBZAILibrary:PlayerCenterOfMass(WorldContextObject) end
---@param NoiseGenerator AActor
---@param Range float
---@param Lifetime float
---@param Tag FGameplayTag
---@param NoiseInstigator AActor
---@param Room ASBZRoomVolume
function USBZAILibrary:MakeNoise(NoiseGenerator, Range, Lifetime, Tag, NoiseInstigator, Room) end
---@param Character ASBZAIBaseCharacter
---@param Location FVector
---@param MaxImpactTime float
---@param DiameterInflation float
---@return boolean
function USBZAILibrary:IsLocationSafeFromNeighbours(Character, Location, MaxImpactTime, DiameterInflation) end
---@param WorldContextObject UObject
---@param CharacterLocation FVector
---@param SearchRange float
---@param WallAdditiveLength float
---@return float
function USBZAILibrary:GetNavAreaSmallestSideSqSize(WorldContextObject, CharacterLocation, SearchRange, WallAdditiveLength) end
---@param Character ASBZCharacter
---@param MaxDistance float
---@param Direction FVector
---@param FilterClass TSubclassOf<UNavigationQueryFilter>
---@param bProjectStartLocation boolean
---@return float
function USBZAILibrary:FindDistance2DToWallAlongDir(Character, MaxDistance, Direction, FilterClass, bProjectStartLocation) end
---@param WorldContextObject UObject
---@param BlockingCharacterLocation FVector
---@param BlockedCharacterDirection FVector
---@param OutBottleNeckSqSize2D float
---@param OutRelocationPosition FVector
---@param CharacterRadius float
---@param BottleNeckSize float
---@return boolean
function USBZAILibrary:DetectNavBottleNeckAndRelocate(WorldContextObject, BlockingCharacterLocation, BlockedCharacterDirection, OutBottleNeckSqSize2D, OutRelocationPosition, CharacterRadius, BottleNeckSize) end
---@param OrderClass TSubclassOf<USBZAIOrder_MoveTo>
---@param Location FVector
---@param AIController ASBZAIController
---@return USBZAIOrder_MoveTo
function USBZAILibrary:CreateAIOrderMoveTo(OrderClass, Location, AIController) end
---@param OrderClass TSubclassOf<USBZAIOrder>
---@param AIController ASBZAIController
---@return USBZAIOrder
function USBZAILibrary:CreateAIOrder(OrderClass, AIController) end
---@param ObjectClass TSubclassOf<USBZAIActionData>
---@param Outer UObject
---@return USBZAIActionData
function USBZAILibrary:CreateActionData(ObjectClass, Outer) end


---@class USBZAILifeActionAbility : USBZGameplayAbility
---@field TagsToPropagateOnEndAbility TArray<FSBZTagStanceMapping>
USBZAILifeActionAbility = {}



---@class USBZAILookFocusState : UAnimNotifyState
---@field LookFocusData USBZLookFocusData
USBZAILookFocusState = {}



---@class USBZAIMeleeDamageData : USBZMeleeDamageData
---@field HealthDamage float
---@field GlobalCooldown float
USBZAIMeleeDamageData = {}



---@class USBZAIObjectiveComponent : UActorComponent
---@field bRegisterToWorldRuntime boolean
---@field bExcludeInteractableAfterUse boolean
---@field InteractionType EAIObjectiveInteractionTypes
---@field InteractionPriority EAIObjectivePriority
---@field HasIteractionItems FGameplayTagContainer
---@field DoesNotHaveIteractionItems FGameplayTagContainer
---@field CurrentUser TWeakObjectPtr<ASBZAIController>
---@field ObjectiveInteractables TArray<FInteractableDataContainer>
---@field ActiveInteractables TArray<int32>
---@field InteractableExclusionList TArray<int32>
---@field ObjectiveColliders TArray<FColliderDataContainer>
---@field ActiveColliders TArray<int32>
---@field InteractionPoint FVector
---@field MoveToPosition FVector
---@field InitialObjectiveLocation FVector
---@field CurrentInteractable int32
---@field RoomVolumes TArray<ASBZRoomVolume>
---@field LastKnownRoom ASBZRoomVolume
---@field MoveToPosEQSQuery UEnvQuery
USBZAIObjectiveComponent = {}

---@param Order USBZAIOrder
---@param Owner APawn
---@param OrderResult EBTNodeResult::Type
function USBZAIObjectiveComponent:OnOrderCompleted(Order, Owner, OrderResult) end
---@param Interactable USBZBaseInteractableComponent
---@param bEnabled boolean
function USBZAIObjectiveComponent:OnInteractStateChanged(Interactable, bEnabled) end
---@param ActorPrimitive UPrimitiveComponent
function USBZAIObjectiveComponent:OnCollisionChanged(ActorPrimitive) end
---@return ASBZRoomVolume
function USBZAIObjectiveComponent:GetLastKnownRoom() end
---@return ASBZRoomVolume
function USBZAIObjectiveComponent:GetCurrentRoom_Implementation() end


---@class USBZAIObjectiveComponent_FileCabinet : USBZAIObjectiveComponent
USBZAIObjectiveComponent_FileCabinet = {}


---@class USBZAIObjectiveSettings : UDeveloperSettings
---@field DefaultDirectObjectiveMoveToEQSName FSoftObjectPath
---@field DirectMoveToEQSBPClass UEnvQuery
---@field DefaultThrownObjectiveMoveToEQSName FSoftObjectPath
---@field ThrownMoveToEQSBPClass UEnvQuery
USBZAIObjectiveSettings = {}



---@class USBZAIOrder : UObject
---@field OrderTypes FGameplayTagContainer
---@field OverrideTypes FGameplayTagContainer
---@field ApplicablePawnTypes FGameplayTagContainer
---@field Tags FGameplayTagContainer
---@field bShouldRemoveTagsOnStopped boolean
---@field Mode ESBZAIOrderMode
---@field bIsInstanced boolean
---@field bIsPersistent boolean
---@field DefaultSelectionScore float
---@field DefaultUtilityScore float
---@field Behavior UBehaviorTree
---@field Category ESBZAIBehaviorCategory
---@field OrderOwner UObject
---@field TargetActor AActor
---@field bCompleteOnStop boolean
USBZAIOrder = {}

---@param Pawn APawn
---@param NodeResult EBTNodeResult::Type
function USBZAIOrder:OnStoppedBP(Pawn, NodeResult) end
---@param Pawn APawn
function USBZAIOrder:OnStartedBP(Pawn) end
function USBZAIOrder:OnSelectedBP() end
function USBZAIOrder:OnDeselectedBP() end
---@param Pawn APawn
---@param NodeResult EBTNodeResult::Type
function USBZAIOrder:OnCompletedBP(Pawn, NodeResult) end
---@param AIController ASBZAIController
---@return boolean
function USBZAIOrder:ExecPredicate(AIController) end


---@class USBZAIOrderDebugBlueprintLibrary : UBlueprintFunctionLibrary
USBZAIOrderDebugBlueprintLibrary = {}

---@param ContextObject UObject
---@param AIOrder TSubclassOf<USBZAISquadOrder>
function USBZAIOrderDebugBlueprintLibrary:SetOrderToAllSquads(ContextObject, AIOrder) end


---@class USBZAIOrder_ActionInteract : USBZAIOrder_LifeAction
USBZAIOrder_ActionInteract = {}

---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function USBZAIOrder_ActionInteract:OnLASlotStarted(Character, ActionInstance, ActionSlot) end


---@class USBZAIOrder_Agility : USBZAIOrder
---@field AgilityNavLink ASBZAgilityNavLink
---@field AgilityNavLinkInterface TScriptInterface<ISBZAgilityTrajectoryInterface>
USBZAIOrder_Agility = {}



---@class USBZAIOrder_Attack : USBZAIOrder_TacticalMoveTo
USBZAIOrder_Attack = {}

---@param KilledPawn APawn
function USBZAIOrder_Attack:OnTargetKilled(KilledPawn) end
---@param InSBZPlayerState ASBZPlayerState
---@param OldDefeatState EPD3DefeatState
---@param InDefeatState EPD3DefeatState
function USBZAIOrder_Attack:OnTargetDefeatStateChanged(InSBZPlayerState, OldDefeatState, InDefeatState) end


---@class USBZAIOrder_BrokenCamera : USBZAIOrder
USBZAIOrder_BrokenCamera = {}


---@class USBZAIOrder_Defend : USBZAIOrder_TacticalMoveTo
USBZAIOrder_Defend = {}


---@class USBZAIOrder_DropOfBag : USBZAIOrder
USBZAIOrder_DropOfBag = {}


---@class USBZAIOrder_Escalate : USBZAIOrder
---@field DefaultReason USBZActionNotificationAsset
---@field TimeToEscalate float
---@field EscalationReason USBZActionNotificationAsset
---@field LastPawn APawn
USBZAIOrder_Escalate = {}

---@param NewCount int32
---@param OldCount int32
---@param AddedTime float
function USBZAIOrder_Escalate:OnECMCountChanged(NewCount, OldCount, AddedTime) end


---@class USBZAIOrder_FirstResponder : USBZAIOrder
---@field CoverPoint TSoftObjectPtr<ASBZCoverPoint>
---@field SoundTags FGameplayTagContainer
USBZAIOrder_FirstResponder = {}

---@param Actor AActor
---@param Stimulus FAIStimulus
function USBZAIOrder_FirstResponder:OnPerceptionUpdated(Actor, Stimulus) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZAIOrder_FirstResponder:OnHeistStateChanged(OldState, NewState) end


---@class USBZAIOrder_FollowShield : USBZAIOrder
---@field AvoidanceOverride float
---@field FrictionOverride float
USBZAIOrder_FollowShield = {}



---@class USBZAIOrder_FollowTarget : USBZAIOrder
USBZAIOrder_FollowTarget = {}

---@param AIController ASBZAIController
---@param AIOrder USBZAIOrder
function USBZAIOrder_FollowTarget:OnOwnerOrderPushed(AIController, AIOrder) end
---@param Interactable USBZBaseInteractableComponent
---@param Interactor USBZInteractorComponent
---@param bInIsLocallyControlled boolean
function USBZAIOrder_FollowTarget:OnOwnerInteracted(Interactable, Interactor, bInIsLocallyControlled) end
function USBZAIOrder_FollowTarget:OnHitByPlayer() end
function USBZAIOrder_FollowTarget:OnAIPawnKilled() end


---@class USBZAIOrder_FreeHostage : USBZAIOrder
---@field BlackboardKey FName
---@field ReleaseHostageOrder TSubclassOf<USBZAIOrder_ReleaseHostage>
---@field TiedHostage ASBZAICharacter
USBZAIOrder_FreeHostage = {}

---@param EventTag FGameplayTag
---@param bActive boolean
function USBZAIOrder_FreeHostage:OnCharacterAnimEventActive(EventTag, bActive) end


---@class USBZAIOrder_GoToDespawn : USBZAIOrder
USBZAIOrder_GoToDespawn = {}


---@class USBZAIOrder_GoToLure : USBZAIOrder_LifeAction
USBZAIOrder_GoToLure = {}


---@class USBZAIOrder_Investigate : USBZAIOrder
---@field InjectTag FGameplayTag
---@field StateBehaviors UBehaviorTree
---@field EscalateActionOrder USBZAIOrder_Escalate
---@field CurrentInvestigation FSBZInvestigateData
---@field InvestigateStack TArray<FSBZInvestigateData>
---@field EscalationReason USBZActionNotificationAsset
USBZAIOrder_Investigate = {}



---@class USBZAIOrder_InvestigateCorpse : USBZAIOrder_LifeAction
---@field BlackboardKey FName
USBZAIOrder_InvestigateCorpse = {}



---@class USBZAIOrder_InvestigateGate : USBZAIOrder
---@field BlackboardKey FName
---@field CallReason EPD3DispatchCallerReason
USBZAIOrder_InvestigateGate = {}



---@class USBZAIOrder_InvestigateSeenPlayer : USBZAIOrder
---@field BlackboardKey FName
---@field WaitTimeOnArrival float
USBZAIOrder_InvestigateSeenPlayer = {}



---@class USBZAIOrder_LifeAction : USBZAIOrder
---@field Request FSBZLifeActionRequest
---@field CompatibleStances int32
---@field AllowedHeistStates int32
---@field CompleteOrderForResults int32
---@field bUseRequestOnlyOnce boolean
---@field GrantedTags FGameplayTagContainer
---@field bShouldRemovePersistenceAfterLA boolean
---@field LAComponentSelector FSBZComponentSelector
---@field InstanceSelector FSBZComponentSelector
---@field SlotSelector FSBZComponentSelector
---@field ReservedSlot USBZLifeActionSlot
---@field LifeActionComponent USBZLifeActionComponent
---@field BlockingSlot USBZLifeActionSlot
USBZAIOrder_LifeAction = {}

---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
---@param Result ESBZLifeActionStopReason
function USBZAIOrder_LifeAction:OnCharacterSlotFreed(Character, ActionInstance, ActionSlot, Result) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
---@param Result ESBZLifeActionStopReason
function USBZAIOrder_LifeAction:OnBlockingSlotFreed(Character, ActionInstance, ActionSlot, Result) end
function USBZAIOrder_LifeAction:ClearDelegates() end


---@class USBZAIOrder_LookAndComment : USBZAIOrder
---@field LookAtLocation FVector
---@field VoiceComment USBZVoiceCommentDataAsset
---@field bUseTargetActorLocation boolean
USBZAIOrder_LookAndComment = {}



---@class USBZAIOrder_MoveTo : USBZAIOrder
---@field MoveToLocation FVector
---@field BlackboardKey FName
USBZAIOrder_MoveTo = {}

---@param Location FVector
function USBZAIOrder_MoveTo:SetMoveToLocation(Location) end


---@class USBZAIOrder_ObjectiveInteraction : USBZAIOrder
USBZAIOrder_ObjectiveInteraction = {}


---@class USBZAIOrder_Patrol : USBZAIOrder
---@field StartPoint ASBZPatrolPoint
---@field BlackboardKey FName
---@field BlackboardWaitTimeKey FName
---@field CurrentPoint ASBZPatrolPoint
USBZAIOrder_Patrol = {}



---@class USBZAIOrder_ReleaseHostage : USBZAIOrder
---@field DespawnTag FGameplayTag
---@field bWasTraded boolean
USBZAIOrder_ReleaseHostage = {}



---@class USBZAIOrder_Rescue : USBZAIOrder_TacticalMoveTo
---@field RescueTargetOutline USBZOutlineAsset
USBZAIOrder_Rescue = {}

---@param KilledPawn APawn
function USBZAIOrder_Rescue:OnTargetKilled(KilledPawn) end
---@param NewHostageState uint8
function USBZAIOrder_Rescue:OnTargetHostageStateChanged(NewHostageState) end


---@class USBZAIOrder_Retreat : USBZAIOrder_TacticalMoveTo
USBZAIOrder_Retreat = {}


---@class USBZAIOrder_Revive : USBZAIOrder
---@field BlackboardKey FName
---@field CivilianBehavior UBehaviorTree
USBZAIOrder_Revive = {}



---@class USBZAIOrder_Roaming : USBZAIOrder
USBZAIOrder_Roaming = {}


---@class USBZAIOrder_Sabotage : USBZAIOrder
---@field SabotageActor AActor
---@field BlackboardKey FName
---@field bDisableSabotageTargetOnFail boolean
USBZAIOrder_Sabotage = {}



---@class USBZAIOrder_Search : USBZAISquadOrder
---@field RoomToSearch ASBZRoomVolume
USBZAIOrder_Search = {}



---@class USBZAIOrder_SecureBag : USBZAIOrder
---@field DropOfBagActionOrder USBZAIOrder_DropOfBag
---@field BagActor AActor
---@field BlackboardKey FName
USBZAIOrder_SecureBag = {}

---@param EventTag FGameplayTag
---@param bActive boolean
function USBZAIOrder_SecureBag:OnCharacterAnimEventActive(EventTag, bActive) end


---@class USBZAIOrder_SecurityRoom : USBZAIOrder
---@field SecurityRoom ASBZSecurityRoom
---@field OwnerController ASBZAIController
---@field SecurityRoomVolume ASBZRoomVolume
---@field Gates TArray<ASBZGate>
USBZAIOrder_SecurityRoom = {}

---@param OverlappedActor AActor
---@param OtherActor AActor
function USBZAIOrder_SecurityRoom:OnSecurityRoomVolumeBeginOverlap(OverlappedActor, OtherActor) end
---@param Reason FString
function USBZAIOrder_SecurityRoom:OnPaused(Reason) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZAIOrder_SecurityRoom:OnHeistStateChanged(OldState, NewState) end
function USBZAIOrder_SecurityRoom:ClearDelegates() end


---@class USBZAIOrder_ShoveHumanShieldInstigator : USBZAIOrder
---@field HumanShieldHostage ASBZAICharacter
USBZAIOrder_ShoveHumanShieldInstigator = {}



---@class USBZAIOrder_SquadProtect : USBZAIOrder_TacticalMoveTo
USBZAIOrder_SquadProtect = {}


---@class USBZAIOrder_SquadSabotage : USBZAIOrder_TacticalMoveTo
---@field SabotagingMember TWeakObjectPtr<APawn>
USBZAIOrder_SquadSabotage = {}



---@class USBZAIOrder_TacticalMoveTo : USBZAISquadOrder
---@field InjectTag FGameplayTag
---@field Behaviors UBehaviorTree
---@field PrioTypes TArray<FGameplayTag>
---@field PreStateActions TSubclassOf<USBZAIAction_Order>
---@field PrioQueue TArray<APawn>
---@field PrioWaitTime float
---@field TargetRoom ASBZRoomVolume
---@field TargetConnector TScriptInterface<ISBZRoomConnectorInterface>
---@field CompletedMembers TArray<APawn>
---@field TargetEQSQuery UEnvQuery
---@field AbortedPawns TArray<APawn>
---@field MaxNumTargetRoomPathFailed uint8
USBZAIOrder_TacticalMoveTo = {}



---@class USBZAIPerceptionComponent : UAIPerceptionComponent
---@field CombatSensesConfig TArray<UAISenseConfig>
---@field DistractedSensesConfig TArray<UAISenseConfig>
USBZAIPerceptionComponent = {}

---@param ConfigID ESBZSenseConfig
function USBZAIPerceptionComponent:SetSenseConfig(ConfigID) end
---@param UpdateInfo FActorPerceptionUpdateInfo
function USBZAIPerceptionComponent:OnTransporterBrutalCarrySkillPerceptionInfoUpdated(UpdateInfo) end
---@param Actor AActor
---@param Stimulus FAIStimulus
function USBZAIPerceptionComponent:OnTargetPerception(Actor, Stimulus) end


---@class USBZAIRepositionPredicate : UObject
USBZAIRepositionPredicate = {}


---@class USBZAIRepositionPredicate_Cover : USBZAIRepositionPredicate
USBZAIRepositionPredicate_Cover = {}


---@class USBZAIRepositionPredicate_HumanShield : USBZAIRepositionPredicate
USBZAIRepositionPredicate_HumanShield = {}


---@class USBZAIScorer : UObject
---@field Weight float
---@field SubScorers TArray<USBZAIScorer>
---@field OutputCurve UCurveFloat
---@field bIsInversed boolean
---@field AIController ASBZAIController
USBZAIScorer = {}



---@class USBZAIScorer_CanPathToEnemy : USBZAIScorer
---@field FilterClass TSubclassOf<UNavigationQueryFilter>
---@field AllowedDistanceFromPath float
---@field DefaultScoreValue float
---@field IgnoredTags FGameplayTagContainer
USBZAIScorer_CanPathToEnemy = {}



---@class USBZAIScorer_CanThrowGasGrenade : USBZAIScorer
USBZAIScorer_CanThrowGasGrenade = {}


---@class USBZAISearchManager : UObject
---@field InvestigateOrder TSubclassOf<USBZAIOrder_Investigate>
---@field MaximumSearchSquadSize uint8
---@field SearchOrder TSubclassOf<USBZAISquadOrder>
---@field CivilianEvacuateDelay FFloatInterval
---@field PercentageEvacutingCivilians float
---@field NumInvestigateUpdatesBeforeArrest uint8
---@field CivilianEvacuateOrder USBZAIOrder
---@field SearchSquads TArray<USBZAISquad>
---@field SearchOriginRoom ASBZRoomVolume
---@field CheckedRooms TArray<ASBZRoomVolume>
---@field InvestigationData TArray<FSBZInvestigationData>
USBZAISearchManager = {}

---@param Order USBZAIOrder
---@param Pawn APawn
---@param Result EBTNodeResult::Type
function USBZAISearchManager:OnInvestigationCompleted(Order, Pawn, Result) end
---@param OldHeistState EPD3HeistState
---@param NewHeistState EPD3HeistState
function USBZAISearchManager:OnHeistStateChanged(OldHeistState, NewHeistState) end
---@param WorldContextObject UObject
---@param Request FSBZInvestigationRequest
---@return boolean
function USBZAISearchManager:Investigate(WorldContextObject, Request) end
---@param Target AActor
---@return boolean
function USBZAISearchManager:HasPendingInvestigationFor(Target) end
---@param WorldContextObject UObject
---@return USBZAISearchManager
function USBZAISearchManager:Get(WorldContextObject) end


---@class USBZAISenseConfig_Team : UAISenseConfig
USBZAISenseConfig_Team = {}


---@class USBZAISenseConfig_Touch : UAISenseConfig
USBZAISenseConfig_Touch = {}


---@class USBZAISense_Team : UAISense
---@field DelayRange FFloatRange
---@field RegisteredEvents TArray<FSBZAITeamStimulusEvent>
USBZAISense_Team = {}



---@class USBZAISense_Touch : UAISense
---@field RegisteredEvents TArray<FSBZAITouchEvent>
USBZAISense_Touch = {}



---@class USBZAIShield : UStaticMeshComponent
---@field VisorArmor float
---@field ShieldArmorHardness float
---@field VisorArmorHardness float
---@field FrontAttachSocketName FName
---@field BackAttachSocketName FName
---@field BreakEvent UAkAudioEvent
---@field BreakComment USBZVoiceCommentDataAsset
---@field ShieldAttributSet USBZAIShieldAttributeSet
---@field bIsBroken boolean
---@field bIsIndestructible boolean
---@field ShieldVisor FSBZComponentSelector
---@field VisorCPDIndex int32
---@field VisorCPDVal float
---@field VisorDamageSteps int32
---@field DedicatedServerAttachmentOffset FVector
---@field ExplosionBlockDegrees float
---@field ExplosionBlockDot float
USBZAIShield = {}

function USBZAIShield:OnRep_ShieldBreak() end
---@param EventTag FGameplayTag
---@param bActive boolean
function USBZAIShield:OnCharacterAnimEventActive(EventTag, bActive) end
function USBZAIShield:Multicast_ShieldBreak() end


---@class USBZAIShieldAttributeSet : USBZAICharacterAttributeSet
---@field VisorArmor FGameplayAttributeData
---@field VisorHardness FGameplayAttributeData
---@field ShieldHardness FGameplayAttributeData
---@field Shield USBZAIShield
---@field ShieldVisor UStaticMeshComponent
USBZAIShieldAttributeSet = {}

---@param OldValue FGameplayAttributeData
function USBZAIShieldAttributeSet:OnRep_VisorArmor(OldValue) end
---@param NewCurrentValue float
function USBZAIShieldAttributeSet:Multicast_SetVisorArmor(NewCurrentValue) end


---@class USBZAIShieldSpecialComponent : USBZSpecialAIComponent
---@field NumberOfSlots uint8
---@field SpaceBetweenSlots float
---@field CoverAttachPoints TArray<ASBZAIShieldCoverAttachPoint>
USBZAIShieldSpecialComponent = {}



---@class USBZAIShoveAbility : USBZMeleeAbility
USBZAIShoveAbility = {}


---@class USBZAISmallTalkCollection : UDataAsset
---@field DialogAssets TArray<USBZDialogDataAsset>
USBZAISmallTalkCollection = {}



---@class USBZAISquad : UObject
---@field Members TArray<TWeakObjectPtr<APawn>>
---@field CurrentOrder USBZAISquadOrder
---@field MostNavRestrictedMember APawn
---@field MostRestrictedNQF UNavigationQueryFilter
USBZAISquad = {}

---@param KilledMember APawn
function USBZAISquad:OnMemberKilled(KilledMember) end


---@class USBZAISquadManager : UObject
---@field SpawnOrders TArray<TSubclassOf<USBZAISquadOrder>>
---@field RuntimeOrders TArray<TSubclassOf<USBZAISquadOrder>>
---@field MemberTypeBlacklist FGameplayTagContainer
---@field Squads TArray<USBZAISquad>
USBZAISquadManager = {}

---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZAISquadManager:OnHeistStateChanged(OldState, NewState) end
---@param WorldContextObject UObject
---@return USBZAISquadManager
function USBZAISquadManager:Get(WorldContextObject) end
---@param Pawns TArray<APawn>
---@return USBZAISquad
function USBZAISquadManager:AddSquad(Pawns) end


---@class USBZAISquadOrder : USBZAIOrder
---@field SpawnWeight float
---@field OwnerSquad USBZAISquad
---@field WaitingMembers TArray<APawn>
---@field IgnoredMembers TArray<APawn>
USBZAISquadOrder = {}



---@class USBZAIStimuliReactionComponent : UActorComponent
---@field Reactions TArray<FSBZStimuliReaction>
---@field EscalationOrder USBZAIOrder_Escalate
---@field ReasonAssets USBZActionNotificationAsset
---@field DetectedCharacters TArray<ASBZCharacter>
USBZAIStimuliReactionComponent = {}

---@param Actor AActor
---@param Stimulus FAIStimulus
function USBZAIStimuliReactionComponent:HandleStimuli(Actor, Stimulus) end


---@class USBZAITacticianCrowdControlAbility : USBZGameplayAbility
---@field AICharacter ASBZAICharacter
---@field Controller AController
USBZAITacticianCrowdControlAbility = {}



---@class USBZAITaserBattery : USBZAIExplosiveWeakPoint
---@field TaseDuration float
---@field LawEnforcerTags FGameplayTagContainer
USBZAITaserBattery = {}



---@class USBZAITaserFireData : USBZAIWeaponFireData
---@field DamageInterval float
USBZAITaserFireData = {}



---@class USBZAITaserSpecialComponent : USBZSpecialAIComponent
USBZAITaserSpecialComponent = {}


---@class USBZAITask_MontageMoveTo : UAITask
---@field OnRequestFailed FSBZAITask_MontageMoveToOnRequestFailed
---@field OnMoveFinished FSBZAITask_MontageMoveToOnMoveFinished
---@field MontageMoveRequest FSBZAIMontageMoveRequest
---@field DesiredMontage UAnimMontage
---@field EndMontagePtr UAnimMontage
USBZAITask_MontageMoveTo = {}



---@class USBZAIThrowItemAbility : USBZThrowItemAbility
USBZAIThrowItemAbility = {}


---@class USBZAIUtilityComponent : UActorComponent
---@field bTimeSliceDecidersLoop boolean
---@field Default USBZAIUtilityDecider
---@field Deciders TArray<USBZAIUtilityDecider>
---@field AIController ASBZAIController
---@field SelectedDecider USBZAIUtilityDecider
---@field ActiveDecider USBZAIUtilityDecider
---@field CurrentUtilityData USBZAIUtilityData
---@field Pawn APawn
---@field CachedTopDecider USBZAIUtilityDecider
USBZAIUtilityComponent = {}



---@class USBZAIUtilityData : UDataAsset
---@field RootTree UBehaviorTree
---@field InjectionTag FGameplayTag
---@field Default USBZAIUtilityDecider
---@field Deciders TArray<USBZAIUtilityDecider>
USBZAIUtilityData = {}



---@class USBZAIUtilityDecider : UObject
---@field Scorers TArray<USBZAIUtilityScorer>
---@field AlternativeScorers TArray<USBZAIUtilityScorer>
---@field Bonus TArray<USBZAIUtilityScorer>
---@field Modifiers TArray<USBZAIUtilityScorer>
---@field Behavior UBehaviorTree
---@field Category ESBZAIBehaviorCategory
---@field AIController ASBZAIController
---@field TagsToAddOnActivated FGameplayTagContainer
---@field bEnabled boolean
---@field MaxUtility float
USBZAIUtilityDecider = {}

function USBZAIUtilityDecider:OnSelectedBP() end
function USBZAIUtilityDecider:OnSelected() end
function USBZAIUtilityDecider:OnReselectedBP() end
function USBZAIUtilityDecider:OnReselected() end
function USBZAIUtilityDecider:OnInitBP() end
function USBZAIUtilityDecider:OnDeselectedBP() end
function USBZAIUtilityDecider:OnDeselected() end
---@param NodeResult EBTNodeResult::Type
function USBZAIUtilityDecider:OnDeactivatedBP(NodeResult) end
---@param NodeResult EBTNodeResult::Type
function USBZAIUtilityDecider:OnDeactivated(NodeResult) end
function USBZAIUtilityDecider:OnActivatedBP() end
function USBZAIUtilityDecider:OnActivated() end


---@class USBZAIUtilityDecider_AIObjective : USBZAIUtilityDecider_AIObjectiveBase
---@field CurrentObjective TWeakObjectPtr<USBZAIObjectiveComponent>
---@field TargetObjectiveBBKey FName
USBZAIUtilityDecider_AIObjective = {}

function USBZAIUtilityDecider_AIObjective:OnCancelationTimer() end


---@class USBZAIUtilityDecider_AIObjectiveBase : USBZAIUtilityDecider
---@field Gates TArray<TWeakObjectPtr<ASBZGate>>
---@field CurrentGate int32
---@field StartLocation FVector
---@field PreviousLocation FVector
---@field CurrentGoalLocation FVector
---@field EndLocation FVector
---@field EndRoom ASBZRoomVolume
---@field MoveToLocationBBKey FName
---@field AcceptableRadius float
USBZAIUtilityDecider_AIObjectiveBase = {}

---@param InInteractable USBZBaseInteractableComponent
---@param InInteractor USBZInteractorComponent
---@param bIsLocallyControlled boolean
function USBZAIUtilityDecider_AIObjectiveBase:OnDoorInteractionCompleted(InInteractable, InInteractor, bIsLocallyControlled) end
function USBZAIUtilityDecider_AIObjectiveBase:ObjectiveInteractableChanged() end


---@class USBZAIUtilityDecider_AIObjectiveSearch : USBZAIUtilityDecider_AIObjectiveBase
---@field CurrentRoomToSearch TWeakObjectPtr<ASBZRoomVolume>
---@field TargetRoomBBKey FName
USBZAIUtilityDecider_AIObjectiveSearch = {}



---@class USBZAIUtilityDecider_Escort : USBZAIUtilityDecider
---@field EscortStates FSBZAIEscortStateData
---@field CurrentSuspect AActor
---@field Suspects TArray<FSBZSuspectData>
USBZAIUtilityDecider_Escort = {}



---@class USBZAIUtilityDecider_FollowOrder : USBZAIUtilityDecider
---@field CurrentOrder USBZAIOrder
---@field NewOrder USBZAIOrder
---@field InjectionTag FGameplayTag
USBZAIUtilityDecider_FollowOrder = {}



---@class USBZAIUtilityScorer : USBZAIScorer
USBZAIUtilityScorer = {}

function USBZAIUtilityScorer:OnSelectedBP() end
function USBZAIUtilityScorer:OnDeselectedBP() end
---@param NodeResult EBTNodeResult::Type
function USBZAIUtilityScorer:OnDeactivatedBP(NodeResult) end
function USBZAIUtilityScorer:OnActivatedBP() end
---@return float
function USBZAIUtilityScorer:CalcScoreBP() end


---@class USBZAIUtilityScorer_AnyPlayerVisibleFromAI : USBZAIUtilityScorer
---@field MaximumRangeToCheck float
---@field bUseIntimidationRagne boolean
USBZAIUtilityScorer_AnyPlayerVisibleFromAI = {}



---@class USBZAIUtilityScorer_CanAnticipateExplosion : USBZAIUtilityScorer
---@field TriggerChance float
---@field DetectionSettings USBZGrenadeDetectionSettings
USBZAIUtilityScorer_CanAnticipateExplosion = {}



---@class USBZAIUtilityScorer_CanEquipAtIndex : USBZAIUtilityScorer
---@field Index int32
USBZAIUtilityScorer_CanEquipAtIndex = {}



---@class USBZAIUtilityScorer_CanPerceivePlayerAction : USBZAIUtilityScorer
USBZAIUtilityScorer_CanPerceivePlayerAction = {}


---@class USBZAIUtilityScorer_CanSeeEnemy : USBZAIUtilityScorer
---@field BlackboardKey FName
USBZAIUtilityScorer_CanSeeEnemy = {}



---@class USBZAIUtilityScorer_CanThrowGrenade : USBZAIUtilityScorer
---@field MinimumEnemyDistance float
USBZAIUtilityScorer_CanThrowGrenade = {}



---@class USBZAIUtilityScorer_CoverSafeness : USBZAIUtilityScorer
---@field CoverBBKey FName
USBZAIUtilityScorer_CoverSafeness = {}



---@class USBZAIUtilityScorer_Crew_CoverSafeness : USBZAIUtilityScorer
USBZAIUtilityScorer_Crew_CoverSafeness = {}


---@class USBZAIUtilityScorer_Custom : USBZAIUtilityScorer
USBZAIUtilityScorer_Custom = {}


---@class USBZAIUtilityScorer_DistanceToActor : USBZAIUtilityScorer
---@field DistanceRange FFloatRange
---@field BlackboardKey FName
USBZAIUtilityScorer_DistanceToActor = {}



---@class USBZAIUtilityScorer_DistanceToGrenade : USBZAIUtilityScorer
---@field DetectionSettings USBZGrenadeDetectionSettings
USBZAIUtilityScorer_DistanceToGrenade = {}



---@class USBZAIUtilityScorer_EnemyHasHumanShield : USBZAIUtilityScorer
USBZAIUtilityScorer_EnemyHasHumanShield = {}


---@class USBZAIUtilityScorer_FriendlyFire : USBZAIUtilityScorer
---@field BlackboardKey FName
USBZAIUtilityScorer_FriendlyFire = {}



---@class USBZAIUtilityScorer_HasBBValue : USBZAIUtilityScorer
---@field BlackboardKey FName
---@field KeyType TSubclassOf<UBlackboardKeyType>
USBZAIUtilityScorer_HasBBValue = {}



---@class USBZAIUtilityScorer_HasFollowTarget : USBZAIUtilityScorer
USBZAIUtilityScorer_HasFollowTarget = {}


---@class USBZAIUtilityScorer_HasNotSucceeded : USBZAIUtilityScorer
USBZAIUtilityScorer_HasNotSucceeded = {}


---@class USBZAIUtilityScorer_HasRelocationRequest : USBZAIUtilityScorer
USBZAIUtilityScorer_HasRelocationRequest = {}


---@class USBZAIUtilityScorer_HasTag : USBZAIUtilityScorer
---@field TagToCheck FGameplayTag
---@field BlackboardKey FName
USBZAIUtilityScorer_HasTag = {}



---@class USBZAIUtilityScorer_HasTakenDamage : USBZAIUtilityScorer
---@field Time float
---@field MaxDamage float
USBZAIUtilityScorer_HasTakenDamage = {}



---@class USBZAIUtilityScorer_Healthiness : USBZAIUtilityScorer
USBZAIUtilityScorer_Healthiness = {}


---@class USBZAIUtilityScorer_HeistState : USBZAIUtilityScorer
---@field AllowedStates uint8
USBZAIUtilityScorer_HeistState = {}



---@class USBZAIUtilityScorer_IsAssaultActive : USBZAIUtilityScorer
---@field PhasesToCheck uint8
USBZAIUtilityScorer_IsAssaultActive = {}



---@class USBZAIUtilityScorer_IsCriminal : USBZAIUtilityScorer
---@field BlackboardKey FName
USBZAIUtilityScorer_IsCriminal = {}



---@class USBZAIUtilityScorer_IsEvading : USBZAIUtilityScorer
---@field Bonus float
USBZAIUtilityScorer_IsEvading = {}



---@class USBZAIUtilityScorer_IsInCover : USBZAIUtilityScorer
---@field CurrentCoverPointBBKey FName
USBZAIUtilityScorer_IsInCover = {}



---@class USBZAIUtilityScorer_IsMoving : USBZAIUtilityScorer
USBZAIUtilityScorer_IsMoving = {}


---@class USBZAIUtilityScorer_IsOnStreet : USBZAIUtilityScorer
USBZAIUtilityScorer_IsOnStreet = {}


---@class USBZAIUtilityScorer_IsPathing : USBZAIUtilityScorer
USBZAIUtilityScorer_IsPathing = {}


---@class USBZAIUtilityScorer_IsPrimaryEquipped : USBZAIUtilityScorer
USBZAIUtilityScorer_IsPrimaryEquipped = {}


---@class USBZAIUtilityScorer_PlayerDefeatState : USBZAIUtilityScorer
---@field States uint16
---@field BlackboardKey FName
USBZAIUtilityScorer_PlayerDefeatState = {}



---@class USBZAIUtilityScorer_Room : USBZAIUtilityScorer
---@field BlackboardKey FName
---@field RoomType ESBZRoomType
USBZAIUtilityScorer_Room = {}



---@class USBZAIUtilityScorer_TimeSinceTimestamp : USBZAIUtilityScorer
---@field BlackboardKey FName
---@field MaxScoreTime float
USBZAIUtilityScorer_TimeSinceTimestamp = {}



---@class USBZAIUtilityScorer_Timer : USBZAIUtilityScorer
---@field TimerSetting uint8
---@field TimeStamp float
---@field Timer float
USBZAIUtilityScorer_Timer = {}



---@class USBZAIUtilityScorer_VisualDetection : USBZAIUtilityScorer
USBZAIUtilityScorer_VisualDetection = {}


---@class USBZAIUtilityScorer_WeaponPreferredRange : USBZAIUtilityScorer
---@field BlackboardKey FName
---@field AdditionalRange float
USBZAIUtilityScorer_WeaponPreferredRange = {}



---@class USBZAIUtilityScorer_WithinRange : USBZAIUtilityScorer
---@field Distance float
---@field Target ESBZRangeTestTargetType
USBZAIUtilityScorer_WithinRange = {}



---@class USBZAIVisibilityComponent : UActorComponent
---@field bReadyForUse boolean
---@field bIsInRandomSublevel boolean
---@field CollisionChannel ECollisionChannel
---@field CharacterStandHeight float
---@field CharacterCrouchHeight float
---@field NbSubRaycastPerPolarCoord int32
---@field MaxSubRaycastSideDistFromCenter float
---@field NbSubRaycastPerPolarCoordCoverPoint int32
---@field MaxSubRaycastSideDistFromCenterCoverPoint float
---@field bHasFinishedBuilding boolean
---@field bIsParsingDynNode boolean
---@field bDynVerticesHavedBeenTransformed boolean
USBZAIVisibilityComponent = {}



---@class USBZAIVisualDetectionComponent : UActorComponent
---@field VisionDegradeSpeed float
---@field VisionDegradeDelay float
---@field SightDetectionCurve FRuntimeFloatCurve
---@field bMarkAsCriminalOnSearch boolean
---@field bShouldDisplayDetectionBuildup boolean
---@field IllegalActionGracePeriod float
---@field MaxLagCompensation float
---@field IgnoreDisplayTagContainer FGameplayTagContainer
---@field bOnlyDetectMovement boolean
---@field bShouldPauseDetectionOnCriminal boolean
---@field EnemyDetectionValue TArray<FSBZVisualDetectionValues>
USBZAIVisualDetectionComponent = {}

---@param Target AActor
function USBZAIVisualDetectionComponent:OnTargetIllegalAction(Target) end
---@param Actor AActor
---@param Stimulus FAIStimulus
function USBZAIVisualDetectionComponent:OnPerceptionUpdated(Actor, Stimulus) end
---@param TargetPawn APawn
function USBZAIVisualDetectionComponent:OnLifetimeChanged(TargetPawn) end
---@param HostageState uint8
function USBZAIVisualDetectionComponent:OnHostageStateChanged(HostageState) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZAIVisualDetectionComponent:OnGameStateChanged(OldState, NewState) end
---@param Pawn APawn
function USBZAIVisualDetectionComponent:HandleOnNewPawn(Pawn) end


---@class USBZAIWeakPoint : UStaticMeshComponent
---@field WeakPointHealth float
---@field DestroyedEffect UNiagaraSystem
---@field DestroyedEvent UAkAudioEvent
---@field WeakPointAttributeSet USBZAIWeakPointAttributeSet
---@field DestroyedInstigator AActor
---@field WeakPointType ESBZAIWeakPointType
---@field HideInfo TArray<FSBZWeakpointHideInfo>
USBZAIWeakPoint = {}

function USBZAIWeakPoint:Multicast_OnWeakPointDestroyed() end


---@class USBZAIWeakPointAttributeSet : USBZAICharacterAttributeSet
---@field WeakPointHealth FGameplayAttributeData
---@field WeakPoint USBZAIWeakPoint
---@field Instigator AActor
USBZAIWeakPointAttributeSet = {}

---@param OldValue FGameplayAttributeData
function USBZAIWeakPointAttributeSet:OnRep_WeakPointHealth(OldValue) end
---@param NewCurrentValue float
function USBZAIWeakPointAttributeSet:Multicast_SetWeakPointHealth(NewCurrentValue) end


---@class USBZAIWeaponFireData : USBZWeaponFireData
---@field Damage TMap<ESBZDifficulty, float>
---@field DamageModifierCurve UCurveFloat
---@field ChanceToHit TMap<ESBZDifficulty, float>
---@field AccuracyModifierCurve UCurveFloat
---@field PreferredTimeToFire float
---@field BurtsSelectionCurve UCurveFloat
---@field BurstRandomization float
---@field PreferredRange uint32
---@field bDamageAccuracyModified boolean
---@field bSliceProjectiles boolean
USBZAIWeaponFireData = {}



---@class USBZAIWeaponMeleeAttackData : USBZWeaponMeleeAttackData
---@field Damage TMap<ESBZDifficulty, float>
---@field ArmorPenetration float
---@field DamageInterval float
USBZAIWeaponMeleeAttackData = {}



---@class USBZAbilityInputActionWidget : USBZPlayerStateWidgetBase
---@field GameplayAbilityTag FGameplayTag
---@field bCanActivate boolean
---@field Character ASBZCharacter
---@field GameplayAbility USBZGameplayAbility
---@field GameplayAbilityHandle FGameplayAbilitySpecHandle
USBZAbilityInputActionWidget = {}

---@param DestroyedActor AActor
function USBZAbilityInputActionWidget:OnPlayerStateDestroyed(DestroyedActor) end
---@param bInCanActivate boolean
function USBZAbilityInputActionWidget:OnActivateAbilityStateChanged(bInCanActivate) end


---@class USBZAbilitySystemComponent : UAbilitySystemComponent
---@field Character ASBZCharacter
---@field InputToggledContainer FGameplayTagContainer
---@field QueuedAbilityArray TArray<FSBZQueuedAbilityData>
---@field LandingGameplayEffectClass TSubclassOf<UGameplayEffect>
---@field AppliedVolumeDamageNetIDArray TArray<uint32>
---@field AppliedVolumeDamageArray TArray<UObject>
---@field CurrentVolumeDamageDataArray TArray<FSBZVolumeDamageData>
---@field LastVolumeDamageTypeUpdateTimeMap TMap<TSubclassOf<USBZDamageType>, float>
USBZAbilitySystemComponent = {}

---@param ExplosiveObject UObject
---@param Result FSBZExplosionResult
---@param PredictionKey FPredictionKey
function USBZAbilitySystemComponent:Server_ReplicateExplosion(ExplosiveObject, Result, PredictionKey) end
function USBZAbilitySystemComponent:Server_MaskOn() end
function USBZAbilitySystemComponent:OnRep_AppliedVolumeDamageNetIDArray() end
---@param InCharacter ACharacter
---@param PrevMovementMode EMovementMode
---@param PreviousCustomMode uint8
function USBZAbilitySystemComponent:OnMovementModeChanged(InCharacter, PrevMovementMode, PreviousCustomMode) end
---@param ActorMultiHitResult FSBZActorMultiHitResult
function USBZAbilitySystemComponent:Multicast_ShoveHumanShield(ActorMultiHitResult) end
---@param TargetData FSBZMeleeTargetData
function USBZAbilitySystemComponent:Multicast_Melee(TargetData) end
function USBZAbilitySystemComponent:Multicast_MaskOn() end
---@param TargetData FSBZFallDamageTargetData
function USBZAbilitySystemComponent:Multicast_Landed(TargetData) end
---@param TargetData FSBZProjectileTargetData
function USBZAbilitySystemComponent:Multicast_FireProjectileSentry(TargetData) end
---@param TargetData FSBZProjectileTargetData
function USBZAbilitySystemComponent:Multicast_FireProjectile(TargetData) end
function USBZAbilitySystemComponent:Multicast_FireGrenadeProjectile() end
---@param NetID uint32
function USBZAbilitySystemComponent:Multicast_ExitVolumeDamage(NetID) end
---@param NetID uint32
function USBZAbilitySystemComponent:Multicast_EnterVolumeDamage(NetID) end
---@param EffectSpec FGameplayEffectSpec
---@param Duration float
---@param NameMagnitudeString FString
function USBZAbilitySystemComponent:Multicast_DebugApplyGameplayEffectSpecToSelf(EffectSpec, Duration, NameMagnitudeString) end
---@param EffectSpec FGameplayEffectSpec
function USBZAbilitySystemComponent:Multicast_ApplyGameplayEffectSpecToSelf(EffectSpec) end
---@param SkillTriggeredHurtTargetData FSBZSkillTriggeredHurtTargetData
function USBZAbilitySystemComponent:Multicast_AppliedSkillHurtReaction(SkillTriggeredHurtTargetData) end
---@param AttributeSetDataArray TArray<FSBZRevertDamageAttributeSetData>
function USBZAbilitySystemComponent:Client_RevertDamageAttributeSetArray(AttributeSetDataArray) end
---@param AttributeSetData FSBZRevertDamageAttributeSetData
function USBZAbilitySystemComponent:Client_RevertDamageAttributeSet(AttributeSetData) end
---@param InCharacter ASBZCharacter
---@param HurtReactionIndex int32
function USBZAbilitySystemComponent:Client_PredictedRagdollDenied(InCharacter, HurtReactionIndex) end


---@class USBZAbilitySystemGlobals : UAbilitySystemGlobals
USBZAbilitySystemGlobals = {}


---@class USBZAccelByteAdminHelper : UDeveloperSettings
---@field GauntletOAuthClientId FString
---@field GauntletOAuthClientSecret FString
---@field BaseUrl FString
---@field Namespace FString
---@field LogoutTimerHandle FTimerHandle
---@field MetaDataLoader USBZMetaDataLoader
USBZAccelByteAdminHelper = {}

---@param Email FString
---@param Username FString
---@param Password FString
function USBZAccelByteAdminHelper:CheckLogoutDone(Email, Username, Password) end


---@class USBZAccelByteArgs : UBlueprintFunctionLibrary
USBZAccelByteArgs = {}


---@class USBZAccelByteDS : UObject
USBZAccelByteDS = {}


---@class USBZAccelByteDSV1 : USBZAccelByteDS
---@field CheckPlayerArraySessionInterval float
---@field PlayerCountingInterval float
---@field MaxServerLoginAttempts int32
---@field PollMatchmakingSessionInterval float
USBZAccelByteDSV1 = {}



---@class USBZAccelByteDSV2 : USBZAccelByteDS
---@field MaxServerLoginAttempts int32
---@field PollPlayerCountInterval float
USBZAccelByteDSV2 = {}



---@class USBZAccelByteNetworkErrorManager : UObject
---@field NotifyWidget USBZWidgetBase
USBZAccelByteNetworkErrorManager = {}

function USBZAccelByteNetworkErrorManager:ValidateFailedInternetConnection() end
function USBZAccelByteNetworkErrorManager:PollAccelTimeService() end
---@param WorldContextObject UObject
---@return USBZAccelByteNetworkErrorManager
function USBZAccelByteNetworkErrorManager:Get(WorldContextObject) end


---@class USBZAccelByteServerLifeCycle : UObject
---@field ShutdownTimeDsLoading float
---@field ShutdownTimeDsWaitingForPlayers float
---@field ShutdownTimeDsWaitingForPlayersShort float
---@field ShutdownTimeDsActionPhase float
---@field ShutdownTimeDsResult float
USBZAccelByteServerLifeCycle = {}

function USBZAccelByteServerLifeCycle:OnNetDriverTearDown() end


---@class USBZAccelByteUser : UObject
---@field Country FString
---@field City FString
USBZAccelByteUser = {}



---@class USBZAccelByteUserImplentation : USBZAccelByteUser
USBZAccelByteUserImplentation = {}

---@param OldUserIndex int32
function USBZAccelByteUserImplentation:HandlePlatformUserChanged(OldUserIndex) end


---@class USBZAccelByteUserNull : USBZAccelByteUser
USBZAccelByteUserNull = {}


---@class USBZAchievementManager : UObject
USBZAchievementManager = {}

function USBZAchievementManager:OnInitializedChallengeRecordsCacheDone() end
---@param ChallengeData FSBZChallengeData
function USBZAchievementManager:OnChallengeCompleted(ChallengeData) end
---@param OldUserIndex int32
function USBZAchievementManager:HandlePlatformUserChanged(OldUserIndex) end
---@param WorldContextObject UObject
---@return USBZAchievementManager
function USBZAchievementManager:GetAchievementManager(WorldContextObject) end
---@param AchievementIds TArray<FName>
function USBZAchievementManager:CompleteAchievements(AchievementIds) end
---@param AchievementId FName
function USBZAchievementManager:CompleteAchievement(AchievementId) end


---@class USBZActionInputWidget : USBZWidgetBase
---@field ActionName FName
---@field bConsumeInput boolean
---@field bIsActionPressed boolean
---@field KeyWidget USBZInputKeyWidget
---@field bIsIconVisibleForKeyboardAndMouse boolean
USBZActionInputWidget = {}

---@param InActionName FName
---@param bShouldConsumeInput boolean
function USBZActionInputWidget:SetAction(InActionName, bShouldConsumeInput) end
function USBZActionInputWidget:OnActionReleased() end
function USBZActionInputWidget:OnActionPressed() end
function USBZActionInputWidget:ActionReleased() end
function USBZActionInputWidget:ActionPressed() end


---@class USBZActionNotificationAsset : UDataAsset
---@field NewHeistState EPD3HeistState
---@field ReasonText FText
---@field DisplayTime float
---@field AudioEvent UAkAudioEvent
---@field VoiceComment USBZVoiceCommentDataAsset
---@field VoicePriority ESBZVoicePriority
USBZActionNotificationAsset = {}



---@class USBZActionPhaseBaseWidget : USBZHUDWidgetBase
---@field Widget_Playing USBZWidgetBase
---@field Widget_Spectating USBZWidgetBase
---@field Widget_Shared USBZWidgetBase
---@field Widget_ControlsReference USBZControlsReferenceWidget
USBZActionPhaseBaseWidget = {}

---@param UIStackStateChangedEvent FSBZUIStackChangedEvent
function USBZActionPhaseBaseWidget:OnStackStateChanged(UIStackStateChangedEvent) end
---@param bIsStackLocked boolean
function USBZActionPhaseBaseWidget:OnStackLockChanged(bIsStackLocked) end
---@param PlayerController ASBZPlayerController
---@param OldStateName FName
---@param NewStateName FName
function USBZActionPhaseBaseWidget:OnControllerStateChanged(PlayerController, OldStateName, NewStateName) end
---@param InControlsReference FSBZControlsReference
function USBZActionPhaseBaseWidget:OnActiveControlsReferenceChanged(InControlsReference) end
function USBZActionPhaseBaseWidget:HideControlsReference() end


---@class USBZActionPhaseMenuWidget : USBZBaseMenuWidget
---@field Widget_NavBar USBZMenuNavBar
---@field MenuStackValue FName
---@field bIsMenuShown boolean
USBZActionPhaseMenuWidget = {}

function USBZActionPhaseMenuWidget:ToggleShowMenu() end
---@param bIsShown boolean
function USBZActionPhaseMenuWidget:OnMenuShown(bIsShown) end


---@class USBZActivateReplenishHealthEffect : UGameplayEffect
USBZActivateReplenishHealthEffect = {}


---@class USBZActorChannel : UActorChannel
USBZActorChannel = {}


---@class USBZActorContainer : USBZObjectContainer
USBZActorContainer = {}

---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function USBZActorContainer:OnActorEndPlay(Actor, EndPlayReason) end


---@class USBZActorContainerLibrary : UBlueprintFunctionLibrary
USBZActorContainerLibrary = {}

---@param Container USBZActorContainer
---@param Location FVector
---@return AActor
function USBZActorContainerLibrary:FindNearestActorFromContainer(Container, Location) end
---@param Container USBZActorContainer
---@param Position FVector
---@param Distance float
---@return TArray<AActor>
function USBZActorContainerLibrary:FindNearbyActorsFromContainer(Container, Position, Distance) end


---@class USBZActorFilterComponent : UActorComponent
---@field WeakPrimitiveComponent TWeakObjectPtr<UPrimitiveComponent>
---@field PrimitiveComponent UPrimitiveComponent
---@field CachedCollisionEnabledState ECollisionEnabled::Type
---@field FilterDefinitions TArray<FSBZActorFilterDefinition>
---@field bDisableWhenActorBeginsOverlapping boolean
---@field bDisableWhenDesiredCountReached boolean
---@field bDisableWhenAllDesiredCountsReached boolean
---@field bAlwaysBroadcastOverlapEndEvents boolean
---@field FilteredActorBeginOverlapping FSBZActorFilterComponentFilteredActorBeginOverlapping
---@field FilteredActorEndOverlapping FSBZActorFilterComponentFilteredActorEndOverlapping
---@field FilterHasDesiredCountChanged FSBZActorFilterComponentFilterHasDesiredCountChanged
---@field FiltersAllHaveDesiredCountsChanged FSBZActorFilterComponentFiltersAllHaveDesiredCountsChanged
USBZActorFilterComponent = {}

---@param bEnabled boolean
function USBZActorFilterComponent:SetPrimitiveComponentEnableCollision(bEnabled) end
---@param NewPrimitiveComponent UPrimitiveComponent
function USBZActorFilterComponent:SetPrimitiveComponent(NewPrimitiveComponent) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function USBZActorFilterComponent:OnComponentEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function USBZActorFilterComponent:OnComponentBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end


---@class USBZActorPoolManager : UActorComponent
---@field Pools TMap<TSubclassOf<AActor>, FSBZActorPool>
---@field ReturnActorTimerHandles TMap<AActor, FTimerHandle>
USBZActorPoolManager = {}

---@param Actor AActor
---@param Delay float
function USBZActorPoolManager:ReturnActor(Actor, Delay) end
function USBZActorPoolManager:OnExitedActionPhase() end
---@param DestroyedActor AActor
function USBZActorPoolManager:OnActorDestroyed(DestroyedActor) end
---@param World UWorld
---@param ActorClass TSubclassOf<AActor>
---@param Count int32
function USBZActorPoolManager:InitPool(World, ActorClass, Count) end
---@param World UWorld
---@param ActorClass TSubclassOf<AActor>
---@return AActor
function USBZActorPoolManager:GetActor(World, ActorClass) end
---@param WorldContextObject UObject
---@return USBZActorPoolManager
function USBZActorPoolManager:Get(WorldContextObject) end


---@class USBZActorRingBuffer : USBZObjectRingBuffer
USBZActorRingBuffer = {}

---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function USBZActorRingBuffer:OnActorEndPlay(Actor, EndPlayReason) end


---@class USBZActorSpawnRequestData : UDataAsset
---@field ClassVariationArray TArray<TSubclassOf<AActor>>
USBZActorSpawnRequestData = {}



---@class USBZAddGameplayTagNotifyState : UAnimNotifyState
---@field Tags FGameplayTagContainer
USBZAddGameplayTagNotifyState = {}



---@class USBZAerialVehicleAnimation : USBZVehicleAnimation
USBZAerialVehicleAnimation = {}


---@class USBZAerialVehicleAudioComponent : USBZAmbientSoundComponent
---@field EngineSoundEvent UAkAudioEvent
---@field EngineStopSoundEvent UAkAudioEvent
---@field CollisionTyresSoundEvent UAkAudioEvent
---@field CollisionBodySoundEvent UAkAudioEvent
---@field RadioSoundEvent UAkAudioEvent
---@field RadioStopSoundEvent UAkAudioEvent
---@field SpotlightOnSoundEvent UAkAudioEvent
---@field SpotlightOffSoundEvent UAkAudioEvent
---@field EngineRTPC UAkRtpc
---@field CollisionTyresRTPC UAkRtpc
---@field CollisionBodyRTPC UAkRtpc
---@field EngineSoundMultiplicationValue float
---@field TyreSoundMultiplicationValue float
USBZAerialVehicleAudioComponent = {}

function USBZAerialVehicleAudioComponent:StopEngineSound() end
---@param EngineValue float
function USBZAerialVehicleAudioComponent:SetVehicleEngineSpeed(EngineValue) end
---@param CollisionSpeedValue float
function USBZAerialVehicleAudioComponent:SetTyreCollisionImpact(CollisionSpeedValue) end
---@param CollisionSpeedValue float
function USBZAerialVehicleAudioComponent:SetBodyCollisionImpact(CollisionSpeedValue) end
---@param bValue boolean
function USBZAerialVehicleAudioComponent:PlayVehicleRadioSound(bValue) end
---@param CollisionValue float
function USBZAerialVehicleAudioComponent:PlayVehicleCollisionSound(CollisionValue) end
---@param CollisionValue float
function USBZAerialVehicleAudioComponent:PlayTyreCollisionSound(CollisionValue) end
---@param bValue boolean
function USBZAerialVehicleAudioComponent:PlaySpotlightSound(bValue) end
---@param EngineValue float
function USBZAerialVehicleAudioComponent:PlayEngineSound(EngineValue) end
function USBZAerialVehicleAudioComponent:DisableSounds() end


---@class USBZAerialVehicleSplineFollowingComponent : USBZVehicleSplineFollowingComponent
USBZAerialVehicleSplineFollowingComponent = {}


---@class USBZAerialVehicleStateMachine : UObject
---@field CurrentState TScriptInterface<ISBZAerialVehicleState>
---@field States TMap<FName, TScriptInterface<ISBZAerialVehicleState>>
USBZAerialVehicleStateMachine = {}



---@class USBZAgentManager : UActorComponent
---@field PostPhysicsTickFunction FSBZAgentManagerPostPhysicsTickFunction
USBZAgentManager = {}

---@param ClientId uint64
---@param Data TArray<uint8>
function USBZAgentManager:ServerUnreliableRPC(ClientId, Data) end
---@param ClientId uint64
---@param Data TArray<uint8>
function USBZAgentManager:ServerReliableRPC(ClientId, Data) end
---@param Challenge FString
function USBZAgentManager:HandshakeRPC(Challenge) end
---@param Challenge FString
---@param PrivateId uint64
function USBZAgentManager:HandshakeReplyRPC(Challenge, PrivateId) end
---@param NavData ANavigationData
function USBZAgentManager:HandleNavDataRegistered(NavData) end
---@param Data TArray<uint8>
function USBZAgentManager:ClientUnreliableRPC(Data) end
---@param Data TArray<uint8>
function USBZAgentManager:ClientReliableRPC(Data) end
---@param ClientId uint64
function USBZAgentManager:ClientInitializedRPC(ClientId) end


---@class USBZAgentPathFollowingComponent : UPathFollowingComponent
---@field PathFocalDistance float
---@field PathViewFocalDistance float
---@field bUseSplineSteering boolean
---@field bDebugDrawSpline boolean
---@field AgentMovementComp USBZAICharacterMovementComponent
---@field AgentCharacter ASBZAIBaseCharacter
---@field PathAccessibilityCheckInterval FFloatRange
---@field MaxDistFromPathBeforeInvalidation float
---@field DefaultSteeringDistanceOffset float
---@field TrafficCrossingSteeringDistanceOffset float
---@field MinDistFromTrafficSlotToAlign float
---@field MinDistFromLifeActionSlotToAlign float
---@field TraversalSlowDownAngleRange FFloatRange
---@field CurTrafficNavLink ASBZPedestrianTrafficNavLink
---@field CachedCurrentNavAreaClass UClass
USBZAgentPathFollowingComponent = {}



---@class USBZAgentsFunctionLibrary : UBlueprintFunctionLibrary
USBZAgentsFunctionLibrary = {}

---@param SBZCharacter ASBZCharacter
---@param bCrouched boolean
function USBZAgentsFunctionLibrary:SetCrouched(SBZCharacter, bCrouched) end


---@class USBZAgilityBreachDamageType : USBZExplosionDamageType
USBZAgilityBreachDamageType = {}


---@class USBZAgilityDeltaCorrectionNS : USBZDeltaCorrectionNotifyState
---@field TargetPointType ESBZAgilityPointType
---@field WarpingDirection ESBZAgilityWarpingDirection
---@field bRecomputeUsingAnimation boolean
---@field bWarpOnYZOnly boolean
---@field bWarpOnXZOnly boolean
---@field TargetPointTypeToRecomputeFrom ESBZAgilityPointType
USBZAgilityDeltaCorrectionNS = {}



---@class USBZAgilityQueryParams : UPrimaryDataAsset
---@field Radius float
---@field ObstacleDetectionProfileName FName
---@field RowQueryParams TArray<FSBZAgilityRowQueryParam>
USBZAgilityQueryParams = {}



---@class USBZAgilitySlideParams : UDataAsset
---@field VelocityAngleAlpha float
---@field MaxAngle float
---@field MaxDistance float
---@field MinDistance float
---@field HeightSlideOver float
---@field SpeedCurve FRuntimeFloatCurve
---@field LockCameraData FSBZLockCameraData
---@field ToleranceTimeToSlide float
---@field SlideDistanceModifier FRuntimeFloatCurve
---@field SlideSpeedModifier FRuntimeFloatCurve
---@field bUseSlopeModifiers boolean
---@field SlopeDistanceModifier FRuntimeFloatCurve
---@field SlopeSpeedModifier FRuntimeFloatCurve
---@field EntryHeightTransitionCameraSettings FSBZHeightTransitionCameraSettings
---@field ExitHeightTransitionCameraSettings FSBZHeightTransitionCameraSettings
---@field bUseEntrySpeed boolean
---@field MinEntrySpeed float
---@field EntrySpeedBoost float
---@field DistFromEndToPlayExit float
---@field LocalDistFromEndToPlayExit float
---@field CancelingBackInputAlpha float
USBZAgilitySlideParams = {}



---@class USBZAgilityTraversalQueryParams : UDataAsset
---@field MaxAngleToWall float
---@field ObstacleDetectionProfileName FName
---@field MaxSearchIterationCount int32
---@field RadiusShrinkFactor float
---@field FootHeightTolerance float
---@field CapsuleRadius float
---@field CapsuleHalfHeightStanding float
---@field CapsuleHalfHeightCrouching float
---@field CapsuleHalfHeightTraversing float
---@field bKeepLandPointOnFloor boolean
---@field MaxReflectionAngle float
---@field Agilities TArray<FSBZAgilityTraversalQueryParamsRow>
USBZAgilityTraversalQueryParams = {}



---@class USBZAimAssistComponent : UActorComponent
---@field PlayerCharacter ASBZPlayerCharacter
---@field CurrentTarget AActor
---@field LastTarget AActor
---@field BulletMagnetismCandidateArray TArray<FSBZTargetCandidate>
---@field MaxFireTime float
USBZAimAssistComponent = {}



---@class USBZAkSoundLibrary : UBlueprintFunctionLibrary
USBZAkSoundLibrary = {}

---@param AkEvent UAkAudioEvent
---@param EarlyReflectionsBus UAkAuxBus
---@param AttachToComponent USceneComponent
---@param PoolType ESBZAkPoolType
---@param AttachPointName FName
---@param AutoPost boolean
---@param EventName FString
---@param EarlyReflectionsBusName FString
---@param AutoDestroy boolean
---@return UAkComponent
function USBZAkSoundLibrary:SpawnAkComponentAttached(AkEvent, EarlyReflectionsBus, AttachToComponent, PoolType, AttachPointName, AutoPost, EventName, EarlyReflectionsBusName, AutoDestroy) end


---@class USBZAllowConversationDialogNotifyState : UAnimNotifyState
USBZAllowConversationDialogNotifyState = {}


---@class USBZAllowPhoneDialogNotifyState : UAnimNotifyState
USBZAllowPhoneDialogNotifyState = {}


---@class USBZAllowSoloDialogNotifyState : UAnimNotifyState
USBZAllowSoloDialogNotifyState = {}


---@class USBZAmbientSoundComponent : USceneComponent
---@field AkAudioEvent UAkAudioEvent
---@field AmbientAkComponent UAkComponent
---@field bIsSoundComponentEnabled boolean
---@field EventName FString
---@field ActiveAreaAttenuationScale float
---@field DefaultAttenuation float
---@field bUseDefaultAttenuation boolean
---@field AudioSwitches TMap<FString, FString>
---@field StartPoint FVector
---@field EndPoint FVector
---@field bHasEndpoints boolean
---@field AttenuationSquared float
USBZAmbientSoundComponent = {}

---@param SwitchValue UAkSwitchValue
---@param InSwitchGroup FString
---@param InSwitchState FString
function USBZAmbientSoundComponent:SetSwitchState(SwitchValue, InSwitchGroup, InSwitchState) end
---@param InRtpc UAkRtpc
---@param Value float
---@param InterpolationTime int32
function USBZAmbientSoundComponent:SetRTPCValue(InRtpc, Value, InterpolationTime) end
---@param InAkAudioEvent UAkAudioEvent
function USBZAmbientSoundComponent:SetAudioEvent(InAkAudioEvent) end
---@return boolean
function USBZAmbientSoundComponent:IsAmbientSoundComponentEnabled() end
---@return float
function USBZAmbientSoundComponent:GetAttenuation() end
function USBZAmbientSoundComponent:EnableAmbientSoundComponent() end
---@param AkAudioCloseEvent UAkAudioEvent
---@param EventName FString
function USBZAmbientSoundComponent:DisableAmbientSoundComponent(AkAudioCloseEvent, EventName) end


---@class USBZAmbientSoundRadioComponent : USBZAmbientSoundComponent
---@field RadioSoundEvent UAkAudioEvent
---@field RadioStopSoundEvent UAkAudioEvent
---@field RadioPlayingChance int32
USBZAmbientSoundRadioComponent = {}

---@param bValue boolean
function USBZAmbientSoundRadioComponent:PlayRadioSoundRand(bValue) end
---@param bValue boolean
function USBZAmbientSoundRadioComponent:PlayRadioSound(bValue) end


---@class USBZAnalyticsManager : UObject
---@field AnalyticsProvider USBZAnalyticsProvider
---@field GameLaunchedTimestamp FDateTime
---@field LastScreenUpdate float
---@field HeartbeatWorldContextObject UObject
USBZAnalyticsManager = {}

---@param InfamyManager USBZInfamyManager
---@param NewInfamyExperience int32
---@param PreviousInfamyExperience int32
function USBZAnalyticsManager:SendInfamyChanged(InfamyManager, NewInfamyExperience, PreviousInfamyExperience) end
---@param ChallengeData FSBZChallengeData
function USBZAnalyticsManager:SendChallengeCompleted(ChallengeData) end


---@class USBZAnimatedCameraModifier : USBZPlayerCameraModifier
---@field CameraSocket FName
USBZAnimatedCameraModifier = {}



---@class USBZAnimationSpawnedActorSettings : UDataAsset
---@field ActorToSpawn TSubclassOf<ASBZCosmeticProp>
---@field AttachmentBone FName
---@field AttachmentOffset FTransform
---@field DespawnDelay float
---@field bDropIfInterrupted boolean
---@field DespawnDelayInterrupted float
---@field CompatibleStancesToDrop int32
---@field CPDs TArray<FSBZAnimationSpawnedActorCPD>
USBZAnimationSpawnedActorSettings = {}



---@class USBZApplyMarkedTagEffect : UGameplayEffect
USBZApplyMarkedTagEffect = {}


---@class USBZArmMicroCameraAbility : USBZGameplayAbility
---@field OwnerCharacter ASBZPlayerCharacter
USBZArmMicroCameraAbility = {}



---@class USBZArmorData : USBZInventoryBaseData
---@field GameplayEffectArray TArray<TSubclassOf<UGameplayEffect>>
---@field ArmorDamageScaleOverrideDataArray TArray<FSBZArmorDamageScaleOverrideData>
USBZArmorData = {}



---@class USBZArmorDatabase : USBZItemDatabase
---@field ArmorArray TArray<USBZArmorData>
USBZArmorDatabase = {}



---@class USBZArrayLibrary : UBlueprintFunctionLibrary
USBZArrayLibrary = {}

---@param Array TArray<UObject>
---@param OutArray TArray<UObject>
---@param SortCallback FSortArraySortCallback
function USBZArrayLibrary:SortArray(Array, OutArray, SortCallback) end
---@param Array TArray<UObject>
---@param OutArray TArray<UObject>
---@param SelectCallback FSelectArraySelectCallback
---@param Limit int32
---@return int32
function USBZArrayLibrary:SelectArray(Array, OutArray, SelectCallback, Limit) end
---@param Array TArray<UObject>
---@param SelectCallback FFindArraySelectCallback
---@return UObject
function USBZArrayLibrary:FindArray(Array, SelectCallback) end


---@class USBZArrowComponent : UPrimitiveComponent
---@field From AActor
---@field To AActor
USBZArrowComponent = {}



---@class USBZAscendState : UObject
---@field StateMachine USBZAerialVehicleStateMachine
USBZAscendState = {}



---@class USBZAssaultCountStatisticCriteriaData : USBZStatisticCriteriaData
---@field NumberOfAssaultsCompleted int32
USBZAssaultCountStatisticCriteriaData = {}



---@class USBZAssaultVehicleSpawnerData : UDataAsset
---@field Vehicle TSubclassOf<AActor>
---@field MaxNumSpawns int32
---@field AllowedPawnTypes FGameplayTagContainer
---@field bUseInitialSpawn boolean
---@field InitialSpawnNum FInt32Interval
---@field bInitialSpawnOnly boolean
USBZAssaultVehicleSpawnerData = {}



---@class USBZAssetDatabaseManager : UObject
---@field AssetItemSkuMap TMap<FString, USBZItemDataContainer>
---@field AssetItemIdMap TMap<FGuid, USBZItemDataContainer>
USBZAssetDatabaseManager = {}



---@class USBZAssetLookupData : UDataAsset
---@field PhysicalMaterialPtrArray TArray<TWeakObjectPtr<UPhysicalMaterial>>
---@field PhysicalMaterialPtrToArrayMap TMap<TWeakObjectPtr<UPhysicalMaterial>, int32>
---@field PhysicalMaterialArray TArray<UPhysicalMaterial>
---@field PhysicalMaterialIndexBitCount int32
USBZAssetLookupData = {}



---@class USBZAssetManager : UAssetManager
---@field AssetLookupData USBZAssetLookupData
USBZAssetManager = {}



---@class USBZAssetManagerSettings : USBZDeveloperSettings
---@field PhysicalMaterialPathArray TArray<FDirectoryPath>
---@field SoftAssetLookupData TSoftObjectPtr<USBZAssetLookupData>
USBZAssetManagerSettings = {}



---@class USBZAttractorPredicate : UObject
USBZAttractorPredicate = {}


---@class USBZAttractorPredicate_HasVisibility : USBZAttractorPredicate
USBZAttractorPredicate_HasVisibility = {}


---@class USBZAttractorPredicate_IsPerceived : USBZAttractorPredicate
USBZAttractorPredicate_IsPerceived = {}


---@class USBZAttractorPredicate_RoomSoundDistance : USBZAttractorPredicate
USBZAttractorPredicate_RoomSoundDistance = {}


---@class USBZAudioRaycasting : UObject
USBZAudioRaycasting = {}


---@class USBZAutoSectionSwitchNotifyState : UAnimNotifyState
---@field SectionName FName
USBZAutoSectionSwitchNotifyState = {}



---@class USBZAvatarCache : UObject
---@field AvatarTextureCache TArray<UTexture2D>
USBZAvatarCache = {}



---@class USBZAxisInputWidget : USBZWidgetBase
---@field AxisName FName
---@field PrimaryKeyWidget USBZInputKeyWidget
---@field SecondaryKeyWidget USBZInputKeyWidget
USBZAxisInputWidget = {}

---@param InAxisName FName
function USBZAxisInputWidget:SetAxis(InAxisName) end


---@class USBZBTDecorator_AbortCoverReservation : UBTDecorator_BlackboardBase
USBZBTDecorator_AbortCoverReservation = {}


---@class USBZBTDecorator_AddTags : UBTDecorator_BlackboardBase
---@field TagsToAdd FGameplayTagContainer
---@field RemoveOnPauseReasons TArray<FName>
USBZBTDecorator_AddTags = {}



---@class USBZBTDecorator_CanAttackWhileMoving : UBTDecorator
USBZBTDecorator_CanAttackWhileMoving = {}


---@class USBZBTDecorator_CanSeeTarget : UBTDecorator_BlackboardBase
---@field bUseSlackTime boolean
---@field SlackTime float
---@field bCheckVisualDetection boolean
USBZBTDecorator_CanSeeTarget = {}



---@class USBZBTDecorator_CheckCoverSafeness : UBTDecorator_BlackboardBase
---@field MinSafenessScore uint8
---@field EnemyBBKey FBlackboardKeySelector
USBZBTDecorator_CheckCoverSafeness = {}



---@class USBZBTDecorator_CheckLASlot : UBTDecorator
USBZBTDecorator_CheckLASlot = {}


---@class USBZBTDecorator_CloakerMelee : UBTDecorator
---@field FilterClass TSubclassOf<UNavigationQueryFilter>
---@field TriggerAcceptanceRadius float
---@field KickAcceptanceRadius2D float
---@field KickAcceptanceRadiusZ float
---@field AllowedDistanceFromPath float
---@field TelegraphAttackTriggerDistance FFloatInterval
USBZBTDecorator_CloakerMelee = {}



---@class USBZBTDecorator_Crew_CheckCoverSafeness : UBTDecorator_BlackboardBase
---@field MinSafenessScore uint8
USBZBTDecorator_Crew_CheckCoverSafeness = {}



---@class USBZBTDecorator_EnableOutline : UBTDecorator
---@field OutlineAsset USBZOutlineAsset
USBZBTDecorator_EnableOutline = {}



---@class USBZBTDecorator_EscortShouldBeWarned : USBZBTDecorator_TargetIsNear
USBZBTDecorator_EscortShouldBeWarned = {}


---@class USBZBTDecorator_Evade : UBTDecorator
---@field FilterClass TSubclassOf<UNavigationQueryFilter>
---@field bCanTriggerSlowEvade boolean
---@field bCanTriggerFastEvade boolean
---@field bUseMaxSpeedLimit boolean
USBZBTDecorator_Evade = {}



---@class USBZBTDecorator_Focus : UBTDecorator_BlackboardBase
---@field bShouldLockFocus boolean
---@field FocusPriority ESBZFocusPriority
USBZBTDecorator_Focus = {}



---@class USBZBTDecorator_FriendlyFire : UBTDecorator_BlackboardBase
USBZBTDecorator_FriendlyFire = {}


---@class USBZBTDecorator_GrabTargetNavLocation : UBTDecorator
---@field TargetKey FBlackboardKeySelector
---@field LocationKey FBlackboardKeySelector
USBZBTDecorator_GrabTargetNavLocation = {}



---@class USBZBTDecorator_IdleBreaker : UBTDecorator
---@field bHasPredictedDuration boolean
---@field PredictedDurationKey FBlackboardKeySelector
---@field InitWaitTime FFloatInterval
---@field CoolDown FFloatInterval
---@field Duration FFloatInterval
USBZBTDecorator_IdleBreaker = {}



---@class USBZBTDecorator_IsEquippedAtIndex : UBTDecorator
---@field SelectedIndex int32
USBZBTDecorator_IsEquippedAtIndex = {}



---@class USBZBTDecorator_LocationSafeFromNeighbours : UBTDecorator_BlackboardBase
USBZBTDecorator_LocationSafeFromNeighbours = {}


---@class USBZBTDecorator_PawnType : UBTDecorator
---@field bInverse boolean
---@field Tags FGameplayTagContainer
USBZBTDecorator_PawnType = {}



---@class USBZBTDecorator_ReserveCoverPoint : UBTDecorator
---@field TargetCoverPointBBKey FBlackboardKeySelector
USBZBTDecorator_ReserveCoverPoint = {}



---@class USBZBTDecorator_RoomScanning : UBTDecorator
USBZBTDecorator_RoomScanning = {}


---@class USBZBTDecorator_SendAIMessage : UBTDecorator
---@field ActivationMessage FName
USBZBTDecorator_SendAIMessage = {}



---@class USBZBTDecorator_ShieldCoverCanStepOut : UBTDecorator_BlackboardBase
USBZBTDecorator_ShieldCoverCanStepOut = {}


---@class USBZBTDecorator_ShieldCoverEvade : USBZBTDecorator_Evade
---@field ShieldCoverBBKey FBlackboardKeySelector
---@field bShouldGoBack boolean
USBZBTDecorator_ShieldCoverEvade = {}



---@class USBZBTDecorator_ShowMarker : UBTDecorator_BlackboardBase
---@field Marker ESBZMarkerState
---@field bShouldChangeDependantOnState boolean
---@field NewMarkerStateThreshold EPD3HeistState
---@field StateDependantMarker ESBZMarkerState
USBZBTDecorator_ShowMarker = {}



---@class USBZBTDecorator_SquadOrderCallback : UBTDecorator
USBZBTDecorator_SquadOrderCallback = {}


---@class USBZBTDecorator_StanceTransition : UBTDecorator
---@field bEnableStanceTransition boolean
USBZBTDecorator_StanceTransition = {}



---@class USBZBTDecorator_TargetIsInRoomType : UBTDecorator_BlackboardBase
---@field RoomType uint8
USBZBTDecorator_TargetIsInRoomType = {}



---@class USBZBTDecorator_TargetIsNear : UBTDecorator_BlackboardBase
---@field CheckFrom FBlackboardKeySelector
---@field TargetAllowedDistance float
---@field NearMarker ESBZMarkerState
USBZBTDecorator_TargetIsNear = {}



---@class USBZBTDecorator_TargetIsValid : UBTDecorator_BlackboardBase
USBZBTDecorator_TargetIsValid = {}


---@class USBZBTDecorator_TaskFailTracker : UBTDecorator
USBZBTDecorator_TaskFailTracker = {}


---@class USBZBTDecorator_TelegraphAttack : UBTDecorator
USBZBTDecorator_TelegraphAttack = {}


---@class USBZBTDecorator_UtilityCallback : UBTDecorator
USBZBTDecorator_UtilityCallback = {}


---@class USBZBTDecorator_UtilityCriticalSection : UBTDecorator
USBZBTDecorator_UtilityCriticalSection = {}


---@class USBZBTService_AmbushBarks : UBTService
---@field AmbushComment USBZVoiceCommentDataAsset
---@field VoicePriority ESBZVoicePriority
USBZBTService_AmbushBarks = {}



---@class USBZBTService_CheckEnemyPosition : UBTService
USBZBTService_CheckEnemyPosition = {}


---@class USBZBTService_CloakerSneakAgility : UBTService
---@field MaxDistanceToStartAgility float
---@field DistanceAcceptanceModifier float
---@field MaxAngleToStartAgility float
USBZBTService_CloakerSneakAgility = {}

---@param Montage UAnimMontage
---@param bIsInterrupted boolean
---@param AIController ASBZAIController
function USBZBTService_CloakerSneakAgility:OnMontageEnded(Montage, bIsInterrupted, AIController) end


---@class USBZBTService_CrewAIStealthLA : UBTService
---@field CurrentWardBBKey FBlackboardKeySelector
---@field MaximumWardDistanceInPublic float
---@field LifeActionTag FGameplayTag
USBZBTService_CrewAIStealthLA = {}



---@class USBZBTService_CrewAIStealthMarking : UBTService
USBZBTService_CrewAIStealthMarking = {}


---@class USBZBTService_DisperseCrowd : UBTService
---@field MaxCrowdSize uint8
---@field EQSRequest FEQSParametrizedQueryExecutionRequest
USBZBTService_DisperseCrowd = {}



---@class USBZBTService_DozerCharge : UBTService
---@field ExtraChargeDistance float
---@field CheckForHitTickRate float
---@field ChargeComment USBZVoiceCommentDataAsset
---@field HurtReactionWeightOnAI float
---@field AIController ASBZAIController
---@field CurrentMontage UAnimMontage
USBZBTService_DozerCharge = {}

function USBZBTService_DozerCharge:TickChargeMeleeCheck() end
---@param Montage UAnimMontage
---@param bIsInterrupted boolean
function USBZBTService_DozerCharge:OnMontageEnded(Montage, bIsInterrupted) end


---@class USBZBTService_GenerateRelocations : UBTService
USBZBTService_GenerateRelocations = {}


---@class USBZBTService_LookAround : UBTService
---@field LookAroundTime float
---@field WaitTimeBetweenRotations float
---@field MaximumRotationAngle float
---@field FocusPriority uint8
USBZBTService_LookAround = {}



---@class USBZBTService_PlaceActor : UBTService
---@field PlacingCooldown float
---@field RandomChance float
---@field ForbiddenPlacementTags FGameplayTagContainer
USBZBTService_PlaceActor = {}



---@class USBZBTService_PlaceDeployable : USBZBTService_PlaceActor
---@field Deployables TSubclassOf<ASBZPlaceableCharges>
USBZBTService_PlaceDeployable = {}



---@class USBZBTService_PlaceMines : USBZBTService_PlaceActor
---@field PlacedMine TSubclassOf<ASBZAITaserMine>
---@field EnemyDistance FFloatInterval
---@field MinWallAndMineDistance2D float
---@field MinDistanceToMinesZ float
---@field MaxMinesPlaced uint8
USBZBTService_PlaceMines = {}



---@class USBZBTService_ShoveNearbyEnemies : UBTService
---@field AnimationRootMovementAdjustment float
USBZBTService_ShoveNearbyEnemies = {}



---@class USBZBTService_TacticalMovePosition : UBTService_BlackboardBase
---@field EQSRequest FEQSParametrizedQueryExecutionRequest
---@field MaxPointDistance float
---@field AIController ASBZAIController
---@field TargetEnemy AActor
---@field TargetEnemyRoom ASBZRoomVolume
USBZBTService_TacticalMovePosition = {}



---@class USBZBTService_UpdateCriminal : UBTService
---@field CurrentCriminalBBKey FBlackboardKeySelector
USBZBTService_UpdateCriminal = {}



---@class USBZBTService_UpdateEnemy : UBTService
---@field CurrentEnemyBBKey FBlackboardKeySelector
---@field EQSRequest FEQSParametrizedQueryExecutionRequest
---@field bRequirePerceivedHostile boolean
---@field TeamStimuliDelay float
---@field bUseDistanceTickThrottle boolean
---@field TickIntervalRange FFloatRange
---@field TickDistRange FFloatRange
USBZBTService_UpdateEnemy = {}



---@class USBZBTService_UpdateFocus : UBTService
USBZBTService_UpdateFocus = {}


---@class USBZBTService_UpdateHidingPlace : UBTService
---@field MinimumEnemyDistance float
---@field TargetCoverBBKey FBlackboardKeySelector
---@field EQSRequest FEQSParametrizedQueryExecutionRequest
USBZBTService_UpdateHidingPlace = {}



---@class USBZBTService_UpdatePOI : UBTService
USBZBTService_UpdatePOI = {}


---@class USBZBTService_UpdateShieldCover : UBTService
---@field EQSRequest FEQSParametrizedQueryExecutionRequest
---@field StayInCoverOrder TSubclassOf<USBZAIOrder>
---@field LostLoSAbandonOrderTime float
---@field ProtectComment USBZVoiceCommentDataAsset
---@field AllowedBottleNeckSize float
USBZBTService_UpdateShieldCover = {}



---@class USBZBTService_UpdateShoutDownTime : UBTService
USBZBTService_UpdateShoutDownTime = {}


---@class USBZBTService_UpdateStance : UBTService
USBZBTService_UpdateStance = {}


---@class USBZBTService_UpdateSuspect : UBTService
---@field CurrentSuspectBBKey FBlackboardKeySelector
USBZBTService_UpdateSuspect = {}



---@class USBZBTService_UpdateWard : UBTService
---@field CurrentWardBBKey FBlackboardKeySelector
---@field EQSRequest FEQSParametrizedQueryExecutionRequest
---@field WardHasMovedBBKey FBlackboardKeySelector
---@field WardUpdateDistance2D float
---@field WardUpdateDistanceZ float
---@field bIsStealthState boolean
USBZBTService_UpdateWard = {}



---@class USBZBTService_WarnNeighbours : UBTService
---@field Tag FGameplayTag
---@field Range float
---@field VoiceComment USBZVoiceCommentDataAsset
---@field VoicePriority ESBZVoicePriority
---@field NoiseDelay FFloatRange
USBZBTService_WarnNeighbours = {}



---@class USBZBTService_WeaponSelector : UBTService
---@field EquipCooldown float
---@field EquipBlockingTags FGameplayTagContainer
---@field MinFailedAttackDistance float
---@field TrackedTaskEquippableIndex int32
---@field WeaponDataArray TMap<USBZBaseWeaponData, int32>
USBZBTService_WeaponSelector = {}



---@class USBZBTTask_AlignWithLifeAction : UBTTaskNode
---@field MaxAlignmentDuration float
---@field WaitDurationFactor float
---@field AlignmentMode ESBZLifeActionAlignmentMode
USBZBTTask_AlignWithLifeAction = {}



---@class USBZBTTask_Arrest : UBTTask_BlackboardBase
---@field ArrestTime float
---@field AllowedDistance float
---@field AllowedStates uint16
---@field BBTypeToArrest ESBZArrestType
USBZBTTask_Arrest = {}



---@class USBZBTTask_AttackTarget : UBTTaskNode
---@field TargetActorBBKey FBlackboardKeySelector
---@field AttackTime float
---@field RandomDeviation float
---@field AimTime float
---@field LOSLostAdditionalAimTime float
---@field bIsContinousFire boolean
---@field ContinuosFireWhileTagActive FGameplayTag
USBZBTTask_AttackTarget = {}



---@class USBZBTTask_BecomeAlert : UBTTaskNode
---@field Reason EPD3DispatchCallerReason
USBZBTTask_BecomeAlert = {}



---@class USBZBTTask_CancelAbility : UBTTaskNode
---@field AbilityInput ESBZAbilityInput
USBZBTTask_CancelAbility = {}



---@class USBZBTTask_ClearBBValue : UBTTask_BlackboardBase
USBZBTTask_ClearBBValue = {}


---@class USBZBTTask_CompleteAIObjective : UBTTaskNode
---@field InteractOrders USBZAIOrder
---@field TargetObjectiveBBKey FBlackboardKeySelector
USBZBTTask_CompleteAIObjective = {}



---@class USBZBTTask_CoverInFear : UBTTaskNode
---@field MaxDistFromEnemyToReact float
---@field ReactionTimeInterval FFloatInterval
---@field UnderFireReactionTimeInterval FFloatInterval
---@field ReactDurationInterval FFloatInterval
---@field DistFromEnemyToForceCrouch float
---@field CrouchBySoundRadius float
---@field CrouchBySoundTags FGameplayTagContainer
---@field BulletDetectionRadius float
USBZBTTask_CoverInFear = {}



---@class USBZBTTask_DozerTaunt : UBTTaskNode
---@field TauntComment USBZVoiceCommentDataAsset
USBZBTTask_DozerTaunt = {}

---@param Montage UAnimMontage
---@param bIsInterrupted boolean
---@param OwnerComp UBehaviorTreeComponent
function USBZBTTask_DozerTaunt:OnMontageEnded(Montage, bIsInterrupted, OwnerComp) end


---@class USBZBTTask_DropAttachedLoot : UBTTask_BlackboardBase
USBZBTTask_DropAttachedLoot = {}


---@class USBZBTTask_Evade : UBTTaskNode
---@field FilterClass TSubclassOf<UNavigationQueryFilter>
---@field NeededTimeSinceFireToEvade float
---@field FastEvadeCoolDown float
---@field SlowEvadeCoolDown float
---@field MinFireDist float
---@field MinSlowEvadeDist float
---@field MinFastEvadeDist float
USBZBTTask_Evade = {}



---@class USBZBTTask_FindLifeActionWithTag : UBTTaskNode
---@field UtilityScore float
---@field bIsPersistant boolean
---@field CompatibleStances int32
---@field AllowedHeistStates int32
---@field Behavior UBehaviorTree
---@field LifeActionTagToFind FGameplayTag
---@field LifeActionAffinityData USBZLifeActionAffinitytData
USBZBTTask_FindLifeActionWithTag = {}



---@class USBZBTTask_GetClosestPosition : UBTTaskNode
---@field TargetActor FBlackboardKeySelector
---@field MoveToLocation FBlackboardKeySelector
---@field FilterClass TSubclassOf<UNavigationQueryFilter>
---@field ProjectionExtent FVector
USBZBTTask_GetClosestPosition = {}



---@class USBZBTTask_GetNextPatrolPoint : UBTTask_BlackboardBase
---@field EQSRequest FEQSParametrizedQueryExecutionRequest
USBZBTTask_GetNextPatrolPoint = {}



---@class USBZBTTask_GetRelocatePosition : UBTTask_BlackboardBase
USBZBTTask_GetRelocatePosition = {}


---@class USBZBTTask_InformPolice : UBTTask_BlackboardBase
---@field NoiseMaxRange float
USBZBTTask_InformPolice = {}



---@class USBZBTTask_Interact : UBTTaskNode
---@field InteractableActorBBKey FBlackboardKeySelector
USBZBTTask_Interact = {}



---@class USBZBTTask_Investigate : UBTTaskNode
---@field MoveToPosition FBlackboardKeySelector
---@field TargetCover FBlackboardKeySelector
---@field CurrentCover FBlackboardKeySelector
---@field WaitTime float
---@field SquadSize uint8
USBZBTTask_Investigate = {}



---@class USBZBTTask_LifeActionSetReady : UBTTaskNode
USBZBTTask_LifeActionSetReady = {}


---@class USBZBTTask_LifeActionWaitForCompletion : UBTTaskNode
USBZBTTask_LifeActionWaitForCompletion = {}


---@class USBZBTTask_LifeActionWaitForExit : UBTTaskNode
USBZBTTask_LifeActionWaitForExit = {}


---@class USBZBTTask_LifeActionWaitForStart : UBTTaskNode
USBZBTTask_LifeActionWaitForStart = {}


---@class USBZBTTask_MarkAsCriminal : UBTTaskNode
---@field SuspectKey FBlackboardKeySelector
---@field bSuspectCrimeStatus boolean
USBZBTTask_MarkAsCriminal = {}



---@class USBZBTTask_MoveTo : UBTTask_MoveTo
---@field TimeMovedKey FBlackboardKeySelector
---@field bAutoUncrouch boolean
---@field bAutoRun boolean
---@field UncrouchDist float
---@field RunDist float
---@field bOverrideCanRunWhileFocusing boolean
---@field MovementThreshold float
---@field PathObservationTickInterval FFloatInterval
---@field PathObservationDistance FFloatInterval
---@field PathObservationTetherDistance FFloatInterval
---@field bOffsetPathFromCorners boolean
---@field PathOffset FSBZPathOffset
---@field PartialPathMaxRange float
---@field bCheckPathEndToGoalHeight boolean
---@field MaxPathEndToGoalHeightDistance float
USBZBTTask_MoveTo = {}



---@class USBZBTTask_ObjectiveInteractionBase : UBTTaskNode
---@field TargetObjectiveBBKey FBlackboardKeySelector
USBZBTTask_ObjectiveInteractionBase = {}



---@class USBZBTTask_ObjectiveInteractionBreakGlass : USBZBTTask_ObjectiveInteractionBase
USBZBTTask_ObjectiveInteractionBreakGlass = {}


---@class USBZBTTask_ObjectiveInteractionCutGlass : USBZBTTask_ObjectiveInteractionBase
USBZBTTask_ObjectiveInteractionCutGlass = {}


---@class USBZBTTask_ObjectiveInteractionDirect : USBZBTTask_ObjectiveInteractionBase
USBZBTTask_ObjectiveInteractionDirect = {}


---@class USBZBTTask_ObjectiveInteractionMoveToAndWait : USBZBTTask_ObjectiveInteractionBase
USBZBTTask_ObjectiveInteractionMoveToAndWait = {}


---@class USBZBTTask_ObjectiveInteractionThrowBag : USBZBTTask_ObjectiveInteractionBase
USBZBTTask_ObjectiveInteractionThrowBag = {}


---@class USBZBTTask_OccupyCover : UBTTaskNode
---@field TargetCoverPointBBKey FBlackboardKeySelector
---@field CurrentCoverPointBBKey FBlackboardKeySelector
---@field bSetFocalPoint boolean
USBZBTTask_OccupyCover = {}



---@class USBZBTTask_OccupyVantagePoint : UBTTaskNode
---@field VantagePointBBKey FBlackboardKeySelector
---@field bSetFocalPoint boolean
USBZBTTask_OccupyVantagePoint = {}



---@class USBZBTTask_Peek : UBTTaskNode
---@field CurrentCoverPointBBKey FBlackboardKeySelector
---@field ShootingPointLocationBBKey FBlackboardKeySelector
---@field TargetBBKey FBlackboardKeySelector
---@field DotAnglePeek float
---@field MoveForwardAmount float
---@field MoveSidewaysAmount float
USBZBTTask_Peek = {}



---@class USBZBTTask_PlayMontage : UBTTaskNode
---@field MontageName FName
USBZBTTask_PlayMontage = {}



---@class USBZBTTask_PlayVoiceComment : UBTTask_BlackboardBase
---@field VoiceComment USBZVoiceCommentDataAsset
---@field VoicePriority ESBZVoicePriority
USBZBTTask_PlayVoiceComment = {}



---@class USBZBTTask_RaiseAlarm : UBTTaskNode
---@field RaiseAlarmTime float
USBZBTTask_RaiseAlarm = {}



---@class USBZBTTask_RaiseAlertness : UBTTaskNode
---@field RaiseAlertnessTime float
---@field TypeTags FGameplayTagContainer
USBZBTTask_RaiseAlertness = {}



---@class USBZBTTask_RequestArrest : UBTTask_BlackboardBase
---@field MaxRange float
USBZBTTask_RequestArrest = {}



---@class USBZBTTask_RequestInvestigation : UBTTask_BlackboardBase
---@field MaxRange float
USBZBTTask_RequestInvestigation = {}



---@class USBZBTTask_Revive : UBTTask_BlackboardBase
USBZBTTask_Revive = {}


---@class USBZBTTask_RunMoveToBehavior : UBTTask_RunBehavior
---@field AcceptableRadius float
---@field FilterClass TSubclassOf<UNavigationQueryFilter>
---@field bAllowStrafe boolean
---@field bAllowPartialPath boolean
---@field PartialPathMaxRange float
---@field bTrackMovingGoal boolean
---@field bProjectGoalLocation boolean
---@field bReachTestIncludesAgentRadius boolean
---@field bReachTestIncludesGoalRadius boolean
---@field GoalBBKey FBlackboardKeySelector
---@field bOffsetPathFromCorners boolean
---@field PathOffset FSBZPathOffset
USBZBTTask_RunMoveToBehavior = {}



---@class USBZBTTask_RunRepositionBehavior : USBZBTTask_RunMoveToBehavior
---@field SelectableRepositions TArray<FSBZAIRepositionType>
---@field EnemyMovedFarDist float
---@field TickRate float
---@field InitialTickRate float
USBZBTTask_RunRepositionBehavior = {}



---@class USBZBTTask_SabotageAnimation : UBTTask_BlackboardBase
---@field SabotageAnimations TArray<FSBZSabotageAnimationData>
USBZBTTask_SabotageAnimation = {}

---@param Montage UAnimMontage
---@param bIsInterrupted boolean
---@param OwnerComp UBehaviorTreeComponent
function USBZBTTask_SabotageAnimation:OnMontageEnded(Montage, bIsInterrupted, OwnerComp) end


---@class USBZBTTask_SavePosition : UBTTaskNode
---@field SavedPosition FBlackboardKeySelector
---@field SavedRotation FBlackboardKeySelector
USBZBTTask_SavePosition = {}



---@class USBZBTTask_SetBBKey : UBTTask_BlackboardBase
---@field TargetToSet FBlackboardKeySelector
USBZBTTask_SetBBKey = {}



---@class USBZBTTask_SetCurrentEnemy : UBTTask_BlackboardBase
USBZBTTask_SetCurrentEnemy = {}


---@class USBZBTTask_SetTag : UBTTaskNode
---@field TagsToSet FGameplayTagContainer
USBZBTTask_SetTag = {}



---@class USBZBTTask_ShieldCoverStepOut : UBTTaskNode
---@field TargetBBKey FBlackboardKeySelector
---@field ShootingPointLocationBBKey FBlackboardKeySelector
---@field DotAnglePeek float
---@field MoveForwardAmount float
---@field MoveSidewaysAmount float
---@field StepOutLeft float
---@field StepOutRight float
USBZBTTask_ShieldCoverStepOut = {}



---@class USBZBTTask_ShieldPrepareForGrenade : UBTTask_BlackboardBase
---@field VoiceComments USBZVoiceCommentDataAsset
USBZBTTask_ShieldPrepareForGrenade = {}



---@class USBZBTTask_ThrowBag : UBTTaskNode
USBZBTTask_ThrowBag = {}


---@class USBZBTTask_TriggerAbilitySafe : UBTTaskNode
---@field AbilityInput ESBZAbilityInput
---@field bCancelOnFinish boolean
---@field TimeToHoldInput float
---@field bShouldWaitForAbility boolean
USBZBTTask_TriggerAbilitySafe = {}



---@class USBZBTTask_TriggerAbilityUnsafe : UBTTaskNode
---@field AbilityInput ESBZAbilityInput
USBZBTTask_TriggerAbilityUnsafe = {}



---@class USBZBTTask_UnOccupyVantagePoint : UBTTaskNode
---@field CurrentVantagePointBBKey FBlackboardKeySelector
---@field bSetFocalPoint boolean
USBZBTTask_UnOccupyVantagePoint = {}



---@class USBZBTTask_UnPeek : UBTTaskNode
---@field CurrentCoverPointBBKey FBlackboardKeySelector
USBZBTTask_UnPeek = {}



---@class USBZBTTask_WaitEvade : UBTTaskNode
USBZBTTask_WaitEvade = {}


---@class USBZBTTask_WaitForMessage : UBTTaskNode
---@field Message FName
USBZBTTask_WaitForMessage = {}



---@class USBZBTTask_WaitForSquad : UBTTaskNode
USBZBTTask_WaitForSquad = {}


---@class USBZBackendErrorWidget : USBZWidgetBase
---@field ErrorMessageStringTable UStringTable
USBZBackendErrorWidget = {}

---@return FText
function USBZBackendErrorWidget:GetErrorText() end
---@return FText
function USBZBackendErrorWidget:GetErrorHeader() end


---@class USBZBagHandleLibrary : UBlueprintFunctionLibrary
USBZBagHandleLibrary = {}

---@param BagHandle FSBZBagHandle
---@return boolean
function USBZBagHandleLibrary:IsValid(BagHandle) end


---@class USBZBagItemImpactConfig : USBZImpactConfig
USBZBagItemImpactConfig = {}


---@class USBZBagManager : UActorComponent
---@field Bags TArray<FSBZBagPersistentData>
USBZBagManager = {}

---@param Handle FSBZBagHandle
---@param Actor AActor
---@return boolean
function USBZBagManager:TryRemoveClaim(Handle, Actor) end
---@param Handle FSBZBagHandle
---@param bClearClaim boolean
---@return boolean
function USBZBagManager:SecureBag(Handle, bClearClaim) end
---@param Handle FSBZBagHandle
---@param Actor AActor
---@return boolean
function USBZBagManager:RemoveClaim(Handle, Actor) end
---@param BagId int32
---@param bClearClaim boolean
function USBZBagManager:Multicast_SecureBag(BagId, bClearClaim) end
---@param BagId int32
function USBZBagManager:Multicast_RemoveClaim(BagId) end
---@param BagId int32
function USBZBagManager:Multicast_RemoveBag(BagId) end
---@param BagId int32
---@param BagType USBZBagType
function USBZBagManager:Multicast_CreateBag(BagId, BagType) end
---@param BagId int32
---@param Actor AActor
function USBZBagManager:Multicast_ClaimBag(BagId, Actor) end
---@param Handle FSBZBagHandle
---@return boolean
function USBZBagManager:IsValidHandle(Handle) end
---@param Handle FSBZBagHandle
---@return FSBZBagPersistentData
function USBZBagManager:GetValidBagData(Handle) end
---@param WorldContextObject UObject
---@return USBZBagManager
function USBZBagManager:Get(WorldContextObject) end
---@param BagType USBZBagType
---@return FSBZBagHandle
function USBZBagManager:CreateBag(BagType) end
---@param Handle FSBZBagHandle
---@param Actor AActor
---@return boolean
function USBZBagManager:ClaimBag(Handle, Actor) end


---@class USBZBagType : USBZCarryType
---@field BagValue int32
---@field ThrowSpeed float
---@field WorldItem TSubclassOf<ASBZBagItem>
---@field BackItem TSubclassOf<ASBZCarriedBag>
---@field SecuredItem TSubclassOf<AActor>
---@field Tags FGameplayTagContainer
---@field GameplayEffectsOnCarrying TArray<FSBZGameplayEffectData>
---@field BagState FName
---@field bShouldShowOnEndScreen boolean
---@field bIsDegradable boolean
---@field bAllowSecuring boolean
---@field DegradeTimeArray TArray<float>
---@field WeightTierOffset float
USBZBagType = {}



---@class USBZBaseCharacterAnimationCollection : UDataAsset
---@field AnimationContainers TMap<FName, FSBZAnimationContainer>
---@field AnimationsPerStances TMap<ESBZCharacterStance, FSBZAnimationsPerStancesContainer>
---@field CachedGamePlayTagBasedMontages TMap<FGameplayTag, FSBZSoftMontageContainer>
USBZBaseCharacterAnimationCollection = {}



---@class USBZBaseCharacterAnimationData : UDataAsset
USBZBaseCharacterAnimationData = {}


---@class USBZBaseInteractRequirement : UObject
USBZBaseInteractRequirement = {}

---@param Interactor USBZInteractorComponent
---@param OutData FSBZInteractReqData
---@param bIsSignalRequired boolean
---@param bInIsScreenInteract boolean
---@param bIsCasing boolean
---@return boolean
function USBZBaseInteractRequirement:BP_CheckRequirement(Interactor, OutData, bIsSignalRequired, bInIsScreenInteract, bIsCasing) end


---@class USBZBaseInteractableComponent : UActorComponent
---@field NormalDistance float
---@field PitchDistance float
---@field bIgnoreDistanceValidation boolean
---@field Shapes TArray<FSBZComponentSelector>
---@field ShapeTraceLocationsArray TArray<FSBZComponentSelector>
---@field Requirement USBZBaseInteractRequirement
---@field NativeRequirement USBZBaseInteractRequirement
---@field OnFocusChangedDelegate FSBZBaseInteractableComponentOnFocusChangedDelegate
---@field Priority int32
---@field Duration float
---@field Text FText
---@field bIsInputConsumed boolean
---@field bIsScreenInteract boolean
---@field bIsSignalInteract boolean
---@field bOverrideScreenInteractDistance boolean
---@field bOverrideScreenInteractAngle boolean
---@field ScreenInteractDistance float
---@field MinScreenInteractDegrees float
---@field MinScreenInteractDot float
---@field bOverrideScreenInteractPendingDelay boolean
---@field PendingOnScreenDelay float
---@field GameplayEffectsOnInteract TArray<FSBZGameplayEffectData>
---@field AlternativeModeData TArray<FSBZInteractableModeData>
---@field LastInteractor USBZInteractorComponent
---@field ModeIndex int8
---@field AnimationName FName
USBZBaseInteractableComponent = {}

---@param GameplayEffects TArray<FSBZGameplayEffectData>
function USBZBaseInteractableComponent:SetGameplayEffectsOnInteract(GameplayEffects) end
---@param bInNewFocusState boolean
function USBZBaseInteractableComponent:OnFocusChanged(bInNewFocusState) end
---@param InModeIndex int32
---@return boolean
function USBZBaseInteractableComponent:IsInteractionIllegal(InModeIndex) end
---@param GameplayEffects TArray<FSBZGameplayEffectData>
function USBZBaseInteractableComponent:GetGameplayEffectsOnInteract(GameplayEffects) end
---@return int32
function USBZBaseInteractableComponent:GetCurrentModeIndex() end


---@class USBZBaseInventoryItemVisualsWidget : USBZWidgetBase
---@field Item USBZInventoryBaseData
---@field ItemSprite UPaperSprite
---@field LastItemSprite UPaperSprite
USBZBaseInventoryItemVisualsWidget = {}

---@param OutLoadedSprite UPaperSprite
function USBZBaseInventoryItemVisualsWidget:SpriteLoaded(OutLoadedSprite) end
function USBZBaseInventoryItemVisualsWidget:SetEmpty() end
---@param bIsLoading boolean
function USBZBaseInventoryItemVisualsWidget:OnLoadingChanged(bIsLoading) end
function USBZBaseInventoryItemVisualsWidget:NativeOnSpriteLoaded() end
---@param NewItem USBZInventoryBaseData
function USBZBaseInventoryItemVisualsWidget:ItemInitialized(NewItem) end
---@param InItem USBZInventoryBaseData
---@param bShouldLoadImage boolean
function USBZBaseInventoryItemVisualsWidget:InitializeItem(InItem, bShouldLoadImage) end
function USBZBaseInventoryItemVisualsWidget:EmptySet() end


---@class USBZBaseMenuAnimationCollection : UDataAsset
---@field DefaultCharacter TSoftClassPtr<ASBZPlayerCharacter>
---@field SupportedCharacters TArray<TSoftClassPtr<ASBZPlayerCharacter>>
---@field Template TSoftObjectPtr<USBZBaseMenuAnimationCollection>
---@field bUpdateCollection boolean
USBZBaseMenuAnimationCollection = {}



---@class USBZBaseMenuWidget : USBZInternetStatusWidget
---@field Widget_ControlsReference USBZControlsReferenceWidget
USBZBaseMenuWidget = {}

---@param InControlsReference FSBZControlsReference
function USBZBaseMenuWidget:OnActiveControlsReferenceChanged(InControlsReference) end
function USBZBaseMenuWidget:HideControlsReference() end


---@class USBZBaseWeaponData : USBZEquippableData
---@field SwayData USBZWeaponSwayData
---@field HeadbobData USBZHeadbobData
---@field ItemProgression USBZWeaponProgressionData
---@field bUseSprintMoveData boolean
---@field AdditiveSprintMoveData FSBZAdditiveMoveData
---@field AdditiveMoveData FSBZAdditiveMoveData
---@field TargetingAdditiveMoveData FSBZAdditiveMoveData
---@field AdditiveMoveLeftHandEquippedData FSBZAdditiveMoveData
---@field TargetingAdditiveMoveLeftHandEquippedData FSBZAdditiveMoveData
---@field TurnInPlaceAdditiveMoveFactor float
---@field TurnInPlaceAdditiveMoveInterSpeed float
---@field JumpStartAlpha float
---@field JumpStartADSAlpha float
---@field JumpLandAlpha float
---@field JumpLandADSAlpha float
---@field CrouchAlpha float
---@field CrouchADSAlpha float
---@field UncrouchAlpha float
---@field UncrouchADSAlpha float
---@field VaultLandAlpha float
---@field VaultLandADSAlpha float
---@field OverkillProgressionProgress float
---@field CrouchHandRigTransform FTransform
---@field DefaultHandRigTransform FTransform
---@field TargetingRigOffset FTransform
---@field TargetingData USBZWeaponTargetingData
---@field CachedTargetingArray TArray<FSBZCachedWeaponTargeting>
---@field PitchLookOffsetCurve UCurveVector
---@field AttributeModification UCurveTable
---@field WeaponPartsTags FGameplayTagContainer
---@field ModularConfiguration TMap<USBZWeaponPartSlot, FSBZModularPartSlotConfiguration>
---@field bIsInaccurateWeapon boolean
---@field WeaponSelectionScorer USBZAIScorer
---@field Modifiers TArray<USBZAIScorer>
---@field WeaponDeselectionTimer float
---@field bCanAttackWhileMoving boolean
---@field StickerPlacements TArray<FSBZWeaponStickerPosition>
---@field PatternAreas TMap<USBZWeaponPatternAreaData, FSBZWeaponPatternAreaDefinition>
USBZBaseWeaponData = {}

---@return int32
function USBZBaseWeaponData:GetNbStickerPlacements() end


---@class USBZBlackMarketCategoryWidget : USBZWidgetBase
---@field Panel_ButtonList UWrapBox
USBZBlackMarketCategoryWidget = {}

---@param InCategoryName FText
function USBZBlackMarketCategoryWidget:SetStoreCategoryName(InCategoryName) end
---@param InCategory ESBZStoreItemUICategory
---@return FText
function USBZBlackMarketCategoryWidget:GetCategoryStringTextFromCategoryEnum(InCategory) end


---@class USBZBlackMarketConfirmationPopupBody : USBZWidgetBase
---@field StoreItemUIData FSBZStoreItemUIData
USBZBlackMarketConfirmationPopupBody = {}

function USBZBlackMarketConfirmationPopupBody:OnItemDataInitialized() end


---@class USBZBlackMarketInspectWidget : USBZMenuStackScreenWidget
---@field CurrentInspectData USBZInventoryBaseData
---@field CurrentCameraName FName
---@field ZoomSpeedRatio float
---@field ZoomMax float
---@field ZoomMin float
---@field ZoomInputAxisName FName
---@field ZoomCameraRotationInputAxisName FName
---@field AxisDeadZone float
---@field InspectCamera ACameraActor
---@field LoadoutEquippedGloveData USBZGloveData
---@field MaxZoomCameraPitch float
---@field MinZoomCameraPitch float
USBZBlackMarketInspectWidget = {}

---@param CameraName FName
function USBZBlackMarketInspectWidget:SetInspectCamera(CameraName) end
---@param GloveData USBZGloveData
function USBZBlackMarketInspectWidget:SetGlovesOnMannequin(GloveData) end
---@param bIsLoading boolean
function USBZBlackMarketInspectWidget:OnCustomizationActorLoadingChanged(bIsLoading) end
---@param InInspectData USBZInventoryBaseData
---@return boolean
function USBZBlackMarketInspectWidget:CanInspectItem(InInspectData) end


---@class USBZBlackMarketPaydayStoreScreen : USBZMenuStackScreenWidget
---@field Panel_ItemList UPanelWidget
---@field RealMoneyStoreItemButtonClass TSubclassOf<USBZBlackMarketStoreRealMoneyItemButton>
---@field PaydayCreditStoreItems TMap<FString, FSBZPayDayCreditStoreItem>
USBZBlackMarketPaydayStoreScreen = {}

---@param InButton USBZMenuButton
---@param bIsFocused boolean
function USBZBlackMarketPaydayStoreScreen:OnVendorItemButtonFocused(InButton, bIsFocused) end
---@param IsSuccess boolean
function USBZBlackMarketPaydayStoreScreen:OnRealMoneyPurchaseWindowClosed(IsSuccess) end
function USBZBlackMarketPaydayStoreScreen:OnRealMoneyItemsInitialized() end
---@param InButton USBZMenuButton
function USBZBlackMarketPaydayStoreScreen:OnRealMoneyItemButtonSelected(InButton) end
---@param Result ESBZMetaRequestResult
function USBZBlackMarketPaydayStoreScreen:OnBuyRealMoneyItemPurchaseCompleted(Result) end


---@class USBZBlackMarketStoreItemButton : USBZMenuButton
---@field StoreItemUIData FSBZStoreItemUIData
USBZBlackMarketStoreItemButton = {}

function USBZBlackMarketStoreItemButton:OnPlayerStoreItemDataIntialized() end
---@return boolean
function USBZBlackMarketStoreItemButton:IsTransactionInProgress() end
---@param InStoreItemUIData FSBZStoreItemUIData
function USBZBlackMarketStoreItemButton:InitializeStoreData(InStoreItemUIData) end
---@return FGuid
function USBZBlackMarketStoreItemButton:GetItemID() end
---@return USBZInventoryBaseData
function USBZBlackMarketStoreItemButton:GetItemData() end
---@param Price int32
---@param Currency ESBZCurrencyCode
function USBZBlackMarketStoreItemButton:GetItemCost(Price, Currency) end


---@class USBZBlackMarketStoreRealMoneyItemButton : USBZBlackMarketStoreItemButton
---@field RealMoneyStoreItem FSBZPayDayCreditStoreItem
USBZBlackMarketStoreRealMoneyItemButton = {}

---@param InRealMoneyStoreItem FSBZPayDayCreditStoreItem
function USBZBlackMarketStoreRealMoneyItemButton:InitializeRealMoneyStoreItem(InRealMoneyStoreItem) end
---@return FSBZPayDayCreditStoreItem
function USBZBlackMarketStoreRealMoneyItemButton:GetRealMoneyStoreItem() end


---@class USBZBlackMarketVendorButton : USBZMenuButton
---@field VendorData USBZVendorData
---@field bIsActiveVendor boolean
USBZBlackMarketVendorButton = {}

---@param bInIsActiveVendor boolean
function USBZBlackMarketVendorButton:SetActiveVendor(bInIsActiveVendor) end
---@param InVendorData USBZVendorData
function USBZBlackMarketVendorButton:OnVendorDataInitialized(InVendorData) end
---@param bInIsActiveVendor boolean
function USBZBlackMarketVendorButton:OnActiveVendorSet(bInIsActiveVendor) end
---@param InVendorData USBZVendorData
function USBZBlackMarketVendorButton:InitializeVendorData(InVendorData) end
---@return USBZVendorData
function USBZBlackMarketVendorButton:GetVendorData() end


---@class USBZBlackMarketVendorsWidget : USBZMenuStackScreenWidgetWithTutorial
---@field Panel_CategoriesList UPanelWidget
---@field Navbar_Vendors USBZLocalNavBar
---@field CategoryButtonClass TSubclassOf<USBZBlackMarketCategoryWidget>
---@field StoreItemButtonClass TSubclassOf<USBZBlackMarketStoreItemButton>
---@field GoldStoreItemButtonClass TSubclassOf<USBZBlackMarketStoreItemButton>
---@field PaydayStoreControlsReferenceAction FSBZActionControlReference
---@field Panel_VendorList UPanelWidget
---@field ControlsRefActionWidget_PaydayStore USBZControlsReferenceActionWidget
---@field VendorButtonClass TSubclassOf<USBZBlackMarketVendorButton>
---@field bIsTransactionInProgress boolean
---@field ActiveVendorIndex int32
---@field VendorsData TArray<FSBZBlackMarketUIVendorData>
---@field PurchaseTargetButton USBZBlackMarketStoreItemButton
---@field PurchaseSlotUIData FSBZStoreItemUIData
---@field StoreItemButtonPool TArray<USBZBlackMarketStoreItemButton>
---@field GoldStoreItemButtonPool TArray<USBZBlackMarketStoreItemButton>
---@field PurchaseItemPopUpBodyWidgetClass TSubclassOf<USBZBlackMarketConfirmationPopupBody>
---@field PurchaseItemSlotPopUpBodyWidgetClass TSubclassOf<USBZWidgetBase>
---@field PurchaseItemPopUpHeader FText
---@field PurchaseItemPopUpAcceptAction FSBZButtonControlReference
---@field PurchaseItemPopUpCancelAction FSBZButtonControlReference
---@field PopUpData FSBZUIPopupData
---@field PurchaseItemPopUpBody USBZBlackMarketConfirmationPopupBody
USBZBlackMarketVendorsWidget = {}

---@param NewActiveVendorIndex int32
function USBZBlackMarketVendorsWidget:UpdateActiveVendor(NewActiveVendorIndex) end
---@param StoreItemUIData FSBZStoreItemUIData
function USBZBlackMarketVendorsWidget:TryBuyItem(StoreItemUIData) end
---@param bIsAcceptPressed boolean
function USBZBlackMarketVendorsWidget:SendPurchaseAttemptEvent(bIsAcceptPressed) end
---@param MetaResult ESBZMetaRequestResult
---@param InventoryItemData USBZInventoryBaseData
function USBZBlackMarketVendorsWidget:OnVendorItemTransactionComplete(MetaResult, InventoryItemData) end
---@param InButton USBZMenuButton
function USBZBlackMarketVendorsWidget:OnVendorItemButtonSelected(InButton) end
---@param InButton USBZMenuButton
---@param bIsFocused boolean
function USBZBlackMarketVendorsWidget:OnVendorItemButtonFocused(InButton, bIsFocused) end
---@param NewVendor FSBZBlackMarketUIVendorData
function USBZBlackMarketVendorsWidget:OnVendorChanged(NewVendor) end
---@param InButton USBZMenuButton
---@param bIsFocused boolean
function USBZBlackMarketVendorsWidget:OnVendorButtonFocused(InButton, bIsFocused) end
---@param bInIsTransactionInProgress boolean
---@param bIsTransactionSuccessful boolean
function USBZBlackMarketVendorsWidget:OnTransactionProgressChanged(bInIsTransactionInProgress, bIsTransactionSuccessful) end
---@param ClosingActionName FName
function USBZBlackMarketVendorsWidget:OnPurchaseItemPopUpClosed(ClosingActionName) end
---@param Result ESBZMetaRequestResult
function USBZBlackMarketVendorsWidget:OnBuyRealMoneyItemCompleted(Result) end
---@param Result ESBZMetaRequestResult
---@param ItemId FGuid
function USBZBlackMarketVendorsWidget:OnBuyItemCompleted(Result, ItemId) end
---@param InButton USBZMenuButton
function USBZBlackMarketVendorsWidget:NativeOnVendorButtonSelected(InButton) end
function USBZBlackMarketVendorsWidget:GoToPreviousVendor() end
function USBZBlackMarketVendorsWidget:GoToNextVendor() end
---@return USBZBlackMarketCategoryWidget
function USBZBlackMarketVendorsWidget:GetFirstCategoryWidget() end
---@return USBZBlackMarketVendorButton
function USBZBlackMarketVendorsWidget:GetActiveVendorButton() end


---@class USBZBleedOutAbility : USBZDamageDefeatAbility
USBZBleedOutAbility = {}


---@class USBZBlockEnterRunMontageNotifyState : UAnimNotifyState
USBZBlockEnterRunMontageNotifyState = {}


---@class USBZBlockReloadNotifyState : UAnimNotifyState
USBZBlockReloadNotifyState = {}


---@class USBZBlockStanceSwitch : UAnimNotifyState
USBZBlockStanceSwitch = {}


---@class USBZBlockTagReactionNotifyState : UAnimNotifyState
USBZBlockTagReactionNotifyState = {}


---@class USBZBlockThrowNotify : UAnimNotify
USBZBlockThrowNotify = {}


---@class USBZBlockedPlayerManager : UObject
---@field PlatformsBlockedPlayersInfo FSBZPlatformsBlockedPlayersInfo
USBZBlockedPlayerManager = {}

function USBZBlockedPlayerManager:XsxBlockListChangeTimer() end
function USBZBlockedPlayerManager:OnPlatformUserInitialized() end
function USBZBlockedPlayerManager:OnBlockedPlayersUpdated() end
---@param PlayerId FString
---@return boolean
function USBZBlockedPlayerManager:IsPlayerBlocked(PlayerId) end
---@return TMap<FString, FSBZFriendListEntry>
function USBZBlockedPlayerManager:GetBlockedPlayers() end
---@param WorldContextObject UObject
---@return USBZBlockedPlayerManager
function USBZBlockedPlayerManager:Get(WorldContextObject) end


---@class USBZBloodSplatterImpactConfig : USBZImpactConfig
USBZBloodSplatterImpactConfig = {}


---@class USBZBreadCrumbButtonWidget : USBZWidgetBase
---@field Text_Stack UTextBlock
---@field StackValue FName
USBZBreadCrumbButtonWidget = {}

---@param InStackValue FName
---@param InTextValue FText
function USBZBreadCrumbButtonWidget:SetStackValue(InStackValue, InTextValue) end
---@param InStackValue FName
---@return boolean
function USBZBreadCrumbButtonWidget:IsBreadCrumbForStackValue(InStackValue) end


---@class USBZBreadCrumbWidget : USBZWidgetBase
---@field StackValueToNameMap TMap<FName, FText>
---@field BreadCrumbButtonClass TSubclassOf<USBZBreadCrumbButtonWidget>
---@field Panel_ButtonContainer UPanelWidget
---@field WidgetPool TArray<USBZBreadCrumbButtonWidget>
USBZBreadCrumbWidget = {}

---@param UIStackStateChangedEvent FSBZUIStackChangedEvent
function USBZBreadCrumbWidget:OnStackStateChanged(UIStackStateChangedEvent) end


---@class USBZBuiltInAnimMontage : UDataAsset
---@field bAutoStopWhenFinished boolean
---@field bIsLooping boolean
---@field Group FName
---@field BoneTracks TArray<FSBZBuiltInAnimMontageBoneTrack>
USBZBuiltInAnimMontage = {}



---@class USBZBuiltInAnimMontagesHandler : UObject
---@field ActiveAnimMontageInstances TArray<FSBZBuiltInAnimMontageInstance>
USBZBuiltInAnimMontagesHandler = {}

---@param DeltaSeconds float
function USBZBuiltInAnimMontagesHandler:Update(DeltaSeconds) end
---@param Group FName
function USBZBuiltInAnimMontagesHandler:StopAnimMontagesWithinGroup(Group) end
---@param AnimMontage USBZBuiltInAnimMontage
function USBZBuiltInAnimMontagesHandler:StopAnimMontage(AnimMontage) end
---@param AnimMontage USBZBuiltInAnimMontage
---@return float
function USBZBuiltInAnimMontagesHandler:PlayAnimMontage(AnimMontage) end
---@return boolean
function USBZBuiltInAnimMontagesHandler:HasAnyActiveAnimation() end
---@return TArray<FSBZBuiltInAnimMontageInstance>
function USBZBuiltInAnimMontagesHandler:GetActiveAnimMontageInstances() end


---@class USBZBulletDamageType : USBZDamageType
USBZBulletDamageType = {}


---@class USBZBuyItemCallbackProxy : UBlueprintAsyncActionBase
---@field OnComplete FSBZBuyItemCallbackProxyOnComplete
USBZBuyItemCallbackProxy = {}

---@param WorldContextObject UObject
---@param ItemId FGuid
---@param Price int32
---@param DiscountedPrice int32
---@param Quantity int32
---@param CurrencyCode FString
---@return USBZBuyItemCallbackProxy
function USBZBuyItemCallbackProxy:BuyItem(WorldContextObject, ItemId, Price, DiscountedPrice, Quantity, CurrencyCode) end


---@class USBZCableComponent : UCableComponent
---@field WindSource AWindDirectionalSource
---@field bAffectedByWind boolean
---@field WindScale float
---@field WindGustFrequency float
---@field StartCablePointAttachment FSBZCablePointAttachment
---@field CablePointAttachments TArray<FSBZCablePointAttachment>
---@field bEnableCollisionPlane boolean
---@field CollisionPlanes TArray<FSBZCableCollisionPlane>
---@field bAutoComputeCableLength boolean
USBZCableComponent = {}

---@param InCableLength float
---@param SegmentLength float
---@param MaxSegmentCount int32
function USBZCableComponent:UpdateSegmentCount(InCableLength, SegmentLength, MaxSegmentCount) end
function USBZCableComponent:ResetCollisionPlanes() end
function USBZCableComponent:ResetCable() end
function USBZCableComponent:ResetAttachPoints() end
---@param DisplacementForceLocation FVector
---@param DisplacementForce float
---@param DisplacementForceRadius float
function USBZCableComponent:AddDisplacementForce(DisplacementForceLocation, DisplacementForce, DisplacementForceRadius) end
---@param CollisionPlane FSBZCableCollisionPlane
function USBZCableComponent:AddCollisionPlane(CollisionPlane) end


---@class USBZCanUIActivatePhoneAbility : USBZGameplayAbility
USBZCanUIActivatePhoneAbility = {}


---@class USBZCapsuleShadowingData : UDataAsset
---@field CapsuleShadowingSettingsArray TArray<FSBZCapsuleShadowingSettings>
USBZCapsuleShadowingData = {}



---@class USBZCarryAbility : USBZGameplayAbility
USBZCarryAbility = {}


---@class USBZCarryType : UDataAsset
---@field CarryName FText
---@field CarryIcon UPaperSprite
---@field ControlsReference FSBZControlsReference
USBZCarryType = {}



---@class USBZChallengeCategoryData : UDataAsset
---@field CategoryTag FString
---@field CategoryName FText
---@field DisplayIcon UPaperSprite
USBZChallengeCategoryData = {}



---@class USBZChallengeCategoryManager : UObject
---@field ChallengeCategoryData TArray<USBZChallengeCategoryData>
USBZChallengeCategoryManager = {}

---@param WorldContextObject UObject
---@return USBZChallengeCategoryManager
function USBZChallengeCategoryManager:GetChallengeCategoryManager(WorldContextObject) end
---@param WorldContextObject UObject
---@param InTag FString
---@return USBZChallengeCategoryData
function USBZChallengeCategoryManager:GetChallengeCategoryForTag(WorldContextObject, InTag) end
---@param WorldContextObject UObject
---@param ChallengeRecord FSBZChallengeData
---@return USBZChallengeCategoryData
function USBZChallengeCategoryManager:GetChallengeCategoryForChallenge(WorldContextObject, ChallengeRecord) end
---@param WorldContextObject UObject
---@param OutCategoryList TArray<USBZChallengeCategoryData>
function USBZChallengeCategoryManager:GetChallengeCategoryData(WorldContextObject, OutCategoryList) end


---@class USBZChallengeLocalizationOverrides : UDataAsset
---@field ObjectiveKeysOverrides TMap<FString, FSBZObjectiveKeysOverrides>
USBZChallengeLocalizationOverrides = {}



---@class USBZChallengeManager : UObject
---@field OnCompletedChallenge FSBZChallengeManagerOnCompletedChallenge
---@field OnCompletedAchievement FSBZChallengeManagerOnCompletedAchievement
---@field LocalizationOverrides USBZChallengeLocalizationOverrides
---@field InfamyPointRewardStatID FString
---@field ChallengesStringTable UStringTable
---@field ChallengesStatsStringTable UStringTable
---@field ChallengeMap TMap<FName, FSBZChallengeData>
---@field AchievementMap TMap<FName, FSBZChallengeData>
---@field StatMap TMap<FName, FSBZStatData>
---@field CompletedChallenges TArray<FSBZChallengeData>
---@field ChallengeConversionMap TMap<FName, ESBZChallengeConversion>
---@field CompletedAchievementsAtStartup TArray<FSBZChallengeData>
---@field ChallengeRecordCaches TArray<FUserChallengeRecord>
USBZChallengeManager = {}

function USBZChallengeManager:RefreshChallengeRecordCache() end
---@param OldUserIndex int32
function USBZChallengeManager:HandlePlatformUserChanged(OldUserIndex) end
---@param StateName FName
function USBZChallengeManager:HandleOnStateMachineStateEntered(StateName) end
---@param InStatID FName
---@return int32
function USBZChallengeManager:GetStatProgress(InStatID) end
---@return TArray<FSBZChallengeData>
function USBZChallengeManager:GetCompletedChallengesDuringMission() end
---@param WorldContextObject UObject
---@param Challenge FSBZChallengeData
---@param ChallengeStat FSBZChallengeProgressStat
---@return FText
function USBZChallengeManager:GetChallengeStatObjectiveText(WorldContextObject, Challenge, ChallengeStat) end
---@param WorldContextObject UObject
---@param ChallengeStat FSBZChallengeProgressStat
---@return FText
function USBZChallengeManager:GetChallengeStatNameText(WorldContextObject, ChallengeStat) end
---@param WorldContextObject UObject
---@param ChallengeStat FSBZChallengeProgressStat
---@return FText
function USBZChallengeManager:GetChallengeStatDescriptionText(WorldContextObject, ChallengeStat) end
---@param Challenge FSBZChallengeData
---@return FText
function USBZChallengeManager:GetChallengeNameText(Challenge) end
---@param WorldContextObject UObject
---@return USBZChallengeManager
function USBZChallengeManager:GetChallengeManager(WorldContextObject) end
---@param Challenge FSBZChallengeData
---@return FText
function USBZChallengeManager:GetChallengeDescriptionText(Challenge) end


---@class USBZChallengeToAchievementSettings : USBZDeveloperSettings
---@field ChallengeToAchievementMap TMap<FName, FName>
---@field AchievementObjectiveStatCodeArray TArray<FName>
USBZChallengeToAchievementSettings = {}

---@return TMap<FName, FName>
function USBZChallengeToAchievementSettings:GetChallengeToAchievementSettings() end
---@return TArray<FName>
function USBZChallengeToAchievementSettings:GetAchievementObjectiveStatCodeArray() end


---@class USBZChallengesLocalizationLibrary : UBlueprintFunctionLibrary
USBZChallengesLocalizationLibrary = {}

---@param ChallengeEntries TArray<FChallengeLocalizationEntry>
---@param StatEntries TArray<FStatLocalizationEntry>
---@param OutputCSVPathChallenges FString
---@param OutputCSVPathChallengeStats FString
function USBZChallengesLocalizationLibrary:WriteEntriesToStringTablesCSVs(ChallengeEntries, StatEntries, OutputCSVPathChallenges, OutputCSVPathChallengeStats) end
---@param ChallengeLocalizationEntries TArray<FChallengeLocalizationEntry>
---@param StatLocalizationEntries TArray<FStatLocalizationEntry>
---@param InputSpreadsheetCSVPaths TArray<FString>
function USBZChallengesLocalizationLibrary:ExtractEntriesFromSpreadsheetCSVs(ChallengeLocalizationEntries, StatLocalizationEntries, InputSpreadsheetCSVPaths) end


---@class USBZChamberAttachmentOffsetState : UAnimNotifyState
USBZChamberAttachmentOffsetState = {}


---@class USBZCharacterAbilityData : UDataAsset
---@field InitialHealth float
---@field InitialArmor float
---@field InitialArmorHurtReactionWeightReduction int32
---@field InitialDealtDamageMultiplier float
---@field AbilityArray TArray<TSubclassOf<USBZGameplayAbility>>
USBZCharacterAbilityData = {}



---@class USBZCharacterAnimation : UAnimInstance
---@field OnMontageInstanceEnded FSBZCharacterAnimationOnMontageInstanceEnded
---@field bRunning boolean
---@field Character ASBZCharacter
USBZCharacterAnimation = {}



---@class USBZCharacterAnimationCollection : USBZBaseCharacterAnimationCollection
---@field LeanAdditiveBlendSpace FSBZAnimationContainer
---@field StanceTransitionLFRFMontage FSBZAnimationContainer
---@field StanceTransitionRFLFMontage FSBZAnimationContainer
---@field CrouchTransitionMontage FSBZAnimationContainer
---@field UncrouchTransitionMontage FSBZAnimationContainer
---@field CrouchMoveTransitionMontage FSBZAnimationContainer
---@field UncrouchMoveTransitionMontage FSBZAnimationContainer
---@field MeleeMontage FSBZAnimationContainer
USBZCharacterAnimationCollection = {}



---@class USBZCharacterAnimationDataTP : USBZBaseCharacterAnimationData
---@field JogSpeedRange FFloatRange
---@field NormalWalkSpeedRange FFloatRange
---@field MoveYawInterpSpeed float
---@field VelocityInterpSpeed float
---@field RootYawReconcileInterpConstSpeed float
---@field RootYawStartMoveInterpConstSpeed float
---@field MinMovingSpeed float
---@field MaxSpeedWarping float
---@field MinSpeedWarping float
---@field MaxSpeedWarpingSlopeReducer float
---@field MinSpeedWarpingReducedBySlope float
---@field bEnableFixUpperbodyInMovingBS boolean
---@field TurnInPlaceBlendOut float
---@field TurnInPlacePlayRateRange FFloatInterval
---@field FootLeadingScale float
---@field FootLeadingInterpSpeed float
---@field FootLeadingMaxAngle float
---@field bEnablePivotSwitchAnimation boolean
---@field bEnableStartMoveAnimation boolean
---@field MaxTimeOffsetFromDesiredStopTime float
---@field StopMovePlayRateInterval FFloatInterval
---@field bForceReadyPoseWhenJogging boolean
---@field bForceReadyPoseWhenTurning boolean
---@field AimOffsetMaxLODUpperbody int32
---@field AimOffsetMaxLODHead int32
---@field AimOffsetMaxLODHeadLeading int32
---@field AimOffsetMaxLODFullBody int32
---@field AimOffsetMaxLODUpperBodyCrouchIdle int32
---@field AimOffsetMaxLODUpperBodyCrouchMoving int32
---@field MinStartMovePlayRate float
---@field MaxIncreasingAimYawDuringStartMove float
---@field MovingJumpMinSpeed float
---@field MinAimPitchReadyPose float
---@field bEnableRandomLookAt boolean
---@field RandomLookAtSpeed FFloatInterval
---@field RandomLookAtRestDuration FFloatInterval
---@field RandomLookAtYawRange FFloatInterval
---@field RandomLookAtPitchRange FFloatInterval
---@field RandomLookAtSpeedExp float
---@field bEnableSnapViewToTarget boolean
---@field SnapToViewDuration float
---@field ForceEquippedPoseDuration float
---@field LeaningStrengthAlpha float
---@field LeanAccelerationInterval FFloatInterval
---@field LeanRotationInterval FFloatInterval
---@field bEnableHeadLeading boolean
---@field HeadLeadingUpperBodyLerpSpeed float
---@field HeadLeadingHeadInterpSpeed float
---@field HeadLeadingMaxAngle float
---@field bEnableAdditiveHeadLeading boolean
---@field HeadLeadingMaxAdditiveYaw float
---@field HeadLeadingAdditiveYawInterpSpeed float
---@field HeadLeadingAdditiveYawAlpha float
---@field AnkleAdjustmentMaxSpeed float
---@field RagdollBoneScale TMap<FName, float>
---@field DefaultRagdollBoneScale float
---@field CrouchTransitionDuration float
---@field CrouchTransitionExp float
---@field bUseHigherLowerBodyWhenCrouched boolean
---@field StopBlendOutTime float
---@field AdditiveHipTranslationSpeed float
---@field AdditiveHipRotationSpeed float
---@field SlopeWarpingAlpha float
---@field WrinkleAlpha float
---@field bCanDoHipsZBlending boolean
USBZCharacterAnimationDataTP = {}



---@class USBZCharacterAnimationTPP : USBZCharacterAnimation
---@field bMoving boolean
---@field bInStartMovingState boolean
---@field bInMovingState boolean
---@field bInStopMovingState boolean
---@field bStopMovingStateUsesOrientationWarping boolean
---@field bInAir boolean
---@field bMeshInAir boolean
---@field bStartJumping boolean
---@field bJumping boolean
---@field bJumpingMoving boolean
---@field bTurning boolean
---@field bStartMoving boolean
---@field bStartMovingCrouch boolean
---@field bStartMovingHasATurn boolean
---@field bCrouching boolean
---@field bAccelerating boolean
---@field bSliding boolean
---@field bWasRunningBeforeStopTransition boolean
---@field bUseAimOffsetAllUpperBody boolean
---@field bUseCrouchIdleAimOffsetAllUpperBody boolean
---@field bReloading boolean
---@field bHasLeftFootForward boolean
---@field bActivateInertialization boolean
---@field bEnableLeaning boolean
---@field bEnableFootPlacement boolean
---@field bFullBodyAction boolean
---@field bIsInLinkedFullBodyAction boolean
---@field bLinkedFullBodyActionNodeIsPlaying boolean
---@field bAimOffsetHandledInFullBodyAction boolean
---@field bEnableFootLocking boolean
---@field bEnableHeadLeading boolean
---@field bEnableWeaponRotationOverride boolean
---@field bEnableFullBodyAimOffset boolean
---@field bEnableAimOffset boolean
---@field bEnableAimOffsetUpperBodyStand boolean
---@field bEnableAimOffsetHead boolean
---@field bEnableAimOffsetHeadLeading boolean
---@field bEnableAimOffsetUpperBodyCrouchIdle boolean
---@field bEnableAimOffsetUpperBodyCrouch boolean
---@field bEnableAimOffsetFullBody boolean
---@field bRightFootStop boolean
---@field bIsTraversing boolean
---@field bIsPlayingFullBodyAnimation boolean
---@field bIsAttached boolean
---@field bIsHumanShieldVictimGrabbed boolean
---@field bEnableHipsOffset boolean
---@field bEnableRootOffset boolean
---@field bStopAnimationFinished boolean
---@field bHasStopCrouchAnimations boolean
---@field bHasStopStandAnimations boolean
---@field bTransitFromPivotSwitchToNotMoving boolean
---@field bTransitFromPivotSwitchToMoving boolean
---@field bTransitFromNotMovingToMoving boolean
---@field bTransitFromMovingToNotMoving boolean
---@field bTransitFromStartMovingToMoving boolean
---@field bTransitFromStartMovingToNotMoving boolean
---@field bTransitFromNotMovingToStartMoving boolean
---@field bTransitFromMovingToStopMoving boolean
---@field bTransitFromStopMovingToMoving boolean
---@field bTransitFromStartMovingToStopMoving boolean
---@field bTransitFromStopMovingToStartMoving boolean
---@field bTransitFromStopMovingToNotMoving boolean
---@field bTransitFromUpperBodyIdleToMoving boolean
---@field bTransitFromUpperBodyMovingToIdle boolean
---@field bTransitFromTraverseToFall boolean
---@field bTransitFromFallToStand boolean
---@field bTransitFromFallToCrouch boolean
---@field bEnableUpperBodySyncGroup boolean
---@field bNewRendered boolean
---@field bEnableFacial boolean
---@field bEnableRigidBody boolean
---@field bStartHipsZBlending boolean
---@field CurrentDialogAnimDataWrapper FSBZDialogAnimDataWrapper
---@field CurrentDialogStartTime float
---@field LipSyncBlendWeight float
---@field TraverseAnimationHandler FSBZTraverseAnimationHandler
---@field FacialAnimationBlendHandler FSBZThreeWayBlendHandler
---@field FullBodyActionBlendTime float
---@field FullBodyBlendAlpha float
---@field AnimLODType ESBZAnimLODType
---@field PoseType ESBZPoseType
---@field StartMovingPoseType ESBZPoseType
---@field AimOffsetType ESBZAimOffsetType
---@field CoveredDistSinceStartMoving float
---@field DistToPredictedStopLocation float
---@field StopPlayRate float
---@field LocomotionSpeedwarpingDir FVector
---@field SpeedWarpingScaling float
---@field SpeedWarpingAlpha float
---@field DiffYawBetweenCapsuleRotationAndDesiredVelocity float
---@field DiffYawBetweenMeshRotationAndVelocity float
---@field DiffYawBetweenRotationAndAim float
---@field UpperBodyAimRotation FRotator
---@field HeadAimRotation FRotator
---@field AdditiveRotationYaw float
---@field DiffPitchBetweenRotationAndAim float
---@field SpeedWarpingMovingData FSBZSpeedWarpingData
---@field SpeedWarpingStartMovingData FSBZSpeedWarpingData
---@field SpeedWarpingStopMovingData FSBZSpeedWarpingData
---@field FootRotationDeltaYaw float
---@field LeanXValue float
---@field LeanYValue float
---@field LeftFootPlacementBoneInfo FSBZFootPlacementBoneInfo
---@field RightFootPlacementBoneInfo FSBZFootPlacementBoneInfo
---@field SpineAdjustmentAlpha float
---@field AnkleAdjustmentAlpha float
---@field Speed float
---@field SpeedAlpha float
---@field HumanShieldAngularSpeed float
---@field HSVictimRotateAroundAlpha float
---@field CoveredDistanceSinceStartJumping float
---@field PivotSwitchHandler FSBZPivotSwitchHandler
---@field StopMoveAngle float
---@field StopMoveGaitValue float
---@field StartMoveAngle float
---@field StartMoveGaitValue float
---@field StartMoveMovementDirection ESBZMovementDirection
---@field ActionUpperBodyLayeredBlendWeight float
---@field RootYawOffset float
---@field ViewYawOffset float
---@field TurnRemainingYaw float
---@field OrientationAngle float
---@field AlphaMovingOnGround float
---@field AlphaOnGround float
---@field AlphaSpeedWarping float
---@field AlphaSpeedWarpingMoving float
---@field FeetPositionX float
---@field FeetPositionY float
---@field AimingAlpha float
---@field FootCycle FVector2D
---@field BSWalkRunPlayRate float
---@field BSWalkRunGaitValue float
---@field BSWalkRunYaw float
---@field CrouchBlendingAlpha float
---@field CrouchBlendingAlphaOnlyLoco float
---@field UpperbodyAlpha float
---@field FixUpperbodyAlpha float
---@field HigherLowerBodyAlpha float
---@field AimOffsetMaxLODUpperbody int32
---@field AimOffsetMaxLODHead int32
---@field AimOffsetMaxLODHeadLeading int32
---@field AimOffsetMaxLODFullBody int32
---@field AimOffsetMaxLODUpperBodyCrouchIdle int32
---@field AimOffsetMaxLODUpperBodyCrouchMoving int32
---@field RootOffset FVector
---@field HipsOffset FVector
---@field LeftHandAttachmentLocation FVector
---@field LeftHandAttachmentWorldLocation FVector
---@field LeftHandAttachmentWorldAffectedAxis FVector
---@field RightHandAttachmentLocation FVector
---@field RightHandAttachmentWorldLocation FVector
---@field RightHandAttachmentWorldAffectedAxis FVector
---@field LeftHandAttachmentRotation FRotator
---@field LeftHandAttachmentWorldRotation FRotator
---@field LeftHandAttachmentWorldRotationMode EBoneModificationMode
---@field RightHandAttachmentRotation FRotator
---@field RightHandAttachmentWorldRotation FRotator
---@field RightHandAttachmentWorldRotationMode EBoneModificationMode
---@field LeftHandIKAlpha float
---@field LeftHandLocalIKAlpha float
---@field LeftHandWorldIKAlpha float
---@field RightHandWorldIKAlpha float
---@field RightHandLocalIKAlpha float
---@field RightHandIKAlpha float
---@field RightHandGripAlpha float
---@field LeftHandGripAlpha float
---@field HandIKRetargetingAlpha float
---@field HipsAdditiveRotation FRotator
---@field HipsAdditiveTranslation FVector
---@field OverridenWeaponRotation FRotator
---@field CurrentTurnAnimationMontage UAnimMontage
---@field SubAnimationGraph USBZCharacterAnimationTPP
---@field CurrentTurnAnimation UAnimSequenceBase
---@field AnimationCollection USBZCharacterAnimationCollection
---@field CurrentStanceTransitionMontage UAnimMontage
---@field CurrentCrouchTransitionMontage UAnimMontage
---@field StanceTransitionLFRFMontage UAnimMontage
---@field StanceTransitionRFLFMontage UAnimMontage
---@field CrouchTransitionMontage UAnimMontage
---@field UncrouchTransitionMontage UAnimMontage
---@field CrouchMoveTransitionMontage UAnimMontage
---@field UncrouchMoveTransitionMontage UAnimMontage
---@field CrouchMontage UAnimMontage
---@field UncrouchMontage UAnimMontage
---@field CurrentEquippableClass TSoftClassPtr<ASBZEquippable>
---@field AimOffsetSliding UBlendSpaceBase
---@field AimOffsetVaulting UBlendSpaceBase
---@field AimOffsetMantling UBlendSpaceBase
---@field AimOffsetZiplining UBlendSpaceBase
---@field MoveStandBS UBlendSpaceBase
---@field MoveCrouchBS UBlendSpaceBase
---@field StartMoveStandTurnBS UBlendSpaceBase
---@field StartMoveStandBS UBlendSpaceBase
---@field StartMoveCrouchBS UBlendSpaceBase
---@field StartMoveCrouchTurnBS UBlendSpaceBase
---@field MovePivotSwitchBS UBlendSpaceBase
---@field StopStandLFoot UBlendSpaceBase
---@field StopStandRFoot UBlendSpaceBase
---@field LeanBS UBlendSpaceBase
---@field AimOffsetOnlyHeadBS UBlendSpaceBase
---@field AimOffsetAllUpperBodyBS UBlendSpaceBase
---@field AimOffsetAllUpperBodyCrouchedBS UBlendSpaceBase
---@field AimOffsetAllUpperBodyCrouchedIdleBS UBlendSpaceBase
---@field AimOffsetFullBody UBlendSpaceBase
---@field UpperBodyUnequippedStdBS UBlendSpaceBase
---@field UpperBodyUnequippedCrhBS UBlendSpaceBase
---@field UpperBodyEquippedStdBS UBlendSpaceBase
---@field UpperBodyEquippedCrhBS UBlendSpaceBase
---@field UpperBodyEquippedReadyStdBS UBlendSpaceBase
---@field UpperBodyEquippedReadyCrhBS UBlendSpaceBase
---@field UpperBodyEquippedRelaxedStdBS UBlendSpaceBase
---@field UpperBodyEquippedRelaxedCrhBS UBlendSpaceBase
---@field UpperBodyEquippedUsingStdBS UBlendSpaceBase
---@field UpperBodyEquippedUsingCrhBS UBlendSpaceBase
---@field UpperBodyLeftHandEquippedStdBS UBlendSpaceBase
---@field UpperBodyLeftHandEquippedCrhBS UBlendSpaceBase
---@field UpperBodyLeftHandEquippedUsingStdBS UBlendSpaceBase
---@field UpperBodyLeftHandEquippedUsingCrhBS UBlendSpaceBase
---@field UpperBodyUnequippedIdleBS UBlendSpaceBase
---@field UpperBodyEquippedIdleBS UBlendSpaceBase
---@field UpperBodyEquippedReadyIdleBS UBlendSpaceBase
---@field UpperBodyEquippedRelaxedIdleBS UBlendSpaceBase
---@field UpperBodyEquippedUsingIdleBS UBlendSpaceBase
---@field UpperBodyLeftHandEquippedIdleBS UBlendSpaceBase
---@field UpperBodyLeftHandEquippedUsingIdleBS UBlendSpaceBase
---@field VaultSlowStartBS UBlendSpaceBase
---@field VaultFastStartBS UBlendSpaceBase
---@field VaultExitTraverseBS UBlendSpaceBase
---@field VaultLandBS UBlendSpaceBase
---@field MantleSlowBS UBlendSpaceBase
---@field MantleFastBS UBlendSpaceBase
---@field Idle UAnimSequenceBase
---@field IdleCrouch UAnimSequenceBase
---@field StopCrouchLFoot UBlendSpaceBase
---@field StopCrouchRFoot UBlendSpaceBase
---@field JumpStart UAnimSequenceBase
---@field JumpStartStatic UAnimSequenceBase
---@field JumpStartMoving UAnimSequenceBase
---@field Fall UAnimSequenceBase
---@field HSVictimRotateAroundBS UBlendSpaceBase
---@field EquippableLeftGripPose UAnimSequenceBase
---@field EquippableRightGripPose UAnimSequenceBase
---@field CurrentStopAnimation UAnimSequence
---@field CurrentBodyGestureMontage UAnimMontage
---@field CurrentTarget AActor
---@field LookFocusHandler FSBZLookFocusHandler
---@field WrinklesHandler FSBZWrinklesHandler
---@field CurrentFullBodyMontage UAnimMontage
USBZCharacterAnimationTPP = {}



---@class USBZCharacterAttributeSet : USBZPawnAttributeSet
USBZCharacterAttributeSet = {}


---@class USBZCharacterComponent : UActorComponent
USBZCharacterComponent = {}

---@param NewSkeletalMesh USkeletalMesh
function USBZCharacterComponent:NativeOnSkeletalMeshLoaded(NewSkeletalMesh) end


---@class USBZCharacterEffectContainer : USBZPlayerStatePawnWidgetBase
---@field Panel_CharacterEffectsContainer UPanelWidget
---@field CharacterEffectWidgetClass TSubclassOf<USBZCharacterEffectWidget>
---@field ActiveEffectWidgets TMap<uint32, USBZCharacterEffectWidget>
---@field EmptyCharacterEffectsPool TArray<USBZCharacterEffectWidget>
USBZCharacterEffectContainer = {}

---@param CharacterRuntime FSBZCharacterEffectRuntime
function USBZCharacterEffectContainer:OnCharacterEffectRemoved(CharacterRuntime) end
---@param CharacterRuntime FSBZCharacterEffectRuntime
function USBZCharacterEffectContainer:OnCharacterEffectAdded(CharacterRuntime) end
---@param CharacterRuntime FSBZCharacterEffectRuntime
function USBZCharacterEffectContainer:OnCharactedEffectValueUpdated(CharacterRuntime) end
---@param CharacterRuntime FSBZCharacterEffectRuntime
function USBZCharacterEffectContainer:OnCharactedEffectCooldownProgressUpdated(CharacterRuntime) end


---@class USBZCharacterEffectDataAsset : UDataAsset
---@field CharacterEffectIcon UPaperSprite
---@field OnDisplayAudioEvent UAkAudioEvent
---@field DefaultCharacterEffectColor FLinearColor
USBZCharacterEffectDataAsset = {}



---@class USBZCharacterEffectWidget : USBZWidgetBase
---@field BuffDataAsset USBZCharacterEffectDataAsset
USBZCharacterEffectWidget = {}

---@param InNewProgress float
function USBZCharacterEffectWidget:SetProgress(InNewProgress) end
---@param InNewValue int32
function USBZCharacterEffectWidget:SetEffectValue(InNewValue) end
---@param bIsActive boolean
function USBZCharacterEffectWidget:SetActive(bIsActive) end
---@param InNewEffectValue int32
function USBZCharacterEffectWidget:OnEffectValueChanged(InNewEffectValue) end
---@param InNewProgress float
function USBZCharacterEffectWidget:OnCooldownProgressChanged(InNewProgress) end
---@param InCharacterEffectRuntime FSBZCharacterEffectRuntime
function USBZCharacterEffectWidget:OnCharacterEffectInitialized(InCharacterEffectRuntime) end
---@param InCharacterEffectRuntime FSBZCharacterEffectRuntime
function USBZCharacterEffectWidget:InitializeCharacterEffect(InCharacterEffectRuntime) end


---@class USBZCharacterEventNotifyState : UAnimNotifyState
---@field EventTag FGameplayTag
USBZCharacterEventNotifyState = {}



---@class USBZCharacterFootStepComponent : UActorComponent
---@field OverrideSoundEvent UAkAudioEvent
---@field FootStepRtpc UAkRtpc
---@field NormalStepDistance float
---@field CrouchStepDistance float
---@field RunStepDistance float
---@field TargetingStepDistance float
---@field bUseFootContactNotifies boolean
---@field InterpolationTimeMSFootstep float
---@field bCanMakeNoise boolean
---@field NormalNoiseRange float
---@field CrouchNoiseRange float
---@field RunNoiseRange float
---@field OwnerCharacter ASBZCharacter
---@field OwnerCharacterMovementComponent UCharacterMovementComponent
USBZCharacterFootStepComponent = {}



---@class USBZCharacterInteractableComponent : USBZInteractableComponent
USBZCharacterInteractableComponent = {}


---@class USBZCharacterLinkedAnimation : UAnimInstance
---@field Character ASBZCharacter
---@field CurrentEquippableClass TSoftClassPtr<ASBZEquippable>
---@field CurrentAnimationCollection USBZCharacterAnimationCollection
USBZCharacterLinkedAnimation = {}



---@class USBZCharacterManager : UObject
USBZCharacterManager = {}

---@param PreferredCharacterIndexArrayOut TArray<FSBZCharacterSlotData>
function USBZCharacterManager:GetPreferredCharacters(PreferredCharacterIndexArrayOut) end
---@param WorldContextObject UObject
---@return USBZCharacterManager
function USBZCharacterManager:GetCharacterManager(WorldContextObject) end


---@class USBZCharacterMantlingComponent : UActorComponent
---@field OverrideSoundEvent UAkAudioEvent
---@field FoleySoundEvent UAkAudioEvent
---@field bCanMakeNoise boolean
---@field MantlingNoiseRange float
---@field OwnerCharacter ASBZCharacter
---@field OwnerCharacterMovementComponent UCharacterMovementComponent
USBZCharacterMantlingComponent = {}



---@class USBZCharacterMovementComponent : UCharacterMovementComponent
---@field AgilityTrajectoryQueryParams USBZAgilityTraversalQueryParams
---@field AgilitySlideParams USBZAgilitySlideParams
---@field CurrentControlsReferenceID int32
---@field ZiplineParams USBZZiplineSettings
---@field MaxRunSpeed float
---@field MaxTargetingSpeed float
---@field MaxHSInstigatorTargetingSpeed float
---@field MaxHSInstigatorWalkingSpeed float
---@field StandingHalfHeight float
---@field TraversingHalfHeight float
---@field CharacterMovementState ESBZCharacterMovementState
USBZCharacterMovementComponent = {}

---@param bWasCancelled boolean
function USBZCharacterMovementComponent:Server_StopZipline(bWasCancelled) end
function USBZCharacterMovementComponent:Server_StopSlide() end
---@param InZipline ASBZZipline
---@param bIsMovingZiplineForward boolean
---@param InTimeOnZipline float
function USBZCharacterMovementComponent:Server_StartZipline(InZipline, bIsMovingZiplineForward, InTimeOnZipline) end
---@param MinimalTrajectory FSBZMinimalAgilityTraversalTrajectory
function USBZCharacterMovementComponent:Server_StartTraversal(MinimalTrajectory) end
---@param InSlideDirection FVector
---@param InEndSlideLocation FVector
function USBZCharacterMovementComponent:Server_StartSlide(InSlideDirection, InEndSlideLocation) end
function USBZCharacterMovementComponent:NetMulticast_StopTraversal() end
function USBZCharacterMovementComponent:NetMulticast_StopSlide() end
---@param MinimalTrajectory FSBZMinimalAgilityTraversalTrajectory
function USBZCharacterMovementComponent:NetMulticast_StartTraversal(MinimalTrajectory) end
---@param InSlideDirection FVector
---@param InEndSlideLocation FVector
function USBZCharacterMovementComponent:NetMulticast_StartSlide(InSlideDirection, InEndSlideLocation) end
---@param bWasCancelled boolean
function USBZCharacterMovementComponent:Multicast_StopZipline(bWasCancelled) end
---@param InZipline ASBZZipline
---@param bIsMovingZiplineForward boolean
---@param InTimeOnZipline float
function USBZCharacterMovementComponent:Multicast_StartZipline(InZipline, bIsMovingZiplineForward, InTimeOnZipline) end


---@class USBZCharacterMovementSettings : UDataAsset
---@field DefaultSetting FSBZCharacterMovementSetting
---@field Settings TArray<FSBZCharacterMovementSetting>
USBZCharacterMovementSettings = {}



---@class USBZCharacterPreferenceCharacterSlotButton : USBZWidgetBase
---@field OnCharacterPreferenceSlotButtonSelected FSBZCharacterPreferenceCharacterSlotButtonOnCharacterPreferenceSlotButtonSelected
---@field bIsLocked boolean
---@field ItemIndex int32
---@field CharacterInSlot USBZPlayerCharacterData
USBZCharacterPreferenceCharacterSlotButton = {}

---@param bInIsLocked boolean
function USBZCharacterPreferenceCharacterSlotButton:SetLocked(bInIsLocked) end
function USBZCharacterPreferenceCharacterSlotButton:SetIndexNone() end
---@param InItemIndex int32
function USBZCharacterPreferenceCharacterSlotButton:SetIndex(InItemIndex) end
function USBZCharacterPreferenceCharacterSlotButton:SetEmpty() end
---@param InCharacterInSlot USBZPlayerCharacterData
function USBZCharacterPreferenceCharacterSlotButton:SetCharacterInSlot(InCharacterInSlot) end
---@param bInIsActive boolean
function USBZCharacterPreferenceCharacterSlotButton:SetActive(bInIsActive) end
---@param bInIsLocked boolean
function USBZCharacterPreferenceCharacterSlotButton:OnLockedChanged(bInIsLocked) end
function USBZCharacterPreferenceCharacterSlotButton:OnIndexChanged() end
---@param bIsHovered boolean
function USBZCharacterPreferenceCharacterSlotButton:OnHovered(bIsHovered) end
function USBZCharacterPreferenceCharacterSlotButton:OnEmptySet() end
function USBZCharacterPreferenceCharacterSlotButton:OnClicked() end
function USBZCharacterPreferenceCharacterSlotButton:OnCharacterInSlotChanged() end
---@param bInIsActive boolean
function USBZCharacterPreferenceCharacterSlotButton:OnActiveChanged(bInIsActive) end
---@return boolean
function USBZCharacterPreferenceCharacterSlotButton:IsLocked() end
---@return boolean
function USBZCharacterPreferenceCharacterSlotButton:IsEmpty() end
---@return int32
function USBZCharacterPreferenceCharacterSlotButton:GetDisplayIndex() end


---@class USBZCharacterSlidingComponent : UActorComponent
---@field OverrideSoundEvent UAkAudioEvent
---@field OverrideStopSoundEvent UAkAudioEvent
---@field bCanMakeNoise boolean
---@field SlidingNoiseRange float
---@field OwnerCharacter ASBZCharacter
---@field OwnerCharacterMovementComponent UCharacterMovementComponent
USBZCharacterSlidingComponent = {}



---@class USBZCharacterVaultingComponent : UActorComponent
---@field OverrideSoundEvent UAkAudioEvent
---@field FoleySoundEvent UAkAudioEvent
---@field bCanMakeNoise boolean
---@field VaultingNoiseRange float
---@field OwnerCharacter ASBZCharacter
---@field OwnerCharacterMovementComponent UCharacterMovementComponent
USBZCharacterVaultingComponent = {}



---@class USBZCharacterVoiceComponent : UAkComponent
---@field VoiceAttachPoint FName
---@field VoiceAttachOffset FTransform
---@field VoiceSpacialRTPC UAkRtpc
---@field VoiceFilterRTPC UAkRtpc
---@field VoiceFilterRTPCValue float
---@field SoundBanks TArray<UAkAudioBank>
---@field DialogAnimDataCollection USBZDialogAnimDataCollection
---@field VoiceEventDataArray FSBZVoiceEventData
---@field DefaultSwitches TMap<FString, FString>
---@field RandomDefaultSwitches TArray<FSBZRandomDefaultSwitchStates>
---@field RandomVoiceSwitch FSBZRandomDefaultSwitchStates
---@field StartFatigueEventName FString
---@field StopFatigueEventName FString
---@field FatigueRTPC FString
---@field CommentAssets FSBZCharacterCommentAssets
---@field AIAlertnessComments TMap<FString, FSBZAIAlertnessComment>
---@field AIAlertnessDialogRules TMap<FString, FSBZAIAlertnessDialogRules>
---@field RemoveLipSyncPrefix FString
---@field RemoveSubtitlePrefix FString
---@field RemoveSubtitleSuffix FString
---@field SBZCharacterOwner ASBZCharacter
---@field PerformsInDialog USBZDialogDataAsset
USBZCharacterVoiceComponent = {}

function USBZCharacterVoiceComponent:StopTalking() end
---@param CommentDataAsset USBZVoiceCommentDataAsset
---@param InPlayingPriority ESBZVoicePriority
---@param bServerInstigated boolean
function USBZCharacterVoiceComponent:Server_SaySystemComment(CommentDataAsset, InPlayingPriority, bServerInstigated) end
---@param CommentDataAsset USBZVoiceCommentDataAsset
---@param InPlayingPriority ESBZVoicePriority
---@param bReplicated boolean
---@param bServerInstigated boolean
function USBZCharacterVoiceComponent:SaySystemComment(CommentDataAsset, InPlayingPriority, bReplicated, bServerInstigated) end
---@param GruntType ESBZVoiceGruntType
function USBZCharacterVoiceComponent:SayGrunt(GruntType) end
---@param CommentState FString
function USBZCharacterVoiceComponent:SayDialogLineByCharacterEvent(CommentState) end
---@param AudioEvent UAkAudioEvent
function USBZCharacterVoiceComponent:SayDialogLine(AudioEvent) end
---@param CommentState FString
---@param InCharacterVoiceEvent FSBZVoiceEventData
---@param InPlayingPriority ESBZVoicePriority
function USBZCharacterVoiceComponent:SayCharacterEvent(CommentState, InCharacterVoiceEvent, InPlayingPriority) end
---@param AudioEvent UAkAudioEvent
---@param InPlayingPriority ESBZVoicePriority
function USBZCharacterVoiceComponent:Say(AudioEvent, InPlayingPriority) end
function USBZCharacterVoiceComponent:OnTakeDamage() end
---@param NewValue float
---@param OldValue float
---@param MaxValue float
function USBZCharacterVoiceComponent:OnStaminaValueChanged(NewValue, OldValue, MaxValue) end
function USBZCharacterVoiceComponent:OnDeath() end
---@param CommentDataAsset USBZVoiceCommentDataAsset
---@param InPlayingPriority ESBZVoicePriority
function USBZCharacterVoiceComponent:Multicast_SaySystemComment_ServerInstigated(CommentDataAsset, InPlayingPriority) end
---@param CommentDataAsset USBZVoiceCommentDataAsset
---@param InPlayingPriority ESBZVoicePriority
function USBZCharacterVoiceComponent:Multicast_SaySystemComment(CommentDataAsset, InPlayingPriority) end
---@param CallEventData FSBZPlayerCallEvent
function USBZCharacterVoiceComponent:CallRecieved(CallEventData) end


---@class USBZChat : UObject
---@field OnlineChatHistory TArray<FSBZChatMessage>
---@field OnMessageReceived FSBZChatOnMessageReceived
---@field MutedPlayers TArray<FUniqueNetIdRepl>
---@field WhisperOptions TArray<FSBZWhisperInfo>
USBZChat = {}

---@param WorldContextObject UObject
---@param Message FString
function USBZChat:SendSystemChatMessage(WorldContextObject, Message) end
---@param ChatMessage FSBZChatMessage
function USBZChat:SendChatMessage(ChatMessage) end
---@return TArray<FSBZWhisperInfo>
function USBZChat:GetWhisperOptions() end
---@param CurrentWhisper FUniqueNetIdRepl
---@param OutNextWhisper FUniqueNetIdRepl
---@param OutNextWhisperName FString
---@param bOutNoWhisperOptions boolean
---@return boolean
function USBZChat:GetNextWhisperOption(CurrentWhisper, OutNextWhisper, OutNextWhisperName, bOutNoWhisperOptions) end


---@class USBZChatGameSettings : UDataAsset
---@field FadeOutTimer float
---@field MaxCharPerMessage int32
---@field MinCharPerMessage int32
---@field MessageCooldownTimer float
---@field MaxMessagesBeforeBlock int32
---@field MessageSpamCooldown float
---@field MaxTotalDisplayedMessages int32
USBZChatGameSettings = {}



---@class USBZChatSettings : UDeveloperSettings
---@field Schematic TSoftObjectPtr<USBZChatGameSettings>
---@field CachedSchematic USBZChatGameSettings
USBZChatSettings = {}

---@return USBZChatGameSettings
function USBZChatSettings:GetChatSettings() end


---@class USBZCheatManager : USBZCheatManagerBase
---@field MenuInputComponent UInputComponent
---@field SelectedWeaponPartSlot USBZWeaponPartSlot
---@field SelectedWeaponPart USBZWeaponPartDataAsset
---@field SelectedWeaponCosmeticsPartSlot USBZCosmeticsPartSlot
---@field SelectedWeaponCosmeticsPart USBZCosmeticsDataAsset
USBZCheatManager = {}

---@param PlayerIndex int32
function USBZCheatManager:ViewTarget(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:ViewSelfByIndex(PlayerIndex) end
---@param CollisionChannel ECollisionChannel
---@param Profile FName
---@param bIsObjectType boolean
---@param bIsComplex boolean
---@param Distance float
---@param MaxHitCount int32
---@param Radius float
---@param DrawDuration float
---@param bIsDrawPersistent boolean
function USBZCheatManager:Trace(CollisionChannel, Profile, bIsObjectType, bIsComplex, Distance, MaxHitCount, Radius, DrawDuration, bIsDrawPersistent) end
---@param PlayerIndex int32
function USBZCheatManager:ToggleInvisiblePlayer(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:ToggleInaudiblePlayer(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:ToggleGod(PlayerIndex) end
function USBZCheatManager:ToggleDebugCameraAndTeleport() end
---@param PlayerIndex int32
function USBZCheatManager:ToggleCrouchedTarget(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:ThrowItem(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:TasePlayer(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:SurrenderTarget(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:SubduePlayer(PlayerIndex) end
function USBZCheatManager:StartEndlessAssault() end
function USBZCheatManager:SpawnFBI() end
---@param Count int32
---@param Distance float
---@param Offset float
---@param Yaw float
---@param PlayerIndex int32
function USBZCheatManager:SpawnAllAITypes(Count, Distance, Offset, Yaw, PlayerIndex) end
---@param AssetName FName
---@param Count int32
---@param Distance float
---@param PlayerIndex int32
---@param Yaw float
function USBZCheatManager:Spawn(AssetName, Count, Distance, PlayerIndex, Yaw) end
function USBZCheatManager:SimulateChallengeNotificationReceived() end
---@param Count int32
---@param PlayerIndex int32
function USBZCheatManager:SetToolAmmo(Count, PlayerIndex) end
---@param ToolDataName FName
---@param PlayerIndex int32
function USBZCheatManager:SetTool(ToolDataName, PlayerIndex) end
---@param Count int32
---@param ThrowableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetThrowableAmmo(Count, ThrowableIndex, PlayerIndex) end
---@param ThrowableDataName FName
---@param ThrowableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetThrowable(ThrowableDataName, ThrowableIndex, PlayerIndex) end
---@param Tag FName
---@param Count int32
---@param PlayerIndex int32
function USBZCheatManager:SetTargetLooseTagCount(Tag, Count, PlayerIndex) end
---@param EquippableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetTargetEquippableIndexTarget(EquippableIndex, PlayerIndex) end
---@param EquippableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetTargetEquippableIndex(EquippableIndex, PlayerIndex) end
---@param Stance ESBZCharacterStance
---@param PlayerIndex int32
function USBZCheatManager:SetTargetCharacterStance(Stance, PlayerIndex) end
---@param SkillDataName FName
---@param bIsAcquired boolean
---@param PlayerIndex int32
function USBZCheatManager:SetSkill(SkillDataName, bIsAcquired, PlayerIndex) end
---@param Tag FName
---@param Count int32
function USBZCheatManager:SetSharedTagCount(Tag, Count) end
---@param bIsRegistered boolean
function USBZCheatManager:SetRegisterRewardPrints(bIsRegistered) end
---@param Experience int32
---@param PlayerIndex int32
function USBZCheatManager:SetPreMatchInfamyExperience(Experience, PlayerIndex) end
---@param Name FString
---@param PlayerIndex int32
function USBZCheatManager:SetPlayerName(Name, PlayerIndex) end
---@param PlayerMaskName FName
---@param PlayerIndex int32
function USBZCheatManager:SetPlayerMask(PlayerMaskName, PlayerIndex) end
---@param CharacterClassName FName
---@param PlayerIndex int32
function USBZCheatManager:SetPlayerCharacter(CharacterClassName, PlayerIndex) end
---@param PlayerArmorName FName
---@param PlayerIndex int32
function USBZCheatManager:SetPlayerArmor(PlayerArmorName, PlayerIndex) end
---@param Count int32
---@param PlaceableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetPlaceableAmmo(Count, PlaceableIndex, PlayerIndex) end
---@param PlaceableDataName FName
---@param PlaceableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetPlaceable(PlaceableDataName, PlaceableIndex, PlayerIndex) end
---@param InProgress float
---@param PlayerIndex int32
function USBZCheatManager:SetOverkillWeaponProgress(InProgress, PlayerIndex) end
---@param OptionalMilestoneName FString
function USBZCheatManager:SetOptionalMilestonePassed(OptionalMilestoneName) end
---@param bIsEnabled boolean
function USBZCheatManager:SetMissionFailedEnabled(bIsEnabled) end
---@param MilestonesPassed int32
function USBZCheatManager:SetMilestonesPassedStealth(MilestonesPassed) end
---@param MilestonesPassed int32
function USBZCheatManager:SetMilestonesPassedLoud(MilestonesPassed) end
---@param MilestoneName FString
function USBZCheatManager:SetMilestonePassed(MilestoneName) end
---@param MaxAICrewCount int32
function USBZCheatManager:SetMaxAICrewCountOverride(MaxAICrewCount) end
---@param bIsMarked boolean
---@param PlayerIndex int32
function USBZCheatManager:SetMarkedTarget(bIsMarked, PlayerIndex) end
---@param Tag FName
---@param Count int32
---@param PlayerIndex int32
function USBZCheatManager:SetLooseTagCount(Tag, Count, PlayerIndex) end
---@param bIsLastArrestedByGuard boolean
---@param PlayerIndex int32
function USBZCheatManager:SetLastArrestedByGuard(bIsLastArrestedByGuard, PlayerIndex) end
---@param bIsJesus boolean
---@param PlayerIndex int32
function USBZCheatManager:SetJesus(bIsJesus, PlayerIndex) end
---@param bIsInvisible boolean
---@param PlayerIndex int32
function USBZCheatManager:SetInvisiblePlayer(bIsInvisible, PlayerIndex) end
---@param ModeIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetInteractorModeIndex(ModeIndex, PlayerIndex) end
---@param bHasInifinteAmmo boolean
---@param PlayerIndex int32
function USBZCheatManager:SetInfiniteAmmo(bHasInifinteAmmo, PlayerIndex) end
---@param Level int32
---@param Experience int32
function USBZCheatManager:SetInfamyLevelExperience(Level, Experience) end
---@param Amount int32
---@param PlayerIndex int32
function USBZCheatManager:SetInfamyLevel(Amount, PlayerIndex) end
---@param Amount int32
---@param PlayerIndex int32
function USBZCheatManager:SetInfamyExperience(Amount, PlayerIndex) end
---@param bIsInaudible boolean
---@param PlayerIndex int32
function USBZCheatManager:SetInaudiblePlayer(bIsInaudible, PlayerIndex) end
---@param HeistState EPD3HeistState
function USBZCheatManager:SetHeistState(HeistState) end
---@param bIsGod boolean
---@param PlayerIndex int32
function USBZCheatManager:SetGod(bIsGod, PlayerIndex) end
---@param Value int32
function USBZCheatManager:SetFriendlyFireSettings(Value) end
---@param bIsEquipped boolean
---@param PlayerIndex int32
function USBZCheatManager:SetEquippedTarget(bIsEquipped, PlayerIndex) end
---@param WeaponPresetGuid FString
---@param EquippableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetEquippableWeaponPreset(WeaponPresetGuid, EquippableIndex, PlayerIndex) end
---@param EquippableDataName FName
---@param EquippableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetEquippablePreset(EquippableDataName, EquippableIndex, PlayerIndex) end
---@param SlotDataName FName
---@param PartDataName FName
---@param EquippableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetEquippablePart(SlotDataName, PartDataName, EquippableIndex, PlayerIndex) end
---@param EquippableDataName FName
---@param EquippableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetEquippable(EquippableDataName, EquippableIndex, PlayerIndex) end
---@param bIsEnabled boolean
function USBZCheatManager:SetDrawTransformEnabled(bIsEnabled) end
---@param X float
---@param Y float
---@param Z float
---@param Yaw float
---@param Pitch float
---@param Roll float
---@param ScaleX float
---@param ScaleY float
---@param ScaleZ float
function USBZCheatManager:SetDrawTransform(X, Y, Z, Yaw, Pitch, Roll, ScaleX, ScaleY, ScaleZ) end
---@param Difficulty ESBZDifficulty
function USBZCheatManager:SetDifficulty(Difficulty) end
---@param Type ESBZCurrencyCode
---@param Amount int32
---@param PlayerIndex int32
function USBZCheatManager:SetCurrency(Type, Amount, PlayerIndex) end
---@param bIsCrouched boolean
---@param PlayerIndex int32
function USBZCheatManager:SetCrouchedTarget(bIsCrouched, PlayerIndex) end
---@param Progression float
function USBZCheatManager:SetAssaultLevelProgression(Progression) end
---@param bIsActive boolean
function USBZCheatManager:SetAssaultActive(bIsActive) end
---@param NewAmmoCount float
---@param WeaponIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetAmmoLoaded(NewAmmoCount, WeaponIndex, PlayerIndex) end
---@param NewAmmoCount float
---@param WeaponIndex int32
---@param PlayerIndex int32
function USBZCheatManager:SetAmmoInventory(NewAmmoCount, WeaponIndex, PlayerIndex) end
---@param bIsAcquired boolean
---@param PlayerIndex int32
function USBZCheatManager:SetAllSkills(bIsAcquired, PlayerIndex) end
---@param AddTimeout float
function USBZCheatManager:SetAddMissionFailedTimeout(AddTimeout) end
---@param Count int32
---@param AssetName FName
function USBZCheatManager:SecureBag(Count, AssetName) end
---@param bClearClaim boolean
function USBZCheatManager:SecureAllAvailableLoot(bClearClaim) end
---@param PlayerIndex int32
function USBZCheatManager:ReviveTarget(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:RevivePlayer(PlayerIndex) end
function USBZCheatManager:ResetCVars() end
function USBZCheatManager:RequestMissionSuccess() end
function USBZCheatManager:RequestMissionFail() end
---@param Result ESBZEndMissionResult
---@param OutroVariation int32
function USBZCheatManager:RequestMissionEnd(Result, OutroVariation) end
---@param Description FString
---@param bIsEverywhere boolean
---@param bIsBlockerChecked boolean
---@param bIsInteractableChecked boolean
function USBZCheatManager:ReportBug(Description, bIsEverywhere, bIsBlockerChecked, bIsInteractableChecked) end
---@param Type ESBZCurrencyCode
---@param Amount int32
function USBZCheatManager:RemoveCurrency(Type, Amount) end
---@param Type ESBZPlayerAbilityBuffType
---@param PlayerIndex int32
function USBZCheatManager:RefreshPlayerAbilityBuff(Type, PlayerIndex) end
function USBZCheatManager:RebuildAssetLookup() end
---@param PlayerIndex int32
function USBZCheatManager:PrintWorldInfo(PlayerIndex) end
---@param bIsPrintEnabled boolean
---@param Tag FName
---@param PlayerIndex int32
function USBZCheatManager:PrintTargetTagChanges(bIsPrintEnabled, Tag, PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:PrintTarget(PlayerIndex) end
---@param bIsPrintEnabled boolean
---@param Tag FName
---@param PlayerIndex int32
function USBZCheatManager:PrintTagChanges(bIsPrintEnabled, Tag, PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:PrintServerWorldInfo(PlayerIndex) end
---@param EndMissionResultData FSBZEndMissionResultData
function USBZCheatManager:PrintRewardLogEvent(EndMissionResultData) end
function USBZCheatManager:PrintPlayerIDArray() end
function USBZCheatManager:PrintMissionSeed() end
---@param MilestoneType ESBZMilestoneType
---@param MilestoneName FString
function USBZCheatManager:PrintExperienceMilestone(MilestoneType, MilestoneName) end
---@param NotifyName FName
---@param bIsOnlyMontages boolean
function USBZCheatManager:PrintAnimNotifies(NotifyName, bIsOnlyMontages) end
---@param bIsTemplate boolean
function USBZCheatManager:PrintAllInteractable(bIsTemplate) end
---@param PlayerIndex int32
function USBZCheatManager:PossessTarget(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:PossessSelf(PlayerIndex) end
---@param bShouldHavePerception boolean
function USBZCheatManager:PerceptionOnAllAI(bShouldHavePerception) end
---@param CollisionChannel ECollisionChannel
---@param Profile FName
---@param bIsObjectType boolean
---@param bIsComplex boolean
---@param Distance float
---@param MaxHitCount int32
---@param Radius float
---@param DrawDuration float
---@param bIsDrawPersistent boolean
function USBZCheatManager:OverlapSphere(CollisionChannel, Profile, bIsObjectType, bIsComplex, Distance, MaxHitCount, Radius, DrawDuration, bIsDrawPersistent) end
function USBZCheatManager:LogSceneComponents() end
function USBZCheatManager:LobotomizeCrewAI() end
function USBZCheatManager:LobotomizeAllAI() end
function USBZCheatManager:ListenToRewardLogs() end
---@param PlayerIndex int32
function USBZCheatManager:KillTarget(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:KillPlayer(PlayerIndex) end
function USBZCheatManager:KillAllAI() end
---@param Action ESBZInteractionAction
---@param PlayerIndex int32
function USBZCheatManager:InteractAITarget(Action, PlayerIndex) end
---@param AxisName FName
---@param X float
---@param Y float
---@param Z float
---@param PlayerIndex int32
function USBZCheatManager:InputVectorAxisTarget(AxisName, X, Y, Z, PlayerIndex) end
---@param AxisName FName
---@param X float
---@param Y float
---@param Z float
---@param PlayerIndex int32
function USBZCheatManager:InputVectorAxisPlayer(AxisName, X, Y, Z, PlayerIndex) end
---@param Key FKey
---@param InputEvent EInputEvent
---@param PlayerIndex int32
function USBZCheatManager:InputKeyTarget(Key, InputEvent, PlayerIndex) end
---@param Key FKey
---@param InputEvent EInputEvent
---@param PlayerIndex int32
function USBZCheatManager:InputKeyPlayer(Key, InputEvent, PlayerIndex) end
---@param AxisName FName
---@param InputValue float
---@param PlayerIndex int32
function USBZCheatManager:InputAxisTarget(AxisName, InputValue, PlayerIndex) end
---@param AxisName FName
---@param InputValue float
---@param PlayerIndex int32
function USBZCheatManager:InputAxisPlayer(AxisName, InputValue, PlayerIndex) end
---@param ActionName FName
---@param InputEvent EInputEvent
---@param bIsReleaseCancelingAbility boolean
---@param PlayerIndex int32
function USBZCheatManager:InputActionTarget(ActionName, InputEvent, bIsReleaseCancelingAbility, PlayerIndex) end
---@param ActionName FName
---@param InputEvent EInputEvent
---@param PlayerIndex int32
function USBZCheatManager:InputActionPlayer(ActionName, InputEvent, PlayerIndex) end
---@param AccelByteItemIdString FString
---@param AccelByteItemSku FString
---@param PlayerIndex int32
function USBZCheatManager:GrantUserEntitlement(AccelByteItemIdString, AccelByteItemSku, PlayerIndex) end
function USBZCheatManager:GrabInstantLoot() end
---@param Count int32
---@param PlayerIndex int32
function USBZCheatManager:GiveToolAmmo(Count, PlayerIndex) end
---@param Count int32
---@param ThrowableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:GiveThrowableAmmo(Count, ThrowableIndex, PlayerIndex) end
---@param Count int32
---@param PlaceableIndex int32
---@param PlayerIndex int32
function USBZCheatManager:GivePlaceableAmmo(Count, PlaceableIndex, PlayerIndex) end
---@param Amount int32
---@param WeaponIndex int32
---@param PlayerIndex int32
function USBZCheatManager:GiveAmmo(Amount, WeaponIndex, PlayerIndex) end
---@param Key FKey
function USBZCheatManager:GamepadOpenInGameCheatMenu(Key) end
---@param Type ESBZPlayerAbilityBuffType
---@param bIsRefreshAllowed boolean
---@param PlayerIndex int32
function USBZCheatManager:GainPlayerAbilityBuff(Type, bIsRefreshAllowed, PlayerIndex) end
---@param ClassName FName
---@param bIsSubClassesIncluded boolean
---@param bIsBlueprintsIncluded boolean
---@param bIsAssetsLoaded boolean
function USBZCheatManager:FindClassReferences(ClassName, bIsSubClassesIncluded, bIsBlueprintsIncluded, bIsAssetsLoaded) end
---@param bIsComplex boolean
---@param TraceDistance float
---@param TraceRadius float
---@param OverlapDistance float
---@param OverlapRadius float
---@param MaxHitCountTrace int32
---@param MaxHitCountOverlap int32
---@param DrawDuration float
---@param bIsDrawPersistent boolean
function USBZCheatManager:FindBlocker(bIsComplex, TraceDistance, TraceRadius, OverlapDistance, OverlapRadius, MaxHitCountTrace, MaxHitCountOverlap, DrawDuration, bIsDrawPersistent) end
---@param PlayerIndex int32
function USBZCheatManager:EquipOverkillWeapon(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:DumpAllPlayerStatistics(PlayerIndex) end
function USBZCheatManager:DumpAllPlayersInfamyAndPlatform() end
function USBZCheatManager:DumpAllPlayersAccelByteDisplayName() end
---@param PlayerIndex int32
function USBZCheatManager:DestroyTargetAI(PlayerIndex) end
function USBZCheatManager:DestroyAllDebris() end
---@param bOnlyRagdolls boolean
function USBZCheatManager:DestroyAllAI(bOnlyRagdolls) end
---@param PlayerIndex int32
function USBZCheatManager:DefeatTarget(PlayerIndex) end
---@param bIsDirectIntoCustody boolean
---@param PlayerIndex int32
function USBZCheatManager:DefeatPlayer(bIsDirectIntoCustody, PlayerIndex) end
function USBZCheatManager:DebugVehicleSplineData() end
---@param LocID FString
function USBZCheatManager:DebugShowSubtitle(LocID) end
function USBZCheatManager:DebugCreateProjectileImpact() end
function USBZCheatManager:DebugCreateFootstepImpact() end
function USBZCheatManager:DebugCreateExplosionImpact() end
function USBZCheatManager:DebugCreateBloodSplatterImpact() end
---@param Damage float
---@param DamageWeight ESBZDamageWeight
---@param DamageWeightModifier int32
---@param DamageTypeName FName
---@param PlayerIndex int32
function USBZCheatManager:DamagePlayer(Damage, DamageWeight, DamageWeightModifier, DamageTypeName, PlayerIndex) end
---@param Damage float
---@param DamageWeight ESBZDamageWeight
---@param DamageWeightModifier int32
---@param DamageTypeName FName
---@param PlayerIndex int32
function USBZCheatManager:DamageCharacter(Damage, DamageWeight, DamageWeightModifier, DamageTypeName, PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManager:CuffPlayer(PlayerIndex) end
---@param Type ESBZPlayerAbilityBuffType
---@param PlayerIndex int32
function USBZCheatManager:ConsumePlayerAbilityBuff(Type, PlayerIndex) end
---@param StatCode FString
---@param Count int32
---@param PlayerIndex int32
function USBZCheatManager:ChangeStatCode(StatCode, Count, PlayerIndex) end
---@param Amount float
function USBZCheatManager:ChangeAssaultDrama(Amount) end
---@param Caller EPD3DispatchCaller
---@param Reason EPD3DispatchCallerReason
function USBZCheatManager:CallDispatcher(Caller, Reason) end
---@param AssetName FName
---@param Duration float
---@param NameMagnitudeString FString
---@param PlayerIndex int32
function USBZCheatManager:ApplyGameplayEffectTarget(AssetName, Duration, NameMagnitudeString, PlayerIndex) end
---@param Type ESBZCurrencyCode
---@param Amount int32
function USBZCheatManager:AddCurrency(Type, Amount) end


---@class USBZCheatManagerBase : UCheatManager
---@field InputComponent UInputComponent
---@field Selection FSBZDebugSelection
---@field LastSelection FSBZDebugSelection
---@field AccelByteAdminHelper USBZAccelByteAdminHelper
USBZCheatManagerBase = {}

function USBZCheatManagerBase:VoteRestartLevel() end
---@param PlayerIndex int32
function USBZCheatManagerBase:UnselectSocket(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManagerBase:UnselectComponent(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManagerBase:Unselect(PlayerIndex) end
function USBZCheatManagerBase:ToggleMuteMusic() end
function USBZCheatManagerBase:ToggleInGameCheatMenu() end
function USBZCheatManagerBase:ToggleDrawDebugSpread() end
---@param CVar FString
---@param First int32
---@param Second int32
function USBZCheatManagerBase:ToggleCVar(CVar, First, Second) end
---@param Override int32
function USBZCheatManagerBase:SetInputTypeOverride(Override) end
---@param EarnedExperiencePoints int32
function USBZCheatManagerBase:SetDebugEarnedExperiencePoints(EarnedExperiencePoints) end
---@param Name FString
function USBZCheatManagerBase:SetCulture(Name) end
---@param CameraMode FName
---@param PlayerIndex int32
function USBZCheatManagerBase:SetCameraMode(CameraMode, PlayerIndex) end
---@param Name FName
---@param Value float
---@param PlayerIndex int32
function USBZCheatManagerBase:SetAudioRTPCValue(Name, Value, PlayerIndex) end
---@param Command FString
---@param bIsExecutedOnAll boolean
---@param bIsLocallyControlledOnly boolean
---@param PlayerIndex int32
function USBZCheatManagerBase:ServerCommand(Command, bIsExecutedOnAll, bIsLocallyControlledOnly, PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectTarget(PlayerIndex) end
---@param Name FName
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectSocketName(Name, PlayerIndex) end
---@param Index int32
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectSocketIndex(Index, PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectParentSocket(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectParentActor(PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectLast(PlayerIndex) end
---@param Name FName
---@param DepthStencil int32
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectComponentName(Name, DepthStencil, PlayerIndex) end
---@param Index int32
---@param DepthStencil int32
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectComponentIndex(Index, DepthStencil, PlayerIndex) end
---@param ClassName FName
---@param DepthStencil int32
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectComponentClass(ClassName, DepthStencil, PlayerIndex) end
---@param Index int32
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectChild(Index, PlayerIndex) end
---@param Name FName
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectActorName(Name, PlayerIndex) end
---@param ClassName FName
---@param PlayerIndex int32
function USBZCheatManagerBase:SelectActorClass(ClassName, PlayerIndex) end
function USBZCheatManagerBase:SaveProgressionSaveGame() end
function USBZCheatManagerBase:ResetSettingsSaveGame() end
function USBZCheatManagerBase:ResetProgressionSaveGame() end
---@param Password FString
function USBZCheatManagerBase:ResetMyAccount(Password) end
function USBZCheatManagerBase:RequestSwitchUser() end
---@param State ESBZGameMachineStateError
---@param PlayerIndex int32
function USBZCheatManagerBase:RequestGameError(State, PlayerIndex) end
---@param Text FString
---@param bIsDecodingNeeded boolean
function USBZCheatManagerBase:PrintWarning(Text, bIsDecodingNeeded) end
function USBZCheatManagerBase:PrintVersion() end
---@param bIsLocallyControlledOnly boolean
---@param PlayerIndex int32
function USBZCheatManagerBase:PrintTargetAbilitySystem(bIsLocallyControlledOnly, PlayerIndex) end
function USBZCheatManagerBase:PrintStuckInfo() end
---@param bIsChildActorIncluded boolean
---@param PlayerIndex int32
function USBZCheatManagerBase:PrintSelectionHierarchy(bIsChildActorIncluded, PlayerIndex) end
---@param PlayerIndex int32
function USBZCheatManagerBase:PrintSelection(PlayerIndex) end
---@param Text FString
---@param bIsDecodingNeeded boolean
function USBZCheatManagerBase:PrintLog(Text, bIsDecodingNeeded) end
function USBZCheatManagerBase:PrintInputEnabledBothCurrent() end
---@param PlayerIndex int32
function USBZCheatManagerBase:PrintInputEnabled(PlayerIndex) end
---@param Text FString
---@param bIsDecodingNeeded boolean
function USBZCheatManagerBase:PrintError(Text, bIsDecodingNeeded) end
function USBZCheatManagerBase:PrintAbilitySystemBothCurrent() end
---@param PlayerIndex int32
function USBZCheatManagerBase:PrintAbilitySystem(PlayerIndex) end
---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function USBZCheatManagerBase:OnEndPlay(Actor, EndPlayReason) end
function USBZCheatManagerBase:LoadProgressionSaveGame() end
---@param MaxCount int32
function USBZCheatManagerBase:FetchAllVendorItems(MaxCount) end
---@param UserId FString
---@param PlayerIndex int32
function USBZCheatManagerBase:FakeInvite(UserId, PlayerIndex) end
---@param File FString
function USBZCheatManagerBase:ExecF(File) end
function USBZCheatManagerBase:DumpWeaponPresetAssets() end
function USBZCheatManagerBase:DumpAssetDatabase() end
function USBZCheatManagerBase:DumpActiveLoadout() end
---@param bIsGraceful boolean
function USBZCheatManagerBase:DisconnectServer(bIsGraceful) end
---@param bIsLocallyDisconnected boolean
---@param bIsGraceful boolean
---@param PlayerIndex int32
function USBZCheatManagerBase:DisconnectPlayer(bIsLocallyDisconnected, bIsGraceful, PlayerIndex) end
function USBZCheatManagerBase:DisableTimeouts() end
function USBZCheatManagerBase:DeleteProgressionSaveGame() end
function USBZCheatManagerBase:DeleteMyAccount() end
function USBZCheatManagerBase:DebugVoteRecall() end
function USBZCheatManagerBase:DebugVotePositive() end
function USBZCheatManagerBase:DebugVoteNegative() end
function USBZCheatManagerBase:DebugVoteInit() end
---@param StatCode FString
---@param Increment int32
function USBZCheatManagerBase:DebugIncrementPlayerStat(StatCode, Increment) end
---@param Tag FString
---@param Status FString
---@param Offset int32
---@param Limit int32
function USBZCheatManagerBase:DebugChallengeRecords(Tag, Status, Offset, Limit) end
function USBZCheatManagerBase:ClearFriends() end


---@class USBZCheatManagerMainMenu : USBZCheatManagerBase
---@field MenuInputComponent UInputComponent
---@field SelectedMaskSprayCanData USBZSprayCanData
---@field SuitPartConfigs USBZSuitPartConfig
---@field IconTextureSet TSet<UTexture2D>
USBZCheatManagerMainMenu = {}

---@param AchievementId FString
function USBZCheatManagerMainMenu:WriteAchievement(AchievementId) end
function USBZCheatManagerMainMenu:UseDefaultSuit() end
function USBZCheatManagerMainMenu:UseDefaultMask() end
function USBZCheatManagerMainMenu:UnlockCharacterForTutorial() end
---@param LoadoutIndex uint32
---@param ConfigSlotIndex uint32
function USBZCheatManagerMainMenu:SetSecondaryWeaponLoadout(LoadoutIndex, ConfigSlotIndex) end
---@param LoadoutIndex uint32
---@param ConfigSlotIndex uint32
function USBZCheatManagerMainMenu:SetPrimaryWeaponLoadout(LoadoutIndex, ConfigSlotIndex) end
---@param ConfigSlotIndex uint32
function USBZCheatManagerMainMenu:SetEquippiedSuitInventoryIndex(ConfigSlotIndex) end
---@param ConfigSlotIndex uint32
function USBZCheatManagerMainMenu:SetEquippiedMaskInventoryIndex(ConfigSlotIndex) end
---@param bIsSetCheatAllowAttachAllWeaponParts boolean
function USBZCheatManagerMainMenu:SetCheatAllowAttachAllWeaponParts(bIsSetCheatAllowAttachAllWeaponParts) end
---@param ActiveLoadoutIndex int32
function USBZCheatManagerMainMenu:SetActiveLoadoutIndex(ActiveLoadoutIndex) end
---@param Message FString
function USBZCheatManagerMainMenu:SendPartyMessage(Message) end
---@param SelectedCharacterIndex int32
---@param SlotIndex int32
function USBZCheatManagerMainMenu:SelectCharacterIntoSlot(SelectedCharacterIndex, SlotIndex) end
---@param SelectedCharacterIndex int32
function USBZCheatManagerMainMenu:SelectCharacterIntoFirstAvailableSlot(SelectedCharacterIndex) end
function USBZCheatManagerMainMenu:ResetPriceProgression() end
---@param SlotIndex uint32
---@param SlotName FString
function USBZCheatManagerMainMenu:RemoveWeaponPartConfig(SlotIndex, SlotName) end
---@param WeaponEntitlementIdString FString
function USBZCheatManagerMainMenu:RemoveWeaponDummyPattern(WeaponEntitlementIdString) end
---@param WeaponEntitlementIdString FString
function USBZCheatManagerMainMenu:RemoveWeaponDummyCharm(WeaponEntitlementIdString) end
---@param SlotIndex int32
function USBZCheatManagerMainMenu:RemoveCharacterFromSelectedSlot(SlotIndex) end
function USBZCheatManagerMainMenu:RemoveAsset() end
function USBZCheatManagerMainMenu:QueryAchivements() end
---@param ItemId FString
function USBZCheatManagerMainMenu:PurchaseRealMoneyItems(ItemId) end
---@param ItemId FString
function USBZCheatManagerMainMenu:PurchaseItem(ItemId) end
function USBZCheatManagerMainMenu:LockCharacterForTutorial() end
---@param ItemId FString
function USBZCheatManagerMainMenu:LoadWeaponExperienceToLevelTable(ItemId) end
---@param Code FString
function USBZCheatManagerMainMenu:JoinPartyByCode(Code) end
---@param WeaponEntitlementIdString FString
function USBZCheatManagerMainMenu:GetWeaponProgressionForBarrelSlot(WeaponEntitlementIdString) end
function USBZCheatManagerMainMenu:GetPartyCode() end
---@param WeaponEntitlementIdString FString
function USBZCheatManagerMainMenu:GetCosmeticsForWeapon(WeaponEntitlementIdString) end
---@param Key FKey
function USBZCheatManagerMainMenu:GamepadOpenInGameCheatMenu(Key) end
---@param LoadoutIndex uint32
function USBZCheatManagerMainMenu:EmptySecondaryWeaponLoadout(LoadoutIndex) end
---@param LoadoutIndex uint32
function USBZCheatManagerMainMenu:EmptyPrimaryWeaponLoadout(LoadoutIndex) end
---@param ItemIdSku FString
---@param EntitlementId FString
function USBZCheatManagerMainMenu:DumpWeaponWeaponPartProgressionArray(ItemIdSku, EntitlementId) end
---@param ItemId FString
function USBZCheatManagerMainMenu:DumpWeaponSlotToWeaponPartMap(ItemId) end
function USBZCheatManagerMainMenu:DumpSteamItems() end
function USBZCheatManagerMainMenu:DumpSelectablePlayerCharacters() end
function USBZCheatManagerMainMenu:DumpRealMoneyStoreItems() end
function USBZCheatManagerMainMenu:DumpPreferredCharacters() end
function USBZCheatManagerMainMenu:DumpPlayerSkills() end
function USBZCheatManagerMainMenu:DumpPlayerSkillPoints() end
function USBZCheatManagerMainMenu:DumpNextResetTime() end
function USBZCheatManagerMainMenu:DumpItemsProgressions() end
function USBZCheatManagerMainMenu:DumpInventoryItems() end
function USBZCheatManagerMainMenu:DumpCosmeticsInventoryItemsForWeaponPatternSlot() end
function USBZCheatManagerMainMenu:DumpCosmeticsInventoryItems() end
function USBZCheatManagerMainMenu:DumpCharacterInventory() end
function USBZCheatManagerMainMenu:DumpBestLevelTimes() end
---@param ItemSku FString
function USBZCheatManagerMainMenu:DumpBaseWeaponProgressionLevel(ItemSku) end
---@param ItemId FString
function USBZCheatManagerMainMenu:DumpBaseWeaponProgressionInfo(ItemId) end
---@param ItemId FString
function USBZCheatManagerMainMenu:DumpAvavilableWeaponParts(ItemId) end
function USBZCheatManagerMainMenu:DumpAttachedWeaponPartsForAllInventorySlots() end
function USBZCheatManagerMainMenu:DumpAllWeaponPresets() end
function USBZCheatManagerMainMenu:DumpAllVendorItems() end
function USBZCheatManagerMainMenu:DumpAllSuitInventorySlots() end
function USBZCheatManagerMainMenu:DumpAllPlayerStatistics() end
function USBZCheatManagerMainMenu:DumpAllMaskInventorySlots() end
function USBZCheatManagerMainMenu:DumpAllItemProgressionLevels() end
function USBZCheatManagerMainMenu:DumpAllGloveInventorySlots() end
---@param EntitlementId FString
---@param ItemId FString
function USBZCheatManagerMainMenu:DiscardItem(EntitlementId, ItemId) end
---@param bIsDebugAllItemsResearched boolean
function USBZCheatManagerMainMenu:DebugAllItemsResearched(bIsDebugAllItemsResearched) end
---@param EntitlementId FString
function USBZCheatManagerMainMenu:ConsumeUserEntitlement(EntitlementId) end
function USBZCheatManagerMainMenu:ClearPreferredCharacters() end
function USBZCheatManagerMainMenu:ClearAllAchievements() end
---@param WeaponEntitlementIdString FString
function USBZCheatManagerMainMenu:CanEquipDummyPatternToWeapon(WeaponEntitlementIdString) end
---@param ItemId FString
function USBZCheatManagerMainMenu:BuySecondaryWeaponConfigSlot(ItemId) end
---@param ItemId FString
function USBZCheatManagerMainMenu:BuySecondaryWeapon(ItemId) end
---@param ItemId FString
function USBZCheatManagerMainMenu:BuyPrimaryWeaponConfigSlot(ItemId) end
---@param ItemId FString
function USBZCheatManagerMainMenu:BuyPrimaryWeapon(ItemId) end
---@param ItemId FString
function USBZCheatManagerMainMenu:BuyLoadoutSlot(ItemId) end
---@param ItemId FString
---@param ItemSku FString
---@param Price int32
---@param DiscountedPrice int32
---@param Quantity int32
---@param AccelByteCurrencyCode FString
function USBZCheatManagerMainMenu:BuyItemAccelByteRequest(ItemId, ItemSku, Price, DiscountedPrice, Quantity, AccelByteCurrencyCode) end
---@param ItemSku FString
function USBZCheatManagerMainMenu:BuyItem(ItemSku) end
---@param WeaponEntitlementIdString FString
function USBZCheatManagerMainMenu:ApplyWeaponDummyPattern(WeaponEntitlementIdString) end
---@param WeaponEntitlementIdString FString
function USBZCheatManagerMainMenu:ApplyWeaponDummyCharm(WeaponEntitlementIdString) end
---@param ItemSku FString
function USBZCheatManagerMainMenu:ApplyAsset(ItemSku) end
---@param SlotIndex uint32
---@param SlotName FString
---@param WeaponPartName FString
function USBZCheatManagerMainMenu:AddUniquePartToWeaponConfig(SlotIndex, SlotName, WeaponPartName) end


---@class USBZCircularGaugeWidget : USBZWidgetBase
---@field CircularGaugeMaterial UMaterial
---@field CircularGaugeMaterialInstance UMaterialInstanceDynamic
---@field Image_Gauge UImage
USBZCircularGaugeWidget = {}

---@param inNewProgress float
function USBZCircularGaugeWidget:UpdateGaugeProgress(inNewProgress) end
---@param InGaugeThickness float
function USBZCircularGaugeWidget:SetGaugeThickness(InGaugeThickness) end
---@param InColor FLinearColor
function USBZCircularGaugeWidget:SetColor(InColor) end


---@class USBZCircularInteractionWidget : USBZWidgetBase
---@field XAxisName FName
---@field YAxisName FName
---@field MouseSensitivity float
---@field Deadzone float
---@field bSelectOnClose boolean
---@field NumSlices int32
---@field CurrentAxis FVector2D
---@field Angle float
---@field AngleRad float
---@field SliceAngle float
---@field ActiveIndex int32
---@field bIsActive boolean
---@field bIsUsingController boolean
---@field OnCircularWidgetSelected FSBZCircularInteractionWidgetOnCircularWidgetSelected
USBZCircularInteractionWidget = {}

---@param InNumSlices int32
function USBZCircularInteractionWidget:UpdateNumSlices(InNumSlices) end
function USBZCircularInteractionWidget:SelectCurrentIndex() end
function USBZCircularInteractionWidget:OnNumSectionsChanged() end
function USBZCircularInteractionWidget:OnIndexChanged() end
---@param bShouldActive boolean
function USBZCircularInteractionWidget:ActivateCircularWidget(bShouldActive) end


---@class USBZCivilianManager : UObject
---@field Settings USBZCivilianManagerSettings
---@field SpawnGroupArray TArray<APD3PawnSpawnGroup>
---@field StayingCivilians TArray<TWeakObjectPtr<ASBZAIController>>
USBZCivilianManager = {}

function USBZCivilianManager:StopStaying() end
---@param SpawnManager USBZSpawnManager
---@param Pawn APawn
function USBZCivilianManager:OnPawnSpawned(SpawnManager, Pawn) end
---@param Pawn APawn
function USBZCivilianManager:OnPawnKilled(Pawn) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZCivilianManager:OnHeistStateChanged(OldState, NewState) end
---@param AIController ASBZAIController
---@return boolean
function USBZCivilianManager:IsAllowedToFlee(AIController) end
---@param WorldContextObject UObject
---@return USBZCivilianManager
function USBZCivilianManager:Get(WorldContextObject) end


---@class USBZCivilianManagerSettings : UDataAsset
---@field TickInterval float
---@field SpawnAmountInterval FInt32Interval
---@field MaxAliveCivilians int32
---@field SpawnUntilState EPD3HeistState
---@field CooldownInterval FFloatInterval
---@field SpawnRequest FSBZPawnSpawnRequest
---@field PercentOfCiviliansStaying int32
---@field StopStayingInterval FInt32Interval
USBZCivilianManagerSettings = {}



---@class USBZClampCameraRotationModifier : USBZPlayerCameraModifier
---@field DataArray TArray<FSBZLockCameraData>
---@field IdArray TArray<int32>
---@field LastId int32
---@field CurrentIndex int32
USBZClampCameraRotationModifier = {}



---@class USBZClientStateMachine : USBZCommonStateMachine
---@field StateEnums TMap<FName, ESBZGameStateMachineState>
---@field LoadingScreen USBZLoadingScreen
USBZClientStateMachine = {}

function USBZClientStateMachine:RequestTravelToServer() end
function USBZClientStateMachine:RequestSteamLogin() end
---@param LevelIdx int32
---@param DifficultyIdx int32
function USBZClientStateMachine:RequestSoloGame(LevelIdx, DifficultyIdx) end
---@param Reason ESBZReturnToMainMenuReason
function USBZClientStateMachine:RequestReturnToMainMenu(Reason) end
---@param Reason ESBZReturnToLoginReason
function USBZClientStateMachine:RequestReturnToLogin(Reason) end
---@param Reason ESBZReturnToIISReason
function USBZClientStateMachine:RequestReturnToIIS(Reason) end
function USBZClientStateMachine:RequestRestart() end
---@param ReplayInfo FSBZReplayInfo
function USBZClientStateMachine:RequestReplay(ReplayInfo) end
function USBZClientStateMachine:RequestPlatformJoin() end
---@param MatchmakingParameters FSBZOnlineMatchmakingParams
function USBZClientStateMachine:RequestP2PHost(MatchmakingParameters) end
---@param RequestData FSBZEndMissionRequestData
function USBZClientStateMachine:RequestMissionEnd(RequestData) end
---@param MatchmakingParameters FSBZOnlineMatchmakingParams
function USBZClientStateMachine:RequestMatchmaking(MatchmakingParameters) end
function USBZClientStateMachine:RequestLoginWithDeviceID() end
---@param LoginFieldInfo FSBZLoginFieldInfo
function USBZClientStateMachine:RequestLogin(LoginFieldInfo) end
function USBZClientStateMachine:RequestGoToLobby() end
function USBZClientStateMachine:RequestGameStart() end
function USBZClientStateMachine:RequestEndOutroSequence() end
function USBZClientStateMachine:RequestEndIntroSequence() end
function USBZClientStateMachine:RequestDirectJoin() end
function USBZClientStateMachine:RequestDefaultMatchmaking() end
---@param RegistrationFieldInfo FSBZRegistrationFieldInfo
function USBZClientStateMachine:RequestCreateAccount(RegistrationFieldInfo) end
function USBZClientStateMachine:RemoveAppliedPreplanningAsset() end
function USBZClientStateMachine:OnUserSwitchDuringInvite() end
---@param ActionName FName
function USBZClientStateMachine:OnPopUpClosedIsNotPartyLeader(ActionName) end
function USBZClientStateMachine:OnPartyHostEnteredMatchmaking() end
function USBZClientStateMachine:OnPartyHostEnteredMainMenu() end
function USBZClientStateMachine:OnPartyHostEnteredLobby() end
---@return boolean
function USBZClientStateMachine:isPreMatchAsyncLoadingDone() end
---@return boolean
function USBZClientStateMachine:IsMatchmakingInProgress() end
---@return boolean
function USBZClientStateMachine:HasStartedOutro() end
---@return ESBZOnlineSessionPhase
function USBZClientStateMachine:GetSessionPhase() end
---@return FString
function USBZClientStateMachine:GetCurrentStateNameString() end
---@param ItemSku FString
function USBZClientStateMachine:ApplyPreplanningAsset(ItemSku) end


---@class USBZClientStateMachineState : USBZCommonStateMachineState
USBZClientStateMachineState = {}

---@param ServiceStatus ESBZServiceStatus
function USBZClientStateMachineState:OnNetworkStatusChanged(ServiceStatus) end


---@class USBZCloakerMeleeHitNotify : UAnimNotify
USBZCloakerMeleeHitNotify = {}


---@class USBZCoinData : USBZInventoryBaseData
USBZCoinData = {}


---@class USBZCoinDatabase : USBZItemDatabase
---@field CoinsArray TArray<USBZCoinData>
USBZCoinDatabase = {}



---@class USBZCommonStateMachine : USBZStateMachine
---@field PlayersReadyStatus TArray<ASBZPlayerState>
USBZCommonStateMachine = {}



---@class USBZCommonStateMachineState : USBZStateMachineState
---@field AsyncLoadingTimeOutTime float
---@field AsyncLoadingTimeSliceOverride float
---@field AsyncLoadingTimeSliceDefaultValue float
---@field bReplayEnabled boolean
---@field AsyncLoadLevelParams FAsyncLoadLevelParams
USBZCommonStateMachineState = {}



---@class USBZConnectedMaintenanceBoxInteractRequirement : USBZBaseInteractRequirement
USBZConnectedMaintenanceBoxInteractRequirement = {}


---@class USBZConnectionInfoWidget : USBZWidgetBase
---@field StarbreezePlayerState ASBZPlayerState
USBZConnectionInfoWidget = {}

---@param ServerRegion FString
function USBZConnectionInfoWidget:OnServerRegionChanged(ServerRegion) end


---@class USBZConsole : UConsole
USBZConsole = {}


---@class USBZControlsReferenceActionWidget : USBZWidgetBase
---@field Text_DisplayText UTextBlock
---@field Panel_ActionInputLists UPanelWidget
---@field MaxActionInputsDisplayed int32
---@field ActionInputWidgetClass TSubclassOf<USBZActionInputWidget>
---@field ActionList TArray<FName>
---@field ControlsReferenceActionPressedDelegate FSBZControlsReferenceActionWidgetControlsReferenceActionPressedDelegate
---@field InputRegisteredControlsReferenceAction FSBZActionControlReference
USBZControlsReferenceActionWidget = {}

function USBZControlsReferenceActionWidget:PressControlsReferenceAction() end
---@param ActionName FName
function USBZControlsReferenceActionWidget:OnInputAction(ActionName) end
---@param InControlsReferenceAction FSBZActionControlReference
---@param InControlsReferenceActionPressedEvent FDisplayControlsReferenceWithEventInControlsReferenceActionPressedEvent
---@return boolean
function USBZControlsReferenceActionWidget:DisplayControlsReferenceWithEvent(InControlsReferenceAction, InControlsReferenceActionPressedEvent) end
function USBZControlsReferenceActionWidget:ClearControlReference() end


---@class USBZControlsReferenceAxisWidget : USBZWidgetBase
---@field Text_DisplayText UTextBlock
---@field Panel_AxisInputLists UPanelWidget
---@field MaxAxisInputsDisplayed int32
---@field AxisInputWidgetClass TSubclassOf<USBZAxisInputWidget>
---@field AxisList TArray<FName>
USBZControlsReferenceAxisWidget = {}



---@class USBZControlsReferenceWidget : USBZWidgetBase
---@field MaxActionsDisplayed int32
---@field ControlsReferenceActionWidgetClass TSubclassOf<USBZControlsReferenceActionWidget>
---@field ControlsReferenceAxisWidgetClass TSubclassOf<USBZControlsReferenceAxisWidget>
---@field Panel_ActionLists UPanelWidget
---@field Panel_AxisLists UPanelWidget
USBZControlsReferenceWidget = {}

---@param InControlsReference FSBZControlsReference
function USBZControlsReferenceWidget:NativeDisplayControlsReference(InControlsReference) end
function USBZControlsReferenceWidget:HideControlsReference() end
function USBZControlsReferenceWidget:HideActiveControlsReference() end
---@param InControlsReference FSBZControlsReference
function USBZControlsReferenceWidget:DisplayControlsReference(InControlsReference) end
---@param InControlsReference FSBZControlsReference
function USBZControlsReferenceWidget:DisplayActiveControlsReference(InControlsReference) end


---@class USBZCosmeticDestructionComponent : UActorComponent
---@field OnCosmeticDestructionHit FSBZCosmeticDestructionComponentOnCosmeticDestructionHit
---@field CoolDown float
---@field Chance float
---@field bUseExplosionCoolDown boolean
---@field ExplosionCoolDown float
---@field bUseExplosionChance boolean
---@field ExplosionChance float
USBZCosmeticDestructionComponent = {}

---@param DamagedActor AActor
---@param Damage float
---@param DamageEvent FRadialDamageEvent
---@param InstigatedBy AController
---@param DamageCauser AActor
function USBZCosmeticDestructionComponent:HandleSBZTakeRadialDamageEx(DamagedActor, Damage, DamageEvent, InstigatedBy, DamageCauser) end
---@param DamagedActor AActor
---@param Damage float
---@param DamageEvent FPointDamageEvent
---@param InstigatedBy AController
---@param DamageCauser AActor
function USBZCosmeticDestructionComponent:HandleSBZTakePointDamageEx(DamagedActor, Damage, DamageEvent, InstigatedBy, DamageCauser) end


---@class USBZCosmeticsDataAsset : USBZEquippablePartDataAsset
---@field Rarity ESBZRarity
USBZCosmeticsDataAsset = {}

---@return boolean
function USBZCosmeticsDataAsset:IsConsumable() end
---@return ESBZRarity
function USBZCosmeticsDataAsset:GetRarity() end


---@class USBZCosmeticsManager : UObject
USBZCosmeticsManager = {}


---@class USBZCosmeticsPartSlot : USBZModularPartSlotBase
USBZCosmeticsPartSlot = {}


---@class USBZCosmeticsPatternDataAsset : USBZCosmeticsDataAsset
---@field PatternTexture UTexture2D
---@field PatternNormal UTexture2D
---@field ActiveChannelCount uint8
---@field PresetColorR FLinearColor
---@field PresetColorG FLinearColor
---@field PresetColorB FLinearColor
---@field PresetColorA FLinearColor
USBZCosmeticsPatternDataAsset = {}



---@class USBZCoverPointManager : UObject
USBZCoverPointManager = {}

---@return TArray<FSBZCoverShootingPoints>
function USBZCoverPointManager:GetShootingPoints() end
---@param Bounds FBoxSphereBounds
---@return TArray<ASBZCoverPoint>
function USBZCoverPointManager:GetCoverWithinBounds(Bounds) end
---@param CoverPoint ASBZCoverPoint
---@param Enemies TArray<AActor>
---@return uint8
function USBZCoverPointManager:GetCoverSafeness(CoverPoint, Enemies) end
---@param WorldContextObject UObject
---@return USBZCoverPointManager
function USBZCoverPointManager:Get(WorldContextObject) end


---@class USBZCrewStateWidget : USBZWidgetBase
---@field CrewStateActor AActor
USBZCrewStateWidget = {}

---@return boolean
function USBZCrewStateWidget:IsForLocalPlayerState() end


---@class USBZCrouchNotify : UAnimNotify
---@field bCrouched boolean
USBZCrouchNotify = {}



---@class USBZCrouchedNotifyState : UAnimNotifyState
USBZCrouchedNotifyState = {}


---@class USBZCrowdFollowingComponent : UCrowdFollowingComponent
USBZCrowdFollowingComponent = {}


---@class USBZCrowdManager : UCrowdManager
USBZCrowdManager = {}


---@class USBZCuffedAbility : USBZDefeatAbility
USBZCuffedAbility = {}


---@class USBZCurrencyHelper : UObject
USBZCurrencyHelper = {}


---@class USBZCurrencyManager : UObject
---@field PlayerCurrencyBalance FSBZPlayerCurrencyBalanceData
---@field GetCurrencyRequestQueue USBZGetCurrencyRequestQueue
USBZCurrencyManager = {}

---@param SBZPlayerState ASBZPlayerState
---@param Type ESBZCurrencyCode
---@param Amount int32
function USBZCurrencyManager:SubtractCurrency(SBZPlayerState, Type, Amount) end
---@param Type ESBZCurrencyCode
---@param Cost int32
function USBZCurrencyManager:SetCurrency(Type, Cost) end
---@param Type ESBZCurrencyCode
---@return int32
function USBZCurrencyManager:GetCurrentAmount(Type) end
---@param WorldContextObject UObject
---@return USBZCurrencyManager
function USBZCurrencyManager:GetCurrencyManager(WorldContextObject) end
---@param Type ESBZCurrencyCode
---@param Cost int32
---@return boolean
function USBZCurrencyManager:CanAfford(Type, Cost) end
---@param SBZPlayerState ASBZPlayerState
---@param Type ESBZCurrencyCode
---@param Amount int32
function USBZCurrencyManager:AddCurrency(SBZPlayerState, Type, Amount) end


---@class USBZCurrencyWidget : USBZWidgetBase
---@field CurrencyType ESBZCurrencyCode
---@field CurrencyValue int32
---@field bIsOwnerCurrency boolean
---@field bIsAffordedChecked boolean
---@field bIsAfforded boolean
USBZCurrencyWidget = {}

---@param InValue int32
function USBZCurrencyWidget:SetCurrencyValue(InValue) end
---@param InCurrencyType ESBZCurrencyCode
function USBZCurrencyWidget:SetCurrencyType(InCurrencyType) end
---@param NewValue int32
---@param bIsInitial boolean
function USBZCurrencyWidget:OnCurrencyValueChanged(NewValue, bIsInitial) end
---@param InCurrencyType ESBZCurrencyCode
---@param bIsInitial boolean
function USBZCurrencyWidget:OnCurrencyTypeChanged(InCurrencyType, bIsInitial) end
---@param bInIsAfforded boolean
---@param bIsInitial boolean
function USBZCurrencyWidget:OnAffordedChanged(bInIsAfforded, bIsInitial) end


---@class USBZCustomizableSuitMeshComponent : USkeletalMeshComponent
---@field SuitConfig FSBZSuitConfig
---@field BodyMeshComponent USkeletalMeshComponent
---@field SizeCategory EPlayerCharacterSizeCategory
---@field CapsuleShadowingData USBZCapsuleShadowingData
USBZCustomizableSuitMeshComponent = {}

---@param Config FSBZSuitConfig
function USBZCustomizableSuitMeshComponent:SetSuitConfig(Config) end
function USBZCustomizableSuitMeshComponent:NativeOnSkeletalMeshLoaded() end


---@class USBZCustomizationLibrary : UBlueprintFunctionLibrary
USBZCustomizationLibrary = {}

function USBZCustomizationLibrary:UseDefaultMask() end
---@param InSuitConfig FSBZSuitConfig
function USBZCustomizationLibrary:SetPreviewSuitConfig(InSuitConfig) end
---@param MaskConfig FSBZMaskConfig
function USBZCustomizationLibrary:SetPreviewMaskConfig(MaskConfig) end
---@param InSuitPartConfig USBZSuitPartConfig
---@param InCosmeticPartSlot USBZCosmeticsPartSlot
---@param InCosmeticsDataAsset USBZCosmeticsDataAsset
function USBZCustomizationLibrary:SetPartInPreview(InSuitPartConfig, InCosmeticPartSlot, InCosmeticsDataAsset) end
function USBZCustomizationLibrary:SetDefaultSuitOnPreviewSuitConfig() end
function USBZCustomizationLibrary:SetDefaultMaskOnPreviewMaskConfig() end
---@param InSuitPartConfig USBZSuitPartConfig
---@param Slot USBZCosmeticsPartSlot
function USBZCustomizationLibrary:RemoveSuitPreviewAssetFromSlot(InSuitPartConfig, Slot) end
---@param Slot USBZCosmeticsPartSlot
function USBZCustomizationLibrary:RemoveMaskPreviewAssetFromSlot(Slot) end
---@param Slot USBZCosmeticsPartSlot
---@param SuitPartConfigGroup FSBZSuitPartConfigGroup
function USBZCustomizationLibrary:PreviewSuitAssetInSlot(Slot, SuitPartConfigGroup) end
function USBZCustomizationLibrary:PreviewEquippedMask() end
---@param Slot USBZCosmeticsPartSlot
---@param MaskPartConfigGroup FSBZMaskPartConfigGroup
function USBZCustomizationLibrary:MaskPreviewAssetInSlot(Slot, MaskPartConfigGroup) end
---@param InventorySlot FSBZSuitInventorySlot
---@param Slot USBZCosmeticsPartSlot
---@param Config USBZSuitPartConfig
---@return USBZModularPartDataAsset
function USBZCustomizationLibrary:GetSuitCosmeticDataAssetFromInventorySlot(InventorySlot, Slot, Config) end
---@param Slot USBZCosmeticsPartSlot
---@param Config USBZSuitPartConfig
---@return USBZModularPartDataAsset
function USBZCustomizationLibrary:GetPreviewSuitCosmeticDataAsset(Slot, Config) end
---@return FSBZSuitConfig
function USBZCustomizationLibrary:GetPreviewSuitConfig() end
---@return FSBZMaskConfig
function USBZCustomizationLibrary:GetPreviewMaskConfig() end
---@return USBZCustomizableSuitMeshComponent
function USBZCustomizationLibrary:GetMainMenuMannequinCustomizableSuitComponent() end
---@return ASBZMask
function USBZCustomizationLibrary:GetGlobalMaskPreviewActor() end
---@return ASBZCustomizationManager
function USBZCustomizationLibrary:GetCustomizationManager() end
---@param SlotIndex int32
---@param CosmeticsPartSlot USBZCosmeticsPartSlot
---@param MaskPartConfigGroup FSBZMaskPartConfigGroup
function USBZCustomizationLibrary:ApplyCosmeticPartOnMask(SlotIndex, CosmeticsPartSlot, MaskPartConfigGroup) end
---@param SlotIndex int32
function USBZCustomizationLibrary:ApplyAllCosmeticPartsFromPreviewOnSuit(SlotIndex) end
---@param SlotIndex int32
function USBZCustomizationLibrary:ApplyAllCosmeticPartsFromPreviewOnMask(SlotIndex) end


---@class USBZCustomizationRotateComponent : UActorComponent
---@field CanRotateYaw boolean
---@field CanRotatePitch boolean
---@field RotationYawSpeedRate float
---@field RotationYawMaxDelta float
---@field RotationYawSpeedRateKeyboard float
---@field RotationYawSpeedRateStick float
---@field RotationRollSpeedRate float
---@field RotationRollMaxDelta float
---@field RotationRollSpeedRateKeyboard float
---@field RotationRollSpeedRateStick float
---@field RotationRollLimitMin float
---@field RotationRollLimitMax float
USBZCustomizationRotateComponent = {}



---@class USBZCuttableComponent : UActorComponent
---@field FuelCost int32
---@field CuttableType ESBZCuttableType
---@field CuttableState ESBZCuttableState
---@field OnCutCompleteServer FSBZCuttableComponentOnCutCompleteServer
---@field TotalCutTime float
---@field CutProgressData FSBZCutProgressData
---@field CuttableTier ESBZCuttingMaterialTier
---@field HotSpeed float
---@field CoolSpeed float
---@field InitialCutAngle float
---@field NiagaraEffectVisibilityTime float
USBZCuttableComponent = {}

function USBZCuttableComponent:OnRep_InitialCutAngle() end
function USBZCuttableComponent:OnRep_CuttableState() end
function USBZCuttableComponent:OnRep_CutProgressData() end
function USBZCuttableComponent:OnCutCompleted() end
---@param NewCuttableState ESBZCuttableState
function USBZCuttableComponent:Multicast_SetCuttableState(NewCuttableState) end
---@param NewCutProgressData FSBZCutProgressData
function USBZCuttableComponent:Multicast_CreateLineCut(NewCutProgressData) end
---@param InCutAngle float
function USBZCuttableComponent:Multicast_CreateInitialCutAngle(InCutAngle) end
---@param NewCutProgressData FSBZCutProgressData
function USBZCuttableComponent:Multicast_CreateInitialCut(NewCutProgressData) end
---@param NewCutProgressData FSBZCutProgressData
function USBZCuttableComponent:Multicast_CreateCut(NewCutProgressData) end
---@return ESBZCuttableType
function USBZCuttableComponent:GetCuttableType() end
---@return ESBZCuttableState
function USBZCuttableComponent:GetCuttableState() end


---@class USBZCuttableSplineComponent : USplineComponent
---@field Segments int32
---@field Radius float
---@field LineLength float
---@field RadiusPadding float
---@field CuttableSplineType ESBZCuttableSplineType
USBZCuttableSplineComponent = {}

function USBZCuttableSplineComponent:SetupSplineComponent() end


---@class USBZCuttableWidget : UUserWidget
USBZCuttableWidget = {}

---@param AtSegment float
function USBZCuttableWidget:OnWidgetInitialCut(AtSegment) end
---@param DeltaDegrees float
function USBZCuttableWidget:OnWidgetCutCounterClockwise(DeltaDegrees) end
function USBZCuttableWidget:OnWidgetCutCompleted() end
---@param DeltaDegrees float
function USBZCuttableWidget:OnWidgetCutClockwise(DeltaDegrees) end
---@param AtSegment float
function USBZCuttableWidget:OnWidgetCut(AtSegment) end


---@class USBZCuttingToolAbility : USBZGameplayAbility
---@field DisplayCase ASBZDisplayCase
---@field InteractableGate ASBZInteractableGate
---@field OwnerCharacter ASBZPlayerCharacter
---@field NoiseGenerationInterval float
---@field NoiseRange float
USBZCuttingToolAbility = {}

---@param Gate ASBZGate
---@param OldState ESBZGateState
---@param NewState ESBZGateState
function USBZCuttingToolAbility:OnGateStateChanged(Gate, OldState, NewState) end
---@param NewState ESBZDisplayCaseState
function USBZCuttingToolAbility:OnDisplayCaseStateChanged(NewState) end


---@class USBZDamageDefeatAbility : USBZDefeatAbility
USBZDamageDefeatAbility = {}


---@class USBZDamageTracker : UObject
USBZDamageTracker = {}


---@class USBZDamageType : UDamageType
---@field TagContainer FGameplayTagContainer
---@field EnvironmentHits int32
---@field DodgeAbsorption float
---@field bIsThrowableProjectile boolean
USBZDamageType = {}



---@class USBZDebrisImpactConfig : USBZImpactConfig
USBZDebrisImpactConfig = {}


---@class USBZDebugActorComponentFlow : UActorComponent
---@field bIs boolean
---@field bIsDuplicateTransient boolean
---@field Object USBZDebugObjectFlow
---@field InstanceObject USBZDebugObjectFlow
---@field DynamicObject USBZDebugObjectFlow
USBZDebugActorComponentFlow = {}



---@class USBZDebugObjectFlow : UObject
---@field bIs boolean
---@field bIsDuplicateTransient boolean
USBZDebugObjectFlow = {}



---@class USBZDebugPreviewSettings : UDeveloperSettings
---@field PreviewData TSoftObjectPtr<USBZLifeActionPreviewData>
---@field PedestrianPreviewData TSoftObjectPtr<USBZPedestrianTrafficNavLinkPreviewData>
---@field AgilitySkeletalPreview TSoftObjectPtr<USkeletalMesh>
USBZDebugPreviewSettings = {}



---@class USBZDebugWidget : USBZWidgetBase
---@field Text_SubtitleText UTextBlock
USBZDebugWidget = {}

function USBZDebugWidget:OnWatermarkMode() end
---@param MissionSeed int32
function USBZDebugWidget:OnMissionSeedSet(MissionSeed) end
function USBZDebugWidget:OnFullscreenMode() end
function USBZDebugWidget:OnCinematicMode() end


---@class USBZDebuggerOptions : UObject
---@field PlayerOptions FSBZPlayerDebuggerOptions
USBZDebuggerOptions = {}

---@return boolean
function USBZDebuggerOptions:IsPlayerAutomaticallyInvisibleForAI() end
---@return boolean
function USBZDebuggerOptions:IsInfiniteAmmo() end
---@return boolean
function USBZDebuggerOptions:IsInaudible() end
---@return boolean
function USBZDebuggerOptions:IsGod() end


---@class USBZDefeatAbility : USBZGameplayAbility
USBZDefeatAbility = {}


---@class USBZDeltaCorrectionNotifyState : UAnimNotifyState_WarpingBase
---@field bCorrectTranslation boolean
---@field bIgnoreZAxis boolean
---@field bCorrectRotation boolean
---@field bConsiderRemainingRootMotion boolean
---@field bReplaceActorStartWorld boolean
---@field ReferenceBone FName
---@field OffsetBone FName
---@field ReferenceTime float
USBZDeltaCorrectionNotifyState = {}



---@class USBZDescendState : UObject
---@field StateMachine USBZAerialVehicleStateMachine
USBZDescendState = {}



---@class USBZDetachableCuttingToolExecutionCalculation : UGameplayEffectExecutionCalculation
USBZDetachableCuttingToolExecutionCalculation = {}


---@class USBZDeveloperSettings : UDeveloperSettings
USBZDeveloperSettings = {}


---@class USBZDialogAnimDataCollection : UDataAsset
---@field DialogAnimDatas TMap<FString, FSBZDialogAnimData>
USBZDialogAnimDataCollection = {}



---@class USBZDialogBodyGestureEndNotify : UAnimNotify
USBZDialogBodyGestureEndNotify = {}


---@class USBZDialogBodyGesturesData : UDataAsset
---@field bUpdate boolean
---@field DialogBodyGestures TArray<UAnimMontage>
---@field DialogBodyGestureDurations TArray<float>
USBZDialogBodyGesturesData = {}



---@class USBZDialogBodyGesturesNotifyState : UAnimNotifyState
---@field DialogBodyGesturesData USBZDialogBodyGesturesData
USBZDialogBodyGesturesNotifyState = {}



---@class USBZDialogDataAsset : UDataAsset
---@field DialogType ESBZDialogType
---@field Priority int32
---@field DialogLines TArray<FSBZDialogLineDefinition>
---@field bSkipFirstDelay boolean
---@field bIsDeadAllowed boolean
---@field bIsHumanShieldVictimAllowed boolean
---@field VoiceSwitchesPerPerformer TArray<FSBZVoiceSwitchPerPerformer>
USBZDialogDataAsset = {}



---@class USBZDialogManager : UActorComponent
---@field Narrator ASBZNarrator
---@field ActiveDialogs TMap<USBZDialogDataAsset, FSBZActiveDialogData>
USBZDialogManager = {}

---@param DialogDataAsset USBZDialogDataAsset
---@param Performers TArray<AActor>
---@param DialogInstigator AActor
function USBZDialogManager:Multicast_PlayDialog(DialogDataAsset, Performers, DialogInstigator) end


---@class USBZDisableAgentBrainNotifyState : UAnimNotifyState
USBZDisableAgentBrainNotifyState = {}


---@class USBZDisableAgentCollision : UAnimNotifyState
USBZDisableAgentCollision = {}


---@class USBZDisableAgentGravityNotifyState : UAnimNotifyState
USBZDisableAgentGravityNotifyState = {}


---@class USBZDisableAimOffsetNotifyState : UAnimNotifyState
---@field DisableAimOffsetType ESBZDisabledAimOffsetType
USBZDisableAimOffsetNotifyState = {}



---@class USBZDisableFootPlacementNotifyState : UAnimNotifyState
USBZDisableFootPlacementNotifyState = {}


---@class USBZDisableIKNotifyState : UAnimNotifyState
---@field DisableHandIkType ESBZDisableHandIkType
USBZDisableIKNotifyState = {}



---@class USBZDisableSpeedWarpingNotifyState : UAnimNotifyState
USBZDisableSpeedWarpingNotifyState = {}


---@class USBZDisengageAbility : USBZGameplayAbility
USBZDisengageAbility = {}


---@class USBZDoorBoxComponent : UBoxComponent
---@field OpenDirection ESBZGateState
USBZDoorBoxComponent = {}



---@class USBZDoubleAttributeWidget : USBZPlayerStateWidgetBase
---@field PrimaryGameplayAttribute FGameplayAttribute
---@field SecondaryGameplayAttribute FGameplayAttribute
USBZDoubleAttributeWidget = {}

---@param PrimaryValue float
---@param SecondaryValue float
function USBZDoubleAttributeWidget:OnSetup(PrimaryValue, SecondaryValue) end
---@param NewValue float
---@param OldValue float
function USBZDoubleAttributeWidget:OnSecondaryAttributeUpdate(NewValue, OldValue) end
---@param NewValue float
---@param OldValue float
function USBZDoubleAttributeWidget:OnPrimaryAttributeUpdate(NewValue, OldValue) end


---@class USBZDownOnGroundNotify : UAnimNotify
USBZDownOnGroundNotify = {}


---@class USBZDownOnGroundNotifyState : UAnimNotifyState
USBZDownOnGroundNotifyState = {}


---@class USBZDownOnGroundPoseNotifyState : UAnimNotifyState
USBZDownOnGroundPoseNotifyState = {}


---@class USBZDownedAbility : USBZDamageDefeatAbility
USBZDownedAbility = {}


---@class USBZDozerFaceArmor : UStaticMeshComponent
---@field Armor TMap<ESBZDifficulty, float>
---@field ArmorHardness TMap<ESBZDifficulty, float>
---@field BreakEvent UAkAudioEvent
---@field BreakVFX UNiagaraSystem
---@field BreakComment USBZVoiceCommentDataAsset
---@field bCarryOnBreak boolean
USBZDozerFaceArmor = {}



---@class USBZDozerFacePlate : USBZDozerFaceArmor
---@field PoppedMaterial UPhysicalMaterial
USBZDozerFacePlate = {}



---@class USBZDrillMaterial : UDataAsset
---@field NormalSpeed FSBZDrillMatData
---@field FastSpeed FSBZDrillMatData
---@field Duration FFloatInterval
---@field MinimumProgress float
USBZDrillMaterial = {}



---@class USBZDrillWidget : UUserWidget
---@field TimeLeftText UTextBlock
---@field ProgressItem UProgressBar
---@field HeatItem UProgressBar
---@field Drill ASBZDrill
---@field DrillEx ASBZDrillEx
---@field PocketDrill ASBZPocketDrill
USBZDrillWidget = {}

---@param StateUpdated ESBZDrillState
function USBZDrillWidget:OnUpdateState(StateUpdated) end
---@param NewState ESBZBreachingEquipmentState
function USBZDrillWidget:OnUpdateBreachState(NewState) end
---@param ProgressPerSec float
---@param HeatPerSec float
function USBZDrillWidget:OnProgressRateChanged(ProgressPerSec, HeatPerSec) end


---@class USBZDropAmmoNotifyState : UAnimNotifyState
---@field ShowExtraAmmoCount int32
---@field DropExtraAmmoCount int32
USBZDropAmmoNotifyState = {}



---@class USBZDropEquipmentNotify : UAnimNotify
USBZDropEquipmentNotify = {}


---@class USBZDsStateMachine : USBZCommonStateMachine
---@field StateEnums TMap<FName, ESBZDsStateMachineState>
---@field AccelByteDS USBZAccelByteDS
---@field AccelByteServerLifeCycle USBZAccelByteServerLifeCycle
USBZDsStateMachine = {}



---@class USBZDsStateMachineState : USBZCommonStateMachineState
USBZDsStateMachineState = {}


---@class USBZDynamicPhysicsAudioComponent : UAkComponent
---@field RootComponent USceneComponent
---@field RollingStartEvent UAkAudioEvent
---@field RollingStopEvent UAkAudioEvent
---@field ImpactEvent UAkAudioEvent
---@field RollingSpeedRtpc UAkRtpc
---@field ImpactForceRtpc UAkRtpc
---@field StartRollingInterpolationTimeInMs float
---@field UpdateRollingInterpolationTimeInMs float
---@field RollingSpeedThreshold float
---@field ImpactForceThreshold float
---@field ImpactForceMultiplicationValue float
---@field RollingSpeedMultiplicationValue float
---@field OwnedSurfaceType USBZSurfaceTypesConfig
USBZDynamicPhysicsAudioComponent = {}

---@param Value float
function USBZDynamicPhysicsAudioComponent:UpdateRollingVelocity(Value) end
---@param Value float
function USBZDynamicPhysicsAudioComponent:UpdateImpactVelocity(Value) end
function USBZDynamicPhysicsAudioComponent:StopRollingSound() end
---@param Value float
function USBZDynamicPhysicsAudioComponent:PlayRollingSound(Value) end
---@param Value float
function USBZDynamicPhysicsAudioComponent:PlayImpactSound(Value) end
function USBZDynamicPhysicsAudioComponent:OnDisable() end


---@class USBZECMJammerToolData : USBZToolData
USBZECMJammerToolData = {}


---@class USBZEarlyOutDuringSprintingNotify : UAnimNotify
USBZEarlyOutDuringSprintingNotify = {}


---@class USBZEditorUtilityLibrary : UBlueprintFunctionLibrary
USBZEditorUtilityLibrary = {}

---@param Actor AActor
---@return boolean
function USBZEditorUtilityLibrary:ResetToBlueprintDefault(Actor) end
---@param World UWorld
---@return boolean
function USBZEditorUtilityLibrary:IsSbzLevelScriptActor(World) end


---@class USBZElectricDamageExecutionCalculation : USBZRangedWeaponExecutionCalculation
USBZElectricDamageExecutionCalculation = {}


---@class USBZElectricDamageType : USBZDamageType
USBZElectricDamageType = {}


---@class USBZElectricEffect : UGameplayEffect
USBZElectricEffect = {}


---@class USBZEllipsoidComponent : UPrimitiveComponent
USBZEllipsoidComponent = {}


---@class USBZEmitterSpawnerData : UDataAsset
---@field ParticleEmitter TSoftObjectPtr<UParticleSystem>
---@field AttachPointName FName
---@field Location FVector
---@field Rotation FRotator
---@field Scale FVector
---@field AttachmentRule EAttachmentRule
---@field AutoDestroy boolean
---@field PoolingMethod EPSCPoolMethod
---@field AutoActivate boolean
USBZEmitterSpawnerData = {}



---@class USBZEmotionMapping : UDataAsset
---@field EmotionsPerStance TMap<ESBZCharacterStance, FSBZEmotions>
USBZEmotionMapping = {}



---@class USBZEnableAgentCollisionDuringAgility : UAnimNotifyState
USBZEnableAgentCollisionDuringAgility = {}


---@class USBZEnableAgilityIKNotifyState : UAnimNotifyState
---@field HandIKType ESBZAgilityIKHandIKType
---@field BlendInDuration float
---@field BlendOutDuration float
---@field bOnlyAffectZ boolean
---@field PointType ESBZAgilityPointType
---@field LocationOffset FVector
USBZEnableAgilityIKNotifyState = {}



---@class USBZEnvQueryContext_AIObjectiveMoveToPosition : UEnvQueryContext
USBZEnvQueryContext_AIObjectiveMoveToPosition = {}


---@class USBZEnvQueryContext_CurrentCover : UEnvQueryContext
USBZEnvQueryContext_CurrentCover = {}


---@class USBZEnvQueryContext_DroneMoveToPositions : UEnvQueryContext
USBZEnvQueryContext_DroneMoveToPositions = {}


---@class USBZEnvQueryContext_Enemies : UEnvQueryContext
USBZEnvQueryContext_Enemies = {}


---@class USBZEnvQueryContext_Enemy : UEnvQueryContext
USBZEnvQueryContext_Enemy = {}


---@class USBZEnvQueryContext_EnemyRoom : UEnvQueryContext
USBZEnvQueryContext_EnemyRoom = {}


---@class USBZEnvQueryContext_MoveToPosition : UEnvQueryContext
USBZEnvQueryContext_MoveToPosition = {}


---@class USBZEnvQueryContext_NPCs : UEnvQueryContext
USBZEnvQueryContext_NPCs = {}


---@class USBZEnvQueryContext_NPCsMoveToPosition : UEnvQueryContext
USBZEnvQueryContext_NPCsMoveToPosition = {}


---@class USBZEnvQueryContext_OrderTargetActor : UEnvQueryContext
USBZEnvQueryContext_OrderTargetActor = {}


---@class USBZEnvQueryContext_Players : UEnvQueryContext
USBZEnvQueryContext_Players = {}


---@class USBZEnvQueryContext_PlayersCenter : UEnvQueryContext
USBZEnvQueryContext_PlayersCenter = {}


---@class USBZEnvQueryContext_PreferredDistancePos : UEnvQueryContext
USBZEnvQueryContext_PreferredDistancePos = {}


---@class USBZEnvQueryContext_SquadCenterPos : UEnvQueryContext
USBZEnvQueryContext_SquadCenterPos = {}


---@class USBZEnvQueryContext_SquadOrderTargetConnector : UEnvQueryContext
USBZEnvQueryContext_SquadOrderTargetConnector = {}


---@class USBZEnvQueryContext_SquadOrderTargetConnectorPosition : UEnvQueryContext
USBZEnvQueryContext_SquadOrderTargetConnectorPosition = {}


---@class USBZEnvQueryContext_SquadOrderTargetRoom : UEnvQueryContext
USBZEnvQueryContext_SquadOrderTargetRoom = {}


---@class USBZEnvQueryContext_SquadOrderTargetRoomCovers : UEnvQueryContext
USBZEnvQueryContext_SquadOrderTargetRoomCovers = {}


---@class USBZEnvQueryContext_SquadTacticalPos : UEnvQueryContext
USBZEnvQueryContext_SquadTacticalPos = {}


---@class USBZEnvQueryContext_Ward : UEnvQueryContext
USBZEnvQueryContext_Ward = {}


---@class USBZEnvQueryGenerator_CoverPoints : UEnvQueryGenerator
---@field SearchCenter TSubclassOf<UEnvQueryContext>
---@field bUseContextAsGenerator boolean
---@field SearchRadius FAIDataProviderFloatValue
---@field MaxCovers FAIDataProviderIntValue
---@field bSortByDistance boolean
---@field SortCenter TSubclassOf<UEnvQueryContext>
---@field TargetContext TSubclassOf<UEnvQueryContext>
---@field NrAdditionalRandomDistCovers int32
---@field MaxDotToTarget float
---@field bShouldLimitToAdjacentRooms boolean
USBZEnvQueryGenerator_CoverPoints = {}



---@class USBZEnvQueryGenerator_PerceivedActors : UEnvQueryGenerator
---@field PerceiverContext TSubclassOf<UEnvQueryContext>
---@field bHostilesOnly boolean
---@field bOnlyVisualGenerators boolean
---@field bCurrentlySensed boolean
---@field Senses TArray<TSubclassOf<UAISense>>
---@field AllowedPawnTypes FGameplayTagContainer
USBZEnvQueryGenerator_PerceivedActors = {}



---@class USBZEnvQueryGenerator_SafeWallPosition : UEnvQueryGenerator
---@field SearchCenter TSubclassOf<UEnvQueryContext>
---@field SearchRadius FAIDataProviderFloatValue
---@field EnemyContext TSubclassOf<UEnvQueryContext>
---@field WallToEnemyMinDot FAIDataProviderFloatValue
---@field PointDistance FAIDataProviderFloatValue
---@field NavFilterProvider FSBZAIDataProvider_NavQueryFilter
USBZEnvQueryGenerator_SafeWallPosition = {}



---@class USBZEnvQueryGenerator_WorldRuntimeActors : UEnvQueryGenerator
---@field ActorSetting uint16
USBZEnvQueryGenerator_WorldRuntimeActors = {}



---@class USBZEnvQueryTest_AIVisibilityScore : UEnvQueryTest
---@field Context TSubclassOf<UEnvQueryContext>
USBZEnvQueryTest_AIVisibilityScore = {}



---@class USBZEnvQueryTest_AttractorPrio : UEnvQueryTest
USBZEnvQueryTest_AttractorPrio = {}


---@class USBZEnvQueryTest_CoverHasLOS : UEnvQueryTest
---@field TargetContext TSubclassOf<UEnvQueryContext>
USBZEnvQueryTest_CoverHasLOS = {}



---@class USBZEnvQueryTest_CoverSafeness : UEnvQueryTest
---@field EnemyContext TSubclassOf<UEnvQueryContext>
USBZEnvQueryTest_CoverSafeness = {}



---@class USBZEnvQueryTest_CoverVincinity : UEnvQueryTest
---@field SearchRadius FAIDataProviderFloatValue
---@field OccupiedOnly FAIDataProviderBoolValue
USBZEnvQueryTest_CoverVincinity = {}



---@class USBZEnvQueryTest_DefensePointDefenders : UEnvQueryTest
USBZEnvQueryTest_DefensePointDefenders = {}


---@class USBZEnvQueryTest_DefensePointEnabled : UEnvQueryTest
USBZEnvQueryTest_DefensePointEnabled = {}


---@class USBZEnvQueryTest_DespawnPawnType : UEnvQueryTest
---@field PawnTypeContext TSubclassOf<UEnvQueryContext>
USBZEnvQueryTest_DespawnPawnType = {}



---@class USBZEnvQueryTest_DrillState : UEnvQueryTest
---@field bMatchNonDrills boolean
---@field MatchState TArray<ESBZDrillState>
USBZEnvQueryTest_DrillState = {}



---@class USBZEnvQueryTest_FriendlyFire : UEnvQueryTest
---@field OriginContext TSubclassOf<UEnvQueryContext>
---@field TargetContext TSubclassOf<UEnvQueryContext>
USBZEnvQueryTest_FriendlyFire = {}



---@class USBZEnvQueryTest_HasWard : UEnvQueryTest
USBZEnvQueryTest_HasWard = {}


---@class USBZEnvQueryTest_IsContextActor : UEnvQueryTest
---@field ActorContext TSubclassOf<UEnvQueryContext>
USBZEnvQueryTest_IsContextActor = {}



---@class USBZEnvQueryTest_IsHostile : UEnvQueryTest
USBZEnvQueryTest_IsHostile = {}


---@class USBZEnvQueryTest_IsInCover : UEnvQueryTest
USBZEnvQueryTest_IsInCover = {}


---@class USBZEnvQueryTest_IsInDefeatState : UEnvQueryTest
USBZEnvQueryTest_IsInDefeatState = {}


---@class USBZEnvQueryTest_IsOrderTargetAreaEnabled : UEnvQueryTest
USBZEnvQueryTest_IsOrderTargetAreaEnabled = {}


---@class USBZEnvQueryTest_IsPlayer : UEnvQueryTest
USBZEnvQueryTest_IsPlayer = {}


---@class USBZEnvQueryTest_IsProtectPointAssignable : USBZEnvQueryTest_IsOrderTargetAreaEnabled
USBZEnvQueryTest_IsProtectPointAssignable = {}


---@class USBZEnvQueryTest_IsValidTarget : UEnvQueryTest
USBZEnvQueryTest_IsValidTarget = {}


---@class USBZEnvQueryTest_IsVantagePointTaken : UEnvQueryTest
USBZEnvQueryTest_IsVantagePointTaken = {}


---@class USBZEnvQueryTest_IsWard : UEnvQueryTest
USBZEnvQueryTest_IsWard = {}


---@class USBZEnvQueryTest_OrderTargetAreaSquadsNum : UEnvQueryTest
USBZEnvQueryTest_OrderTargetAreaSquadsNum = {}


---@class USBZEnvQueryTest_PawnType : UEnvQueryTest
---@field PawnTagQueryToMatch FGameplayTagQuery
USBZEnvQueryTest_PawnType = {}



---@class USBZEnvQueryTest_RoomPathfinding : UEnvQueryTest
---@field Detail ESBZEnvTestPathfindingDetail
---@field Context TSubclassOf<UEnvQueryContext>
---@field RoomContext TSubclassOf<UEnvQueryContext>
---@field PathFromContext FAIDataProviderBoolValue
---@field SkipUnreachable FAIDataProviderBoolValue
---@field NavFilterProvider FSBZAIDataProvider_NavQueryFilter
---@field bIsLockedExpensive boolean
USBZEnvQueryTest_RoomPathfinding = {}



---@class USBZEnvQueryTest_RoomType : UEnvQueryTest
---@field RoomType uint8
USBZEnvQueryTest_RoomType = {}



---@class USBZEnvQueryTest_SmallestNearbyBottleNeckSize : UEnvQueryTest
---@field DistanceToCheck float
USBZEnvQueryTest_SmallestNearbyBottleNeckSize = {}



---@class USBZEnvQueryTest_TargetAggroDamage : UEnvQueryTest
---@field TimeUntilForgetDamage float
USBZEnvQueryTest_TargetAggroDamage = {}



---@class USBZEnvQueryTest_TargetHasHumanShield : UEnvQueryTest
USBZEnvQueryTest_TargetHasHumanShield = {}


---@class USBZEnvQueryTest_TargetPrio : UEnvQueryTest
USBZEnvQueryTest_TargetPrio = {}


---@class USBZEnvQueryTest_Trace : UEnvQueryTest
---@field TraceChannel ETraceTypeQuery
---@field TraceFromContext FAIDataProviderBoolValue
---@field ItemHeightOffset FAIDataProviderFloatValue
---@field ContextHeightOffset FAIDataProviderFloatValue
---@field Context TSubclassOf<UEnvQueryContext>
---@field StopOnOverlap FAIDataProviderBoolValue
USBZEnvQueryTest_Trace = {}



---@class USBZEnvQueryTest_VantagePointHasLOS : UEnvQueryTest
---@field TargetContext TSubclassOf<UEnvQueryContext>
USBZEnvQueryTest_VantagePointHasLOS = {}



---@class USBZEnvQueryTest_VisuallyDetected : UEnvQueryTest
---@field bCriminalsOnly boolean
USBZEnvQueryTest_VisuallyDetected = {}



---@class USBZEquipAutoAbility : USBZHandleEquipmentAbility
USBZEquipAutoAbility = {}


---@class USBZEquipNextAbility : USBZHandleEquipmentAbility
---@field bIsNextForward boolean
USBZEquipNextAbility = {}



---@class USBZEquipNextGadgetAbility : USBZGameplayAbility
USBZEquipNextGadgetAbility = {}


---@class USBZEquipPlaceableAbility : USBZEquipSpecificAbility
USBZEquipPlaceableAbility = {}


---@class USBZEquipSpecificAbility : USBZHandleEquipmentAbility
---@field TargetEquippableIndex int32
USBZEquipSpecificAbility = {}



---@class USBZEquippableAnimation : UAnimInstance
---@field IdlePose UAnimSequenceBase
---@field Equippable ASBZEquippable
---@field AnimationCollection USBZEquippableAnimationCollection
USBZEquippableAnimation = {}



---@class USBZEquippableAnimationCollection : USBZBaseCharacterAnimationCollection
---@field AnimationContainersTP TMap<FName, FSBZAnimationContainer>
USBZEquippableAnimationCollection = {}



---@class USBZEquippableCharmAnimation : UAnimInstance
USBZEquippableCharmAnimation = {}


---@class USBZEquippableData : USBZInventoryBaseData
---@field EquippableClass TSoftClassPtr<ASBZEquippable>
---@field TagReactionAsset TSoftObjectPtr<USBZTagReactionAsset>
---@field EquippedAbilityClassArray TArray<TSubclassOf<USBZGameplayAbility>>
---@field EquippableDefaultIdleFPPose UAnimSequenceBase
---@field EquippableDefaultIdleTPPose UAnimSequenceBase
---@field DefaultRightGripFPPose UAnimSequenceBase
---@field DefaultLeftGripFPPose UAnimSequenceBase
---@field DefaultRightGripTPPose UAnimSequenceBase
---@field DefaultLeftGripTPPose UAnimSequenceBase
---@field EquippableFamily ESBZEquippableFamily
---@field WeaponOffsetFPLeftHandEquipped FVector
---@field WeaponOffsetPerAnimation TMap<FName, FVector>
---@field AttachmentSocket FName
---@field AttachmentOffset FTransform
---@field CompatibleStances int32
---@field WeightTierOffset float
---@field BoundsScaleHack FVector
---@field BoundsOffsetHack FVector
---@field AnimationCollectionFP TSoftObjectPtr<USBZPlayerAnimationCollectionFPP>
---@field WeaponAnimCollection TSoftObjectPtr<USBZEquippableAnimationCollection>
---@field EquippableMenuAnimCollection USBZEquippableMenuAnimationCollection
USBZEquippableData = {}



---@class USBZEquippableGadgetData : USBZEquippablePartCustomData
---@field GadgetClass TSubclassOf<ASBZGadget>
---@field SpawnSocket FName
USBZEquippableGadgetData = {}



---@class USBZEquippableMenuAnimationCollection : USBZBaseMenuAnimationCollection
---@field EquippablePerCharacterSlots TMap<ESBZMainMenuAnimationName, FSBZMenuACEquippablePerCharacterSlot>
USBZEquippableMenuAnimationCollection = {}



---@class USBZEquippablePartConfig : USBZModularPartConfig
USBZEquippablePartConfig = {}


---@class USBZEquippablePartCustomData : UDataAsset
USBZEquippablePartCustomData = {}


---@class USBZEquippablePartDataAsset : USBZModularPartDataAsset
---@field CustomDataArray TArray<USBZEquippablePartCustomData>
---@field SightDataArray TArray<USBZWeaponSightData>
---@field GadgetDataArray TArray<USBZEquippableGadgetData>
---@field MagazineData USBZWeaponMagazineData
---@field AmmoData USBZWeaponAmmoData
---@field ModGripAnimData USBZModGripAnimData
---@field MuzzleData USBZWeaponMuzzleData
---@field AttributeModifierMap TMap<ESBZWeaponAttribute, int32>
USBZEquippablePartDataAsset = {}

---@param WeaponData USBZBaseWeaponData
---@param PartUIData FSBZEquippablePartUIData
function USBZEquippablePartDataAsset:GetModificationsUIData(WeaponData, PartUIData) end


---@class USBZEventLibrary : UBlueprintFunctionLibrary
USBZEventLibrary = {}

---@param WorldContextObject UObject
---@return USBZGameEventBroker
function USBZEventLibrary:GetGameEventBroker(WorldContextObject) end


---@class USBZEventReactionComponent : UActorComponent
---@field RequestTimers TMap<FGameplayTag, FTimerHandle>
---@field EventReactionRequests TMap<FGameplayTag, FSBZEventRequestContainer>
USBZEventReactionComponent = {}



---@class USBZExitPhoneAbility : USBZGameplayAbility
---@field ViewTargetActor AActor
---@field OwnerCharacter ASBZPlayerCharacter
USBZExitPhoneAbility = {}



---@class USBZExperienceManager : USBZPlayerStatisticsManager
USBZExperienceManager = {}

---@param WorldContextObject UObject
---@return USBZExperienceManager
function USBZExperienceManager:GetExperienceManager(WorldContextObject) end


---@class USBZExplosionDamageType : USBZDamageType
USBZExplosionDamageType = {}


---@class USBZExplosionImpactConfig : USBZImpactConfig
USBZExplosionImpactConfig = {}


---@class USBZExplosiveTrapExecutionCalculation : UGameplayEffectExecutionCalculation
USBZExplosiveTrapExecutionCalculation = {}


---@class USBZFPSWidget : USBZWidgetBase
---@field Text_FPS UTextBlock
USBZFPSWidget = {}

---@param bInIsDisplaying boolean
function USBZFPSWidget:OnDisplayedChanged(bInIsDisplaying) end


---@class USBZFacialAnimationCollection : UDataAsset
---@field Animations TMap<ESBZFacialEmotion, FSBZFacialAnimationContainer>
USBZFacialAnimationCollection = {}



---@class USBZFactions : UObject
USBZFactions = {}


---@class USBZFactionsConfig : UObject
---@field Factions TArray<FSBZFactionInfo>
---@field Attitudes TArray<FSBZFactionAttitude>
USBZFactionsConfig = {}



---@class USBZFallDamageExecutionCalculation : UGameplayEffectExecutionCalculation
USBZFallDamageExecutionCalculation = {}


---@class USBZFallDamageType : USBZDamageType
USBZFallDamageType = {}


---@class USBZFineGrainedRateLimitManager : UObject
---@field FGRLManagerClassName FSoftClassPath
USBZFineGrainedRateLimitManager = {}



---@class USBZFireKickBackCameraModifier : USBZPlayerCameraModifier
USBZFireKickBackCameraModifier = {}


---@class USBZFireRangedWeaponAbility : USBZGameplayAbility
---@field Pawn APawn
USBZFireRangedWeaponAbility = {}



---@class USBZFirstPersonCameraAttachment : USceneComponent
---@field CameraSocket FName
---@field SightSocket FName
---@field OwningCharacter ASBZPlayerCharacter
---@field EquippedWeaponData USBZBaseWeaponData
---@field EquippedWeapon ASBZWeapon
---@field EquippedWeaponSightData USBZWeaponSightData
---@field EquippedTargetingData USBZWeaponTargetingData
---@field TargetingHideMeshArray TArray<UMeshComponent>
USBZFirstPersonCameraAttachment = {}



---@class USBZFlashBangGrenadeData : USBZGrenadeData
---@field GuaranteedFlashDistance float
---@field MaximumAngleDifference float
---@field StunTime float
---@field PlayerFlashTime float
---@field FriendlyPlayerFlashTimeScale float
---@field FlashPlayerFalloffExponent float
---@field GameplayEffectClass TSubclassOf<UGameplayEffect>
---@field DurationTag FGameplayTag
---@field PawnTypesToIgnoreSkills FGameplayTagContainer
USBZFlashBangGrenadeData = {}



---@class USBZFloorHeightCameraSmoother : USBZPlayerCameraModifier
---@field InterpSpeed FFloatInterval
---@field CharacterSpeed FFloatInterval
USBZFloorHeightCameraSmoother = {}



---@class USBZFootContactNotify : UAnimNotify
---@field FootType ESBZFootType
---@field bOverrideIntensity boolean
---@field FootContactIntensityOverride ESBZFootContactIntensity
---@field FootContactVelocity FVector
USBZFootContactNotify = {}



---@class USBZFootstepImpactConfig : USBZImpactConfig
USBZFootstepImpactConfig = {}


---@class USBZForbidDeathNotifyState : USBZForbidHurtNotifyState
USBZForbidDeathNotifyState = {}


---@class USBZForbidHurtNotifyState : UAnimNotifyState
---@field bIsFlinchForbidden boolean
USBZForbidHurtNotifyState = {}



---@class USBZForceFacialAnimationNotifyState : UAnimNotifyState
---@field FacialAnimation UAnimSequence
USBZForceFacialAnimationNotifyState = {}



---@class USBZForceFacialEmotionNotifyState : UAnimNotifyState
---@field FacialEmotion ESBZFacialEmotion
USBZForceFacialEmotionNotifyState = {}



---@class USBZForwardState : UObject
---@field StateMachine USBZAerialVehicleStateMachine
USBZForwardState = {}



---@class USBZFragGrenadeData : USBZGrenadeData
---@field DamageGameplayEffectClass TSubclassOf<UGameplayEffect>
---@field DamageTypeClass TSubclassOf<USBZDamageType>
---@field FriendlyPlayerDamageScale float
---@field bUseInstigatorPlayerDamageScale boolean
---@field InstigatorPlayerDamageScale float
---@field HurtReactionData FSBZHurtReactionData
USBZFragGrenadeData = {}



---@class USBZFragGrenadeExecutionCalculation : UGameplayEffectExecutionCalculation
USBZFragGrenadeExecutionCalculation = {}


---@class USBZFriendManager : UObject
USBZFriendManager = {}

---@param bResult boolean
---@param PlayerEntry FSBZFriendListEntry
function USBZFriendManager:OnUnblockPlayerComplete(bResult, PlayerEntry) end
function USBZFriendManager:OnQueryBlockedPlayersDone() end
function USBZFriendManager:OnPlatformUserInitialized() end
---@param bResult boolean
---@param PlayerEntry FSBZFriendListEntry
function USBZFriendManager:OnBlockPlayerComplete(bResult, PlayerEntry) end
function USBZFriendManager:OnBlockedPlayerChanged() end
---@param FriendEntry FSBZFriendListEntry
---@return boolean
function USBZFriendManager:IsPlayingOnSamePlatform(FriendEntry) end
---@return boolean
function USBZFriendManager:IsCrossplayAllowed() end
---@param Event FSBZUIStackChangedEvent
function USBZFriendManager:HandleUIStackChanged(Event) end
---@return TMap<FString, FSBZFriendListEntry>
function USBZFriendManager:GetUserSearchEntries() end
---@return TMap<FString, FSBZFriendListEntry>
function USBZFriendManager:GetPlatformFriendEntries() end
---@return TMap<FString, FSBZFriendListEntry>
function USBZFriendManager:GetOutgoingFriendRequests() end
---@return TMap<FString, FSBZFriendListEntry>
function USBZFriendManager:GetOfflineFriendEntries() end
---@return TMap<FString, FSBZFriendListEntry>
function USBZFriendManager:GetIncomingFriendRequests() end
---@param WorldContextObject UObject
---@return USBZFriendManager
function USBZFriendManager:GetFriendManager(WorldContextObject) end
---@return TMap<FString, FSBZFriendListEntry>
function USBZFriendManager:GetBlockedPlayerEntries() end
---@return TMap<FString, FSBZFriendListEntry>
function USBZFriendManager:GetAccelByteFriendEntries() end


---@class USBZFullScreenNotification : USBZWidgetBase
---@field Text_Header UTextBlock
---@field Text_Description UTextBlock
---@field Widget_ControlsReference USBZControlsReferenceWidget
---@field DismissControlsReference FSBZControlsReference
---@field bIsShowing boolean
---@field Data FSBZUIFullscreenNotificationData
USBZFullScreenNotification = {}

---@param NewNotificationData FSBZUIFullscreenNotificationData
function USBZFullScreenNotification:OnDisplayedNewActiveNotification(NewNotificationData) end
---@param InActionName FName
function USBZFullScreenNotification:OnControlsReferenceClicked(InActionName) end
function USBZFullScreenNotification:DismissActiveNotification() end


---@class USBZFullscreenVideoWidget : USBZMenuStackScreenWidget
---@field OnActiveChanged FSBZFullscreenVideoWidgetOnActiveChanged
---@field VideoImage UImage
---@field VideoPlayer UBinkMediaPlayer
---@field PlayControlsReference FSBZButtonControlsReference
---@field PauseControlsReference FSBZButtonControlsReference
---@field ShowInputDuration float
---@field ZOderChange int32
---@field Text_SubtitleText UTextBlock
USBZFullscreenVideoWidget = {}

---@param ActionName FName
function USBZFullscreenVideoWidget:OnControlReferencePressed(ActionName) end
function USBZFullscreenVideoWidget:Close() end
---@param ActionName FName
function USBZFullscreenVideoWidget:BP_OnControlReferencePressed(ActionName) end


---@class USBZGameEngine : UGameEngine
USBZGameEngine = {}


---@class USBZGameErrorWidget : USBZInternetStatusWidget
---@field Button_ReturnToMainMenu USBZMenuButton
USBZGameErrorWidget = {}

---@param ServiceStatus ESBZServiceStatus
function USBZGameErrorWidget:SetInternetConnected(ServiceStatus) end
---@return FText
function USBZGameErrorWidget:GetErrorText() end
---@return FText
function USBZGameErrorWidget:GetErrorHeader() end
---@return USBZMenuButton
function USBZGameErrorWidget:GetButton_ReturnToMainMenu() end


---@class USBZGameEventBroker : UObject
---@field OnGameStateReceived FSBZGameEventBrokerOnGameStateReceived
---@field OnTakenDamage FSBZGameEventBrokerOnTakenDamage
---@field OnRevive FSBZGameEventBrokerOnRevive
---@field OnPlayerStartTravel FSBZGameEventBrokerOnPlayerStartTravel
---@field OnPlayerStateAdded FSBZGameEventBrokerOnPlayerStateAdded
---@field OnPlayerStateRemoved FSBZGameEventBrokerOnPlayerStateRemoved
---@field OnPlayerInEscapeChanged FSBZGameEventBrokerOnPlayerInEscapeChanged
---@field OnPlayerChatMessageReceived FSBZGameEventBrokerOnPlayerChatMessageReceived
---@field OnCrewAIChatMessageReceived FSBZGameEventBrokerOnCrewAIChatMessageReceived
---@field OnSystemChatMessageReceived FSBZGameEventBrokerOnSystemChatMessageReceived
---@field OnVotingChatMessageReceived FSBZGameEventBrokerOnVotingChatMessageReceived
---@field OnCallMessageReceived FSBZGameEventBrokerOnCallMessageReceived
---@field OnPlayerPingedReceived FSBZGameEventBrokerOnPlayerPingedReceived
---@field OnKeyItemCountChanged FSBZGameEventBrokerOnKeyItemCountChanged
---@field OnSharedKeyItemTagChanged FSBZGameEventBrokerOnSharedKeyItemTagChanged
---@field OnPlayerBeginPlayState FSBZGameEventBrokerOnPlayerBeginPlayState
---@field OnHeistGoneLoud FSBZGameEventBrokerOnHeistGoneLoud
---@field OnChatMessageSent FSBZGameEventBrokerOnChatMessageSent
---@field OnCallMessageSent FSBZGameEventBrokerOnCallMessageSent
---@field OnPlayerDefeatStateChangedDelegate FSBZGameEventBrokerOnPlayerDefeatStateChangedDelegate
---@field OnAICrewDefeatStateChangedDelegate FSBZGameEventBrokerOnAICrewDefeatStateChangedDelegate
---@field OnWaitActionPhaseEntered FSBZGameEventBrokerOnWaitActionPhaseEntered
---@field OnActionPhaseEntered FSBZGameEventBrokerOnActionPhaseEntered
---@field OnGameStartPhaseEntered FSBZGameEventBrokerOnGameStartPhaseEntered
---@field OnWaitMainMenuPhaseEntered FSBZGameEventBrokerOnWaitMainMenuPhaseEntered
---@field OnNotLoggedInEntered FSBZGameEventBrokerOnNotLoggedInEntered
---@field OnGameDifficultyChanged FSBZGameEventBrokerOnGameDifficultyChanged
---@field OnPreMatchAsyncLoadingProgress FSBZGameEventBrokerOnPreMatchAsyncLoadingProgress
---@field OnMatchmakingStarted FSBZGameEventBrokerOnMatchmakingStarted
---@field OnPreMatchAsyncLoadingDone FSBZGameEventBrokerOnPreMatchAsyncLoadingDone
---@field OnPreMatchAsyncLoadingCancel FSBZGameEventBrokerOnPreMatchAsyncLoadingCancel
---@field OnFBIActivation FSBZGameEventBrokerOnFBIActivation
USBZGameEventBroker = {}

---@param ChatEventData FSBZPlayerChatEvent
function USBZGameEventBroker:SendChatMessage(ChatEventData) end
---@param CallEventData FSBZPlayerCallEvent
function USBZGameEventBroker:SendCallMessage(CallEventData) end
---@param ChatEventData FSBZSystemChatEvent
function USBZGameEventBroker:PostOnSystemChatMessageReceived(ChatEventData) end
---@param InData FSBZPlayerDefeatStateChangedData
function USBZGameEventBroker:PostOnPlayerDefeatStateChanged(InData) end
---@param ChatEventData FSBZPlayerChatEvent
function USBZGameEventBroker:PostOnPlayerChatMessageRecieved(ChatEventData) end
---@param ChatEventData FSBZAICrewChatEvent
function USBZGameEventBroker:PostOnCrewAIChatMessageReceived(ChatEventData) end
---@param InData FSBZAICrewDefeatStateChangedData
function USBZGameEventBroker:PostOnAICrewDefeatStateChanged(InData) end


---@class USBZGameInstance : UGameInstance
---@field GameEventBroker USBZGameEventBroker
---@field OnlineEventBroker USBZOnlineEventBroker
---@field WwiseInitBank UAkInitBank
---@field MusicManagerClass TSubclassOf<USBZMusicManager>
---@field MotionManagerClass TSubclassOf<USBZWwiseMotionManagerComponent>
---@field VolumeManagerClass TSubclassOf<USBZVolumeManager>
---@field GamepadBindingsManagerClass TSubclassOf<USBZGamepadBindingsManager>
---@field ListenerManagerClass TSubclassOf<USBZListenerManager>
---@field SoundEnvironmentManagerClass TSubclassOf<USBZSoundEnvironmentManager>
---@field ChallengeManagerClass TSubclassOf<USBZChallengeManager>
---@field ChallengeCategoryManagerClass TSubclassOf<USBZChallengeCategoryManager>
---@field UIManagerClass TSubclassOf<USBZUIManager>
---@field GlobalItemDatabaseClass TSubclassOf<USBZGlobalItemDatabase>
---@field GlobalQuickStartItemDatabaseClass TSubclassOf<USBZGlobalItemDatabase>
---@field GameStateMachine USBZGameStateMachine
---@field FramerateLimitOutOfFocus float
---@field SaveManager USBZSaveManager
---@field SettingsMenuManager USBZSettingsMenuManager
---@field WeaponConfigManager USBZWeaponConfigManager
---@field WeaponCosmeticsManager USBZCosmeticsManager
---@field WeaponProgressionManager USBZWeaponProgressionManager
---@field AssetDatabaseManager USBZAssetDatabaseManager
---@field StoreManager USBZStoreManager
---@field InventoryManager USBZInventoryManager
---@field PlayerStatisticsManager USBZPlayerStatisticsManager
---@field LoadoutManager USBZLoadoutManager
---@field MusicManager USBZMusicManager
---@field VolumeManager USBZVolumeManager
---@field MotionManager USBZWwiseMotionManagerComponent
---@field GamepadBindingsManager USBZGamepadBindingsManager
---@field ListenerManager USBZListenerManager
---@field SoundEnvironmentManager USBZSoundEnvironmentManager
---@field AccelByteUser USBZAccelByteUser
---@field ChallengeManager USBZChallengeManager
---@field ChallengeCategoryManager USBZChallengeCategoryManager
---@field UIManager USBZUIManager
---@field AnalyticsManager USBZAnalyticsManager
---@field WorldLoader USBZWorldLoader
---@field ReplayManager USBZReplayManager
---@field SafeHouseManager USBZSafeHouseManager
---@field GlobalItemDatabase USBZGlobalItemDatabase
---@field CharacterManager USBZCharacterManager
---@field CurrencyManager USBZCurrencyManager
---@field ExperienceManager USBZExperienceManager
---@field InstantLootManager USBZInstantLootManager
---@field InfamyManager USBZInfamyManager
---@field SkillManager USBZSkillManager
---@field PreplanningAssetManager USBZPreplanningAssetManager
---@field AchievementManager USBZAchievementManager
---@field TimeEventManager USBZTimeEventManager
---@field AccelByteNetworkPoll USBZAccelByteNetworkErrorManager
---@field ItemProgressionManager USBZItemProgressionManager
---@field UE4StatsProfiler USBZUE4StatsProfiler
---@field GameplayManager USBZGameplayManager
---@field FGRLManager USBZFineGrainedRateLimitManager
---@field PlatformUserManager USBZPlatformUserManager
USBZGameInstance = {}

---@param InDifficulty ESBZDifficulty
function USBZGameInstance:SetDifficulty(InDifficulty) end
---@param Replays TArray<FSBZReplayInfo>
function USBZGameInstance:OnFindReplaysComplete(Replays) end
---@param StateName FName
function USBZGameInstance:HandleGameStateEntered(StateName) end
---@return USBZSaveManager
function USBZGameInstance:GetSaveManager() end
---@return USBZReplayManager
function USBZGameInstance:GetReplayManager() end
---@return USBZPlatformUserManager
function USBZGameInstance:GetPlatformUserManager() end
---@return USBZGlobalItemDatabase
function USBZGameInstance:GetGlobalItemDatabase() end
---@return ESBZDifficulty
function USBZGameInstance:GetDifficulty() end
---@return FString
function USBZGameInstance:GetBuiltFromChangelist() end
function USBZGameInstance:DisplayVersion() end


---@class USBZGameRecordsManager : UObject
USBZGameRecordsManager = {}

---@return FSBZTitleData
function USBZGameRecordsManager:GetTitleData() end
---@return FSBZNewsFeedList
function USBZGameRecordsManager:GetNewsFeed() end
---@return TArray<FSBZMetaEventData>
function USBZGameRecordsManager:GetMetaEventsData() end
---@return TArray<FSBZDifficultyConfiguration>
function USBZGameRecordsManager:GetDifficultyConfiguration() end
---@param WorldContextObject UObject
---@return USBZGameRecordsManager
function USBZGameRecordsManager:Get(WorldContextObject) end
---@param inNewsFeed FSBZNewsFeedList
function USBZGameRecordsManager:CacheNewsFeed(inNewsFeed) end
---@param InConfiguration TArray<FSBZDifficultyConfiguration>
function USBZGameRecordsManager:CacheDifficultyConfiguration(InConfiguration) end


---@class USBZGameStartMainMenuLoadoutWidget : USBZWidgetBase
---@field Panel_LoadoutContainer UPanelWidget
---@field DefaultItemWidgetClass TSubclassOf<USBZMainMenuInventoryItemWidget>
USBZGameStartMainMenuLoadoutWidget = {}



---@class USBZGameStartMainMenuSkillsSelection : USBZMenuStackScreenWidgetWithTutorial
---@field Skills TArray<USBZSkillData>
---@field AlternativeSelectionInput FName
---@field AlternativeSelectionHoldDuration float
---@field DescriptionScrollAxis FName
---@field DescriptionScrollSpeed float
---@field AxisDeadZone float
---@field CurrentLoadoutIndex int32
---@field CachedPlayerLoadout FSBZPlayerLoadoutConfig
USBZGameStartMainMenuSkillsSelection = {}

---@param Value float
function USBZGameStartMainMenuSkillsSelection:OnDescriptionScrollAxisChanged(Value) end
function USBZGameStartMainMenuSkillsSelection:OnAlternativeSelectionReleased() end
function USBZGameStartMainMenuSkillsSelection:OnAlternativeSelectionPressed() end
function USBZGameStartMainMenuSkillsSelection:OnAlternativeHoldDurationComplete() end
function USBZGameStartMainMenuSkillsSelection:NativeOnAlternativeSelectionReleased() end
function USBZGameStartMainMenuSkillsSelection:NativeOnAlternativeSelectionPressed() end
---@param Result ESBZMetaRequestResult
function USBZGameStartMainMenuSkillsSelection:HandleProgressionSave(Result) end
---@param InLoadoutIndex int32
---@return boolean
function USBZGameStartMainMenuSkillsSelection:CustomizeSkillsForPlayerLoadoutIndex(InLoadoutIndex) end
---@param InLoadoutToConfig FSBZPlayerLoadoutConfig
---@return boolean
function USBZGameStartMainMenuSkillsSelection:CustomizeSkillsForPlayerLoadout(InLoadoutToConfig) end


---@class USBZGameStartMainMenuWeaponCustomizationWidget : USBZMenuStackScreenWidget
---@field EquippableConfig FSBZEquippableConfig
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field WeaponSlotIndex int32
USBZGameStartMainMenuWeaponCustomizationWidget = {}

---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
function USBZGameStartMainMenuWeaponCustomizationWidget:UpdateEquippableConfig(InEquippableSlot, InWeaponSlotIndex) end
---@param OutEquippableSlot ESBZEquippableLoadoutSlot
---@param OutWeaponSlotIndex int32
function USBZGameStartMainMenuWeaponCustomizationWidget:GetCurrentWeaponSlotData(OutEquippableSlot, OutWeaponSlotIndex) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
---@return boolean
function USBZGameStartMainMenuWeaponCustomizationWidget:CustomizeWeaponInSlot(InEquippableSlot, InWeaponSlotIndex) end


---@class USBZGameStateMachine : UObject
---@field OnStateMachineEnteredGameStart FSBZGameStateMachineOnStateMachineEnteredGameStart
---@field OnStateMachineEnteredMatchmaking FSBZGameStateMachineOnStateMachineEnteredMatchmaking
---@field OnStateMachineExitedMatchmaking FSBZGameStateMachineOnStateMachineExitedMatchmaking
---@field OnStateMachineEnteredLobby FSBZGameStateMachineOnStateMachineEnteredLobby
---@field OnStateMachineExitedLobby FSBZGameStateMachineOnStateMachineExitedLobby
---@field OnJobOverviewReady FSBZGameStateMachineOnJobOverviewReady
---@field OnJobOverviewComplete FSBZGameStateMachineOnJobOverviewComplete
---@field OnPlayerPressedReadyRecieved FSBZGameStateMachineOnPlayerPressedReadyRecieved
---@field OnPlayerReadyRecieved FSBZGameStateMachineOnPlayerReadyRecieved
---@field OnSetPlayerReadyTimeout FSBZGameStateMachineOnSetPlayerReadyTimeout
---@field OnPlayerReadyStatusUpdate FSBZGameStateMachineOnPlayerReadyStatusUpdate
---@field OnPlayerPressedRestartLevel FSBZGameStateMachineOnPlayerPressedRestartLevel
---@field OnSendToServerPlayerToReady FSBZGameStateMachineOnSendToServerPlayerToReady
---@field OnSecurityCompaniesChanged FSBZGameStateMachineOnSecurityCompaniesChanged
---@field StateMachine USBZCommonStateMachine
USBZGameStateMachine = {}

---@param InSecurityCompanies TArray<ESBZSecurityCompany>
function USBZGameStateMachine:SetMatchmakingSecurityCompanies(InSecurityCompanies) end
---@param InRandomSeed int32
function USBZGameStateMachine:SetMatchmakingRandomSeed(InRandomSeed) end
---@param InMatchmakingParameters FSBZOnlineMatchmakingParams
function USBZGameStateMachine:SetMatchMakingParameters(InMatchmakingParameters) end
---@param InLevelIdx int32
function USBZGameStateMachine:SetMatchmakingLevelIdx(InLevelIdx) end
---@param InDifficultyIdx uint8
function USBZGameStateMachine:SetMatchmakingDifficultyIdx(InDifficultyIdx) end
---@param InDifficulty ESBZDifficulty
function USBZGameStateMachine:SetMatchmakingDifficulty(InDifficulty) end
---@param bInIsQuickMatch boolean
function USBZGameStateMachine:SetIsMatchmakingQuickMatch(bInIsQuickMatch) end
---@param LevelIdx int32
---@param DifficultyIdx int32
function USBZGameStateMachine:RequestSoloGame(LevelIdx, DifficultyIdx) end
---@param Reason ESBZReturnToMainMenuReason
function USBZGameStateMachine:RequestReturnToMainMenu(Reason) end
---@param Reason ESBZReturnToLoginReason
function USBZGameStateMachine:RequestReturnToLogin(Reason) end
---@param Reason ESBZReturnToIISReason
function USBZGameStateMachine:RequestReturnToIIS(Reason) end
function USBZGameStateMachine:RequestRestart() end
---@param ReplayInfo FSBZReplayInfo
function USBZGameStateMachine:RequestReplay(ReplayInfo) end
function USBZGameStateMachine:RequestPlatformJoin() end
---@param MatchmakingParameters FSBZOnlineMatchmakingParams
function USBZGameStateMachine:RequestP2PHost(MatchmakingParameters) end
---@param RequestData FSBZEndMissionRequestData
function USBZGameStateMachine:RequestMissionEnd(RequestData) end
---@param MatchmakingParameters FSBZOnlineMatchmakingParams
function USBZGameStateMachine:RequestMatchmaking(MatchmakingParameters) end
---@param bSetClientReady boolean
function USBZGameStateMachine:RequestJobOverviewReady(bSetClientReady) end
---@param bIsClientReady boolean
function USBZGameStateMachine:RequestJobOverviewComplete(bIsClientReady) end
---@param BlackScreenTransitionType EBlackScreenTransitionType
function USBZGameStateMachine:RequestJobOverviewAllReady(BlackScreenTransitionType) end
function USBZGameStateMachine:RequestGoToLobby() end
function USBZGameStateMachine:RequestGameStart() end
---@param Error ESBZGameMachineStateError
function USBZGameStateMachine:RequestGameError(Error) end
function USBZGameStateMachine:RequestEndOutroSequence() end
function USBZGameStateMachine:RequestEndIntroSequence() end
function USBZGameStateMachine:RequestDirectJoin() end
function USBZGameStateMachine:RequestDefaultMatchmaking() end
---@param InSecurityCompany ESBZSecurityCompany
function USBZGameStateMachine:RemoveMatchmakingSecurityCompany(InSecurityCompany) end
---@return boolean
function USBZGameStateMachine:IsMatchmakingQuickMatch() end
---@return boolean
function USBZGameStateMachine:IsMatchmakingInProgress() end
---@return boolean
function USBZGameStateMachine:HasStartedOutro() end
---@return ESBZOnlineSessionPhase
function USBZGameStateMachine:GetSessionPhase() end
---@return TArray<ESBZSecurityCompany>
function USBZGameStateMachine:GetMatchmakingSecurityCompanies() end
---@param InHeist UPD3HeistDataAsset
---@param InDifficulty ESBZDifficulty
---@return TArray<ESBZSecurityCompany>
function USBZGameStateMachine:GetMatchmakingSecuritCompaniesForHeist(InHeist, InDifficulty) end
---@return int32
function USBZGameStateMachine:GetMatchmakingRandomSeed() end
---@return FSBZOnlineMatchmakingParams
function USBZGameStateMachine:GetMatchMakingParameters() end
---@return uint8
function USBZGameStateMachine:GetMatchmakingLevelIdx() end
---@return uint8
function USBZGameStateMachine:GetMatchmakingDifficultyIdx() end
---@return ESBZDifficulty
function USBZGameStateMachine:GetMatchmakingDifficulty() end
---@param LevelUrl FString
---@param bIsAbsolute boolean
function USBZGameStateMachine:DebugOnlineTravel(LevelUrl, bIsAbsolute) end
---@param InSecurityCompany ESBZSecurityCompany
function USBZGameStateMachine:AddMatchmakingSecurityCompany(InSecurityCompany) end


---@class USBZGameStateMachineFunctionLibrary : UBlueprintFunctionLibrary
USBZGameStateMachineFunctionLibrary = {}

---@param PakchunkIndex int32
---@return boolean
function USBZGameStateMachineFunctionLibrary:IsValidPakchunkIndex(PakchunkIndex) end
---@param WorldContextObject UObject
---@return boolean
function USBZGameStateMachineFunctionLibrary:IsPie(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZGameStateMachineFunctionLibrary:GetLobbyTimeout(WorldContextObject) end
---@param WorldContextObject UObject
---@return ESBZGameStateMachineState
function USBZGameStateMachineFunctionLibrary:GetGameStateMachineState(WorldContextObject) end
---@param WorldContextObject UObject
---@return USBZGameStateMachine
function USBZGameStateMachineFunctionLibrary:GetGameStateMachine(WorldContextObject) end
---@return ESBZCurrentPlatform
function USBZGameStateMachineFunctionLibrary:GetCurrentPlatform() end
---@param ChunkID int32
---@return float
function USBZGameStateMachineFunctionLibrary:GetChunkInstallProgress(ChunkID) end
---@param WorldContextObject UObject
---@return int32
function USBZGameStateMachineFunctionLibrary:GetAcceptMatchTimeout(WorldContextObject) end


---@class USBZGameStateMachineSettings : UDeveloperSettings
---@field LoadingTransitionLevel FSoftObjectPath
---@field BlackScreenTime float
---@field IntroSequenceSafetyTimeout float
---@field OutroSequenceSafetyTimeout float
---@field JobOveviewToActionPhaseDropInTime float
---@field JobOverviewWidgetClassName FSoftClassPath
---@field ActionPhaseWidgetClassName FSoftClassPath
---@field ResultScreenWidgetClassName FSoftClassPath
---@field MainMenuWidgetClassName FSoftClassPath
---@field GameErrorWidgetClassName FSoftClassPath
---@field LoadingScreenWidgetClassName FSoftClassPath
---@field LoginScreenWidgetClassName FSoftClassPath
---@field SafeHouseWidgetClassName FSoftClassPath
---@field ReplayWidgetClassName FSoftClassPath
---@field BackendErrorWidgetClassName FSoftClassPath
---@field LoginScreenWidgetClass TSubclassOf<USBZLoginScreenBaseWidget>
---@field JobOverviewWidgetClass TSubclassOf<USBZJobOverviewBaseWidget>
---@field ActionPhaseWidgetClass TSubclassOf<USBZActionPhaseBaseWidget>
---@field ReplayWidgetClass TSubclassOf<USBZReplayBaseWidget>
---@field ResultScreenWidgetClass TSubclassOf<USBZWidgetBase>
---@field MainMenuWidgetClass TSubclassOf<USBZMainMenuWidget>
---@field GameErrorWidgetClass TSubclassOf<USBZGameErrorWidget>
---@field BackendErrorWidgetClass TSubclassOf<USBZBackendErrorWidget>
---@field LoadingScreenWidgetClass TSubclassOf<USBZLoadingScreen>
---@field SafeHouseWidgetClass TSubclassOf<USBZSafeHouseBaseWidget>
---@field Levels TArray<FSoftObjectPath>
---@field LevelsTutorial TArray<FSoftObjectPath>
---@field DeveloperLevels TArray<FSoftObjectPath>
---@field SafeHouseLevel FSoftObjectPath
---@field FeatureLevels TArray<FSoftObjectPath>
USBZGameStateMachineSettings = {}

---@param WorldContextObject UObject
---@param ShortName FString
---@return int32
function USBZGameStateMachineSettings:LevelShortNameToIdx(WorldContextObject, ShortName) end
---@param WorldContextObject UObject
---@param ObjectPath FSoftObjectPath
---@return int32
function USBZGameStateMachineSettings:LevelPathToIdx(WorldContextObject, ObjectPath) end
---@param WorldContextObject UObject
---@param LevelIdx int32
---@return FSoftObjectPath
function USBZGameStateMachineSettings:LevelIdxToPath(WorldContextObject, LevelIdx) end
---@param WorldContextObject UObject
---@param LevelIdx int32
---@return boolean
function USBZGameStateMachineSettings:IsLevelIdxValid(WorldContextObject, LevelIdx) end
---@param WorldContextObject UObject
---@return TArray<FSoftObjectPath>
function USBZGameStateMachineSettings:GetLevelsTutorial(WorldContextObject) end
---@param WorldContextObject UObject
---@return TArray<FSoftObjectPath>
function USBZGameStateMachineSettings:GetLevelsFeature(WorldContextObject) end
---@param WorldContextObject UObject
---@return TArray<FSoftObjectPath>
function USBZGameStateMachineSettings:GetLevelsDev(WorldContextObject) end
---@param WorldContextObject UObject
---@return TArray<FSoftObjectPath>
function USBZGameStateMachineSettings:GetLevels(WorldContextObject) end


---@class USBZGameUserSettings : UGameUserSettings
---@field SBZVersion uint32
---@field CameraVerticalFoV int32
---@field Brightness float
---@field Contrast float
---@field Gamma float
---@field ColorBlindMode EColorVisionDeficiency
---@field ColorBlindStrength float
---@field bUseMotionBlur boolean
---@field bUseDepthOfField boolean
---@field AntiAliasingMode int32
---@field UpscalingMode int32
---@field DLSSSRMode int32
---@field CapsuleShadowQuality int32
---@field bUseOutlines boolean
---@field bUseSubtitles boolean
---@field SubtitlesSize int32
---@field bUseFPSDisplay boolean
---@field bUseReticle boolean
---@field CrosshairsBarWidth float
---@field CrosshairsBarLength float
---@field CrosshairsDotSize float
---@field MinCrosshairsScale float
---@field MaxCrosshairsScale float
---@field CrosshairsBarColor FLinearColor
---@field CrosshairsDotColor FLinearColor
---@field bUseHitIndicators boolean
---@field HitIndicatorScale float
---@field HitIndicatorColorHit FLinearColor
---@field HitIndicatorColorCrit FLinearColor
---@field HitIndicatorColorKill FLinearColor
---@field MasterVolume float
---@field MusicVolume float
---@field VOVolume float
---@field SFXVolume float
---@field VoipVolume float
---@field CinematicVolume float
---@field MouseSensitivityMultiplier float
---@field bUseMouseSmoothing boolean
---@field GamepadHorizontalSensitivity float
---@field GamepadVerticalSensitivity float
---@field bUseInvertedYAxis boolean
---@field bUseForceFeedback boolean
---@field TargetingSensitivityMultiplier float
---@field bUseHoldToRun boolean
---@field bUseHoldToCrouch boolean
---@field bUseHoldToTarget boolean
---@field bUseSwitchWeaponAutomatically boolean
---@field bIsChatDisabled boolean
---@field bIsCrossplayDisabled boolean
---@field MouseSensitivity float
---@field bUseHoldForTabMenu boolean
---@field AxisKeyboardBindings TArray<FSBZInputAxisKeyboardBinding>
---@field ActionKeyboardBindings TArray<FSBZInputActionKeyboardBinding>
---@field GamepadBindingsPreset int32
---@field bIsGameSenseEnabled boolean
---@field bIsTelemetryEnabled boolean
---@field TutorialsShownBitmask uint32
---@field bIsPristine boolean
---@field GameInstance USBZGameInstance
USBZGameUserSettings = {}

---@param Volume float
function USBZGameUserSettings:SetVOVolume(Volume) end
---@param Volume float
function USBZGameUserSettings:SetVoIPVolume(Volume) end
function USBZGameUserSettings:SetVideoToDefaults() end
function USBZGameUserSettings:SetUserInterfaceToDefaults() end
---@param Mode int32
function USBZGameUserSettings:SetUpscalingMode(Mode) end
---@param bPopupShown boolean
function USBZGameUserSettings:SetTutorialPopupShown(bPopupShown) end
---@param bIsEnabled boolean
function USBZGameUserSettings:SetTelemetryEnabled(bIsEnabled) end
---@param Sensitivity float
function USBZGameUserSettings:SetTargetingSensitivityMultiplier(Sensitivity) end
---@param bEnable boolean
function USBZGameUserSettings:SetSwitchWeaponAutomaticallyEnabled(bEnable) end
---@param Value int32
function USBZGameUserSettings:SetSubtitlesSize(Value) end
---@param bEnable boolean
function USBZGameUserSettings:SetSubtitlesEnabled(bEnable) end
---@param Volume float
function USBZGameUserSettings:SetSFXVolume(Volume) end
---@param AxisOrActionName FName
---@param Scale float
---@param Key FKey
function USBZGameUserSettings:SetSecondaryKeyboardBinding(AxisOrActionName, Scale, Key) end
---@param bEnable boolean
function USBZGameUserSettings:SetReticleEnabled(bEnable) end
---@param AxisOrActionName FName
---@param Scale float
---@param Key FKey
function USBZGameUserSettings:SetPrimaryKeyboardBinding(AxisOrActionName, Scale, Key) end
---@param PopupType ESBZTutorialType
---@param bIsShown boolean
function USBZGameUserSettings:SetPopupShown(PopupType, bIsShown) end
---@param bConfirmed boolean
function USBZGameUserSettings:SetPhotosensitivityConfirmed(bConfirmed) end
---@param bEnable boolean
function USBZGameUserSettings:SetOutlinesEnabled(bEnable) end
---@param Volume float
function USBZGameUserSettings:SetMusicVolume(Volume) end
---@param bEnable boolean
function USBZGameUserSettings:SetMouseSmoothingEnabled(bEnable) end
---@param Sensitivity float
function USBZGameUserSettings:SetMouseSensitivityMultiplier(Sensitivity) end
---@param Sensitivity float
function USBZGameUserSettings:SetMouseSensitivity(Sensitivity) end
---@param bEnable boolean
function USBZGameUserSettings:SetMotionBlurEnabled(bEnable) end
---@param Scale float
function USBZGameUserSettings:SetMinCrosshairsScale(Scale) end
---@param Scale float
function USBZGameUserSettings:SetMaxCrosshairsScale(Scale) end
---@param Volume float
function USBZGameUserSettings:SetMasterVolume(Volume) end
function USBZGameUserSettings:SetKeyboardToDefaults() end
---@param bEnable boolean
function USBZGameUserSettings:SetInvertedYAxisEnabled(bEnable) end
---@param bEnable boolean
function USBZGameUserSettings:SetHoldToTargetEnabled(bEnable) end
---@param bEnable boolean
function USBZGameUserSettings:SetHoldToRunEnabled(bEnable) end
---@param bEnable boolean
function USBZGameUserSettings:SetHoldToCrouchEnabled(bEnable) end
---@param bEnable boolean
function USBZGameUserSettings:SetHoldForTabMenuEnabled(bEnable) end
---@param HitIndicatorSettings FSBZHitIndicatorSettings
function USBZGameUserSettings:SethitIndicatorSettings(HitIndicatorSettings) end
---@param bEnable boolean
function USBZGameUserSettings:SetHitIndicatorsEnabled(bEnable) end
---@param Scale float
function USBZGameUserSettings:SetHitIndicatorScale(Scale) end
---@param Color FLinearColor
function USBZGameUserSettings:SetHitIndicatorColorKill(Color) end
---@param Color FLinearColor
function USBZGameUserSettings:SetHitIndicatorColorHit(Color) end
---@param Color FLinearColor
function USBZGameUserSettings:SetHitIndicatorColorCrit(Color) end
---@param Value float
function USBZGameUserSettings:SetGamma(Value) end
---@param bIsEnabled boolean
function USBZGameUserSettings:SetGameSenseEnabled(bIsEnabled) end
function USBZGameUserSettings:SetGameplayToDefaults() end
---@param InSensitivity float
function USBZGameUserSettings:SetGamepadVerticalSensitivityMultiplier(InSensitivity) end
function USBZGameUserSettings:SetGamepadToDefaults() end
---@param Sensitivity float
function USBZGameUserSettings:SetGamepadHorizontalSensitivityMultiplier(Sensitivity) end
---@param Preset int32
function USBZGameUserSettings:SetGamepadBindingsPreset(Preset) end
---@param bEnable boolean
function USBZGameUserSettings:SetFPSDisplayEnabled(bEnable) end
---@param bEnable boolean
function USBZGameUserSettings:SetForceFeedbackEnabled(bEnable) end
---@param bConfirmed boolean
function USBZGameUserSettings:SetFirstTimePopupsShown(bConfirmed) end
---@param Mode int32
function USBZGameUserSettings:SetDLSSSRMode(Mode) end
---@param bEnable boolean
function USBZGameUserSettings:SetDepthOfFieldEnabled(bEnable) end
function USBZGameUserSettings:SetCustomVideoToDefaults() end
---@param bPopupShown boolean
function USBZGameUserSettings:SetCrossplayPopupShown(bPopupShown) end
---@param bDisable boolean
function USBZGameUserSettings:SetCrossplayDisabled(bDisable) end
---@param CrosshairSettings FSBZCrosshairSettings
function USBZGameUserSettings:SetCrosshairSettings(CrosshairSettings) end
---@param Size float
function USBZGameUserSettings:SetCrosshairsDotSize(Size) end
---@param Color FLinearColor
function USBZGameUserSettings:SetCrosshairsDotColor(Color) end
---@param Width float
function USBZGameUserSettings:SetCrosshairsBarWidth(Width) end
---@param Length float
function USBZGameUserSettings:SetCrosshairsBarLength(Length) end
---@param Color FLinearColor
function USBZGameUserSettings:SetCrosshairsBarColor(Color) end
---@param Value float
function USBZGameUserSettings:SetContrast(Value) end
---@param Value float
function USBZGameUserSettings:SetColorBlindStrength(Value) end
---@param Value EColorVisionDeficiency
function USBZGameUserSettings:SetColorBlindMode(Value) end
---@param Volume float
function USBZGameUserSettings:SetCinematicVolume(Volume) end
---@param bDisable boolean
function USBZGameUserSettings:SetChatDisabled(bDisable) end
---@param Quality int32
function USBZGameUserSettings:SetCapsuleShadowQuality(Quality) end
---@param Value int32
function USBZGameUserSettings:SetCameraVerticalFoV(Value) end
---@param Value float
function USBZGameUserSettings:SetBrightness(Value) end
function USBZGameUserSettings:SetAudioToDefaults() end
---@param Mode int32
function USBZGameUserSettings:SetAntiAliasingMode(Mode) end
---@return boolean
function USBZGameUserSettings:IsSwitchWeaponAutomaticallyEnabled() end
---@return boolean
function USBZGameUserSettings:IsReticleEnabled() end
---@param PopupType ESBZTutorialType
---@return boolean
function USBZGameUserSettings:IsPopupShown(PopupType) end
---@return boolean
function USBZGameUserSettings:IsMouseSmoothingEnabled() end
---@return boolean
function USBZGameUserSettings:IsMotionBlurEnabled() end
---@return boolean
function USBZGameUserSettings:IsInvertedYAxisEnabled() end
---@return boolean
function USBZGameUserSettings:IsHoldToTargetEnabled() end
---@return boolean
function USBZGameUserSettings:IsHoldToRunEnabled() end
---@return boolean
function USBZGameUserSettings:IsHoldToCrouchEnabled() end
---@return boolean
function USBZGameUserSettings:IsHoldForTabMenuEnabled() end
---@return boolean
function USBZGameUserSettings:IsFPSDisplayEnabled() end
---@return boolean
function USBZGameUserSettings:IsForceFeedbackEnabled() end
---@return boolean
function USBZGameUserSettings:IsDepthOfFieldEnabled() end
---@return boolean
function USBZGameUserSettings:IsCrossplayDisabled() end
---@return boolean
function USBZGameUserSettings:IsChatDisabled() end
---@return float
function USBZGameUserSettings:GetVOVolume() end
---@return float
function USBZGameUserSettings:GetVoIPVolume() end
---@return int32
function USBZGameUserSettings:GetUpscalingMode() end
---@return boolean
function USBZGameUserSettings:GetTutorialPopupShown() end
---@return float
function USBZGameUserSettings:GetTargetingSensitivityMultiplier() end
---@return int32
function USBZGameUserSettings:GetSubtitlesSize() end
---@return float
function USBZGameUserSettings:GetSFXVolume() end
---@param AxisOrActionName FName
---@param Scale float
---@return FKey
function USBZGameUserSettings:GetSecondaryKeyboardBinding(AxisOrActionName, Scale) end
---@param AxisOrActionName FName
---@param Scale float
---@return FKey
function USBZGameUserSettings:GetPrimaryKeyboardBinding(AxisOrActionName, Scale) end
---@return boolean
function USBZGameUserSettings:GetPhotosensitivityConfirmed() end
---@return float
function USBZGameUserSettings:GetMusicVolume() end
---@return float
function USBZGameUserSettings:GetMouseSensitivityMultiplier() end
---@return float
function USBZGameUserSettings:GetMouseSensitivity() end
---@return float
function USBZGameUserSettings:GetMinCrosshairsScale() end
---@return float
function USBZGameUserSettings:GetMaxCrosshairsScale() end
---@return float
function USBZGameUserSettings:GetMasterVolume() end
---@return FSBZHitIndicatorSettings
function USBZGameUserSettings:GetHitIndicatorSettings() end
---@return float
function USBZGameUserSettings:GetHitIndicatorScale() end
---@return FLinearColor
function USBZGameUserSettings:GetHitIndicatorColorKill() end
---@return FLinearColor
function USBZGameUserSettings:GetHitIndicatorColorHit() end
---@return FLinearColor
function USBZGameUserSettings:GetHitIndicatorColorCrit() end
---@return float
function USBZGameUserSettings:GetGamma() end
---@return float
function USBZGameUserSettings:GetGamepadVerticalSensitivityMultiplier() end
---@return float
function USBZGameUserSettings:GetGamepadHorizontalSensitivityMultiplier() end
---@return int32
function USBZGameUserSettings:GetGamepadBindingsPreset() end
---@return boolean
function USBZGameUserSettings:GetFirstTimePopupsShown() end
---@return int32
function USBZGameUserSettings:GetDLSSSRMode() end
---@return boolean
function USBZGameUserSettings:GetCrossplayPopupShown() end
---@return FSBZCrosshairSettings
function USBZGameUserSettings:GetCrosshairSettings() end
---@return float
function USBZGameUserSettings:GetCrosshairsDotSize() end
---@return FLinearColor
function USBZGameUserSettings:GetCrosshairsDotColor() end
---@return float
function USBZGameUserSettings:GetCrosshairsBarWidth() end
---@return float
function USBZGameUserSettings:GetCrosshairsBarLength() end
---@return FLinearColor
function USBZGameUserSettings:GetCrosshairsBarColor() end
---@return float
function USBZGameUserSettings:GetContrast() end
---@return float
function USBZGameUserSettings:GetColorBlindStrength() end
---@return EColorVisionDeficiency
function USBZGameUserSettings:GetColorBlindMode() end
---@return float
function USBZGameUserSettings:GetCinematicVolume() end
---@return int32
function USBZGameUserSettings:GetCapsuleShadowQuality() end
---@return int32
function USBZGameUserSettings:GetCameraVerticalFoV() end
---@param bUseLastConfirmedResolution boolean
---@return int32
function USBZGameUserSettings:GetCameraHorizontalFoV(bUseLastConfirmedResolution) end
---@return float
function USBZGameUserSettings:GetBrightness() end
---@return int32
function USBZGameUserSettings:GetAntiAliasingMode() end
---@return USBZGameUserSettings
function USBZGameUserSettings:Get() end
function USBZGameUserSettings:AutoSetQuality() end
---@return boolean
function USBZGameUserSettings:AreSubtitlesEnabled() end
---@return boolean
function USBZGameUserSettings:AreOutlinesEnabled() end
---@return boolean
function USBZGameUserSettings:AreHitIndicatorsEnabled() end


---@class USBZGameViewportClient : UGameViewportClient
USBZGameViewportClient = {}


---@class USBZGamepadBindingsManager : UObject
---@field GamepadBindingsPresetsConfig USBZGamepadBindingsPresetsConfig
USBZGamepadBindingsManager = {}

---@param WorldContextObject UObject
---@return USBZGamepadBindingsManager
function USBZGamepadBindingsManager:GetGamepadBindingsManager(WorldContextObject) end
---@param InKey FKey
---@return TArray<FText>
function USBZGamepadBindingsManager:GetBindingNamesLocalized(InKey) end


---@class USBZGamepadBindingsPresetsConfig : UObject
---@field GamepadBindingsPresets TArray<FSBZGamepadBindingsPreset>
USBZGamepadBindingsPresetsConfig = {}



---@class USBZGameplayAbility : UGameplayAbility
---@field CancelAbilitiesOnActivationAttemptTag FGameplayTagContainer
---@field bCancelAbilitiesOnFailedActivation boolean
---@field CancelOnOwnerTagGranted FGameplayTagContainer
---@field CancelOnInputPressed FGameplayTagContainer
---@field CancelOnInputPressedActivates FGameplayTagContainer
---@field PostCancelOnInputPressed FGameplayTagContainer
---@field QueuedOwnerTags FGameplayTagContainer
---@field bIsInputToggledOnActivationOnly boolean
---@field bIsCancelOnInputReleased boolean
---@field QueuePriority int8
---@field InputPriority int8
---@field Input ESBZAbilityInput
---@field CooldownTimeTags FGameplayTagContainer
---@field TagCooldownSeconds float
USBZGameplayAbility = {}



---@class USBZGameplayAbilityQuery : UDataAsset
---@field TagContainersQuery TArray<FSBZGameplayTagContainerComparison>
USBZGameplayAbilityQuery = {}



---@class USBZGameplayAbilityQueryLibrary : UBlueprintFunctionLibrary
USBZGameplayAbilityQueryLibrary = {}

---@param AbilitySystem UAbilitySystemComponent
---@param Comparison FSBZGameplayTagContainerComparison
---@return boolean
function USBZGameplayAbilityQueryLibrary:QueryGameplayTagContainerFromAbilitySystemComponent(AbilitySystem, Comparison) end
---@param AbilitySystem UAbilitySystemComponent
---@param AbilityQuery USBZGameplayAbilityQuery
---@param FailedReason FText
---@param FailedIcon UTexture2D
---@return boolean
function USBZGameplayAbilityQueryLibrary:QueryGameplayAbilitySystemComponent(AbilitySystem, AbilityQuery, FailedReason, FailedIcon) end
---@param Actor AActor
---@param AbilityQuery USBZGameplayAbilityQuery
---@param FailedReason FText
---@param FailedIcon UTexture2D
---@return boolean
function USBZGameplayAbilityQueryLibrary:QueryGameplayAbilityFromActor(Actor, AbilityQuery, FailedReason, FailedIcon) end


---@class USBZGameplayAbility_CharacterCrouch : USBZGameplayAbility
---@field UncrouchNotification FSBZHUDNotificationData
USBZGameplayAbility_CharacterCrouch = {}



---@class USBZGameplayAbility_CharacterJump : USBZGameplayAbility
USBZGameplayAbility_CharacterJump = {}


---@class USBZGameplayAbility_CharacterRun : USBZGameplayAbility
USBZGameplayAbility_CharacterRun = {}


---@class USBZGameplayAbility_CharacterSlide : USBZGameplayAbility
---@field MovementComponent USBZCharacterMovementComponent
USBZGameplayAbility_CharacterSlide = {}



---@class USBZGameplayAbility_CharacterTarget : USBZGameplayAbility
USBZGameplayAbility_CharacterTarget = {}


---@class USBZGameplayAbility_CharacterTraverse : USBZGameplayAbility
---@field bComputeTrajectoryOnActivationAttempt boolean
---@field MovementComponent USBZCharacterMovementComponent
USBZGameplayAbility_CharacterTraverse = {}



---@class USBZGameplayAbility_Equip : USBZGameplayAbility
---@field PlayingMontage UAnimMontage
USBZGameplayAbility_Equip = {}



---@class USBZGameplayAbility_Interact : USBZGameplayAbility
---@field Interactor USBZPlayerInteractorComponent
USBZGameplayAbility_Interact = {}



---@class USBZGameplayAbility_Shout : USBZGameplayAbility
USBZGameplayAbility_Shout = {}


---@class USBZGameplayManager : UObject
---@field GameplaySystems TArray<UObject>
USBZGameplayManager = {}

function USBZGameplayManager:OnRestartLevelStarted() end
---@param World UWorld
function USBZGameplayManager:OnPlayableLevelInitialized(World) end
---@param OutroVariation int32
function USBZGameplayManager:OnOutroSequenceStarted(OutroVariation) end
function USBZGameplayManager:OnIntroSequenceStarted() end
function USBZGameplayManager:OnBlackScreenStarted() end
function USBZGameplayManager:OnActionPhaseStarted() end
function USBZGameplayManager:OnActionPhaseExited() end
---@param WorldContextObject UObject
---@return USBZGameplayManager
function USBZGameplayManager:Get(WorldContextObject) end


---@class USBZGameplayTags : UObject
USBZGameplayTags = {}


---@class USBZGasDamageEffect : USBZVolumeDamageEffect
USBZGasDamageEffect = {}


---@class USBZGasDamageType : USBZDamageType
USBZGasDamageType = {}


---@class USBZGasGrenadeData : USBZFragGrenadeData
---@field AddedTagContainer FGameplayTagContainer
---@field DropDamageMap TMap<ESBZDifficulty, float>
---@field DropDamageModifierCurve UCurveFloat
USBZGasGrenadeData = {}



---@class USBZGasVolumeComponent : UActorComponent
---@field LineBatchComponent ULineBatchComponent
---@field bInitOnBeginPlay boolean
---@field Duration float
---@field TimeBeforeDieToStartKillingCells float
---@field CellSize uint16
---@field MaxTravelDistance uint16
---@field HorizontalSize uint16
---@field VerticalSize uint16
---@field MaxComputationPerSecond int32
---@field MaxCellDensity uint16
---@field MinCellDensityToHurt uint16
---@field MinCellDensityToGrow uint16
---@field DensityToAddPerSecond int32
---@field DensityToLoosePerSecond int32
---@field MaxCellIndexToBoost uint16
---@field StartupDensityBoostMultiplier uint16
---@field GrowMode ESBZGasCellGrowMode
---@field CollisionProfileName FName
---@field NiagaraParticleArrayName FName
---@field NiagaraBorderParticleArrayName FName
---@field NiagaraParticleCountName FName
---@field NiagaraBorderParticleCountName FName
---@field MaxParticleCount int32
---@field ParticleCountMultiplier float
---@field UpdateParticleLocationsInterval float
---@field MaxUpdateLocationPerFrame uint32
---@field OverdrawOptimisationPoolID uint8
---@field ReplicatedLocalLocations FSBZLocalGasLocations
---@field ReplicatedLocalBorderLocations FSBZLocalGasLocations
---@field CellHitData TArray<FSBZGasCellHitData>
USBZGasVolumeComponent = {}

---@param Start FVector
---@param End FVector
---@param bQuickOverlap boolean
---@param bUseLineTrace boolean
---@return boolean
function USBZGasVolumeComponent:IsSegmentOverlapping(Start, End, bQuickOverlap, bUseLineTrace) end
---@param Location FVector
---@return boolean
function USBZGasVolumeComponent:IsLocationOverlapping(Location) end
---@param Character ASBZCharacter
---@return boolean
function USBZGasVolumeComponent:IsCharacterOverlapping(Character) end
function USBZGasVolumeComponent:Init() end
---@param NiagaraComponent UNiagaraComponent
function USBZGasVolumeComponent:FeedNiagaraWithParticleLocations(NiagaraComponent) end


---@class USBZGateNavLinkAgilityComponent : USBZNavLinkAgilityComponent
USBZGateNavLinkAgilityComponent = {}


---@class USBZGateNavLinkComponent : UActorComponent
---@field NavigationLink FNavigationLink
---@field bIsBlocked boolean
---@field bIsUsing boolean
---@field AgilityComponent USBZNavLinkAgilityComponent
---@field AllowedBlockingCharacter ASBZCharacter
---@field AllowedBlockingController AController
---@field OriginalAreaClass TSubclassOf<UNavArea>
USBZGateNavLinkComponent = {}



---@class USBZGenericPool : UObject
---@field Pool TArray<UObject>
USBZGenericPool = {}



---@class USBZGetCurrencyRequestQueue : UObject
USBZGetCurrencyRequestQueue = {}


---@class USBZGlobalItemDatabase : UObject
---@field PrimaryWeapons TSoftObjectPtr<USBZWeaponDatabase>
---@field SecondaryWeapons TSoftObjectPtr<USBZWeaponDatabase>
---@field OverkillWeapons TSoftObjectPtr<USBZWeaponDatabase>
---@field Masks TSoftObjectPtr<USBZMaskDatabase>
---@field Gloves TSoftObjectPtr<USBZGloveDatabase>
---@field Suits TSoftObjectPtr<USBZSuitDatabase>
---@field SuitPresets TSoftObjectPtr<USBZSuitPresetDatabase>
---@field SuitBases TSoftObjectPtr<USBZSuitBaseDatabase>
---@field Watches TSoftObjectPtr<USBZWatchDatabase>
---@field Throwables TSoftObjectPtr<USBZThrowableDatabase>
---@field Tools TSoftObjectPtr<USBZToolDatabase>
---@field Placeables TSoftObjectPtr<USBZPlaceableDatabase>
---@field SkillLines TSoftObjectPtr<USBZSkillLineDatabase>
---@field PreplanningAssets TSoftObjectPtr<USBZPreplanningAssetDatabase>
---@field PrimaryWeaponSlots TSoftObjectPtr<USBZInventorySlotDatabase>
---@field SecondaryWeaponSlots TSoftObjectPtr<USBZInventorySlotDatabase>
---@field Armors TSoftObjectPtr<USBZArmorDatabase>
---@field PrimaryWeaponPresetConfigs TSoftObjectPtr<USBZWeaponPresetConfigDatabase>
---@field SecondaryWeaponPresetConfigs TSoftObjectPtr<USBZWeaponPresetConfigDatabase>
---@field LoadoutSlots TSoftObjectPtr<USBZLoadoutSlotDatabase>
---@field Vendors TSoftObjectPtr<USBZVendorDatabase>
---@field PlayerCharacters TSoftObjectPtr<USBZPlayerCharacterDatabase>
---@field MaskInventorySlots TSoftObjectPtr<USBZMaskInventorySlotDatabase>
---@field SuitInventorySlots TSoftObjectPtr<USBZSuitInventorySlotDatabase>
---@field GloveInventorySlots TSoftObjectPtr<USBZGloveInventorySlotDatabase>
---@field SprayCans TSoftObjectPtr<USBZSprayCanDatabase>
---@field WeaponCharms TSoftObjectPtr<USBZWeaponCharmDatabase>
---@field WeaponPatterns TSoftObjectPtr<USBZWeaponPatternDatabase>
---@field WeaponStickers TSoftObjectPtr<USBZWeaponStickerDatabase>
---@field WeaponWearAndTears TSoftObjectPtr<USBZWeaponWearAndTearDatabase>
---@field MaskMoulds TSoftObjectPtr<USBZMaskMouldDatabase>
---@field MaskPresets TSoftObjectPtr<USBZMaskPresetDatabase>
---@field MaskPreconfigs TSoftObjectPtr<USBZMaskPreconfigDatabase>
---@field MaskPatterns TSoftObjectPtr<USBZMaskPatternDatabase>
---@field MaskVFXs TSoftObjectPtr<USBZMaskVFXDatabase>
---@field SuitMaterials TSoftObjectPtr<USBZSuitMaterialDatabase>
---@field SuitPatterns TSoftObjectPtr<USBZSuitPatternDatabase>
---@field Coins TSoftObjectPtr<USBZCoinDatabase>
---@field ItemBundles TSoftObjectPtr<USBZItemBundleDatabase>
---@field PayDayCredits TSoftObjectPtr<USBZPayDayCreditDatabase>
USBZGlobalItemDatabase = {}



---@class USBZGlobalLobby : UObject
USBZGlobalLobby = {}


---@class USBZGlobalModifiers : UObject
---@field ModifierValues TMap<FGameplayTag, float>
USBZGlobalModifiers = {}



---@class USBZGloveData : USBZInventoryBaseData
---@field SkeletalMesh1P TSoftObjectPtr<USkeletalMesh>
---@field SkeletalMesh3P TSoftObjectPtr<USkeletalMesh>
---@field OverrideMaterial TSoftObjectPtr<UMaterialInstance>
USBZGloveData = {}



---@class USBZGloveDatabase : USBZItemDatabase
---@field Gloves TArray<USBZGloveData>
USBZGloveDatabase = {}



---@class USBZGloveInventorySlotData : USBZInventorySlotData
---@field GloveBaseSlot USBZModularPartSlotBase
USBZGloveInventorySlotData = {}



---@class USBZGloveInventorySlotDatabase : USBZItemDatabase
---@field InventorySlotArray TArray<USBZGloveInventorySlotData>
USBZGloveInventorySlotDatabase = {}



---@class USBZGrantKeycardEffect : UGameplayEffect
USBZGrantKeycardEffect = {}


---@class USBZGrenadeDamageType : USBZExplosionDamageType
USBZGrenadeDamageType = {}


---@class USBZGrenadeData : USBZThrowableData
---@field Range float
---@field AdditionalPlayerRange float
---@field Delay float
---@field DetonationEvent UAkAudioEvent
---@field DropDetonationEvent UAkAudioEvent
---@field ArmEvent UAkAudioEvent
---@field bArmOnThrow boolean
---@field DetonationEffect UNiagaraSystem
---@field DropDetonationEffect UNiagaraSystem
---@field LocalplayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field PlayerFeedbackCurve FRuntimeFloatCurve
---@field TacticianDiscombobulateEffectClass TSubclassOf<UGameplayEffect>
---@field TacticianDiscombobulateEffectValueMap TMap<FName, float>
USBZGrenadeData = {}



---@class USBZGrenadeDetectionSettings : UDataAsset
---@field MinDelayBeforeExplode float
---@field DetectionRange float
---@field GrenadeTypeFlags int32
USBZGrenadeDetectionSettings = {}



---@class USBZGrenadeProjectileExecutionCalculation : UGameplayEffectExecutionCalculation
USBZGrenadeProjectileExecutionCalculation = {}


---@class USBZHUDChatWidget : USBZHUDWidgetBase
---@field ChatStackValue FName
---@field OpenChatActionName FName
---@field Text_InputText UEditableTextBox
---@field bIsChatInputActive boolean
---@field bIsChatDisabled boolean
USBZHUDChatWidget = {}

---@param ChatEventData FSBZVotingChatEvent
function USBZHUDChatWidget:VotingMessageReceived(ChatEventData) end
---@param ChatEventData FSBZSystemChatEvent
function USBZHUDChatWidget:SystemMessageReceived(ChatEventData) end
---@param bSetActive boolean
function USBZHUDChatWidget:SetChatActive(bSetActive) end
---@param ChatEventData FSBZPlayerChatEvent
function USBZHUDChatWidget:PlayerMessageReceived(ChatEventData) end
---@param PingEventData FSBZPlayerPingEvent
function USBZHUDChatWidget:PingReceived(PingEventData) end
---@param Text FText
---@param CommitMethod ETextCommit::Type
function USBZHUDChatWidget:OnTextCommited(Text, CommitMethod) end
---@param InData FSBZPlayerDefeatStateChangedData
function USBZHUDChatWidget:OnPlayerDefeatStateChanged(InData) end
---@param ChatEventData FSBZPlayerChatEvent
function USBZHUDChatWidget:OnMessageReceived(ChatEventData) end
---@param bHasFocus boolean
function USBZHUDChatWidget:OnChatFocusChanged(bHasFocus) end
---@param bIsDisabled boolean
function USBZHUDChatWidget:OnChatDisabledChanged(bIsDisabled) end
---@param InData FSBZAICrewDefeatStateChangedData
function USBZHUDChatWidget:OnAICrewDefeatStateChanged(InData) end
---@param KeyItemCountChangedEventData FSBZKeyItemCountChangedEvent
function USBZHUDChatWidget:KeyItemCountChanged(KeyItemCountChangedEventData) end
---@param ChatEventData FSBZAICrewChatEvent
function USBZHUDChatWidget:CrewAIMessageReceived(ChatEventData) end
---@param CallEventData FSBZPlayerCallEvent
function USBZHUDChatWidget:CallReceived(CallEventData) end


---@class USBZHUDDamageTakenIndicatorContainerWidget : USBZWidgetBase
---@field DamageTakenWidgetClass TSubclassOf<USBZHUDDamageTakenIndicatorWidget>
---@field NumberOfDamageIndicators int32
---@field HealthDamageColorName FName
---@field ArmorDamageColorName FName
---@field Panel_HUDDamageTakenContainer UPanelWidget
---@field DamageIndicators TArray<USBZHUDDamageTakenIndicatorWidget>
USBZHUDDamageTakenIndicatorContainerWidget = {}

---@param DamageEventData FSBZDamageEvent
function USBZHUDDamageTakenIndicatorContainerWidget:OnTakenDamageEvent(DamageEventData) end


---@class USBZHUDDamageTakenIndicatorWidget : USBZWidgetBase
---@field LatestDamageSource AActor
---@field Image_DamageTakenIndicator UImage
USBZHUDDamageTakenIndicatorWidget = {}



---@class USBZHUDHitIndicatorWidget : USBZWidgetBase
---@field Image_HitIndicator UImage
---@field EnemyHitAudioEvent UAkAudioEvent
---@field CriticalHitAudioEvent UAkAudioEvent
---@field EnemyKilledAudioEvent UAkAudioEvent
---@field EnemyCriticalKilledAudioEvent UAkAudioEvent
---@field NoDamageAudioEvent UAkAudioEvent
---@field ArmorHitAudioEvent UAkAudioEvent
---@field ArmorPenetrationAudioEvent UAkAudioEvent
---@field ArmorBreakAudioEvent UAkAudioEvent
---@field HitIndicatorSettings FSBZHitIndicatorSettings
USBZHUDHitIndicatorWidget = {}

---@param DamageEventData FSBZDamageEvent
function USBZHUDHitIndicatorWidget:PostOnTakenDamageEvent(DamageEventData) end


---@class USBZHUDOverlayRight : USBZWidgetBase
---@field Text_PrePlanningAssets UTextBlock
USBZHUDOverlayRight = {}

function USBZHUDOverlayRight:MakePrePlanningText() end


---@class USBZHUDPlayingWidget : USBZWidgetBase
---@field Widget_LocalPlayerStatus UPD3HUDPlayerStatusWidget
USBZHUDPlayingWidget = {}



---@class USBZHUDWidgetBase : USBZWidgetBase
---@field RequiredDisplayTags FGameplayTagContainer
---@field bHasRequiredTags boolean
USBZHUDWidgetBase = {}

---@param bInHasRequiredTags boolean
function USBZHUDWidgetBase:OnWidgetRequiresUITagsChanged(bInHasRequiredTags) end
---@param UITagContainer FGameplayTagContainer
function USBZHUDWidgetBase:OnUITagsChanged(UITagContainer) end
---@return boolean
function USBZHUDWidgetBase:HasRequiredTags() end


---@class USBZHackableInteractableComponent : USBZInteractableComponent
USBZHackableInteractableComponent = {}


---@class USBZHackerAcedAbility : USBZHackerBaseAbility
USBZHackerAcedAbility = {}


---@class USBZHackerBaseAbility : USBZGameplayAbility
USBZHackerBaseAbility = {}


---@class USBZHackerRoutedPingAbility : USBZHackerBaseAbility
USBZHackerRoutedPingAbility = {}


---@class USBZHackerSecuredLoopAbility : USBZHackerBaseAbility
USBZHackerSecuredLoopAbility = {}


---@class USBZHackingComponent : UActorComponent
---@field HackingState ESBZHackingState
USBZHackingComponent = {}

---@param NewHackingState ESBZHackingState
function USBZHackingComponent:SetHackingState(NewHackingState) end
function USBZHackingComponent:OnRep_HackingState() end
---@param NewHackingState ESBZHackingState
function USBZHackingComponent:Multicast_SetHackingState(NewHackingState) end
---@return ESBZHackingState
function USBZHackingComponent:GetHackingState() end


---@class USBZHackingToolStartSynchingNotify : UAnimNotify
USBZHackingToolStartSynchingNotify = {}


---@class USBZHandCuffAnimationCollection : USBZEquippableAnimationCollection
USBZHandCuffAnimationCollection = {}


---@class USBZHandleEquipmentAbility : USBZGameplayAbility
USBZHandleEquipmentAbility = {}


---@class USBZHeadbobCameraModifier : USBZPlayerCameraModifier
---@field DefaultHeadbobData USBZHeadbobData
---@field CurrentData USBZHeadbobData
---@field CurrentTargetingData USBZTargetingHeadbobData
USBZHeadbobCameraModifier = {}

---@param Character ASBZCharacter
function USBZHeadbobCameraModifier:HandleEquippableArrayChanged(Character) end
---@param Character ASBZCharacter
---@param CurrentEquippableIndex int32
---@param bIsOnlyDataChanged boolean
function USBZHeadbobCameraModifier:HandleCurrentEquippableIndexChanged(Character, CurrentEquippableIndex, bIsOnlyDataChanged) end


---@class USBZHeadbobData : UDataAsset
---@field SpeedToAmplitude FRuntimeFloatCurve
---@field SpeedToFrequency FRuntimeFloatCurve
---@field LocomotionCurve UCurveVector
---@field RollCurve FRuntimeFloatCurve
---@field SpeedToRollFrequency FRuntimeFloatCurve
---@field RollAmplitudeModifier float
---@field BreathingCurve UCurveVector
---@field BreathingFrequency float
---@field NormalBreathingAmplitude float
---@field CrouchBreathingAmplitude float
---@field TargetingBreathingAmplitude float
---@field BreathingAmplitudeModifier float
---@field LocomotionFPRigModifier float
---@field BreathingFPRigModifier float
---@field TargetingData USBZTargetingHeadbobData
USBZHeadbobData = {}



---@class USBZHeightTransitionCameraModifier : USBZPlayerCameraModifier
---@field Settings FSBZHeightTransitionCameraSettings
---@field DefaultAlphaBlend FAlphaBlend
---@field AlphaBlend FAlphaBlend
---@field FallingTransitionSpeedModifier float
USBZHeightTransitionCameraModifier = {}



---@class USBZHeistDeveloperSettings : UDeveloperSettings
---@field HeistLevelPairArray TArray<FSBZHeistDataLevelPair>
USBZHeistDeveloperSettings = {}

---@param ShortName FString
---@return UPD3HeistDataAsset
function USBZHeistDeveloperSettings:GetHeistDataFromLevelShortName(ShortName) end
---@param LevelPath FSoftObjectPath
---@return UPD3HeistDataAsset
function USBZHeistDeveloperSettings:GetHeistDataFromLevelPath(LevelPath) end
---@return TArray<FSBZHeistDataLevelPair>
function USBZHeistDeveloperSettings:GetAllHeistData() end


---@class USBZHelmetPopper : UActorComponent
---@field HelmetSelector FSBZComponentSelector
---@field MinStartVelocity FVector
---@field MaxStartVelocity FVector
---@field HitDirectionSpeed FFloatInterval
---@field MoveOffset FVector
---@field TorqueStrength FFloatInterval
---@field PopEffect UNiagaraSystem
---@field MaxAttackDirDotVFX float
---@field EffectOffset FVector
---@field MaxAttackDirDotDMG float
---@field CPDIndex uint8
---@field CPDValue ESBZVariationValue
---@field HideInfo TArray<FSBZHelmetHideInfo>
USBZHelmetPopper = {}



---@class USBZHideMagazineNotifyState : UAnimNotifyState
USBZHideMagazineNotifyState = {}


---@class USBZHideWeaponNotifyState : UAnimNotifyState
USBZHideWeaponNotifyState = {}


---@class USBZHoverState : UObject
---@field StateMachine USBZAerialVehicleStateMachine
USBZHoverState = {}



---@class USBZHumanShieldData : UDataAsset
---@field Directions TArray<FSBZHumanShieldDirection>
---@field TimeBufferArray float
---@field AllowAnyDirectionTags FGameplayTagContainer
USBZHumanShieldData = {}



---@class USBZHumanShieldEnterTypeNotify : UAnimNotify
---@field HumanShieldEnterType ESBZHumanShieldEnterType
USBZHumanShieldEnterTypeNotify = {}



---@class USBZHumanShieldGrabStartNotify : UAnimNotify
USBZHumanShieldGrabStartNotify = {}


---@class USBZHurtReaction : UPrimaryDataAsset
---@field Flinch FSBZHurtReactionPose
---@field Interrupt FSBZHurtReactionPose
---@field Stun FSBZHurtReactionPose
---@field Incapacitate FSBZHurtReactionPose
---@field GameplayTagMap TMap<FGameplayTag, FSBZHurtReactionArray>
---@field LookupArray TArray<FSBZHurtReactionLookup>
USBZHurtReaction = {}



---@class USBZImpactConfig : UObject
---@field Default FSBZStandardImpactData
---@field bIsTranslucentMaterial boolean
---@field TranslucentSortPriority int32
USBZImpactConfig = {}



---@class USBZImpactManager : UObject
---@field ProjectileDecals TArray<UDecalComponent>
---@field ProjectileInstancedDecals TMap<UMaterialInterface, UDecalComponent>
---@field ThrowableProjectileDecals TArray<UDecalComponent>
---@field ThrowableProjectileInstancedDecals TMap<UMaterialInterface, UDecalComponent>
---@field MeleeDecals TArray<UDecalComponent>
---@field ExplosionDecals TArray<UDecalComponent>
---@field FootstepDecals TArray<UDecalComponent>
---@field SlidingDecals TArray<UDecalComponent>
---@field MantlingDecals TArray<UDecalComponent>
---@field StepUpDecals TArray<UDecalComponent>
---@field ObjectImpactDecals TArray<UDecalComponent>
---@field DebrisImpactDecals TArray<UDecalComponent>
---@field BagItemImpactDecals TArray<UDecalComponent>
---@field ThrowableDecals TArray<UDecalComponent>
---@field BloodSplatterDecals TArray<UDecalComponent>
---@field LastSlidingEmitter UAkComponent
---@field TranslucentPrimitiveComponenets TArray<FSBZTranslucentTimer>
USBZImpactManager = {}

---@param DroppedElement UObject
function USBZImpactManager:HandleDroppedDecalComponent(DroppedElement) end


---@class USBZInfamyManager : USBZPlayerStatisticsManager
---@field OnInfamyXPChangedDelegate FSBZInfamyManagerOnInfamyXPChangedDelegate
USBZInfamyManager = {}

---@param StateName FName
function USBZInfamyManager:HandleOnStateMachineStateEntered(StateName) end
---@return int32
function USBZInfamyManager:GetMaxLevel() end
---@param InExperience int32
---@return int32
function USBZInfamyManager:GetLevelForExperience(InExperience) end
---@param WorldContextObject UObject
---@return USBZInfamyManager
function USBZInfamyManager:GetInfamyManager(WorldContextObject) end
---@param InLevel int32
---@return int32
function USBZInfamyManager:GetExperienceForLevel(InLevel) end
---@return int32
function USBZInfamyManager:ClientGetPreviousExperience() end
---@return int32
function USBZInfamyManager:ClientGetPreMatchExperience() end
---@return int32
function USBZInfamyManager:ClientGetCurrentLevel() end
---@return int32
function USBZInfamyManager:ClientGetCurrentExperience() end


---@class USBZInfamyWidget : USBZWidgetBase
---@field InfamyLevel int32
---@field InfamyExperience int32
---@field ExperienceForCurrentLevel int32
---@field ExperienceForNextLevel int32
---@field CurrentLevelProgress float
---@field bIsMaxLevel boolean
USBZInfamyWidget = {}

---@param InfamyManager USBZInfamyManager
function USBZInfamyWidget:RefreshCurrentInfamyData(InfamyManager) end
function USBZInfamyWidget:OnInfamyValuesRefreshed() end
---@param InfamyManager USBZInfamyManager
---@param InLevelValue int32
---@param InExpirienceValue int32
function USBZInfamyWidget:OnInfamyAdded(InfamyManager, InLevelValue, InExpirienceValue) end


---@class USBZInputKeySelector : USBZWidgetBase
---@field SelectedKey FInputChord
---@field Button_Background UButton
---@field Widget_InputKey USBZInputKeyWidget
---@field OnKeySelected FSBZInputKeySelectorOnKeySelected
---@field OnIsSelectingKeyChanged FSBZInputKeySelectorOnIsSelectingKeyChanged
USBZInputKeySelector = {}

---@param InSelectedKey FInputChord
function USBZInputKeySelector:SetSelectedKey(InSelectedKey) end
---@param MyGeometry FGeometry
---@param MouseEvent FPointerEvent
---@return FEventReply
function USBZInputKeySelector:OnPreviewMouseButtonDown_Internal(MyGeometry, MouseEvent) end
---@param MyGeometry FGeometry
---@param InKeyEvent FKeyEvent
---@return FEventReply
function USBZInputKeySelector:OnPreviewKeyDown_Internal(MyGeometry, InKeyEvent) end
---@param MyGeometry FGeometry
---@param MouseEvent FPointerEvent
---@return FEventReply
function USBZInputKeySelector:OnMouseWheel_Internal(MyGeometry, MouseEvent) end
---@param MyGeometry FGeometry
---@param MouseEvent FPointerEvent
---@return FEventReply
function USBZInputKeySelector:OnMouseButtonDown_Internal(MyGeometry, MouseEvent) end
---@param MyGeometry FGeometry
---@param InKeyEvent FKeyEvent
---@return FEventReply
function USBZInputKeySelector:OnKeyUp_Internal(MyGeometry, InKeyEvent) end
---@param SelectedKey FInputChord
function USBZInputKeySelector:OnKeySelected__DelegateSignature(SelectedKey) end
---@param MyGeometry FGeometry
---@param InKeyEvent FKeyEvent
---@return FEventReply
function USBZInputKeySelector:OnKeyDown_Internal(MyGeometry, InKeyEvent) end
function USBZInputKeySelector:OnIsSelectingKeyChanged__DelegateSignature() end
---@param InFocusEvent FFocusEvent
function USBZInputKeySelector:OnFocusLost_Internal(InFocusEvent) end
function USBZInputKeySelector:OnClicked_Internal() end


---@class USBZInputKeyWidget : USBZWidgetBase
---@field Key FKey
---@field bInverted boolean
USBZInputKeyWidget = {}

---@param InKey FKey
function USBZInputKeyWidget:SetKey(InKey) end
---@param bInInverted boolean
function USBZInputKeyWidget:SetInverted(bInInverted) end
---@param NewActionKeyName FString
function USBZInputKeyWidget:OnKeyNameChanged(NewActionKeyName) end
---@param NewActionKeyIcon UPaperSprite
function USBZInputKeyWidget:OnKeyIconChanged(NewActionKeyIcon) end


---@class USBZInstantLootManager : UObject
USBZInstantLootManager = {}

---@param WorldContextObject UObject
---@return USBZInstantLootManager
function USBZInstantLootManager:GetInstantLootManager(WorldContextObject) end


---@class USBZInteractAICharacterRequirement : USBZBaseInteractRequirement
---@field BlockHumanShieldTagContainer FGameplayTagContainer
USBZInteractAICharacterRequirement = {}



---@class USBZInteractAmmoBagRequirement : USBZBaseInteractRequirement
USBZInteractAmmoBagRequirement = {}


---@class USBZInteractArmorBagRequirement : USBZBaseInteractRequirement
USBZInteractArmorBagRequirement = {}


---@class USBZInteractCuttableActorRequirement : USBZBaseInteractRequirement
USBZInteractCuttableActorRequirement = {}


---@class USBZInteractDisplayCaseRequirement : USBZBaseInteractRequirement
USBZInteractDisplayCaseRequirement = {}


---@class USBZInteractDoorRequirement : USBZBaseInteractRequirement
USBZInteractDoorRequirement = {}


---@class USBZInteractDroppedWeaponRequirement : USBZBaseInteractRequirement
USBZInteractDroppedWeaponRequirement = {}


---@class USBZInteractHealthPlaceableRequirement : USBZBaseInteractRequirement
USBZInteractHealthPlaceableRequirement = {}


---@class USBZInteractLootProcessorRequirement : USBZBaseInteractRequirement
USBZInteractLootProcessorRequirement = {}


---@class USBZInteractLureRequirement : USBZBaseInteractRequirement
USBZInteractLureRequirement = {}


---@class USBZInteractPickupBagRequirement : USBZBaseInteractRequirement
USBZInteractPickupBagRequirement = {}


---@class USBZInteractPlaceableSentryRequirement : USBZBaseInteractRequirement
USBZInteractPlaceableSentryRequirement = {}


---@class USBZInteractPlayerRequirement : USBZBaseInteractRequirement
USBZInteractPlayerRequirement = {}


---@class USBZInteractSecurityCameraRequirement : USBZBaseInteractRequirement
USBZInteractSecurityCameraRequirement = {}


---@class USBZInteractSentryGunRequirement : USBZBaseInteractRequirement
USBZInteractSentryGunRequirement = {}


---@class USBZInteractWeaponBagRequirement : USBZBaseInteractRequirement
USBZInteractWeaponBagRequirement = {}


---@class USBZInteractWeaponBoxRequirement : USBZBaseInteractRequirement
USBZInteractWeaponBoxRequirement = {}


---@class USBZInteractWindowRequirement : USBZBaseInteractRequirement
USBZInteractWindowRequirement = {}


---@class USBZInteractableComponent : USBZBaseInteractableComponent
---@field OnStartInteraction FSBZInteractableComponentOnStartInteraction
---@field OnServerStartInteraction FSBZInteractableComponentOnServerStartInteraction
---@field OnEndInteraction FSBZInteractableComponentOnEndInteraction
---@field OnServerEndInteraction FSBZInteractableComponentOnServerEndInteraction
---@field OnPredictedEndInteraction FSBZInteractableComponentOnPredictedEndInteraction
---@field OnPredictedAbortInteraction FSBZInteractableComponentOnPredictedAbortInteraction
---@field OnAckCompleteInteraction FSBZInteractableComponentOnAckCompleteInteraction
---@field OnServerCompleteInteraction FSBZInteractableComponentOnServerCompleteInteraction
---@field OnAckRejectedPredictedInteraction FSBZInteractableComponentOnAckRejectedPredictedInteraction
---@field OnAckAbortInteraction FSBZInteractableComponentOnAckAbortInteraction
---@field OnServerAbortInteraction FSBZInteractableComponentOnServerAbortInteraction
---@field OnInteractionEnabledStateChange FSBZInteractableComponentOnInteractionEnabledStateChange
---@field OnStart2DAudioEvent UAkAudioEvent
---@field OnFinish2DAudioEvent UAkAudioEvent
---@field OnCancel2DAudioEvent UAkAudioEvent
---@field OnStart3DAudioEvent UAkAudioEvent
---@field OnFinish3DAudioEvent UAkAudioEvent
---@field OnCancel3DAudioEvent UAkAudioEvent
---@field LoopingAkComponent UAkComponent
---@field GameplayInteractionQuery USBZGameplayAbilityQuery
---@field SharedKeyItemQuery USBZGameplayAbilityQuery
---@field Interactors TArray<USBZInteractorComponent>
---@field PredictedInteractor USBZInteractorComponent
---@field PredictionTimeoutSeconds float
---@field bCurrentlyInteracting boolean
---@field bInteractionEnabled boolean
---@field bLocalEnabled boolean
---@field bPredictLocalEnd boolean
---@field bSyncInteracting boolean
---@field bSyncAbortEvent boolean
---@field bRepeatable boolean
---@field bClearInteractorsOnComplete boolean
---@field bIsAllowedInCasing boolean
---@field bIsIllegal boolean
---@field CompletedComment USBZVoiceCommentDataAsset
---@field SharedKeyItemTags FGameplayTagContainer
USBZInteractableComponent = {}

---@param AudioEvent UAkAudioEvent
function USBZInteractableComponent:Stop3DSound(AudioEvent) end
---@param bEnabled boolean
function USBZInteractableComponent:SetLocalEnabled(bEnabled) end
---@param bEnabled boolean
function USBZInteractableComponent:SetInteractionEnabled(bEnabled) end
function USBZInteractableComponent:SetDefaultsForTimed() end
function USBZInteractableComponent:SetDefaultsForInstant() end
---@param AudioEvent UAkAudioEvent
function USBZInteractableComponent:Play3DSound(AudioEvent) end
---@param SharedKeyItemTagChangedEventData FSBZSharedKeyItemTagChangedEvent
function USBZInteractableComponent:OnSharedKeyItemTagChanged(SharedKeyItemTagChangedEventData) end
---@param bOldInteractionEnabled boolean
function USBZInteractableComponent:OnRep_InteractionEnabled(bOldInteractionEnabled) end
---@param bEnabled boolean
function USBZInteractableComponent:Multicast_SetInteractionEnabled(bEnabled) end


---@class USBZInteractableDoorComponent : USBZInteractableComponent
USBZInteractableDoorComponent = {}


---@class USBZInteractableWindowComponent : USBZInteractableComponent
USBZInteractableWindowComponent = {}


---@class USBZInteractionWidget : USBZPlayerStatePawnWidgetBase
USBZInteractionWidget = {}

---@param Interactor USBZPlayerInteractorComponent
---@param bIsInteracting boolean
function USBZInteractionWidget:OnPlayerIsInteracting(Interactor, bIsInteracting) end
---@param Interactor USBZPlayerInteractorComponent
---@param NewInteractionCollection FSBZInteractDisplayDataCollection
function USBZInteractionWidget:OnNewInteractionCollection(Interactor, NewInteractionCollection) end
---@param bIsCasing boolean
function USBZInteractionWidget:OnCasingChanged(bIsCasing) end
---@param bIsSeenByAI boolean
function USBZInteractionWidget:OnAISeenPlayer(bIsSeenByAI) end


---@class USBZInteractorComponent : UActorComponent
---@field ReplicatedData FSBZReplicatedInteractionData
---@field CurrentInteraction USBZBaseInteractableComponent
---@field LastInteraction USBZBaseInteractableComponent
---@field ServerCompletingInteractable USBZBaseInteractableComponent
---@field InteractId int32
---@field ModeIndex int8
---@field ModeRaw uint8
---@field InteractionTraceResult FHitResult
---@field bIsInteractionSignalRequired boolean
---@field ScreenInteractDistance float
---@field MinScreenInteractDegrees float
---@field MinScreenInteractDot float
USBZInteractorComponent = {}

---@param Interaction USBZBaseInteractableComponent
function USBZInteractorComponent:Server_StopInteraction(Interaction) end
---@param Interaction USBZBaseInteractableComponent
---@param Id int32
---@param InModeIndex int8
function USBZInteractorComponent:Server_StartInteraction(Interaction, Id, InModeIndex) end
---@param Interaction USBZBaseInteractableComponent
---@param Id int32
function USBZInteractorComponent:Server_PredictionTimeout(Interaction, Id) end
---@param Interaction USBZBaseInteractableComponent
---@param Id int32
function USBZInteractorComponent:Server_CompleteInteraction(Interaction, Id) end
---@param OldReplicatedData FSBZReplicatedInteractionData
function USBZInteractorComponent:OnRep_ReplicatedData(OldReplicatedData) end
function USBZInteractorComponent:Multicast_StopSimulatedInteraction() end
---@param Interaction USBZBaseInteractableComponent
---@param InModeIndex int8
function USBZInteractorComponent:Multicast_StartSimulatedInteraction(Interaction, InModeIndex) end
---@param Interaction USBZBaseInteractableComponent
---@param bIsInstant boolean
function USBZInteractorComponent:Multicast_CompletedInteraction(Interaction, bIsInstant) end
---@param Interaction USBZBaseInteractableComponent
function USBZInteractorComponent:Multicast_AbortInteraction(Interaction) end
---@return USBZBaseInteractableComponent
function USBZInteractorComponent:GetCurrentInteraction() end
---@param Interaction USBZBaseInteractableComponent
---@param Id int32
function USBZInteractorComponent:Client_StopInteraction(Interaction, Id) end
---@param Interaction USBZBaseInteractableComponent
---@param Id int32
function USBZInteractorComponent:Client_Removed(Interaction, Id) end
---@return float
function USBZInteractorComponent:BP_GetProgress() end
---@return int32
function USBZInteractorComponent:BP_GetModeIndex() end


---@class USBZInternetStatusWidget : USBZWidgetBase
---@field NetworkErrorImage UImage
USBZInternetStatusWidget = {}

---@param ServiceStatus ESBZServiceStatus
function USBZInternetStatusWidget:SetNetworkLostConnectionVisibility(ServiceStatus) end


---@class USBZInventoryBaseData : UDataAsset
---@field AccelByteItemId FGuid
---@field AccelByteSkuNo FName
---@field AccelByteReferenceName FName
---@field StatisticKillString FString
---@field StatisticHeadshotKillString FString
---@field DisplayName FText
---@field DescriptionText FText
---@field TypeClassText FText
---@field ItemRarity ESBZItemRarity
---@field DisplayIcon TSoftObjectPtr<UPaperSprite>
---@field InGameDisplayIcon TSoftObjectPtr<UPaperSprite>
USBZInventoryBaseData = {}

---@param OutDisplayName FText
---@param OutHasText boolean
function USBZInventoryBaseData:GetDisplayName(OutDisplayName, OutHasText) end


---@class USBZInventoryManager : UObject
---@field PlayerInventory USBZPlayerInventory
---@field RewardRequestArray TArray<ASBZPlayerState>
---@field ServerPlayerOwnedItemAccelByteItemIdMap TMap<FUniqueNetIdRepl, FSBZItemEntitlementArray>
---@field InventoryItemMap TMap<FGuid, FSBZCosmeticsInventoryItem>
---@field OwningItemIdArray TArray<FGuid>
USBZInventoryManager = {}

---@param CosmeticsPartSlot USBZCosmeticsPartSlot
---@param CosmeticsInventoryItemArrayOut TArray<FSBZCosmeticsInventoryItem>
function USBZInventoryManager:GetCosmeticsInventoryItemsForType(CosmeticsPartSlot, CosmeticsInventoryItemArrayOut) end
---@param WorldContextObject UObject
---@return USBZInventoryManager
function USBZInventoryManager:BP_GetInventoryManager(WorldContextObject) end


---@class USBZInventorySlotData : USBZInventoryBaseData
USBZInventorySlotData = {}


---@class USBZInventorySlotDatabase : USBZItemDatabase
---@field InventorySlotArray TArray<USBZInventorySlotData>
USBZInventorySlotDatabase = {}



---@class USBZInvites : UObject
---@field EventRequestUserInvite FSBZInvitesEventRequestUserInvite
---@field EventUserSwitchDuringInvite FSBZInvitesEventUserSwitchDuringInvite
USBZInvites = {}

---@param StateName FName
function USBZInvites:HandleStateEnteredPlayTogether(StateName) end
---@param StateName FName
function USBZInvites:HandleStateEnteredInvite(StateName) end


---@class USBZItemBundleData : USBZInventoryBaseData
USBZItemBundleData = {}


---@class USBZItemBundleDatabase : USBZItemDatabase
---@field ItemBundleArray TArray<USBZItemBundleData>
USBZItemBundleDatabase = {}



---@class USBZItemDataContainer : UObject
---@field ItemCategory ESBZItemCategory
---@field InventoryBaseData USBZInventoryBaseData
USBZItemDataContainer = {}



---@class USBZItemDatabase : UDataAsset
USBZItemDatabase = {}


---@class USBZItemProgressionManager : UObject
---@field PlayerItemProgression USBZPlayerItemProgression
USBZItemProgressionManager = {}

---@param WorldContextObject UObject
---@return USBZItemProgressionManager
function USBZItemProgressionManager:GetItemProgressionManager(WorldContextObject) end


---@class USBZJobOverviewBaseWidget : USBZWidgetBase
---@field PlayerStatusWidgetClass TSubclassOf<USBZJobOverviewPlayerStatusWidget>
---@field Panel_PartyWidgetContainer UPanelWidget
USBZJobOverviewBaseWidget = {}

---@param PlayerReadyStatus TArray<FSBZPlayerReadyInfo>
function USBZJobOverviewBaseWidget:OnPlayerReadyStatusUpdated(PlayerReadyStatus) end
function USBZJobOverviewBaseWidget:IntroSequenceStarted() end
function USBZJobOverviewBaseWidget:HandleIntroSequenceStarted() end


---@class USBZJobOverviewPlayerStatusWidget : USBZWidgetBase
USBZJobOverviewPlayerStatusWidget = {}

---@param InPlayerReadyInfo FSBZPlayerReadyInfo
function USBZJobOverviewPlayerStatusWidget:SetPlayerInfo(InPlayerReadyInfo) end


---@class USBZKeyItemData : UDataAsset
---@field KeyItemName FText
---@field KeyItemIcon UPaperSprite
USBZKeyItemData = {}



---@class USBZKickingManager : UObject
---@field CurrentKickingInfo FSBZKickingInfo
---@field RecentlyAttemptedKicks TMap<FUniqueNetIdRepl, FDateTime>
---@field OnKickInfoChanged FSBZKickingManagerOnKickInfoChanged
---@field OnKickFailed FSBZKickingManagerOnKickFailed
---@field OnClientWasKicked FSBZKickingManagerOnClientWasKicked
---@field TimeToKick float
---@field TimeToBeKickedAgainOnFailedKick float
---@field bWasClientRecentlyKicked boolean
USBZKickingManager = {}

---@param WorldContextObject UObject
---@param PlayerIdToKick FUniqueNetIdRepl
---@param ModeKick ESBZKickingMode
function USBZKickingManager:KickPlayer(WorldContextObject, PlayerIdToKick, ModeKick) end


---@class USBZKillHumanShieldAbility : USBZGameplayAbility
---@field Controller AController
USBZKillHumanShieldAbility = {}



---@class USBZLandState : UObject
---@field StateMachine USBZAerialVehicleStateMachine
USBZLandState = {}



---@class USBZLandingAbility : USBZGameplayAbility
---@field OwnerCharacter ASBZPlayerCharacter
USBZLandingAbility = {}



---@class USBZLandingEffect : UGameplayEffect
USBZLandingEffect = {}


---@class USBZLaser : UStaticMeshComponent
USBZLaser = {}


---@class USBZLaserPoint : UStaticMeshComponent
USBZLaserPoint = {}


---@class USBZLaserSightComponent : USBZOnTelegraphAttackComponent
---@field LaserEffectComponent UNiagaraComponent
---@field FocusTime float
---@field MaxHorizontalOffset float
---@field MaxVerticalOffset float
---@field HorizontalFrequency float
---@field VerticalFrequency float
---@field PhaseShift float
USBZLaserSightComponent = {}

---@param InOutRotation FRotator
---@return FRotator
function USBZLaserSightComponent:ModifyWeaponRotation(InOutRotation) end


---@class USBZLayingOnBackNotifyState : UAnimNotifyState
USBZLayingOnBackNotifyState = {}


---@class USBZLayingOnFrontNotifyState : UAnimNotifyState
USBZLayingOnFrontNotifyState = {}


---@class USBZLeftHandEquippableAnimation : UAnimInstance
---@field Idle UAnimSequenceBase
---@field UsingIdle UAnimSequenceBase
---@field IdleTime float
---@field Character ASBZCharacter
---@field Equippable ASBZEquippable
---@field AnimationCollection USBZEquippableAnimationCollection
USBZLeftHandEquippableAnimation = {}



---@class USBZLevelLibrary : UBlueprintFunctionLibrary
USBZLevelLibrary = {}

---@param InActor AActor
---@return ULevel
function USBZLevelLibrary:GetLevel(InActor) end
---@param Level ULevel
---@param ActorClass TSubclassOf<AActor>
---@param OutActors TArray<AActor>
function USBZLevelLibrary:GetAllActorsOfClassInLevel(Level, ActorClass, OutActors) end


---@class USBZLifeActionAffinitytData : UDataAsset
---@field AllowedActions FSBZLifeActionAffinityList
USBZLifeActionAffinitytData = {}



---@class USBZLifeActionComponent : UActorComponent
---@field OnCharacterSlotReserved FSBZLifeActionComponentOnCharacterSlotReserved
---@field OnCharacterSlotEntered FSBZLifeActionComponentOnCharacterSlotEntered
---@field OnCharacterSlotReady FSBZLifeActionComponentOnCharacterSlotReady
---@field OnCharacterSlotStart FSBZLifeActionComponentOnCharacterSlotStart
---@field OnCharacterSlotExited FSBZLifeActionComponentOnCharacterSlotExited
---@field OnCharacterSlotFreed FSBZLifeActionComponentOnCharacterSlotFreed
---@field ActionInstances TArray<USBZLifeActionInstance>
---@field PreviewSkeletals TArray<ASkeletalMeshActor>
USBZLifeActionComponent = {}

---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function USBZLifeActionComponent:OnSlotStart(Character, ActionInstance, ActionSlot) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function USBZLifeActionComponent:OnSlotReserved(Character, ActionInstance, ActionSlot) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function USBZLifeActionComponent:OnSlotReady(Character, ActionInstance, ActionSlot) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
---@param Result ESBZLifeActionStopReason
function USBZLifeActionComponent:OnSlotFreed(Character, ActionInstance, ActionSlot, Result) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
---@param Result ESBZLifeActionStopReason
function USBZLifeActionComponent:OnSlotExited(Character, ActionInstance, ActionSlot, Result) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function USBZLifeActionComponent:OnSlotEntered(Character, ActionInstance, ActionSlot) end
---@param Character ASBZCharacter
---@return boolean
function USBZLifeActionComponent:IsCharacterPlayingAction(Character) end
---@param Character ASBZCharacter
---@return boolean
function USBZLifeActionComponent:IsCharacterPendingAction(Character) end
---@param Character ASBZCharacter
---@return FTransform
function USBZLifeActionComponent:GetSlotTransformForCharacter(Character) end
---@param Character ASBZCharacter
---@return USBZLifeActionSlot
function USBZLifeActionComponent:GetReservedSlotForCharacter(Character) end
---@param LifeActionSlotTag FGameplayTag
---@param LifeActionInstance USBZLifeActionInstance
---@return ASBZCharacter
function USBZLifeActionComponent:GetCharacterInActionSlot(LifeActionSlotTag, LifeActionInstance) end
---@param LifeActionTag FGameplayTag
---@return ASBZCharacter
function USBZLifeActionComponent:GetCharacterInAction(LifeActionTag) end
---@param Character ASBZCharacter
---@return USBZLifeActionInstance
function USBZLifeActionComponent:GetActionWithReservedSlotForCharacter(Character) end
---@param Slot USBZLifeActionSlot
---@return USBZLifeActionInstance
function USBZLifeActionComponent:GetActionForSlot(Slot) end


---@class USBZLifeActionDialogPlayer : UObject
---@field DialogsDataAssets TArray<USBZDialogDataAsset>
---@field CurrentDialog USBZDialogDataAsset
---@field bOnlyOnce boolean
---@field bRandomSelection boolean
USBZLifeActionDialogPlayer = {}



---@class USBZLifeActionInstance : USceneComponent
---@field Tag FGameplayTag
---@field DialogPlayer USBZLifeActionDialogPlayer
---@field OwningLifeActionComponent USBZLifeActionComponent
---@field Slots TArray<USBZLifeActionSlot>
USBZLifeActionInstance = {}

---@param bReset boolean
function USBZLifeActionInstance:StopDialog(bReset) end
function USBZLifeActionInstance:StartDialog() end
---@param InTag FGameplayTag
---@return boolean
function USBZLifeActionInstance:IsSlotFree(InTag) end
---@return FGameplayTag
function USBZLifeActionInstance:GetTag() end
---@return ESBZLifeActionState
function USBZLifeActionInstance:GetState() end
---@param InTag FGameplayTag
---@return USBZLifeActionSlot
function USBZLifeActionInstance:GetSlotWithTag(InTag) end
---@param Character ASBZCharacter
---@return USBZLifeActionSlot
function USBZLifeActionInstance:GetReservedSlot(Character) end
---@param InSlot USBZLifeActionSlot
---@return boolean
function USBZLifeActionInstance:ContainsSlot(InSlot) end
---@return boolean
function USBZLifeActionInstance:AreAllNeededSlotsReady() end


---@class USBZLifeActionManager : UActorComponent
---@field LifeActionComponents TArray<USBZLifeActionComponent>
---@field LifeActionCharacters TMap<ASBZCharacter, USBZLifeActionComponent>
---@field LoadingMontages TArray<TSoftObjectPtr<UAnimMontage>>
USBZLifeActionManager = {}

---@param Character ASBZCharacter
---@param Slot USBZLifeActionSlot
---@param StopReason ESBZLifeActionStopReason
function USBZLifeActionManager:StopActionForCharacter(Character, Slot, StopReason) end
---@param Character ASBZCharacter
---@return boolean
function USBZLifeActionManager:SetSlotReadyForCharacter(Character) end
---@param Character ASBZCharacter
---@param Request FSBZLifeActionRequest
---@return USBZLifeActionSlot
function USBZLifeActionManager:ReserveAction(Character, Request) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function USBZLifeActionManager:OnSlotReserved(Character, ActionInstance, ActionSlot) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
---@param Result ESBZLifeActionStopReason
function USBZLifeActionManager:OnSlotFreed(Character, ActionInstance, ActionSlot, Result) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
---@param Result ESBZLifeActionStopReason
function USBZLifeActionManager:OnSlotExited(Character, ActionInstance, ActionSlot, Result) end
---@param Character ASBZCharacter
---@param ActionInstance USBZLifeActionInstance
---@param ActionSlot USBZLifeActionSlot
function USBZLifeActionManager:OnSlotEntered(Character, ActionInstance, ActionSlot) end
---@param Character ASBZCharacter
---@return boolean
function USBZLifeActionManager:IsCharacterPlayingAction(Character) end
---@param Character ASBZCharacter
---@return boolean
function USBZLifeActionManager:IsCharacterPendingAction(Character) end
---@param Character ASBZCharacter
---@return USBZLifeActionComponent
function USBZLifeActionManager:GetLifeActionComponentForCharacter(Character) end
---@param Location FVector
---@param LifeActionSlotTag FGameplayTag
---@return USBZLifeActionSlot
function USBZLifeActionManager:GetClosestLifeActionMatchingTagAny(Location, LifeActionSlotTag) end
---@param LifeActionComponent USBZLifeActionComponent
---@param LifeActionSlotTag FGameplayTag
---@param LifeActionInstance USBZLifeActionInstance
---@return ASBZCharacter
function USBZLifeActionManager:GetCharacterForActionSlot(LifeActionComponent, LifeActionSlotTag, LifeActionInstance) end
---@param Character ASBZCharacter
---@return FTransform
function USBZLifeActionManager:GetActionSlotTransformForCharacter(Character) end
---@param Character ASBZCharacter
---@return USBZLifeActionSlot
function USBZLifeActionManager:GetActionSlotForCharacter(Character) end
---@param WorldContextObject UObject
---@return USBZLifeActionManager
function USBZLifeActionManager:Get(WorldContextObject) end
---@param Character ASBZCharacter
---@return boolean
function USBZLifeActionManager:EnterActionForCharacter(Character) end


---@class USBZLifeActionPreviewData : UDataAsset
---@field SkeletalMesh USkeletalMesh
---@field AnimationCollection USBZBaseCharacterAnimationCollection
---@field PreviewStance ESBZCharacterStance
---@field PreviewEquippableFamily ESBZEquippableFamily
---@field PreviewEquippableClass TSoftClassPtr<ASBZEquippable>
USBZLifeActionPreviewData = {}



---@class USBZLifeActionSettings : UDataAsset
---@field AnimationCollections TArray<TSoftObjectPtr<USBZBaseCharacterAnimationCollection>>
USBZLifeActionSettings = {}



---@class USBZLifeActionSlot : USceneComponent
---@field Tag FGameplayTag
---@field GrantedTags FGameplayTagContainer
---@field ConsumedTags FGameplayTagContainer
---@field NeededTags FGameplayTagContainer
---@field ExcludedByTags FGameplayTagContainer
---@field bMustBeOccupied boolean
---@field bNeedOtherSlotsReadyToBeReserved boolean
---@field bOpenForRandomReservation boolean
---@field bUseAcceptableRadius boolean
---@field AcceptableRadius float
---@field bUseAcceptableAngle boolean
---@field AcceptableAngle float
---@field AngleOffset float
---@field bUseCoolDown boolean
---@field CoolDown float
---@field bUseRandomDuration boolean
---@field RandomDesiredDuration FFloatInterval
---@field DesiredDuration float
---@field DialogPlayer USBZLifeActionDialogPlayer
---@field RandomAnimationTagsPicker FSBZLifeActionRandomAnimationTagsPicker
---@field bUseEnterAnimation boolean
---@field EnterLocation FVector
---@field bSnapEnterPointToGround boolean
---@field EnterAnimationTag FGameplayTag
---@field bUseExitAnimation boolean
---@field ExitLocation FVector
---@field bSnapExitPointToGround boolean
---@field ExitAnimationTag FGameplayTag
---@field bExitOnlyIfActionAnimationIsPlaying boolean
---@field ActorEvents TArray<FSBZLifeActionActorTagEvent>
---@field PlayingActionMontage UAnimMontage
---@field PlayingEnterMontage UAnimMontage
---@field PlayingExitMontage UAnimMontage
---@field Character ASBZCharacter
---@field bIsReady boolean
---@field State ESBZLifeActionState
---@field CurrentReservationID int32
---@field CurrentMontageIndex int16
---@field OwningLifeActionInstance USBZLifeActionInstance
USBZLifeActionSlot = {}

---@param SectionName FName
function USBZLifeActionSlot:SwitchMontageSection(SectionName) end
---@param SectionName FName
function USBZLifeActionSlot:SwitchMontageNextSection(SectionName) end
---@param bReset boolean
function USBZLifeActionSlot:StopDialog(bReset) end
function USBZLifeActionSlot:StartDialog() end
---@param Montage UAnimMontage
---@param bInterrupted boolean
function USBZLifeActionSlot:OnMontageEnded(Montage, bInterrupted) end
---@param Montage UAnimMontage
---@param bInterrupted boolean
function USBZLifeActionSlot:OnMontageBlendOut(Montage, bInterrupted) end
function USBZLifeActionSlot:OnEnterAnimationShouldEnd() end
function USBZLifeActionSlot:OnDesiredDurationReached() end
---@param EventTag FGameplayTag
---@param bActive boolean
function USBZLifeActionSlot:OnCharacterAnimEvent(EventTag, bActive) end
---@return boolean
function USBZLifeActionSlot:MustBeOccupied() end
---@param InCharacter ASBZCharacter
function USBZLifeActionSlot:Multicast_OnSlotStart(InCharacter) end
---@param InCharacter ASBZCharacter
function USBZLifeActionSlot:Multicast_OnSlotFreed(InCharacter) end
---@return boolean
function USBZLifeActionSlot:IsUsingAnExitAnimation() end
---@return boolean
function USBZLifeActionSlot:IsUsingAnEnterAnimation() end
---@param InCharacter ASBZCharacter
---@return boolean
function USBZLifeActionSlot:IsReservedBy(InCharacter) end
---@return boolean
function USBZLifeActionSlot:IsReadyToStart() end
---@param InCharacter ASBZCharacter
---@return boolean
function USBZLifeActionSlot:IsPlayingExitMontage(InCharacter) end
---@param InCharacter ASBZCharacter
---@return boolean
function USBZLifeActionSlot:IsPlayingEnterMontage(InCharacter) end
---@param InCharacter ASBZCharacter
---@return boolean
function USBZLifeActionSlot:IsPlayingActionMontage(InCharacter) end
---@return boolean
function USBZLifeActionSlot:IsFree() end
---@return FGameplayTag
function USBZLifeActionSlot:GetTag() end
---@return ESBZLifeActionState
function USBZLifeActionSlot:GetState() end
---@return UAnimMontage
function USBZLifeActionSlot:GetPlayingActionMontage() end
---@return FTransform
function USBZLifeActionSlot:GetMoveToTransform() end
---@return FRotator
function USBZLifeActionSlot:GetMoveToRotation() end
---@return FVector
function USBZLifeActionSlot:GetMoveToLocation() end
---@return int32
function USBZLifeActionSlot:GetCurrentReservationID() end
---@param InCharacter ASBZCharacter
---@return UAnimMontage
function USBZLifeActionSlot:GetCurrentExitMontage(InCharacter) end
---@param InCharacter ASBZCharacter
---@return UAnimMontage
function USBZLifeActionSlot:GetCurrentEnterMontage(InCharacter) end
---@param InCharacter ASBZCharacter
---@return UAnimMontage
function USBZLifeActionSlot:GetCurrentActionMontage(InCharacter) end
---@return ASBZCharacter
function USBZLifeActionSlot:GetCharacter() end
---@return float
function USBZLifeActionSlot:GetAcceptableRadius() end
---@return float
function USBZLifeActionSlot:GetAcceptableAngle() end
---@param InCharacter ASBZCharacter
---@param Request FSBZLifeActionRequest
---@param bLogErrors boolean
---@return boolean
function USBZLifeActionSlot:CanBeReservedBy(InCharacter, Request, bLogErrors) end


---@class USBZLineBatchComponentFunctionLibrary : UBlueprintFunctionLibrary
USBZLineBatchComponentFunctionLibrary = {}

---@param LineBatcher ULineBatchComponent
function USBZLineBatchComponentFunctionLibrary:Flush(LineBatcher) end
---@param LineBatcher ULineBatchComponent
---@param Center FVector
---@param Radius float
---@param Segments int32
---@param LineColor FLinearColor
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:DrawSphere(LineBatcher, Center, Radius, Segments, LineColor, Duration, Thickness) end
---@param LineBatcher ULineBatchComponent
---@param Position FVector
---@param Size float
---@param PointColor FLinearColor
---@param Duration float
function USBZLineBatchComponentFunctionLibrary:DrawPoint(LineBatcher, Position, Size, PointColor, Duration) end
---@param LineBatcher ULineBatchComponent
---@param PlaneCoordinates FPlane
---@param Location FVector
---@param Size float
---@param PlaneColor FLinearColor
---@param Duration float
function USBZLineBatchComponentFunctionLibrary:DrawPlane(LineBatcher, PlaneCoordinates, Location, Size, PlaneColor, Duration) end
---@param LineBatcher ULineBatchComponent
---@param LineStart FVector
---@param LineEnd FVector
---@param LineColor FLinearColor
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:DrawLine(LineBatcher, LineStart, LineEnd, LineColor, Duration, Thickness) end
---@param LineBatcher ULineBatchComponent
---@param FrustumTransform FTransform
---@param FrustumColor FLinearColor
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:DrawFrustum(LineBatcher, FrustumTransform, FrustumColor, Duration, Thickness) end
---@param LineBatcher ULineBatchComponent
---@param FloatHistory FDebugFloatHistory
---@param DrawTransform FTransform
---@param DrawSize FVector2D
---@param DrawColor FLinearColor
---@param Duration float
function USBZLineBatchComponentFunctionLibrary:DrawFloatHistory(LineBatcher, FloatHistory, DrawTransform, DrawSize, DrawColor, Duration) end
---@param LineBatcher ULineBatchComponent
---@param Start FVector
---@param End FVector
---@param Color FLinearColor
---@param DashSize float
---@param Duration float
function USBZLineBatchComponentFunctionLibrary:DrawDashedLine(LineBatcher, Start, End, Color, DashSize, Duration) end
---@param LineBatcher ULineBatchComponent
---@param Start FVector
---@param End FVector
---@param Radius float
---@param Segments int32
---@param LineColor FLinearColor
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:DrawCylinder(LineBatcher, Start, End, Radius, Segments, LineColor, Duration, Thickness) end
---@param LineBatcher ULineBatchComponent
---@param AxisLoc FVector
---@param AxisRot FRotator
---@param Scale float
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:DrawCoordinateSystem(LineBatcher, AxisLoc, AxisRot, Scale, Duration, Thickness) end
---@param LineBatcher ULineBatchComponent
---@param Origin FVector
---@param Direction FVector
---@param Length float
---@param AngleWidth float
---@param AngleHeight float
---@param NumSides int32
---@param LineColor FLinearColor
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:DrawCone(LineBatcher, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration, Thickness) end
---@param LineBatcher ULineBatchComponent
---@param Center FVector
---@param Radius float
---@param NumSegments int32
---@param LineColor FLinearColor
---@param Duration float
---@param Thickness float
---@param YAxis FVector
---@param ZAxis FVector
---@param bDrawAxis boolean
function USBZLineBatchComponentFunctionLibrary:DrawCircle(LineBatcher, Center, Radius, NumSegments, LineColor, Duration, Thickness, YAxis, ZAxis, bDrawAxis) end
---@param LineBatcher ULineBatchComponent
---@param Center FVector
---@param HalfHeight float
---@param Radius float
---@param Rotation FRotator
---@param LineColor FLinearColor
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:DrawCapsule(LineBatcher, Center, HalfHeight, Radius, Rotation, LineColor, Duration, Thickness) end
---@param LineBatcher ULineBatchComponent
---@param CameraComponent UCameraComponent
---@param CameraColor FLinearColor
---@param Duration float
function USBZLineBatchComponentFunctionLibrary:DrawCamera(LineBatcher, CameraComponent, CameraColor, Duration) end
---@param LineBatcher ULineBatchComponent
---@param Center FVector
---@param Extent FVector
---@param LineColor FLinearColor
---@param Rotation FRotator
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:DrawBox(LineBatcher, Center, Extent, LineColor, Rotation, Duration, Thickness) end
---@param LineBatcher ULineBatchComponent
---@param LineStart FVector
---@param LineEnd FVector
---@param ArrowSize float
---@param LineColor FLinearColor
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:DrawArrow(LineBatcher, LineStart, LineEnd, ArrowSize, LineColor, Duration, Thickness) end
---@param LineBatcher ULineBatchComponent
---@param LineStart FVector
---@param LineEnd FVector
---@param ArrowSize float
---@param ArrowAngle float
---@param LineColor FLinearColor
---@param Duration float
---@param Thickness float
function USBZLineBatchComponentFunctionLibrary:Draw3dArrow(LineBatcher, LineStart, LineEnd, ArrowSize, ArrowAngle, LineColor, Duration, Thickness) end


---@class USBZListenerManager : UObject
USBZListenerManager = {}


---@class USBZLoadingScreen : USBZLoadingWidgetBase
USBZLoadingScreen = {}


---@class USBZLoadingSubsystem : UEngineSubsystem
USBZLoadingSubsystem = {}


---@class USBZLoadingWidgetBase : USBZInternetStatusWidget
---@field bShouldRemoveOnLevelChange boolean
USBZLoadingWidgetBase = {}



---@class USBZLoadoutConfirmationPopupBody : USBZWidgetBase
---@field ProgressionItemUIData FSBZWeaponPartProgressionCurrent
USBZLoadoutConfirmationPopupBody = {}

function USBZLoadoutConfirmationPopupBody:OnItemDataInitialized() end


---@class USBZLoadoutLibrary : UBlueprintFunctionLibrary
USBZLoadoutLibrary = {}

---@param WorldContextObject UObject
---@param EquippableSlot ESBZEquippableLoadoutSlot
---@param SlotIndex int32
---@param ModularPartSlot USBZWeaponPartSlot
---@param EquippablePartDataAsset USBZEquippablePartDataAsset
function USBZLoadoutLibrary:SetWeaponPartOnWeapon(WorldContextObject, EquippableSlot, SlotIndex, ModularPartSlot, EquippablePartDataAsset) end
---@param WorldContextObject UObject
---@param LoadoutSlot ESBZEquippableLoadoutSlot
---@param SlotIndex int32
---@param CosmeticsPartSlot USBZCosmeticsPartSlot
---@param EquippablePartConfigGroup FSBZEquippablePartConfigGroup
function USBZLoadoutLibrary:SetCosmeticPartOnWeapon(WorldContextObject, LoadoutSlot, SlotIndex, CosmeticsPartSlot, EquippablePartConfigGroup) end
---@param WorldContextObject UObject
---@param SlotIndex int32
---@param ItemSlot ESBZEquippableLoadoutSlot
---@param CosmeticsPartSlot USBZCosmeticsPartSlot
---@param CosmeticsDataAsset USBZCosmeticsDataAsset
function USBZLoadoutLibrary:RemoveCosmeticPartOnWeapon(WorldContextObject, SlotIndex, ItemSlot, CosmeticsPartSlot, CosmeticsDataAsset) end
---@param WorldContextObject UObject
---@param PlayerLoadoutConfig FSBZPlayerLoadoutConfig
---@return boolean
function USBZLoadoutLibrary:IsValidLoadout(WorldContextObject, PlayerLoadoutConfig) end
---@param WorldContextObject UObject
---@param EquippableSlot ESBZEquippableLoadoutSlot
---@return TArray<FSBZWeaponInventorySlot>
function USBZLoadoutLibrary:GetWeaponConfigSlotsForEquippable(WorldContextObject, EquippableSlot) end
---@param WorldContextObject UObject
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
---@return FSBZWeaponInventorySlot
function USBZLoadoutLibrary:GetWeaponConfigSlot(WorldContextObject, InEquippableSlot, InWeaponSlotIndex) end
---@param WorldContextObject UObject
---@param OutSuitInventorySlot FSBZSuitInventorySlot
---@param SuitSlotIndex int32
---@param IsValidIndex boolean
function USBZLoadoutLibrary:GetInventorySuitSlotAt(WorldContextObject, OutSuitInventorySlot, SuitSlotIndex, IsValidIndex) end
---@param WorldContextObject UObject
---@param OutGloveInventorySlot FSBZGloveInventorySlot
---@param GloveSlotIndex int32
---@param IsValidIndex boolean
function USBZLoadoutLibrary:GetInventoryGloveSlotAt(WorldContextObject, OutGloveInventorySlot, GloveSlotIndex, IsValidIndex) end
---@param WorldContextObject UObject
---@return int32
function USBZLoadoutLibrary:GetActivePlayerLoadoutIndex(WorldContextObject) end


---@class USBZLoadoutManager : UObject
---@field OnActiveLoadoutIndexChanged FSBZLoadoutManagerOnActiveLoadoutIndexChanged
---@field OnLocalPlayerLoadoutChanged FSBZLoadoutManagerOnLocalPlayerLoadoutChanged
USBZLoadoutManager = {}

---@param LoadoutIndex int32
---@param InLoadoutConfig FSBZPlayerLoadoutConfig
function USBZLoadoutManager:SetLoadoutAtIndex(LoadoutIndex, InLoadoutConfig) end
---@param ActiveLoadoutIndex int32
---@return ESBZMetaRequestResult
function USBZLoadoutManager:SetActiveLoadoutIndex(ActiveLoadoutIndex) end
---@return TArray<FSBZPlayerLoadoutConfig>
function USBZLoadoutManager:GetPlayerLoadouts() end
---@param WorldContextObject UObject
---@return USBZLoadoutManager
function USBZLoadoutManager:GetLoadoutManager(WorldContextObject) end
---@return int32
function USBZLoadoutManager:GetActiveLoadoutIndex() end


---@class USBZLoadoutModCategoryButton : USBZMenuButton
---@field ModSlot USBZModularPartSlotBase
---@field EquippedPart USBZModularPartDataAsset
USBZLoadoutModCategoryButton = {}

---@param SelectedCallback FSetSelectedCallbackSelectedCallback
function USBZLoadoutModCategoryButton:SetSelectedCallback(SelectedCallback) end
function USBZLoadoutModCategoryButton:OnWeaponModCategoryDataIntialized() end
---@param InSlot USBZModularPartSlotBase
---@param InPart USBZModularPartDataAsset
function USBZLoadoutModCategoryButton:InitializeModCategoryData(InSlot, InPart) end


---@class USBZLoadoutSkillsButton : USBZMenuButton
---@field SkillLineCountDataArray TArray<FSBZSkillLineCountData>
USBZLoadoutSkillsButton = {}

---@param SkillList TArray<USBZSkillData>
function USBZLoadoutSkillsButton:NativeInitializeSkills(SkillList) end
---@param EquippedSkillCount int32
function USBZLoadoutSkillsButton:InitializeSkills(EquippedSkillCount) end


---@class USBZLoadoutSlotData : USBZInventoryBaseData
USBZLoadoutSlotData = {}


---@class USBZLoadoutSlotDatabase : USBZItemDatabase
---@field LoadoutSlotArray TArray<USBZLoadoutSlotData>
USBZLoadoutSlotDatabase = {}



---@class USBZLobby : UObject
---@field LocalState USBZLobbyLocalState
---@field DefaultPort int32
---@field LobbyClient ASBZLobbyBeaconClient
---@field LobbyHost ASBZLobbyBeaconHost
---@field LobbyOnlineBeacon AOnlineBeaconHost
---@field BeaconActionPhaseClient ASBZBeaconActionPhaseClient
---@field BeaconActionPhaseHost ASBZBeaconActionPhaseHost
---@field ActionPhaseOnlineBeacon AOnlineBeaconHost
USBZLobby = {}

---@param Result ESBZOnlineCode
function USBZLobby:JoinLobbyComplete(Result) end
---@param Result ESBZOnlineCode
function USBZLobby:InitLobbyHostComplete(Result) end
---@param HostId int32
function USBZLobby:HostMigrationSession(HostId) end
---@param Result ESBZOnlineCode
function USBZLobby:HostLobbyComplete(Result) end
---@param Params FSBZOnlineSessionParams
function USBZLobby:HostLobby(Params) end
function USBZLobby:HandleLostConnectionToHost() end


---@class USBZLobbyLocalState : UObject
---@field OnPlayerCountChanged FSBZLobbyLocalStateOnPlayerCountChanged
---@field OnSomeoneAcceptedMatch FSBZLobbyLocalStateOnSomeoneAcceptedMatch
---@field OnPlayerLeftMatch FSBZLobbyLocalStateOnPlayerLeftMatch
---@field PlayerInfos TArray<FSBZLobbyCharacterInfoUi>
USBZLobbyLocalState = {}

function USBZLobbyLocalState:SendInfoToServer() end
---@param StateName FName
function USBZLobbyLocalState:HandleGameStateLeft(StateName) end
---@param StateName FName
function USBZLobbyLocalState:HandleGameStateEnter(StateName) end
---@param PlayerIndex int32
---@return UTexture2D
function USBZLobbyLocalState:GetPlayerAvatar(PlayerIndex) end


---@class USBZLocalNavBar : USBZWidgetBase
---@field NavigationButtonNames TArray<FText>
---@field OnIndexChanged FSBZLocalNavBarOnIndexChanged
USBZLocalNavBar = {}

function USBZLocalNavBar:RebuildNavbar() end


---@class USBZLocalPlayer : ULocalPlayer
USBZLocalPlayer = {}


---@class USBZLocalPlayerFeedback : UObject
---@field bUseFirstPlayModifier boolean
---@field FirstPlayCooldown float
---@field PostProcessSettings USBZPostProcessSettingsPresetDataAsset
---@field Intensity float
---@field PostProcessFadeInBlendCurve FRuntimeFloatCurve
---@field PostProcessBlendCurve FRuntimeFloatCurve
---@field PostProcessFadeOutBlendCurve FRuntimeFloatCurve
---@field bLoopingCurve boolean
---@field SustainTime float
---@field bAutoFadeOut boolean
---@field ParticleSystem UNiagaraSystem
---@field ParticleLifeTime float
---@field CameraShakeClass TSubclassOf<UCameraShakeBase>
---@field CameraShakeScale float
---@field CameraShakeScaleFirstPlay float
---@field FieldOfViewAngle float
---@field TopPassFieldOfViewAngle float
---@field CameraPositionModifier FVector
---@field CameraRotationModifier FRotator
---@field HandRigModifier float
---@field bIsCameraLocked boolean
---@field LockCameraData FSBZLockCameraData
---@field AkStartEvent UAkAudioEvent
---@field AkStopEvent UAkAudioEvent
---@field AkStopEventTime float
---@field ForceFeedbackEffect UForceFeedbackEffect
---@field AudioRTPC FString
---@field AudioRTPCValue float
---@field Priority int32
---@field bRemoveAtEndOfActionPhase boolean
---@field CameraOwner ASBZPlayerCameraManager
---@field LensParticleComponent UNiagaraComponent
---@field CameraShake UCameraShakeBase
---@field AkComponent UAkComponent
---@field TransformCameraModifier USBZTransformCameraModifier
USBZLocalPlayerFeedback = {}



---@class USBZLoginScreenBaseWidget : USBZInternetStatusWidget
---@field PrivacyPolicyContent FSBZInfoPopupText
---@field EULAContent FSBZInfoPopupText
---@field EpilepsyWarningContent FSBZInfoPopupText
---@field TelemetryContent FSBZInfoPopupText
---@field GameSenseContent FSBZInfoPopupText
---@field CrossplayContent FSBZInfoPopupText
---@field PopUpAcceptAction FSBZButtonControlReference
---@field PopUpCancelAction FSBZButtonControlReference
---@field PopUpOptInAction FSBZButtonControlReference
---@field PopUpOptOutAction FSBZButtonControlReference
---@field PopUpData FSBZUIPopupData
---@field InvalidUserNameOrPassword FText
---@field bRememeberDetails boolean
---@field LoadingThrobber UCircularThrobber
---@field LoadingCanvasPanel UCanvasPanel
---@field LoginScreen USBZLoginScreenWidget
---@field LogoP3 UImage
---@field ClickToStartButton UButton
---@field ClickToStartOverlay UOverlay
---@field bIsWidgetReady boolean
USBZLoginScreenBaseWidget = {}

function USBZLoginScreenBaseWidget:WidgetReady() end
function USBZLoginScreenBaseWidget:ShowTelemetryPopup() end
function USBZLoginScreenBaseWidget:ShowPrivacyPolicyPopup() end
function USBZLoginScreenBaseWidget:ShowGameSensePopup() end
function USBZLoginScreenBaseWidget:ShowEULAPopup() end
function USBZLoginScreenBaseWidget:ShowEpilepsyWarningPopup() end
function USBZLoginScreenBaseWidget:ShowCrossplayPopup() end
---@param InVisibility ESlateVisibility
function USBZLoginScreenBaseWidget:SetLoginPanelsVisibility(InVisibility) end
---@param InVisibility ESlateVisibility
function USBZLoginScreenBaseWidget:SetLoadingPanelVisibility(InVisibility) end
---@param InVisibility ESlateVisibility
function USBZLoginScreenBaseWidget:SetLoadingCanvasPanelVisibility(InVisibility) end
---@param ClosingActionName FName
function USBZLoginScreenBaseWidget:OnTelemetryPopUpClosed(ClosingActionName) end
---@param ClosingActionName FName
function USBZLoginScreenBaseWidget:OnPrivacyPopUpClosed(ClosingActionName) end
---@param ClosingActionName FName
function USBZLoginScreenBaseWidget:OnPrivacyPolicyChoice(ClosingActionName) end
---@param ErrorMessage FText
function USBZLoginScreenBaseWidget:OnLoginError(ErrorMessage) end
function USBZLoginScreenBaseWidget:OnInitializeDone() end
---@param ClosingActionName FName
function USBZLoginScreenBaseWidget:OnGameSensePopUpClosed(ClosingActionName) end
---@param ClosingActionName FName
function USBZLoginScreenBaseWidget:OnEULAPopUpClosed(ClosingActionName) end
---@param ClosingActionName FName
function USBZLoginScreenBaseWidget:OnEpilepsyPopUpClosed(ClosingActionName) end
---@param ClosingActionName FName
function USBZLoginScreenBaseWidget:OnCrossplayPopUpClosed(ClosingActionName) end
function USBZLoginScreenBaseWidget:InitializeLoginMenu() end
function USBZLoginScreenBaseWidget:InitializeDone() end
---@return UCanvasPanel
function USBZLoginScreenBaseWidget:GetLoadingCanvasPanel() end


---@class USBZLoginScreenInfoPopupWidget : USBZWidgetBase
---@field InfoTextData FText
---@field ScrollSpeed float
---@field AxisName FName
---@field AxisDeadZone float
---@field ScrollBox UScrollBox
USBZLoginScreenInfoPopupWidget = {}

function USBZLoginScreenInfoPopupWidget:OnInfoTextInitialized() end


---@class USBZLoginScreenWidget : USBZMenuStackWidget
---@field ProdAccountCreateURLGameSense FString
---@field DevAccountCreateURLGameSense FString
---@field ProdAccountCreateURL FString
---@field DevAccountCreateURL FString
---@field bShouldHideCursor boolean
---@field bShowCloseButton boolean
---@field Button_CreateAccountWebBrowser USBZMenuButton
USBZLoginScreenWidget = {}

function USBZLoginScreenWidget:ShowLoginFailedMessage() end
---@param InFinalWebURL FString
function USBZLoginScreenWidget:OnWebPageClosed(InFinalWebURL) end
---@param InLastURL FString
function USBZLoginScreenWidget:OnCreateAccountWindowClosed(InLastURL) end
---@param InSelectedButton USBZMenuButton
function USBZLoginScreenWidget:OnCreateAccountBrowserSelected(InSelectedButton) end


---@class USBZLookFocusData : UDataAsset
---@field LookFocusParameters FSBZLookFocusParameters
USBZLookFocusData = {}



---@class USBZMainMenuBaseChallengeButton : USBZMenuButton
---@field ChallengeData FSBZChallengeData
USBZMainMenuBaseChallengeButton = {}

---@param InChallengeData FSBZChallengeData
function USBZMainMenuBaseChallengeButton:OnChallengeDataInititalized(InChallengeData) end
---@param Sprite UPaperSprite
---@return FVector2D
function USBZMainMenuBaseChallengeButton:GetPaperSpriteSourceSize(Sprite) end


---@class USBZMainMenuBaseWidget : USBZWidgetBase
USBZMainMenuBaseWidget = {}

function USBZMainMenuBaseWidget:DestroyWidget() end


---@class USBZMainMenuChallengeButton : USBZMenuButton
---@field Panel_ChallengeStats UPanelWidget
---@field ChallengeStatWidget TSubclassOf<USBZMainMenuChallengeStatDisplay>
USBZMainMenuChallengeButton = {}

---@param ChallengeData FSBZChallengeData
function USBZMainMenuChallengeButton:ChallengeInititalized(ChallengeData) end


---@class USBZMainMenuChallengeCategoryButton : USBZMenuButton
---@field CategoryData USBZChallengeCategoryData
USBZMainMenuChallengeCategoryButton = {}

---@param InCategoryData USBZChallengeCategoryData
function USBZMainMenuChallengeCategoryButton:OnChallengeCategoryDataInititalized(InCategoryData) end
---@param TotalCount int32
---@param CompletedCount int32
function USBZMainMenuChallengeCategoryButton:OnChallengeCategoryCountRefreshed(TotalCount, CompletedCount) end


---@class USBZMainMenuChallengeCategorySelectionScreen : USBZMenuStackScreenWidget
---@field HorizontalBox_ChallengeCategorySelection UHorizontalBox
---@field Widget_ChallengeScreen USBZMainMenuChallengesWidget
---@field ChallengeCategoryButton TSubclassOf<USBZMainMenuChallengeCategoryButton>
---@field PanelButtonPadding float
USBZMainMenuChallengeCategorySelectionScreen = {}

---@param InCategoryButton USBZMenuButton
function USBZMainMenuChallengeCategorySelectionScreen:NativeOnCategoryButtonSelected(InCategoryButton) end


---@class USBZMainMenuChallengeScreenDescriptionPanel : USBZWidgetBase
---@field Panel_ChallengeStats UPanelWidget
---@field Panel_ItemRewards UPanelWidget
---@field ChallengeStatWidgetClass TSubclassOf<USBZMainMenuChallengeStatDisplay>
---@field ItemRewardWidgetClass TSubclassOf<USBZMainMenuItemRewardDisplay>
---@field MaxStatWidgetsDisplayed int32
---@field MaxItemWidgetsDisplayed int32
---@field CachedStatWidgets TArray<USBZMainMenuChallengeStatDisplay>
---@field CachedItemWidgets TArray<USBZMainMenuItemRewardDisplay>
USBZMainMenuChallengeScreenDescriptionPanel = {}

function USBZMainMenuChallengeScreenDescriptionPanel:SetEmpty() end
---@param InChallengeData FSBZChallengeData
function USBZMainMenuChallengeScreenDescriptionPanel:SetChallengeData(InChallengeData) end
---@param InChallengeData FSBZChallengeData
function USBZMainMenuChallengeScreenDescriptionPanel:OnChallengeDataUpdated(InChallengeData) end


---@class USBZMainMenuChallengeStatDisplay : USBZWidgetBase
USBZMainMenuChallengeStatDisplay = {}

---@param InChallenge FSBZChallengeData
---@param InProgressStat FSBZChallengeProgressStat
function USBZMainMenuChallengeStatDisplay:StatInitialized(InChallenge, InProgressStat) end
---@param InProgressItem FSBZChallengeProgressItem
function USBZMainMenuChallengeStatDisplay:ItemInitialized(InProgressItem) end
---@param InChallenge FSBZChallengeData
function USBZMainMenuChallengeStatDisplay:ChallengeInitialized(InChallenge) end
---@param InChallengeId FString
function USBZMainMenuChallengeStatDisplay:ChallengeIdInitialized(InChallengeId) end


---@class USBZMainMenuChallengesWidget : USBZMenuStackScreenWidgetWithTutorial
---@field Panel_ChallengeButtons UPanelWidget
---@field Widget_Loading USBZWidgetBase
---@field ChallengeButtonClass TSubclassOf<USBZMainMenuBaseChallengeButton>
---@field ChallengesDisplayedPerPage int32
---@field CategoryCurrent USBZChallengeCategoryData
---@field StatusesCurrent TSet<EChallengeStatusEnum>
---@field AllStatuses boolean
---@field PagesTotalCount int32
---@field PageCurrent int32
USBZMainMenuChallengesWidget = {}

---@param Status EChallengeStatusEnum
---@param ForceSingleOrNone boolean
function USBZMainMenuChallengesWidget:ToggleFilterStatus(Status, ForceSingleOrNone) end
---@param Index int32
function USBZMainMenuChallengesWidget:SetPage(Index) end
---@param Category USBZChallengeCategoryData
function USBZMainMenuChallengesWidget:SetFilterCategory(Category) end
function USBZMainMenuChallengesWidget:ResetFilterStatuses() end
function USBZMainMenuChallengesWidget:PrevPage() end
function USBZMainMenuChallengesWidget:OnPagesChanged() end
---@param InChallengeData FSBZChallengeData
function USBZMainMenuChallengesWidget:OnNewChallengedFocused(InChallengeData) end
function USBZMainMenuChallengesWidget:OnFilterStatusesChanged() end
function USBZMainMenuChallengesWidget:OnFilterCategoryChanged() end
function USBZMainMenuChallengesWidget:NextPage() end
---@param InCategoryButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuChallengesWidget:NativeOnChallengeButtonFocusedChanged(InCategoryButton, bIsFocused) end
function USBZMainMenuChallengesWidget:CycleFilterStatuses() end


---@class USBZMainMenuCharacterDisplayPanel : USBZWidgetBase
---@field CharacterData USBZPlayerCharacterData
USBZMainMenuCharacterDisplayPanel = {}

function USBZMainMenuCharacterDisplayPanel:SetEmpty() end
---@param InCharacterData USBZPlayerCharacterData
function USBZMainMenuCharacterDisplayPanel:SetCharacterToDisplay(InCharacterData) end
function USBZMainMenuCharacterDisplayPanel:OnEmptySet() end
---@param InCharacterData USBZPlayerCharacterData
function USBZMainMenuCharacterDisplayPanel:OnCharacterDataChanged(InCharacterData) end


---@class USBZMainMenuCosmetic : USBZMenuStackScreenWidget
---@field Type ESBZMainMenuCosmeticType
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field Index int32
---@field AddEquippableMap TMap<USBZCosmeticsPartSlot, FSBZEquippablePartConfigGroup>
---@field LastBuyDataMap TMap<USBZCosmeticsPartSlot, USBZModularPartDataAsset>
---@field LastFailedBuyDisplayName FText
USBZMainMenuCosmetic = {}

---@param Category ESBZItemCategory
function USBZMainMenuCosmetic:PopulateStoreItems(Category) end
---@param AssetData USBZCosmeticsDataAsset
---@param StoreData FSBZStoreBaseItem
function USBZMainMenuCosmetic:OnAddStoreItem(AssetData, StoreData) end
---@return boolean
function USBZMainMenuCosmetic:IsSelectButtonDown() end
---@param InType ESBZMainMenuCosmeticType
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InIndex int32
function USBZMainMenuCosmetic:Display(InType, InEquippableSlot, InIndex) end
---@param InBuyDataMap TMap<USBZCosmeticsPartSlot, USBZModularPartDataAsset>
function USBZMainMenuCosmetic:Buy(InBuyDataMap) end
---@param bIsSuccess boolean
---@param Result ESBZMetaRequestResult
function USBZMainMenuCosmetic:BP_OnBuyDone(bIsSuccess, Result) end
---@param bIsSuccess boolean
---@param Result ESBZMetaRequestResult
function USBZMainMenuCosmetic:BP_OnApplyPreviewDone(bIsSuccess, Result) end
function USBZMainMenuCosmetic:ApplyMaskPreview() end
---@param InPreviewDataMap TMap<USBZCosmeticsPartSlot, USBZModularPartDataAsset>
---@param InPreviewConfigMap TMap<USBZCosmeticsPartSlot, USBZModularPartConfig>
function USBZMainMenuCosmetic:ApplyEquippablePreview(InPreviewDataMap, InPreviewConfigMap) end


---@class USBZMainMenuCosmeticItemButton : USBZMenuButton
---@field bIsDefault boolean
---@field CosmeticItemData USBZCosmeticsDataAsset
USBZMainMenuCosmeticItemButton = {}

---@param InItemCount int32
function USBZMainMenuCosmeticItemButton:SetItemCount(InItemCount) end
---@param InItemCount int32
function USBZMainMenuCosmeticItemButton:OnItemCountChanged(InItemCount) end
function USBZMainMenuCosmeticItemButton:OnCosmeticItemDataInitialized() end
---@return boolean
function USBZMainMenuCosmeticItemButton:IsDefaultItem() end
---@param InCosmeticItemData USBZCosmeticsDataAsset
---@param bInIsDefault boolean
function USBZMainMenuCosmeticItemButton:InitializeCosmeticItem(InCosmeticItemData, bInIsDefault) end
---@return USBZCosmeticsDataAsset
function USBZMainMenuCosmeticItemButton:GetCosmeticItemData() end


---@class USBZMainMenuCosmeticPanel : USBZWidgetBase
---@field Panel_ButtonsContainer UPanelWidget
---@field OnCosmeticButtonSelected FSBZMainMenuCosmeticPanelOnCosmeticButtonSelected
---@field OnCosmeticButtonFocusedChanged FSBZMainMenuCosmeticPanelOnCosmeticButtonFocusedChanged
---@field OnCosmeticButtonHoveredChanged FSBZMainMenuCosmeticPanelOnCosmeticButtonHoveredChanged
---@field OnCosmeticButtonDefaultSelected FSBZMainMenuCosmeticPanelOnCosmeticButtonDefaultSelected
---@field CosmeticButtonMap TMap<USBZCosmeticsDataAsset, USBZMainMenuCosmeticItemButton>
USBZMainMenuCosmeticPanel = {}

---@param InCosmeticItem USBZCosmeticsDataAsset
---@param InNewStackCount int32
function USBZMainMenuCosmeticPanel:UpdateStackCount(InCosmeticItem, InNewStackCount) end
function USBZMainMenuCosmeticPanel:ReleaseButtons() end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuCosmeticPanel:NativeOnCosmeticItemButtonSelected(InSelectedButton) end
---@param InButton USBZMenuButton
---@param bIsHovered boolean
function USBZMainMenuCosmeticPanel:NativeOnCosmeticItemButtonHoverChanged(InButton, bIsHovered) end
---@param InButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuCosmeticPanel:NativeOnCosmeticItemButtonFocusedChanged(InButton, bIsFocused) end
---@param InitParams FSBZCosmeticPanelInitParams
function USBZMainMenuCosmeticPanel:InitializeCosmeticItemPanel(InitParams) end
function USBZMainMenuCosmeticPanel:GiveKeyboardFocus() end


---@class USBZMainMenuCosmeticSlotButton : USBZMenuButton
---@field PartSlot USBZCosmeticsPartSlot
---@field ItemInSlot USBZInventoryBaseData
USBZMainMenuCosmeticSlotButton = {}

---@param InItemBaseData USBZInventoryBaseData
function USBZMainMenuCosmeticSlotButton:SetItemInSlot(InItemBaseData) end
---@param InCosmeticPartSlot USBZCosmeticsPartSlot
function USBZMainMenuCosmeticSlotButton:SetCosmeticPartSlot(InCosmeticPartSlot) end
---@param InItemBaseData USBZInventoryBaseData
function USBZMainMenuCosmeticSlotButton:ItemInSlotChanged(InItemBaseData) end
---@param InCosmeticPartSlot USBZCosmeticsPartSlot
---@param InItemBaseData USBZInventoryBaseData
function USBZMainMenuCosmeticSlotButton:InitializeButton(InCosmeticPartSlot, InItemBaseData) end
---@param InCosmeticPartSlot USBZCosmeticsPartSlot
function USBZMainMenuCosmeticSlotButton:CosmeticPartSlotChanged(InCosmeticPartSlot) end


---@class USBZMainMenuCredits : USBZMenuStackScreenWidget
---@field CreditsDataTable UDataTable
---@field TypeWidgets TSubclassOf<USBZWidgetCreditsRowBase>
---@field StartOffsetSize float
---@field EndOffsetSize float
---@field ScrollSpeed float
---@field ScrollSpeedMultiplier float
---@field AxisName FName
---@field AxisDeadZone float
---@field ScrollCredits UScrollBox
---@field ContentBox UVerticalBox
USBZMainMenuCredits = {}



---@class USBZMainMenuCrimeNet : USBZMenuStackScreenWidget
---@field HeistButtonClass TSubclassOf<USBZMainMenuCrimeNetHeistButton>
---@field StoryModeButtonClass TSubclassOf<USBZMainMenuCrimeNetStoryModeButton>
---@field HorizontalBox_HeistButtons UHorizontalBox
---@field HeistButtonPadding FMargin
---@field HeistMapIconClass TSubclassOf<USBZMainMenuCrimeNetHeistMapIcon>
---@field CanvasPanel_HeistMapIcons UCanvasPanel
---@field SelectedHeistButton USBZMainMenuCrimeNetHeistButton
---@field bShowStoryModeButtons boolean
---@field ActiveHeistCollectionIndex int32
---@field HeistCollections TArray<FSBZHeistCollection>
---@field HeistButtonPool TArray<USBZMainMenuCrimeNetHeistButton>
---@field HeistMapIconsPool TArray<USBZMainMenuCrimeNetHeistMapIcon>
---@field StoryModeButtonPool TArray<USBZMainMenuCrimeNetStoryModeButton>
USBZMainMenuCrimeNet = {}

---@return boolean
function USBZMainMenuCrimeNet:ToggleStoryModeFilter() end
---@param NewIndex int32
function USBZMainMenuCrimeNet:SetActiveHeistCollection(NewIndex) end
---@param ActiveHeistCollection FSBZHeistCollection
function USBZMainMenuCrimeNet:OnHeistCollectionChanged(ActiveHeistCollection) end
---@param SelectedButton USBZMainMenuCrimeNetHeistButton
function USBZMainMenuCrimeNet:OnHeistButtonSelected(SelectedButton) end
---@param ButtonNavigation EUINavigation
function USBZMainMenuCrimeNet:OnHeistButtonNavigation(ButtonNavigation) end
---@param MenuButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuCrimeNet:OnHeistButtonFocused(MenuButton, bIsFocused) end
---@param InSelectedHeistMapIcon USBZMainMenuCrimeNetHeistMapIcon
function USBZMainMenuCrimeNet:NativeOnHeistMapIconClicked(InSelectedHeistMapIcon) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuCrimeNet:NativeOnHeistButtonSelected(InSelectedButton) end
---@param MapIcon USBZMainMenuCrimeNetHeistMapIcon
---@param bIsHovered boolean
function USBZMainMenuCrimeNet:NativeOnHeistButtonHovered(MapIcon, bIsHovered) end
---@param InFocusedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuCrimeNet:NativeOnHeistButtonFocused(InFocusedButton, bIsFocused) end
function USBZMainMenuCrimeNet:IncrementHeistCollection() end
function USBZMainMenuCrimeNet:DecrementHeistCollection() end


---@class USBZMainMenuCrimeNetHeistButton : USBZMenuButton
---@field OnMenuButtonCustomNavigation FSBZMainMenuCrimeNetHeistButtonOnMenuButtonCustomNavigation
---@field HeistSoftObjectPath FSoftObjectPath
---@field HeistData UPD3HeistDataAsset
---@field HeistIndex int32
USBZMainMenuCrimeNetHeistButton = {}

function USBZMainMenuCrimeNetHeistButton:OnHeistDataInitialized() end
---@param InHeistSoftObjectPath FSoftObjectPath
function USBZMainMenuCrimeNetHeistButton:InitializeHeistDataFromSoftObjectPath(InHeistSoftObjectPath) end
---@return FSoftObjectPath
function USBZMainMenuCrimeNetHeistButton:GetHeistLevelPath() end
---@return UPD3HeistDataAsset
function USBZMainMenuCrimeNetHeistButton:GetHeistData() end


---@class USBZMainMenuCrimeNetHeistInspectScreen : USBZMenuStackScreenWidget
---@field HeistData UPD3HeistDataAsset
USBZMainMenuCrimeNetHeistInspectScreen = {}

function USBZMainMenuCrimeNetHeistInspectScreen:OnMatchmakingStarted() end
function USBZMainMenuCrimeNetHeistInspectScreen:HandleMatchmakingStarted() end


---@class USBZMainMenuCrimeNetHeistMapIcon : USBZHUDWidgetBase
---@field OnButtonHoveredChanged FSBZMainMenuCrimeNetHeistMapIconOnButtonHoveredChanged
---@field OnButtonClicked FSBZMainMenuCrimeNetHeistMapIconOnButtonClicked
---@field HeistData UPD3HeistDataAsset
USBZMainMenuCrimeNetHeistMapIcon = {}

---@param bInIsSelected boolean
function USBZMainMenuCrimeNetHeistMapIcon:SetSelected(bInIsSelected) end
function USBZMainMenuCrimeNetHeistMapIcon:OnHeistDataInitialized() end
---@param InHeistData UPD3HeistDataAsset
function USBZMainMenuCrimeNetHeistMapIcon:InitializeHeistData(InHeistData) end
---@return UPD3HeistDataAsset
function USBZMainMenuCrimeNetHeistMapIcon:GetHeistData() end
---@param bInIsHovered boolean
function USBZMainMenuCrimeNetHeistMapIcon:ButtonHoveredChanged(bInIsHovered) end


---@class USBZMainMenuCrimeNetStackWidget : USBZMenuStackWidget
USBZMainMenuCrimeNetStackWidget = {}

---@param StateName FName
function USBZMainMenuCrimeNetStackWidget:OnStateLeft(StateName) end


---@class USBZMainMenuCrimeNetStoryModeButton : USBZMainMenuCrimeNetHeistButton
---@field bIsIntroVideo boolean
USBZMainMenuCrimeNetStoryModeButton = {}



---@class USBZMainMenuCrimeNetTutorial : USBZMenuStackScreenWidget
---@field HeistButtonClass TSubclassOf<USBZMainMenuCrimeNetHeistButton>
---@field VerticalBox_HeistButtons UVerticalBox
---@field HeistButtonPadding FMargin
---@field SelectedHeistButton USBZMainMenuCrimeNetHeistButton
---@field HeistButtonPool TArray<USBZMainMenuCrimeNetHeistButton>
---@field TutorialLevelPaths TArray<FSoftObjectPath>
---@field bHasDisabledButtons boolean
USBZMainMenuCrimeNetTutorial = {}

---@param SelectedButton USBZMainMenuCrimeNetHeistButton
function USBZMainMenuCrimeNetTutorial:OnHeistButtonSelected(SelectedButton) end
---@param MenuButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuCrimeNetTutorial:OnHeistButtonFocused(MenuButton, bIsFocused) end
---@param SelectedButton USBZMainMenuCrimeNetHeistButton
function USBZMainMenuCrimeNetTutorial:OnDisabledHeistButtonSelected(SelectedButton) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuCrimeNetTutorial:NativeOnHeistButtonSelected(InSelectedButton) end
---@param InFocusedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuCrimeNetTutorial:NativeOnHeistButtonFocused(InFocusedButton, bIsFocused) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuCrimeNetTutorial:NativeOnDisabledHeistButtonSelected(InSelectedButton) end
function USBZMainMenuCrimeNetTutorial:HandlePartyChanged() end
---@param bDisabled boolean
function USBZMainMenuCrimeNetTutorial:DisableHeistButtons(bDisabled) end


---@class USBZMainMenuDamageFalloffWidget : USBZWidgetBase
---@field bIncludeCritDamage boolean
---@field MaxDisplayDistance float
---@field DisplayStepDistance float
---@field FireData USBZPlayerWeaponFireData
---@field CachedDamageArray TArray<FVector2D>
USBZMainMenuDamageFalloffWidget = {}

---@param InFireData USBZPlayerWeaponFireData
function USBZMainMenuDamageFalloffWidget:SetFireData(InFireData) end


---@class USBZMainMenuDebug : USBZWidgetBase
USBZMainMenuDebug = {}

---@param MMakingGroup int32
function USBZMainMenuDebug:OnMatchmakingGroupChange(MMakingGroup) end


---@class USBZMainMenuGloveInventoryScreen : USBZMenuStackInventoryBaseScreen
---@field GloveSlotButtonClass TSubclassOf<USBZMainMenuInventoryGloveSlotButton>
---@field Panel_GloveSlotButtons UPanelWidget
---@field Button_BuySlots USBZMenuButton
---@field Button_DefaultGlove USBZMenuButton
---@field DiscardGlovePopUpBodyWidgetClass TSubclassOf<USBZBaseInventoryItemVisualsWidget>
---@field DiscardGlovePopUpHeader FText
---@field DiscardGlovePopUpAcceptAction FSBZButtonControlReference
---@field DiscardGlovePopUpCancelAction FSBZButtonControlReference
---@field GloveIndexToDiscard int32
---@field DiscardGlovePopUpBody USBZBaseInventoryItemVisualsWidget
---@field ActiveGloveSlotButton USBZMainMenuInventoryGloveSlotButton
---@field GloveSlotButtonPool TArray<USBZMainMenuInventoryGloveSlotButton>
---@field SlotItem FSBZInventorySlotStoreItem
USBZMainMenuGloveInventoryScreen = {}

---@param InGloveIndex int32
function USBZMainMenuGloveInventoryScreen:TryDiscardGloveInSlot(InGloveIndex) end
function USBZMainMenuGloveInventoryScreen:OnTryBuyGloveSlot() end
---@param bWasSuccessful boolean
function USBZMainMenuGloveInventoryScreen:OnSlotPurchaseComplete(bWasSuccessful) end
---@param Item FSBZInventorySlotStoreItem
function USBZMainMenuGloveInventoryScreen:OnSlotPriceChanged(Item) end
---@param InActionName FName
function USBZMainMenuGloveInventoryScreen:OnShowBuySlotPopUpClosed(InActionName) end
---@param bWasSuccessful boolean
function USBZMainMenuGloveInventoryScreen:OnItemDiscarded(bWasSuccessful) end
---@param ClosingActionName FName
function USBZMainMenuGloveInventoryScreen:OnDiscardGlovePopUpClosed(ClosingActionName) end
---@param Result ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuGloveInventoryScreen:OnBuySlotItemCompleted(Result, ItemId) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuGloveInventoryScreen:NativeOnGloveSlotButtonSelected(InSelectedButton) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuGloveInventoryScreen:NativeOnGloveDefaultButtonSelected(InSelectedButton) end
---@param Result ESBZMetaRequestResult
function USBZMainMenuGloveInventoryScreen:NativeOnDefaultSet(Result) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuGloveInventoryScreen:NativeOnBuySlotsButtonSelected(InSelectedButton) end
---@param InFocusedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuGloveInventoryScreen:NativeGloveSlotButtonFocusedChanged(InFocusedButton, bIsFocused) end
---@param InFocusedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuGloveInventoryScreen:GloveSlotButtonFocusedChanged(InFocusedButton, bIsFocused) end
---@param DiscardItemResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuGloveInventoryScreen:DiscardItemDone(DiscardItemResult, ItemId) end
---@param IndexToDiscard int32
---@return boolean
function USBZMainMenuGloveInventoryScreen:CanDiscardGloveInSlot(IndexToDiscard) end


---@class USBZMainMenuInventoryCharacterPreferenceDisplay : USBZWidgetBase
---@field OnPreferredCharacterSlotIndexChanged FSBZMainMenuInventoryCharacterPreferenceDisplayOnPreferredCharacterSlotIndexChanged
---@field HorizontalBox_CharacterDisplays UHorizontalBox
---@field CharacterDisplayWidgetClass TSubclassOf<USBZCharacterPreferenceCharacterSlotButton>
---@field CharacterDisplayPanelPadding FMargin
---@field PreferredCharacterSlotButtonPool TArray<USBZCharacterPreferenceCharacterSlotButton>
---@field ActiveIndex int32
USBZMainMenuInventoryCharacterPreferenceDisplay = {}

---@param NewActiveIndex int32
function USBZMainMenuInventoryCharacterPreferenceDisplay:SetActiveIndex(NewActiveIndex) end
---@param SelectedPreferredCharacterSlotButton USBZCharacterPreferenceCharacterSlotButton
function USBZMainMenuInventoryCharacterPreferenceDisplay:NativeOnPreferredCharacterSlotButtonSelected(SelectedPreferredCharacterSlotButton) end
---@return boolean
function USBZMainMenuInventoryCharacterPreferenceDisplay:IsActiveSlotEmpty() end
function USBZMainMenuInventoryCharacterPreferenceDisplay:InitializeCharacterDisplays() end
function USBZMainMenuInventoryCharacterPreferenceDisplay:IncrementActiveIndex() end
---@return int32
function USBZMainMenuInventoryCharacterPreferenceDisplay:GetActiveIndex() end
function USBZMainMenuInventoryCharacterPreferenceDisplay:DecrementActiveIndex() end


---@class USBZMainMenuInventoryCharacterPreferenceScreen : USBZMenuStackScreenWidgetWithTutorial
---@field ClearCharactersInputActionName FName
---@field CharacterSlotButtonClass TSubclassOf<USBZMainMenuInventoryCharacterSlotButton>
---@field Panel_CharacterSlotButtons UPanelWidget
---@field Widget_CharacterPreferenceDisplay USBZMainMenuInventoryCharacterPreferenceDisplay
---@field Widget_CharacterDisplayPanel USBZMainMenuCharacterDisplayPanel
---@field FocusedCharacterSlotButton USBZMainMenuInventoryCharacterSlotButton
---@field PreferredCharacterArray TArray<FSBZCharacterSlotData>
---@field CharacterSlotButtonPool TArray<USBZMainMenuInventoryCharacterSlotButton>
USBZMainMenuInventoryCharacterPreferenceScreen = {}

---@param SelectionAction ESBZCharacterPreferenceButtonSelectionAction
function USBZMainMenuInventoryCharacterPreferenceScreen:UpdateCharacterSlotButtonControlsReference(SelectionAction) end
function USBZMainMenuInventoryCharacterPreferenceScreen:NativeOnClearPreferredCharactersInputPressed() end
function USBZMainMenuInventoryCharacterPreferenceScreen:NativeOnCharacterPreferenceUpdated() end
---@param NewIndex int32
function USBZMainMenuInventoryCharacterPreferenceScreen:NativeOnActiveCharacterSlotIndexChanged(NewIndex) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuInventoryCharacterPreferenceScreen:NativeCharacterSlotButtonSelected(InSelectedButton) end
---@param InFocusedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuInventoryCharacterPreferenceScreen:NativeCharacterSlotButtonFocusedChanged(InFocusedButton, bIsFocused) end
function USBZMainMenuInventoryCharacterPreferenceScreen:IncrementSlot() end
function USBZMainMenuInventoryCharacterPreferenceScreen:DecrementSlot() end


---@class USBZMainMenuInventoryCharacterSlotButton : USBZMenuButton
---@field CharacterSlotData FSBZCharacterInventoryData
---@field InventoryIndex int32
---@field PreferredValueIndex int32
USBZMainMenuInventoryCharacterSlotButton = {}

---@param InPreferredValueIndex int32
function USBZMainMenuInventoryCharacterSlotButton:SetPreferredValueIndex(InPreferredValueIndex) end
function USBZMainMenuInventoryCharacterSlotButton:OnPreferredValueIndexChanged() end
function USBZMainMenuInventoryCharacterSlotButton:OnCharacterSlotInitialized() end
---@return boolean
function USBZMainMenuInventoryCharacterSlotButton:IsPreferredCharacter() end
---@param InInventoryIndex int32
function USBZMainMenuInventoryCharacterSlotButton:InitializeCharacterSlotData(InInventoryIndex) end
---@return int32
function USBZMainMenuInventoryCharacterSlotButton:GetDisplayPreferredIndex() end
---@return FSBZCharacterInventoryData
function USBZMainMenuInventoryCharacterSlotButton:GetCharacterSlotData() end
function USBZMainMenuInventoryCharacterSlotButton:DeselectPreferredCharacter() end


---@class USBZMainMenuInventoryGloveSlotButton : USBZMenuButton
---@field GloveSlot FSBZGloveInventorySlot
---@field GloveSlotIndex int32
USBZMainMenuInventoryGloveSlotButton = {}

---@param bIsActiveGloveSlot boolean
function USBZMainMenuInventoryGloveSlotButton:SetActiveGloveSlot(bIsActiveGloveSlot) end
function USBZMainMenuInventoryGloveSlotButton:OnGloveSlotInitialized() end
---@return boolean
function USBZMainMenuInventoryGloveSlotButton:IsEmpty() end
---@param InGloveSlotIndex int32
function USBZMainMenuInventoryGloveSlotButton:InitializeGloveSlot(InGloveSlotIndex) end
---@return int32
function USBZMainMenuInventoryGloveSlotButton:GetGloveSlotIndex() end
---@return USBZGloveData
function USBZMainMenuInventoryGloveSlotButton:GetGloveInSlot() end


---@class USBZMainMenuInventoryItemSlotButton : USBZMenuButton
---@field ItemData USBZInventoryBaseData
---@field InfamyLevel int32
---@field bIsAvailable boolean
---@field ItemSource ESBZUIItemSource
---@field SkillName FText
USBZMainMenuInventoryItemSlotButton = {}

---@param bIsActiveItem boolean
function USBZMainMenuInventoryItemSlotButton:SetActiveItem(bIsActiveItem) end
function USBZMainMenuInventoryItemSlotButton:OnItemDataInitialized() end
---@return boolean
function USBZMainMenuInventoryItemSlotButton:IsAvailable() end
---@param InventoryBaseData USBZInventoryBaseData
function USBZMainMenuInventoryItemSlotButton:InitializeItem(InventoryBaseData) end
---@param InItemData FSBZPlayerUiItemInfo
function USBZMainMenuInventoryItemSlotButton:InitializeInventoryItem(InItemData) end
---@return FText
function USBZMainMenuInventoryItemSlotButton:GetSkillName() end
---@return ESBZUIItemSource
function USBZMainMenuInventoryItemSlotButton:GetItemSource() end
---@return USBZInventoryBaseData
function USBZMainMenuInventoryItemSlotButton:GetItemData() end
---@return int32
function USBZMainMenuInventoryItemSlotButton:GetInfamyLevel() end


---@class USBZMainMenuInventoryItemWidget : USBZWidgetBase
---@field Text_ItemName UTextBlock
USBZMainMenuInventoryItemWidget = {}

---@param InInventoryItemData USBZInventoryBaseData
function USBZMainMenuInventoryItemWidget:InitializeItem(InInventoryItemData) end


---@class USBZMainMenuInventoryMaskSlotButton : USBZMenuButton
---@field MaskSlot FSBZMaskInventorySlot
---@field MaskSlotIndex int32
USBZMainMenuInventoryMaskSlotButton = {}

---@param bIsActiveMaskSlot boolean
function USBZMainMenuInventoryMaskSlotButton:SetActiveMaskSlot(bIsActiveMaskSlot) end
function USBZMainMenuInventoryMaskSlotButton:OnMaskSlotInitialized() end
---@return boolean
function USBZMainMenuInventoryMaskSlotButton:IsPresetMaskSlot() end
---@return boolean
function USBZMainMenuInventoryMaskSlotButton:IsPreconfigMaskSlot() end
---@return boolean
function USBZMainMenuInventoryMaskSlotButton:IsEmpty() end
---@param InMaskSlotIndex int32
function USBZMainMenuInventoryMaskSlotButton:InitializeMaskSlot(InMaskSlotIndex) end
---@return int32
function USBZMainMenuInventoryMaskSlotButton:GetMaskSlotIndex() end
---@return FSBZMaskInventorySlot
function USBZMainMenuInventoryMaskSlotButton:GetMaskSlot() end
---@return USBZMaskData
function USBZMainMenuInventoryMaskSlotButton:GetMaskInSlot() end


---@class USBZMainMenuInventorySuitSlotButton : USBZMenuButton
---@field SuitSlot FSBZSuitInventorySlot
---@field SuitSlotIndex int32
USBZMainMenuInventorySuitSlotButton = {}

---@param bIsActiveSuitSlot boolean
function USBZMainMenuInventorySuitSlotButton:SetActiveSuitSlot(bIsActiveSuitSlot) end
function USBZMainMenuInventorySuitSlotButton:OnSuitSlotInitialized() end
---@return boolean
function USBZMainMenuInventorySuitSlotButton:IsPresetSuitSlot() end
---@return boolean
function USBZMainMenuInventorySuitSlotButton:IsEmpty() end
---@param InSuitSlotIndex int32
function USBZMainMenuInventorySuitSlotButton:InitializeSuitSlot(InSuitSlotIndex) end
---@return int32
function USBZMainMenuInventorySuitSlotButton:GetSuitSlotIndex() end
---@return FSBZSuitConfig
function USBZMainMenuInventorySuitSlotButton:GetSuitInSlotConfig() end
---@return USBZSuitData
function USBZMainMenuInventorySuitSlotButton:GetSuitInSlot() end


---@class USBZMainMenuInventoryWidget : USBZMenuStackScreenWidget
---@field Button_LoadoutSlotStoreItem USBZBlackMarketStoreItemButton
USBZMainMenuInventoryWidget = {}

---@param MetaResult ESBZMetaRequestResult
---@param InventoryItemData USBZInventoryBaseData
function USBZMainMenuInventoryWidget:NativeOnLoadoutSlotStoreItemTransactionComplete(MetaResult, InventoryItemData) end
---@param bWasSuccessful boolean
function USBZMainMenuInventoryWidget:LoadoutSlotStorePurchased(bWasSuccessful) end


---@class USBZMainMenuItemInventoryScreen : USBZMenuStackScreenWidgetWithTutorial
---@field ItemSlotButtonClass TSubclassOf<USBZMainMenuInventoryItemSlotButton>
---@field Panel_ItemSlotButtons UPanelWidget
---@field CurrentLoadoutIndex int32
---@field ItemSlotType ESBZItemLoadoutSlot
---@field SelectedItemButton USBZMainMenuInventoryItemSlotButton
---@field ItemSlotButtonPool TArray<USBZMainMenuInventoryItemSlotButton>
USBZMainMenuItemInventoryScreen = {}

function USBZMainMenuItemInventoryScreen:OnItemSlotsUpdated() end
function USBZMainMenuItemInventoryScreen:OnItemSlotScreenDisplayed() end
---@param SelectedButton USBZMenuButton
function USBZMainMenuItemInventoryScreen:OnItemSlotButtonSelected(SelectedButton) end
---@param SelectedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuItemInventoryScreen:OnItemSlotButtonFocusedChanged(SelectedButton, bIsFocused) end
---@param SelectedButton USBZMenuButton
function USBZMainMenuItemInventoryScreen:NativeOnItemSlotButtonSelected(SelectedButton) end
---@param Result ESBZMetaRequestResult
function USBZMainMenuItemInventoryScreen:HandleProgressionSave(Result) end
---@return USBZInventoryBaseData
function USBZMainMenuItemInventoryScreen:GetActiveItem() end
---@param InLoadoutIndex int32
---@param InItemSlotType ESBZItemLoadoutSlot
---@return boolean
function USBZMainMenuItemInventoryScreen:DisplayItemInventoryScreen(InLoadoutIndex, InItemSlotType) end


---@class USBZMainMenuItemInventoryWidget : USBZMenuStackScreenWidget
---@field ItemSlotButtonClass TSubclassOf<USBZMainMenuInventoryItemSlotButton>
---@field Panel_ItemSlotButtons UPanelWidget
---@field ItemSlotType ESBZItemLoadoutSlot
---@field SelectedItemButton USBZMainMenuInventoryItemSlotButton
---@field ItemSlotButtonPool TArray<USBZMainMenuInventoryItemSlotButton>
USBZMainMenuItemInventoryWidget = {}

function USBZMainMenuItemInventoryWidget:OnItemSlotsUpdated() end
---@param SelectedButton USBZMenuButton
function USBZMainMenuItemInventoryWidget:OnItemSlotButtonSelected(SelectedButton) end
---@param SelectedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuItemInventoryWidget:OnItemSlotButtonFocusedChanged(SelectedButton, bIsFocused) end
---@param SelectedButton USBZMenuButton
function USBZMainMenuItemInventoryWidget:NativeOnItemSlotButtonSelected(SelectedButton) end
---@return USBZInventoryBaseData
function USBZMainMenuItemInventoryWidget:GetActiveItem() end
---@param InItemSlotType ESBZItemLoadoutSlot
---@param InActiveItem USBZInventoryBaseData
---@return boolean
function USBZMainMenuItemInventoryWidget:DisplayItemSlotScreen(InItemSlotType, InActiveItem) end


---@class USBZMainMenuItemRewardDisplay : USBZWidgetBase
USBZMainMenuItemRewardDisplay = {}

---@param InRewardItem FSBZChallengeRewardItem
function USBZMainMenuItemRewardDisplay:ItemInitialized(InRewardItem) end
---@param InfamyPoints int32
function USBZMainMenuItemRewardDisplay:InfamyInitialized(InfamyPoints) end


---@class USBZMainMenuItemSlotInventoryWidget : USBZWidgetBase
---@field OnActiveItemSlotChanged FSBZMainMenuItemSlotInventoryWidgetOnActiveItemSlotChanged
---@field ItemSlotButtonClass TSubclassOf<USBZMainMenuInventoryItemSlotButton>
---@field Panel_ItemSlotButtons UPanelWidget
---@field ItemSlotType ESBZItemLoadoutSlot
---@field SelectedItemButton USBZMainMenuInventoryItemSlotButton
---@field ItemSlotButtonPool TArray<USBZMainMenuInventoryItemSlotButton>
USBZMainMenuItemSlotInventoryWidget = {}

function USBZMainMenuItemSlotInventoryWidget:OnItemSlotsUpdated() end
function USBZMainMenuItemSlotInventoryWidget:OnItemSlotScreenDisplayed() end
---@param SelectedButton USBZMenuButton
function USBZMainMenuItemSlotInventoryWidget:OnItemSlotButtonSelected(SelectedButton) end
---@param SelectedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuItemSlotInventoryWidget:OnItemSlotButtonFocusedChanged(SelectedButton, bIsFocused) end
---@param SelectedButton USBZMenuButton
function USBZMainMenuItemSlotInventoryWidget:NativeOnItemSlotButtonSelected(SelectedButton) end
---@return USBZInventoryBaseData
function USBZMainMenuItemSlotInventoryWidget:GetActiveItem() end
---@param InItemSlotType ESBZItemLoadoutSlot
---@param InActiveItem USBZInventoryBaseData
---@return boolean
function USBZMainMenuItemSlotInventoryWidget:DisplayItemSlotScreen(InItemSlotType, InActiveItem) end


---@class USBZMainMenuLoadoutCustomization : USBZMenuStackScreenWidget
---@field CachedPlayerLoadoutConfig FSBZPlayerLoadoutConfig
---@field LoadoutIndex int32
USBZMainMenuLoadoutCustomization = {}

function USBZMainMenuLoadoutCustomization:SaveCachedLoadout() end
---@param InLoadoutIndex int32
function USBZMainMenuLoadoutCustomization:CustomizeLoadout(InLoadoutIndex) end


---@class USBZMainMenuLoadoutDisplayWidget : USBZWidgetBase
---@field Button_PrimaryWeapon USBZMainMenuLoadoutWeaponSlotButton
---@field Button_SecondaryWeapon USBZMainMenuLoadoutWeaponSlotButton
---@field Button_OverkillWeapon USBZMainMenuInventoryItemSlotButton
---@field Button_Armour USBZMainMenuInventoryItemSlotButton
---@field Button_Throwable USBZMainMenuInventoryItemSlotButton
---@field Button_Tool USBZMainMenuInventoryItemSlotButton
---@field Button_Placeable USBZMainMenuInventoryItemSlotButton
---@field WeaponButtonSelected FSBZMainMenuLoadoutDisplayWidgetWeaponButtonSelected
---@field OverkillWeaponButtonSelected FSBZMainMenuLoadoutDisplayWidgetOverkillWeaponButtonSelected
---@field ArmourButtonSelected FSBZMainMenuLoadoutDisplayWidgetArmourButtonSelected
---@field ThrowableButtonSelected FSBZMainMenuLoadoutDisplayWidgetThrowableButtonSelected
---@field ToolButtonSelected FSBZMainMenuLoadoutDisplayWidgetToolButtonSelected
---@field PlaceableButtonSelected FSBZMainMenuLoadoutDisplayWidgetPlaceableButtonSelected
USBZMainMenuLoadoutDisplayWidget = {}

---@param InLoadoutIndex int32
function USBZMainMenuLoadoutDisplayWidget:UpdateLoadoutConfigFromIndex(InLoadoutIndex) end
---@param PlayerLoadoutConfig FSBZPlayerLoadoutConfig
function USBZMainMenuLoadoutDisplayWidget:UpdateLoadoutConfig(PlayerLoadoutConfig) end
---@param PlayerLoadoutConfig FSBZPlayerLoadoutConfig
function USBZMainMenuLoadoutDisplayWidget:OnNewConfigUpdated(PlayerLoadoutConfig) end
---@param InPlayerLoadout FSBZPlayerLoadoutConfig
---@param ModifiedPlayerLoadoutIndex int32
function USBZMainMenuLoadoutDisplayWidget:OnLocalLoadoutChanged(InPlayerLoadout, ModifiedPlayerLoadoutIndex) end
---@param InButtonSelected USBZMenuButton
function USBZMainMenuLoadoutDisplayWidget:NativeOnWeaponButtonSelected(InButtonSelected) end
---@param InButtonSelected USBZMenuButton
function USBZMainMenuLoadoutDisplayWidget:NativeOnOverkillWeaponButtonSelected(InButtonSelected) end
---@param InButtonSelected USBZMenuButton
function USBZMainMenuLoadoutDisplayWidget:NativeOnItemToolButtonSelected(InButtonSelected) end
---@param InButtonSelected USBZMenuButton
function USBZMainMenuLoadoutDisplayWidget:NativeOnItemThrowableButtonSelected(InButtonSelected) end
---@param InButtonSelected USBZMenuButton
function USBZMainMenuLoadoutDisplayWidget:NativeOnItemPlaceableButtonSelected(InButtonSelected) end
---@param InButtonSelected USBZMenuButton
function USBZMainMenuLoadoutDisplayWidget:NativeOnItemArmourButtonSelected(InButtonSelected) end


---@class USBZMainMenuLoadoutWeaponModCategoryWidget : USBZMenuStackScreenWidgetWithTutorial
---@field ButtonClass TSubclassOf<USBZLoadoutModCategoryButton>
---@field ObjectPoolAmount int32
---@field CategoryParentPanel UPanelWidget
---@field EquippableConfig FSBZEquippableConfig
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field WeaponSlotIndex int32
USBZMainMenuLoadoutWeaponModCategoryWidget = {}

---@param ModSlot USBZModularPartSlotBase
function USBZMainMenuLoadoutWeaponModCategoryWidget:OnCategoryButtonSelected(ModSlot) end
---@param InButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuLoadoutWeaponModCategoryWidget:OnCategoryButtonFocused(InButton, bIsFocused) end
---@param Index int32
---@return USBZLoadoutModCategoryButton
function USBZMainMenuLoadoutWeaponModCategoryWidget:GetAvailibleButton(Index) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
---@return boolean
function USBZMainMenuLoadoutWeaponModCategoryWidget:CustomizeWeaponInSlot(InEquippableSlot, InWeaponSlotIndex) end


---@class USBZMainMenuLoadoutWeaponSlotButton : USBZMenuButton
---@field WeaponSlot FSBZWeaponInventorySlot
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field WeaponSlotIndex int32
USBZMainMenuLoadoutWeaponSlotButton = {}

---@param bIsActiveWeaponSlot boolean
function USBZMainMenuLoadoutWeaponSlotButton:SetActiveWeaponSlot(bIsActiveWeaponSlot) end
function USBZMainMenuLoadoutWeaponSlotButton:OnWeaponSlotInitialized() end
---@return boolean
function USBZMainMenuLoadoutWeaponSlotButton:IsPresetWeaponSlot() end
---@return boolean
function USBZMainMenuLoadoutWeaponSlotButton:IsEmpty() end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
function USBZMainMenuLoadoutWeaponSlotButton:InitializeWeaponSlot(InEquippableSlot, InWeaponSlotIndex) end
---@return int32
function USBZMainMenuLoadoutWeaponSlotButton:GetWeaponSlotIndex() end
---@return USBZInventoryBaseData
function USBZMainMenuLoadoutWeaponSlotButton:GetWeaponInventoryData() end
---@return int32
function USBZMainMenuLoadoutWeaponSlotButton:GetWeaponInSlotLevel() end
---@return USBZEquippableData
function USBZMainMenuLoadoutWeaponSlotButton:GetWeaponInSlot() end
---@return ESBZEquippableLoadoutSlot
function USBZMainMenuLoadoutWeaponSlotButton:GetEquippableSlot() end
---@param EntitlementID FGuid
---@param ItemID FGuid
function USBZMainMenuLoadoutWeaponSlotButton:GetEntitlementAndWeaponID(EntitlementID, ItemID) end


---@class USBZMainMenuMaskCustomization : USBZMenuStackScreenWidget
---@field MaskSlotIndex int32
USBZMainMenuMaskCustomization = {}



---@class USBZMainMenuMaskInventoryScreen : USBZMenuStackInventoryBaseScreen
---@field MaskSlotButtonClass TSubclassOf<USBZMainMenuInventoryMaskSlotButton>
---@field Panel_MaskSlotButtons UPanelWidget
---@field Button_BuySlots USBZMenuButton
---@field Button_DefaultMask USBZMenuButton
---@field DiscardMaskPopUpBodyWidgetClass TSubclassOf<USBZBaseInventoryItemVisualsWidget>
---@field DiscardMaskPopUpHeader FText
---@field DiscardMaskPopUpAcceptAction FSBZButtonControlReference
---@field DiscardMaskPopUpCancelAction FSBZButtonControlReference
---@field CustomizableMaskData USBZMaskData
---@field MaskMould USBZCosmeticsPartSlot
---@field ActiveMaskSlotButton USBZMainMenuInventoryMaskSlotButton
---@field MaskIndexToDiscard int32
---@field DiscardMaskPopUpBody USBZBaseInventoryItemVisualsWidget
---@field MaskSlotButtonPool TArray<USBZMainMenuInventoryMaskSlotButton>
---@field SlotItem FSBZInventorySlotStoreItem
USBZMainMenuMaskInventoryScreen = {}

---@param InMaskIndex int32
function USBZMainMenuMaskInventoryScreen:TryDiscardMaskInSlot(InMaskIndex) end
function USBZMainMenuMaskInventoryScreen:OnTryBuyMaskSlot() end
---@param bWasSuccessful boolean
function USBZMainMenuMaskInventoryScreen:OnSlotPurchaseComplete(bWasSuccessful) end
---@param Item FSBZInventorySlotStoreItem
function USBZMainMenuMaskInventoryScreen:OnSlotPriceChanged(Item) end
---@param InActionName FName
function USBZMainMenuMaskInventoryScreen:OnShowBuySlotPopUpClosed(InActionName) end
---@param bWasSuccessful boolean
function USBZMainMenuMaskInventoryScreen:OnItemDiscarded(bWasSuccessful) end
---@param MaskSlotIndex int32
function USBZMainMenuMaskInventoryScreen:OnEditButtonPressed(MaskSlotIndex) end
---@param ClosingActionName FName
function USBZMainMenuMaskInventoryScreen:OnDiscardMaskPopUpClosed(ClosingActionName) end
---@param Result ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuMaskInventoryScreen:OnBuySlotItemCompleted(Result, ItemId) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuMaskInventoryScreen:NativeOnMaskSlotButtonSelected(InSelectedButton) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuMaskInventoryScreen:NativeOnMaskSlotButtonAltSelected(InSelectedButton) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuMaskInventoryScreen:NativeOnMaskDefaultButtonSelected(InSelectedButton) end
---@param Result ESBZMetaRequestResult
function USBZMainMenuMaskInventoryScreen:NativeOnDefaultSet(Result) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuMaskInventoryScreen:NativeOnBuySlotsButtonSelected(InSelectedButton) end
---@param InFocusedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuMaskInventoryScreen:NativeMaskSlotButtonFocusedChanged(InFocusedButton, bIsFocused) end
---@param InFocusedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuMaskInventoryScreen:MaskSlotButtonFocusedChanged(InFocusedButton, bIsFocused) end
---@param DiscardItemResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuMaskInventoryScreen:DiscardItemDone(DiscardItemResult, ItemId) end
---@param InMaskIndex int32
---@return boolean
function USBZMainMenuMaskInventoryScreen:CanDiscardMaskInSlot(InMaskIndex) end


---@class USBZMainMenuMatchmakingStatusWidget : USBZWidgetBase
USBZMainMenuMatchmakingStatusWidget = {}

function USBZMainMenuMatchmakingStatusWidget:OnTravelToGameStarted() end
function USBZMainMenuMatchmakingStatusWidget:OnPlayerReady() end
function USBZMainMenuMatchmakingStatusWidget:OnExitedMatchmaking() end
function USBZMainMenuMatchmakingStatusWidget:OnEnteredMatchmaking() end
---@param Progress FSBZAsyncLoadingProgress
function USBZMainMenuMatchmakingStatusWidget:OnAsyncLoadingProgress(Progress) end
function USBZMainMenuMatchmakingStatusWidget:OnAsyncLoadingDone() end
function USBZMainMenuMatchmakingStatusWidget:OnAsyncLoadingCancel() end


---@class USBZMainMenuPlayerAnimation : UAnimInstance
---@field PoseAnimation UAnimSequenceBase
---@field EquippableLeftGripPose UAnimSequenceBase
---@field EquippableRightGripPose UAnimSequenceBase
---@field LeftHandIKTransform FTransform
---@field RightHandIKTransform FTransform
---@field LeftHandIKAlpha float
---@field RightHandIKAlpha float
---@field RightHandGripAlpha float
---@field LeftHandGripAlpha float
---@field Player ASBZMainMenuPlayerCharacter
USBZMainMenuPlayerAnimation = {}



---@class USBZMainMenuPreMatchWidget : USBZWidgetBase
USBZMainMenuPreMatchWidget = {}

---@param Progress FSBZAsyncLoadingProgress
function USBZMainMenuPreMatchWidget:OnAsyncLoadingProgress(Progress) end
function USBZMainMenuPreMatchWidget:OnAsyncLoadingDone() end
function USBZMainMenuPreMatchWidget:OnAsyncLoadingCancel() end
---@return boolean
function USBZMainMenuPreMatchWidget:IsAsyncLoadingDone() end


---@class USBZMainMenuPrePlaningLoadoutSelection : USBZMenuButton
---@field OnFocusedPlayerLoadoutConfigChanged FSBZMainMenuPrePlaningLoadoutSelectionOnFocusedPlayerLoadoutConfigChanged
---@field FocusedPlayerLoadoutIndex int32
---@field bIsValidLoadout boolean
USBZMainMenuPrePlaningLoadoutSelection = {}

---@param NewFocusedPlayerLoadoutIndex int32
function USBZMainMenuPrePlaningLoadoutSelection:SetFocusedPlayerLoadoutIndex(NewFocusedPlayerLoadoutIndex) end
---@param InPlayerLoadout FSBZPlayerLoadoutConfig
---@param ModifiedPlayerLoadoutIndex int32
function USBZMainMenuPrePlaningLoadoutSelection:OnLocalLoadoutUpdated(InPlayerLoadout, ModifiedPlayerLoadoutIndex) end
---@param NewPlayerLoadout FSBZPlayerLoadoutConfig
function USBZMainMenuPrePlaningLoadoutSelection:NativeOnFocusedPlayerLoadoutConfigChanged(NewPlayerLoadout) end
---@param NewActiveLoadoutIndex int32
function USBZMainMenuPrePlaningLoadoutSelection:NativeOnActiveLoadoutChanged(NewActiveLoadoutIndex) end
---@return boolean
function USBZMainMenuPrePlaningLoadoutSelection:IsFocusedPlayerLoadoutValid() end
---@return int32
function USBZMainMenuPrePlaningLoadoutSelection:GetFocusedPlayerLoadoutIndex() end
---@param NewPlayerLoadout FSBZPlayerLoadoutConfig
function USBZMainMenuPrePlaningLoadoutSelection:FocusedPlayerLoadoutConfigChanged(NewPlayerLoadout) end
---@param NewActiveLoadoutIndex int32
function USBZMainMenuPrePlaningLoadoutSelection:ActiveLoadoutChanged(NewActiveLoadoutIndex) end


---@class USBZMainMenuPrePlanningItemSelectionButton : USBZMenuButton
---@field PreplanningItem USBZPreplanningAssetData
---@field StackCount int32
USBZMainMenuPrePlanningItemSelectionButton = {}

---@param bIsRemoveAssetButton boolean
function USBZMainMenuPrePlanningItemSelectionButton:SetRemoveAssetButton(bIsRemoveAssetButton) end
---@param InPreplanningData USBZPreplanningAssetData
function USBZMainMenuPrePlanningItemSelectionButton:OnPrePlanningItemInitialized(InPreplanningData) end
---@param InPreplanningItem USBZPreplanningAssetData
---@param InStackCount int32
function USBZMainMenuPrePlanningItemSelectionButton:InitializePrePlanningItem(InPreplanningItem, InStackCount) end
---@return USBZPreplanningAssetData
function USBZMainMenuPrePlanningItemSelectionButton:GetPreplanningItem() end


---@class USBZMainMenuPrePlanningItemSelectionWidget : USBZMenuStackWidget
---@field Panel_ButtonList UPanelWidget
---@field PreplanningItemButtonClass TSubclassOf<USBZMainMenuPrePlanningItemSelectionButton>
---@field ActiveMap TMap<FUniqueNetIdRepl, USBZPreplanningAssetData>
---@field PrePlanningItemButtonPool TArray<USBZMainMenuPrePlanningItemSelectionButton>
---@field CachedPlayerInventory USBZPlayerInventory
USBZMainMenuPrePlanningItemSelectionWidget = {}

function USBZMainMenuPrePlanningItemSelectionWidget:UpdateAvailablePrePlanningAssetList() end
---@param bEnabled boolean
function USBZMainMenuPrePlanningItemSelectionWidget:SetPreplanningSelectionEnabled(bEnabled) end
---@param bEnabled boolean
function USBZMainMenuPrePlanningItemSelectionWidget:OnPreplanningSelectionEnabledChanged(bEnabled) end
---@param InButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuPrePlanningItemSelectionWidget:OnPrePlanningItemButtonFocused(InButton, bIsFocused) end
---@param PlayerID FUniqueNetIdRepl
function USBZMainMenuPrePlanningItemSelectionWidget:OnPreplanningAssetRemovedByPlayer(PlayerID) end
function USBZMainMenuPrePlanningItemSelectionWidget:OnPreplanningAssetDeclinedByServer() end
---@param PlayerID FUniqueNetIdRepl
---@param PreplanningAsset USBZPreplanningAssetData
function USBZMainMenuPrePlanningItemSelectionWidget:OnPreplanningAssetAddedByPlayer(PlayerID, PreplanningAsset) end
---@param PlayerID FUniqueNetIdRepl
function USBZMainMenuPrePlanningItemSelectionWidget:NativePreplanningAssetRemovedByPlayer(PlayerID) end
---@param PlayerID FUniqueNetIdRepl
---@param AssetSku FString
function USBZMainMenuPrePlanningItemSelectionWidget:NativePreplanningAssetAddedByPlayer(PlayerID, AssetSku) end
---@param InButton USBZMenuButton
function USBZMainMenuPrePlanningItemSelectionWidget:NativeOnPrePlanningItemButtonSelected(InButton) end


---@class USBZMainMenuPrePlanningWidget : USBZMenuStackWidget
USBZMainMenuPrePlanningWidget = {}

function USBZMainMenuPrePlanningWidget:OnAsyncLoadingDone() end
---@return boolean
function USBZMainMenuPrePlanningWidget:IsAsyncLoadingDone() end
---@return ESBZDifficulty
function USBZMainMenuPrePlanningWidget:GetDifficulty() end


---@class USBZMainMenuPreplanningPlayerStatusWidget : USBZWidgetBase
---@field PlayerIndex int32
---@field Widget_PrimaryWeaponVisuals USBZBaseInventoryItemVisualsWidget
---@field Widget_SecondaryWeaponVisuals USBZBaseInventoryItemVisualsWidget
---@field Widget_ThrowableVisuals USBZBaseInventoryItemVisualsWidget
---@field Widget_PlaceableVisuals USBZBaseInventoryItemVisualsWidget
---@field Widget_ToolVisuals USBZBaseInventoryItemVisualsWidget
---@field PrimaryWeapon USBZEquippableData
---@field SecondaryWeapon USBZEquippableData
---@field Tool USBZToolData
---@field Placeable USBZEquippableData
---@field Throwable USBZThrowableData
USBZMainMenuPreplanningPlayerStatusWidget = {}

function USBZMainMenuPreplanningPlayerStatusWidget:SetEmpty() end
function USBZMainMenuPreplanningPlayerStatusWidget:OnLobbyPlayerStatusUpdated() end
---@param LobbyInfoArray TArray<FSBZLobbyCharacterInfoUi>
function USBZMainMenuPreplanningPlayerStatusWidget:OnLoadoutChanged(LobbyInfoArray) end


---@class USBZMainMenuQuickMatch : USBZMenuStackWidget
USBZMainMenuQuickMatch = {}


---@class USBZMainMenuSuitCosmeticCustomizationScreen : USBZMenuStackScreenWidget
---@field Widget_CosmeticPanel USBZMainMenuCosmeticPanel
---@field SuitPartConfig USBZSuitPartConfig
---@field CosmeticPartSlot USBZCosmeticsPartSlot
---@field SuitSlotIndex int32
---@field DefaultButtonParams FSBZCosmeticPanelDefaultParams
---@field PopUpBodyWidgetClass TSubclassOf<USBZBaseInventoryItemVisualsWidget>
---@field PopUpHeader FText
---@field PopUpAcceptAction FSBZButtonControlReference
---@field PopUpCancelAction FSBZButtonControlReference
---@field PreviousEquippedConfig USBZCosmeticsDataAsset
---@field PopUpBody USBZBaseInventoryItemVisualsWidget
USBZMainMenuSuitCosmeticCustomizationScreen = {}

---@param ClosingActionName FName
function USBZMainMenuSuitCosmeticCustomizationScreen:OnPopUpClosed(ClosingActionName) end
---@param InEquippedItem USBZCosmeticsDataAsset
function USBZMainMenuSuitCosmeticCustomizationScreen:EquippedItemChanged(InEquippedItem) end
function USBZMainMenuSuitCosmeticCustomizationScreen:CosmeticPanelDefaultButtonSelected() end
---@param SelectedButton USBZMainMenuCosmeticItemButton
function USBZMainMenuSuitCosmeticCustomizationScreen:CosmeticPanelButtonSelected(SelectedButton) end


---@class USBZMainMenuSuitCustomization : USBZMenuStackScreenWidget
---@field SuitSlotIndex int32
---@field SuitSlot FSBZSuitInventorySlot
USBZMainMenuSuitCustomization = {}

---@param SuitPart ESBZSuitPart
---@param InCosmeticPartSlot USBZCosmeticsPartSlot
---@return USBZModularPartDataAsset
function USBZMainMenuSuitCustomization:GetCosmeticItemInSlot(SuitPart, InCosmeticPartSlot) end


---@class USBZMainMenuSuitInventoryScreen : USBZMenuStackInventoryBaseScreen
---@field SuitSlotButtonClass TSubclassOf<USBZMainMenuInventorySuitSlotButton>
---@field Panel_SuitSlotButtons UPanelWidget
---@field Button_BuySlots USBZMenuButton
---@field Button_DefaultSuit USBZMenuButton
---@field DiscardSuitPopUpBodyWidgetClass TSubclassOf<USBZBaseInventoryItemVisualsWidget>
---@field DiscardSuitPopUpHeader FText
---@field DiscardSuitPopUpAcceptAction FSBZButtonControlReference
---@field DiscardSuitPopUpCancelAction FSBZButtonControlReference
---@field SuitIndexToDiscard int32
---@field DiscardSuitPopUpBody USBZBaseInventoryItemVisualsWidget
---@field ActiveSuitSlotButton USBZMainMenuInventorySuitSlotButton
---@field SuitSlotButtonPool TArray<USBZMainMenuInventorySuitSlotButton>
---@field SlotItem FSBZInventorySlotStoreItem
USBZMainMenuSuitInventoryScreen = {}

---@param InSuitIndex int32
function USBZMainMenuSuitInventoryScreen:TryDiscardSuitInSlot(InSuitIndex) end
---@param InFocusedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuSuitInventoryScreen:SuitSlotButtonFocusedChanged(InFocusedButton, bIsFocused) end
function USBZMainMenuSuitInventoryScreen:OnTryBuySuitSlot() end
---@param bWasSuccessful boolean
function USBZMainMenuSuitInventoryScreen:OnSlotPurchaseComplete(bWasSuccessful) end
---@param Item FSBZInventorySlotStoreItem
function USBZMainMenuSuitInventoryScreen:OnSlotPriceChanged(Item) end
---@param InActionName FName
function USBZMainMenuSuitInventoryScreen:OnShowBuySlotPopUpClosed(InActionName) end
---@param bWasSuccessful boolean
function USBZMainMenuSuitInventoryScreen:OnItemDiscarded(bWasSuccessful) end
---@param ClosingActionName FName
function USBZMainMenuSuitInventoryScreen:OnDiscardSuitPopUpClosed(ClosingActionName) end
---@param Result ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuSuitInventoryScreen:OnBuySlotItemCompleted(Result, ItemId) end
---@param InFocusedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuSuitInventoryScreen:NativeSuitSlotButtonFocusedChanged(InFocusedButton, bIsFocused) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuSuitInventoryScreen:NativeOnSuitSlotButtonSelected(InSelectedButton) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuSuitInventoryScreen:NativeOnSuitDefaultButtonSelected(InSelectedButton) end
---@param Result ESBZMetaRequestResult
function USBZMainMenuSuitInventoryScreen:NativeOnDefaultSet(Result) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuSuitInventoryScreen:NativeOnBuySlotsButtonSelected(InSelectedButton) end
---@param DiscardItemResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuSuitInventoryScreen:DiscardItemDone(DiscardItemResult, ItemId) end
---@param IndexToDiscard int32
---@return boolean
function USBZMainMenuSuitInventoryScreen:CanDiscardSuitInSlot(IndexToDiscard) end


---@class USBZMainMenuWeaponInventoryModGridWidget : USBZWidgetBase
---@field AmountToShow int32
---@field ItemArray TArray<USBZInventoryBaseData>
USBZMainMenuWeaponInventoryModGridWidget = {}

---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
function USBZMainMenuWeaponInventoryModGridWidget:InitializeGridWithWeaponSlot(InEquippableSlot, InWeaponSlotIndex) end
---@param InMaskSlotIndex int32
function USBZMainMenuWeaponInventoryModGridWidget:InitializeGridWithMaskSlot(InMaskSlotIndex) end
function USBZMainMenuWeaponInventoryModGridWidget:DisplayGrid() end


---@class USBZMainMenuWeaponInventoryScreen : USBZMenuStackInventoryBaseScreen
---@field WeaponSlotButtonClass TSubclassOf<USBZMainMenuLoadoutWeaponSlotButton>
---@field Panel_WeaponSlotButtons UPanelWidget
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field CurrentLoadoutIndex int32
---@field ActiveWeaponSlotIndex int32
---@field ActiveLoadoutWeaponSlotIndex int32
---@field ActiveWeaponSlots int32
---@field WeaponSlotCount int32
---@field Button_WeaponSlotStoreItem USBZBlackMarketStoreItemButton
---@field DiscardWeaponPopUpBodyWidgetClass TSubclassOf<USBZBaseInventoryItemVisualsWidget>
---@field DiscardWeaponPopUpHeader FText
---@field DiscardWeaponPopUpAcceptAction FSBZButtonControlReference
---@field DiscardWeaponPopUpCancelAction FSBZButtonControlReference
---@field WeaponToDiscardIndex int32
---@field DiscardWeaponPopUpBody USBZBaseInventoryItemVisualsWidget
---@field WeaponSlotButtonPool TArray<USBZMainMenuLoadoutWeaponSlotButton>
USBZMainMenuWeaponInventoryScreen = {}

---@param MetaResult ESBZMetaRequestResult
---@param InventoryItemData USBZInventoryBaseData
function USBZMainMenuWeaponInventoryScreen:WeaponSlotStoreItemTransactionComplete(MetaResult, InventoryItemData) end
---@param SelectedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuWeaponInventoryScreen:WeaponSlotButtonFocusedChanged(SelectedButton, bIsFocused) end
---@param InNewIndex int32
function USBZMainMenuWeaponInventoryScreen:UpdateActiveWeaponSlotIndex(InNewIndex) end
---@param SlotIndex int32
---@return boolean
function USBZMainMenuWeaponInventoryScreen:TryDiscardWeaponInIndex(SlotIndex) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuWeaponInventoryScreen:TryBuyWeaponSlot(InSelectedButton) end
function USBZMainMenuWeaponInventoryScreen:OnWeaponSlotScreenDisplayed() end
---@param bIsWeaponDiscarded boolean
function USBZMainMenuWeaponInventoryScreen:OnWeaponInSlotDiscarded(bIsWeaponDiscarded) end
function USBZMainMenuWeaponInventoryScreen:OnTryBuyWeaponSlot() end
---@param InActionName FName
function USBZMainMenuWeaponInventoryScreen:OnShowBuySlotPopUpClosed(InActionName) end
function USBZMainMenuWeaponInventoryScreen:OnNewSlotPurchased() end
---@param ClosingActionName FName
function USBZMainMenuWeaponInventoryScreen:OnDiscardWeaponPopUpClosed(ClosingActionName) end
---@param Result ESBZMetaRequestResult
function USBZMainMenuWeaponInventoryScreen:OnBuyWeaponSlotTransactionFailed(Result) end
---@param Result ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuWeaponInventoryScreen:OnBuyWeaponSlotItemCompleted(Result, ItemId) end
function USBZMainMenuWeaponInventoryScreen:OnActiveWeaponChanged() end
---@param MetaResult ESBZMetaRequestResult
---@param InventoryItemData USBZInventoryBaseData
function USBZMainMenuWeaponInventoryScreen:NativeOnWeaponSlotStoreItemTransactionComplete(MetaResult, InventoryItemData) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuWeaponInventoryScreen:NativeOnWeaponSlotButtonSelected(InSelectedButton) end
---@param Result ESBZMetaRequestResult
function USBZMainMenuWeaponInventoryScreen:HandleProgressionSave(Result) end
---@param InLoadoutIndex int32
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@return boolean
function USBZMainMenuWeaponInventoryScreen:DisplayWeaponInventoryScreen(InLoadoutIndex, InEquippableSlot) end
---@param BuyItemResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuWeaponInventoryScreen:DiscardItemDone(BuyItemResult, ItemId) end
---@param InWeaponIndex int32
---@return boolean
function USBZMainMenuWeaponInventoryScreen:CanDiscardWeaponIndex(InWeaponIndex) end


---@class USBZMainMenuWeaponInventoryWidget : USBZMenuStackScreenWidget
---@field WeaponSlotButtonClass TSubclassOf<USBZMainMenuLoadoutWeaponSlotButton>
---@field Panel_WeaponSlotButtons UPanelWidget
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field ActiveWeaponSlots int32
---@field WeaponSlotCount int32
---@field SlotStoreItem FSBZInventorySlotStoreItem
---@field ActiveWeaponSlotIndex int32
---@field LoadoutSlotIndex int32
---@field ActiveLoadoutActiveWeaponSlotIndex int32
---@field WeaponSlotButtonPool TArray<USBZMainMenuLoadoutWeaponSlotButton>
USBZMainMenuWeaponInventoryWidget = {}

function USBZMainMenuWeaponInventoryWidget:UpdateWeaponSlotButtons() end
---@param InNewIndex int32
function USBZMainMenuWeaponInventoryWidget:UpdateActiveWeaponSlotIndex(InNewIndex) end
function USBZMainMenuWeaponInventoryWidget:TryBuyItemSlots() end
function USBZMainMenuWeaponInventoryWidget:OnWeaponSlotsUpdated() end
---@param SelectedButton USBZMenuButton
function USBZMainMenuWeaponInventoryWidget:OnWeaponSlotButtonSelected(SelectedButton) end
---@param SelectedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuWeaponInventoryWidget:OnWeaponSlotButtonFocusedChanged(SelectedButton, bIsFocused) end
---@param bIsWeaponDiscarded boolean
function USBZMainMenuWeaponInventoryWidget:OnWeaponInSlotDiscarded(bIsWeaponDiscarded) end
function USBZMainMenuWeaponInventoryWidget:OnWeaponConfigSlotCountChanged() end
---@param InSlotStoreItem FSBZInventorySlotStoreItem
function USBZMainMenuWeaponInventoryWidget:OnSlotStoreItemSet(InSlotStoreItem) end
---@param bWasSuccess boolean
function USBZMainMenuWeaponInventoryWidget:OnBuyWeaponConfigSlotDone(bWasSuccess) end
---@param SelectedButton USBZMenuButton
function USBZMainMenuWeaponInventoryWidget:NativeOnWeaponSlotButtonSelected(SelectedButton) end
---@param BuyWeaponResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuWeaponInventoryWidget:NativeOnBuyWeaponConfigSlotDone(BuyWeaponResult, ItemId) end
---@return int32
function USBZMainMenuWeaponInventoryWidget:GetSlotPrice() end
---@return int32
function USBZMainMenuWeaponInventoryWidget:GetActiveWeaponSlotIndex() end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InLoadoutIndex int32
---@return boolean
function USBZMainMenuWeaponInventoryWidget:DisplayWeaponSlotScreen(InEquippableSlot, InLoadoutIndex) end
---@param SlotIndex int32
---@return boolean
function USBZMainMenuWeaponInventoryWidget:DiscardWeaponInSlot(SlotIndex) end
---@param BuyItemResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuWeaponInventoryWidget:DiscardItemDone(BuyItemResult, ItemId) end
---@param IndexToDiscard int32
---@return boolean
function USBZMainMenuWeaponInventoryWidget:CanDiscardWeaponIndex(IndexToDiscard) end


---@class USBZMainMenuWeaponModifierScreen : USBZMenuStackScreenWidget
---@field Panel_WeaponProgressionPartButtons UPanelWidget
---@field WeaponPartProgressionButtonClass TSubclassOf<USBZMainMenuWeaponPartProgressionButton>
---@field EquippedWeaponProgressionButton USBZMainMenuWeaponPartProgressionButton
---@field Panel_TransactionInProgress UPanelWidget
---@field OkControlReference FSBZButtonControlReference
---@field PurchaseItemPopUpBodyWidgetClass TSubclassOf<USBZLoadoutConfirmationPopupBody>
---@field PurchaseItemPopUpHeader FText
---@field PurchaseItemPopUpAcceptAction FSBZButtonControlReference
---@field PurchaseItemPopUpCancelAction FSBZButtonControlReference
---@field WeaponPartSlot USBZWeaponPartSlot
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field WeaponSlotIndex int32
---@field WeaponPartProgressionButtonPool TArray<USBZMainMenuWeaponPartProgressionButton>
---@field WeaponPartInPurchase USBZWeaponPartDataAsset
USBZMainMenuWeaponModifierScreen = {}

---@param InEquippedWeaponProgressionButton USBZMainMenuWeaponPartProgressionButton
function USBZMainMenuWeaponModifierScreen:SetNewEquippedButton(InEquippedWeaponProgressionButton) end
function USBZMainMenuWeaponModifierScreen:SetDefaultFocus() end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuWeaponModifierScreen:OnWeaponPartProgressionButtonSelected(InSelectedButton) end
---@param InButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuWeaponModifierScreen:OnWeaponPartProgressionButtonFocusedChanged(InButton, bIsFocused) end
---@param SelectedButton USBZMainMenuWeaponPartProgressionButton
function USBZMainMenuWeaponModifierScreen:OnWeaponPartButtonSelected(SelectedButton) end
---@param EquippedButton USBZMainMenuWeaponPartProgressionButton
function USBZMainMenuWeaponModifierScreen:OnWeaponPartButtonEquipped(EquippedButton) end
function USBZMainMenuWeaponModifierScreen:OnScreenInitialized() end
---@param ClosingActionName FName
function USBZMainMenuWeaponModifierScreen:OnPurchaseItemPopUpClosed(ClosingActionName) end
---@param BuyWeaponResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuWeaponModifierScreen:OnPayForAttachItemDone(BuyWeaponResult, ItemId) end
---@param NewFocusedButton USBZMainMenuWeaponPartProgressionButton
function USBZMainMenuWeaponModifierScreen:NewWeaponPartFocused(NewFocusedButton) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
---@param InWeaponPartSlot USBZWeaponPartSlot
---@return boolean
function USBZMainMenuWeaponModifierScreen:InitializeWeaponPartCustomization(InEquippableSlot, InWeaponSlotIndex, InWeaponPartSlot) end
---@param OutEquippableSlot ESBZEquippableLoadoutSlot
---@param OutWeaponSlotIndex int32
function USBZMainMenuWeaponModifierScreen:GetWeaponSlotInfo(OutEquippableSlot, OutWeaponSlotIndex) end
---@return USBZWeaponPartSlot
function USBZMainMenuWeaponModifierScreen:GetCurrentWeaponPartSlot() end
---@param WeaponPartDataAsset USBZWeaponPartDataAsset
---@param OutSlotNames TArray<FText>
function USBZMainMenuWeaponModifierScreen:GetBlockedSlotNamesForWeaponPart(WeaponPartDataAsset, OutSlotNames) end


---@class USBZMainMenuWeaponPartProgressionButton : USBZMenuButton
---@field WeaponPartProgression FSBZWeaponPartProgressionCurrent
---@field bIsEquipped boolean
---@field bIsDefault boolean
USBZMainMenuWeaponPartProgressionButton = {}

---@param InWeaponPartProgression FSBZWeaponPartProgressionCurrent
function USBZMainMenuWeaponPartProgressionButton:WeaponPartProgressionInitialized(InWeaponPartProgression) end
function USBZMainMenuWeaponPartProgressionButton:SetIsDefaultButton() end
---@param bInIsEquipped boolean
function USBZMainMenuWeaponPartProgressionButton:SetEquipped(bInIsEquipped) end
---@param bInIsEquipped boolean
function USBZMainMenuWeaponPartProgressionButton:OnEquippedChanged(bInIsEquipped) end
---@return boolean
function USBZMainMenuWeaponPartProgressionButton:IsDefaultButton() end
---@param InWeaponPartProgression FSBZWeaponPartProgressionCurrent
function USBZMainMenuWeaponPartProgressionButton:InitializeWeaponPartProgression(InWeaponPartProgression) end
---@return FSBZWeaponPartProgressionCurrent
function USBZMainMenuWeaponPartProgressionButton:GetWeaponPartProgression() end
---@return USBZWeaponPartDataAsset
function USBZMainMenuWeaponPartProgressionButton:GetWeaponPart() end
---@return int32
function USBZMainMenuWeaponPartProgressionButton:GetUnlockLevel() end
---@return ESBZWeaponPartApplyStatus
function USBZMainMenuWeaponPartProgressionButton:GetPartApplyStatus() end
function USBZMainMenuWeaponPartProgressionButton:DefaultButtonSet() end


---@class USBZMainMenuWeaponProgressionDisplayWidget : USBZWidgetBase
---@field WeaponLevel int32
---@field MaxWeaponLevel int32
---@field CurrentWeaponXP int32
---@field WeaponXPAtNextLevel int32
---@field WeaponLevelProgression float
---@field BaseItemData USBZInventoryBaseData
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field WeaponSlotIndex int32
---@field MaxModifierSlots int32
---@field WeaponSlotPartArray TArray<FSBZModularSlotPart>
---@field WeaponPartArray TArray<USBZEquippablePartDataAsset>
---@field WeaponStatDamageFalloff TArray<FSBZDamageDistance>
---@field EquippableConfig FSBZEquippableConfig
USBZMainMenuWeaponProgressionDisplayWidget = {}

---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
function USBZMainMenuWeaponProgressionDisplayWidget:UpdateWeaponVisuals(InEquippableSlot, InWeaponSlotIndex) end
---@param InBaseWeaponData USBZBaseWeaponData
function USBZMainMenuWeaponProgressionDisplayWidget:UpdateBaseWeaponVisuals(InBaseWeaponData) end
function USBZMainMenuWeaponProgressionDisplayWidget:SetEmpty() end
function USBZMainMenuWeaponProgressionDisplayWidget:OnNewWeaponData() end
function USBZMainMenuWeaponProgressionDisplayWidget:OnDataEmpty() end
function USBZMainMenuWeaponProgressionDisplayWidget:OnBaseData() end
---@param InBaseData USBZInventoryBaseData
function USBZMainMenuWeaponProgressionDisplayWidget:InitilizeWithBaseInventoryData(InBaseData) end


---@class USBZMainMenuWeaponProgressionScreen : USBZMenuStackScreenWidget
---@field Panel_WeaponProgressionPartButtons UHorizontalBox
---@field Widget_WeaponProgressionDisplay USBZMainMenuWeaponProgressionDisplayWidget
---@field WeaponPartProgressionButtonClass TSubclassOf<USBZMainMenuWeaponPartProgressionButton>
---@field DefaultButtonMargin FMargin
---@field WeaponPartProgressionButtonPool TArray<USBZMainMenuWeaponPartProgressionButton>
USBZMainMenuWeaponProgressionScreen = {}

---@param InButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuWeaponProgressionScreen:OnWeaponPartProgressionButtonFocusedChanged(InButton, bIsFocused) end
---@param FocusedWeaponPart USBZWeaponPartDataAsset
function USBZMainMenuWeaponProgressionScreen:FocusedWeaponPartChanged(FocusedWeaponPart) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
---@return boolean
function USBZMainMenuWeaponProgressionScreen:DisplayWeaponProgressionScreen(InEquippableSlot, InWeaponSlotIndex) end


---@class USBZMainMenuWeaponSlotInventoryWidget : USBZWidgetBase
---@field OnActiveWeaponSlotChanged FSBZMainMenuWeaponSlotInventoryWidgetOnActiveWeaponSlotChanged
---@field WeaponSlotButtonClass TSubclassOf<USBZMainMenuLoadoutWeaponSlotButton>
---@field Panel_WeaponSlotButtons UPanelWidget
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field ActiveWeaponSlotIndex int32
---@field ActiveLoadoutWeaponSlotIndex int32
---@field ActiveWeaponSlots int32
---@field WeaponSlotCount int32
---@field Button_WeaponSlotStoreItem USBZBlackMarketStoreItemButton
---@field WeaponSlotButtonPool TArray<USBZMainMenuLoadoutWeaponSlotButton>
USBZMainMenuWeaponSlotInventoryWidget = {}

---@param MetaResult ESBZMetaRequestResult
---@param InventoryItemData USBZInventoryBaseData
function USBZMainMenuWeaponSlotInventoryWidget:WeaponSlotStoreItemTransactionComplete(MetaResult, InventoryItemData) end
---@param SelectedButton USBZMenuButton
---@param bIsFocused boolean
function USBZMainMenuWeaponSlotInventoryWidget:WeaponSlotButtonFocusedChanged(SelectedButton, bIsFocused) end
---@param InNewIndex int32
function USBZMainMenuWeaponSlotInventoryWidget:UpdateActiveWeaponSlotIndex(InNewIndex) end
function USBZMainMenuWeaponSlotInventoryWidget:OnWeaponSlotScreenDisplayed() end
---@param bIsWeaponDiscarded boolean
function USBZMainMenuWeaponSlotInventoryWidget:OnWeaponInSlotDiscarded(bIsWeaponDiscarded) end
---@param MetaResult ESBZMetaRequestResult
---@param InventoryItemData USBZInventoryBaseData
function USBZMainMenuWeaponSlotInventoryWidget:NativeOnWeaponSlotStoreItemTransactionComplete(MetaResult, InventoryItemData) end
---@param InSelectedButton USBZMenuButton
function USBZMainMenuWeaponSlotInventoryWidget:NativeOnWeaponSlotButtonSelected(InSelectedButton) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InSetActiveWeaponIndex int32
---@return boolean
function USBZMainMenuWeaponSlotInventoryWidget:DisplayWeaponSlotScreen(InEquippableSlot, InSetActiveWeaponIndex) end
---@param SlotIndex int32
---@return boolean
function USBZMainMenuWeaponSlotInventoryWidget:DiscardWeaponInSlot(SlotIndex) end
---@param BuyItemResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuWeaponSlotInventoryWidget:DiscardItemDone(BuyItemResult, ItemId) end
---@param IndexToDiscard int32
---@return boolean
function USBZMainMenuWeaponSlotInventoryWidget:CanDiscardWeaponIndex(IndexToDiscard) end


---@class USBZMainMenuWeaponStatsWidget : USBZWidgetBase
---@field BaseEquippableConfig FSBZEquippableConfig
---@field BaseWeaponStats FSBZWeaponStats
---@field BaseAmmoLoadedMax int32
---@field BaseAmmoInventoryMax int32
---@field BaseFireType ESBZFireType
---@field CompareEquippableConfig FSBZEquippableConfig
---@field CompareWeaponStats FSBZWeaponStats
---@field CompareAmmoLoadedMax int32
---@field CompareAmmoInventoryMax int32
---@field CompareFireType ESBZFireType
---@field UIWeaponStats USBZUIWeaponStatsAsset
USBZMainMenuWeaponStatsWidget = {}

function USBZMainMenuWeaponStatsWidget:SetEmpty() end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
function USBZMainMenuWeaponStatsWidget:SetBaseFromSlot(InEquippableSlot, InWeaponSlotIndex) end
---@param InEquippableData USBZEquippableData
function USBZMainMenuWeaponStatsWidget:SetBaseFromEquippableData(InEquippableData) end
---@param InEquippableConfig FSBZEquippableConfig
function USBZMainMenuWeaponStatsWidget:SetBaseFromEquippableConfig(InEquippableConfig) end
function USBZMainMenuWeaponStatsWidget:OnUpdateVisuals() end
function USBZMainMenuWeaponStatsWidget:OnEmpty() end
---@return boolean
function USBZMainMenuWeaponStatsWidget:HasCompare() end
---@param InPartSlot USBZModularPartSlotBase
---@param InWeaponPart USBZEquippablePartDataAsset
function USBZMainMenuWeaponStatsWidget:CompareWithWeaponPart(InPartSlot, InWeaponPart) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
function USBZMainMenuWeaponStatsWidget:CompareWithSlot(InEquippableSlot, InWeaponSlotIndex) end
function USBZMainMenuWeaponStatsWidget:CompareWithNothing() end
---@param InEquippableData USBZEquippableData
function USBZMainMenuWeaponStatsWidget:CompareWithEquippableData(InEquippableData) end
---@param InEquippableConfig FSBZEquippableConfig
function USBZMainMenuWeaponStatsWidget:CompareWithEquippableConfig(InEquippableConfig) end


---@class USBZMainMenuWeaponVendorWidget : USBZMenuStackWidget
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field WeaponStoreMap TMap<FGuid, FSBZWeaponStoreItem>
---@field WeaponPresetStoreMap TMap<FGuid, FSBZWeaponPresetStoreItem>
USBZMainMenuWeaponVendorWidget = {}

---@param WeaponPresetStoreItem FSBZWeaponPresetStoreItem
function USBZMainMenuWeaponVendorWidget:TryBuyWeaponPreset(WeaponPresetStoreItem) end
---@param WeaponStoreItem FSBZWeaponStoreItem
function USBZMainMenuWeaponVendorWidget:TryBuyWeapon(WeaponStoreItem) end
---@param InWeaponStoreMap TMap<FGuid, FSBZWeaponStoreItem>
function USBZMainMenuWeaponVendorWidget:OnWeaponStoreItemsUpdated(InWeaponStoreMap) end
---@param InWeaponPresetStoreMap TMap<FGuid, FSBZWeaponPresetStoreItem>
function USBZMainMenuWeaponVendorWidget:OnWeaponPresetStoreItemsUpdated(InWeaponPresetStoreMap) end
---@param bWasSuccess boolean
function USBZMainMenuWeaponVendorWidget:OnBuyWeaponPresetDone(bWasSuccess) end
---@param bWasSuccess boolean
function USBZMainMenuWeaponVendorWidget:OnBuyWeaponDone(bWasSuccess) end
---@param BuyWeaponResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuWeaponVendorWidget:NativeOnBuyWeaponPresetDone(BuyWeaponResult, ItemId) end
---@param BuyWeaponResult ESBZMetaRequestResult
---@param ItemId FGuid
function USBZMainMenuWeaponVendorWidget:NativeOnBuyWeaponDone(BuyWeaponResult, ItemId) end


---@class USBZMainMenuWidget : USBZBaseMenuWidget
---@field Widget_LoadoutCustomization USBZMainMenuLoadoutCustomization
---@field Widget_WeaponCustomization USBZGameStartMainMenuWeaponCustomizationWidget
---@field Widget_WeaponCustomizationTemp USBZMainMenuLoadoutWeaponModCategoryWidget
---@field Widget_WeaponInventory USBZMainMenuWeaponInventoryScreen
---@field Widget_ItemInventory USBZMainMenuItemInventoryScreen
---@field Widget_SkillsSelection USBZGameStartMainMenuSkillsSelection
---@field Widget_WeaponProgression USBZMainMenuWeaponProgressionScreen
---@field Widget_MaskCustomization USBZMainMenuMaskCustomization
---@field Widget_WeaponModifiers USBZMainMenuWeaponModifierScreen
---@field Widget_SuitCustomization USBZMainMenuSuitCustomization
---@field Widget_SuitCosmeticCustomization USBZMainMenuSuitCosmeticCustomizationScreen
---@field Widget_BlackMarketInspect USBZBlackMarketInspectWidget
---@field Widget_Cosmetic USBZMainMenuCosmetic
---@field Widget_HeistInspect USBZMainMenuCrimeNetHeistInspectScreen
---@field Widget_FullscreenVideo USBZFullscreenVideoWidget
---@field Widget_MainMenuNavbar USBZMenuNavBar
---@field CosmeticItemButtonClass TSubclassOf<USBZMainMenuCosmeticItemButton>
---@field CrossplayPopupWidgetClass TSubclassOf<USBZLoginScreenInfoPopupWidget>
---@field TutorialPopupWidgetClass TSubclassOf<USBZWidgetBase>
---@field TutorialPopupHeaderText FText
---@field CrossplayPopupHeaderText FText
---@field CrossplayPopupBodyText FText
---@field PopUpPlayTutorialAction FSBZButtonControlReference
---@field PopUpSkipTutorialAction FSBZButtonControlReference
---@field PopUpOptInAction FSBZButtonControlReference
---@field PopUpOptOutAction FSBZButtonControlReference
---@field PopUpData FSBZUIPopupData
---@field PopUpBody USBZWidgetBase
---@field TutorialObjectPath FSoftObjectPath
---@field CosmeticButtonPool TArray<USBZMainMenuCosmeticItemButton>
---@field VendorTypeToOpen ESBZBlackMarketVendorType
USBZMainMenuWidget = {}

function USBZMainMenuWidget:ShowTutorialPopup() end
function USBZMainMenuWidget:ShowMainMenuFunction() end
function USBZMainMenuWidget:ShowCrossplayPopup() end
---@param VendorType ESBZBlackMarketVendorType
function USBZMainMenuWidget:SetVendorTypeToOpen(VendorType) end
function USBZMainMenuWidget:RequestRemoveBackgroundBlur() end
function USBZMainMenuWidget:RemoveBackgroundBlur() end
---@param ClosingActionName FName
function USBZMainMenuWidget:OnTutorialPopUpClosed(ClosingActionName) end
---@param ClosingActionName FName
function USBZMainMenuWidget:OnCrossplayPopUpClosed(ClosingActionName) end
---@param bResetValue boolean
---@return ESBZBlackMarketVendorType
function USBZMainMenuWidget:GetVendorTypeToOpen(bResetValue) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
---@return boolean
function USBZMainMenuWidget:DisplayWeaponProgressionScreen(InEquippableSlot, InWeaponSlotIndex) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
---@param InWeaponPartSlot USBZWeaponPartSlot
---@return boolean
function USBZMainMenuWidget:DisplayWeaponModiferScreen(InEquippableSlot, InWeaponSlotIndex, InWeaponPartSlot) end
---@param LoadoutIndex int32
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@return boolean
function USBZMainMenuWidget:DisplayWeaponInventoryScreen(LoadoutIndex, InEquippableSlot) end
---@param InSuitSlotIndex int32
---@return boolean
function USBZMainMenuWidget:DisplaySuitCustomizationScreen(InSuitSlotIndex) end
---@param InSuitSlotIndex int32
---@param InSuitPartConfig USBZSuitPartConfig
---@param InCosmeticPartSlot USBZCosmeticsPartSlot
---@return boolean
function USBZMainMenuWidget:DisplaySuitCosmeticCustomizationScreen(InSuitSlotIndex, InSuitPartConfig, InCosmeticPartSlot) end
---@param InLoadoutIndex int32
---@return boolean
function USBZMainMenuWidget:DisplaySkillsSelection(InLoadoutIndex) end
---@param InCosmeticPartSlot USBZCosmeticsPartSlot
---@param HasDefaultBool boolean
---@param DefaultDisplayName FText
---@return boolean
function USBZMainMenuWidget:DisplayMaskGenericSlotScreen(InCosmeticPartSlot, HasDefaultBool, DefaultDisplayName) end
---@param InMaskSlotIndex int32
---@return boolean
function USBZMainMenuWidget:DisplayMaskCustomizationScreen(InMaskSlotIndex) end
---@param InLoadoutIndex int32
---@param InItemSlotType ESBZItemLoadoutSlot
---@return boolean
function USBZMainMenuWidget:DisplayItemInventoryScreen(InLoadoutIndex, InItemSlotType) end
---@param InHeistData UPD3HeistDataAsset
function USBZMainMenuWidget:DisplayHeistInpectScreen(InHeistData) end
---@param FilePath FFilePath
function USBZMainMenuWidget:DisplayFullscreenVideoScreen(FilePath) end
---@param InType ESBZMainMenuCosmeticType
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InIndex int32
function USBZMainMenuWidget:DisplayCosmeticScreen(InType, InEquippableSlot, InIndex) end
---@param InspectData USBZInventoryBaseData
---@return boolean
function USBZMainMenuWidget:DisplayBlackmarketInspectScreen(InspectData) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
---@return boolean
function USBZMainMenuWidget:CustomizeWeaponInSlotTemp(InEquippableSlot, InWeaponSlotIndex) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
---@return boolean
function USBZMainMenuWidget:CustomizeWeaponInSlot(InEquippableSlot, InWeaponSlotIndex) end
---@param InLoadoutIndex int32
function USBZMainMenuWidget:CustomizeLoadout(InLoadoutIndex) end
---@param InspectData USBZInventoryBaseData
---@return boolean
function USBZMainMenuWidget:CanInspectInventoryItem(InspectData) end
function USBZMainMenuWidget:AddBackgroundBlur() end


---@class USBZMannequinLibrary : UBlueprintFunctionLibrary
USBZMannequinLibrary = {}

---@param WorldContextObject UObject
---@param Pose UAnimSequenceBase
function USBZMannequinLibrary:SetMainMenuMannequinPose(WorldContextObject, Pose) end
---@param WorldContextObject UObject
---@param EquippableConfig FSBZEquippableConfig
function USBZMannequinLibrary:SetMainMenuMannequinLoadout(WorldContextObject, EquippableConfig) end
---@param WorldContextObject UObject
---@param EquipmentType ESBZInventoryEquipmentType
function USBZMannequinLibrary:SetMainMenuMannequinEquipment(WorldContextObject, EquipmentType) end
---@param WorldContextObject UObject
---@param EquipmentType ESBZInventoryEquipmentType
function USBZMannequinLibrary:RefreshMainMenuMannequin(WorldContextObject, EquipmentType) end
---@param WorldContextObject UObject
---@param PlayerIndex int32
---@return ASBZMainMenuPlayerCharacter
function USBZMannequinLibrary:GetMultiplayerMannequin(WorldContextObject, PlayerIndex) end
---@param WorldContextObject UObject
---@return ASBZMainMenuPlayerCharacter
function USBZMannequinLibrary:GetMainMenuMannequin(WorldContextObject) end


---@class USBZMantlingImpactConfig : USBZImpactConfig
USBZMantlingImpactConfig = {}


---@class USBZMarkerComponent : UActorComponent
---@field MarkerAssets USBZMarkerDataAsset
---@field MarkerPriority uint8
---@field MarkerOffset FVector
---@field MarkerSocketName FName
---@field AttachComponentSelector FSBZComponentSelector
---@field MarkerState ESBZMarkerState
---@field AttachComponent USceneComponent
USBZMarkerComponent = {}

function USBZMarkerComponent:OnRep_MarkerState() end
---@param RepMarkerState ESBZMarkerState
function USBZMarkerComponent:Multicast_SetMarkerState(RepMarkerState) end


---@class USBZMarkerDataAsset : UDataAsset
---@field Offset FVector
---@field MarkerWidgetOverride TSubclassOf<USBZMarkerWidget>
---@field Brush FSlateBrush
---@field DisplayText FText
---@field bHasOffScreenTracking boolean
---@field bShowDistance boolean
---@field OnDisplayAudioEvent UAkAudioEvent
---@field VisibleRange FFloatInterval
USBZMarkerDataAsset = {}



---@class USBZMarkerLibrary : UBlueprintFunctionLibrary
USBZMarkerLibrary = {}

---@param WorldContextObject UObject
---@param ID int32
function USBZMarkerLibrary:RemoveReplicatedMarker(WorldContextObject, ID) end
---@param WorldContextObject UObject
---@param ID int32
function USBZMarkerLibrary:RemoveLocalMarker(WorldContextObject, ID) end
---@param WorldContextObject UObject
---@param MarkerDataAsset USBZMarkerDataAsset
---@param Location FVector
---@return int32
function USBZMarkerLibrary:AddReplicatedMarker(WorldContextObject, MarkerDataAsset, Location) end
---@param WorldContextObject UObject
---@param MarkerDataAsset USBZMarkerDataAsset
---@param Translation FVector
---@param Component USceneComponent
---@param SocketName FName
---@return int32
function USBZMarkerLibrary:AddLocalMarker(WorldContextObject, MarkerDataAsset, Translation, Component, SocketName) end


---@class USBZMarkerManager : UActorComponent
---@field ReplicatedMarkers TArray<FSBZMarkerReplication>
---@field RuntimeMarkers TArray<FSBZMarkerRuntime>
USBZMarkerManager = {}

function USBZMarkerManager:OnRep_ReplicatedMarkers() end
---@param ID uint32
function USBZMarkerManager:Multicast_RemoveMarker(ID) end
---@param ID uint32
---@param MarkerAsset USBZMarkerDataAsset
---@param Translation FVector
function USBZMarkerManager:Multicast_AddMarker(ID, MarkerAsset, Translation) end


---@class USBZMarkerWidget : UUserWidget
---@field Icon UImage
---@field Arrow UImage
---@field DistanceText UTextBlock
---@field DescriptionText UTextBlock
USBZMarkerWidget = {}



---@class USBZMarkerWidgetContainer : USBZWidgetBase
---@field Root_Canvas UCanvasPanel
---@field MarkerWidgetClass TSubclassOf<USBZMarkerWidget>
---@field OffScreenRadiusPercentage float
---@field OffScreenTransitionTime float
USBZMarkerWidgetContainer = {}

---@param MarkerRuntime FSBZMarkerRuntime
function USBZMarkerWidgetContainer:OnMarkerAdded(MarkerRuntime) end


---@class USBZMaskCustomizationGenericSlotScreen : USBZMaskCustomizationSlotScreenBase
---@field Cosmetic_Panel USBZMainMenuCosmeticPanel
---@field CosmeticPartsSlot USBZCosmeticsPartSlot
---@field SelectedAsset USBZCosmeticsDataAsset
---@field ScreenSlotText FText
USBZMaskCustomizationGenericSlotScreen = {}

---@param PartsSlot USBZCosmeticsPartSlot
---@param DefaultButtonParams FSBZCosmeticPanelDefaultParams
---@return boolean
function USBZMaskCustomizationGenericSlotScreen:InitializePartsSlot(PartsSlot, DefaultButtonParams) end
function USBZMaskCustomizationGenericSlotScreen:CosmeticPanelDefaultButtonSelected() end
---@param SelectedButton USBZMainMenuCosmeticItemButton
function USBZMaskCustomizationGenericSlotScreen:CosmeticPanelButtonSelected(SelectedButton) end


---@class USBZMaskCustomizationPattern : USBZMaskCustomizationSlotScreenBase
---@field PatternSlotAsset USBZCosmeticsPartSlot
---@field SprayCanSlotAsset USBZCosmeticsPartSlot
---@field PatternSprayCanSlotAssets TArray<USBZCosmeticsPartSlot>
---@field CurrentMenuMode EBSZPatternMenuMode
---@field MaxSprayCans int32
---@field ReturnPattern USBZCosmeticsDataAsset
---@field ReturnSprayCanArray TArray<USBZCosmeticsDataAsset>
---@field SprayCanSelectorButtonClass TSubclassOf<USBZMainMenuCosmeticItemButton>
---@field SprayCanSelectorButtonMargin FMargin
---@field CosmeticPanelDefaultButtonText FText
---@field ActiveSprayCanSlotIndex int32
---@field Cosmetic_Panel USBZMainMenuCosmeticPanel
---@field SprayCanHorizontalPanel UHorizontalBox
---@field CurrentPatternSelectedItemButton USBZMainMenuCosmeticItemButton
USBZMaskCustomizationPattern = {}

---@param SelectedButton USBZMenuButton
function USBZMaskCustomizationPattern:SprayCanSelectorButtonSelected(SelectedButton) end
function USBZMaskCustomizationPattern:ShowSprayCans() end
function USBZMaskCustomizationPattern:ShowPatterns() end
---@param InIndex int32
---@return boolean
function USBZMaskCustomizationPattern:SetActiveSprayCanSlotIndex(InIndex) end
---@param InDelta int32
function USBZMaskCustomizationPattern:IncrementSprayCanSlotIndex(InDelta) end
function USBZMaskCustomizationPattern:CosmeticPanelDefaultButtonSelected() end
---@param SelectedButton USBZMainMenuCosmeticItemButton
function USBZMaskCustomizationPattern:CosmeticPanelButtonSelected(SelectedButton) end


---@class USBZMaskCustomizationSlotScreenBase : USBZMenuStackScreenWidget
USBZMaskCustomizationSlotScreenBase = {}


---@class USBZMaskData : USBZInventoryBaseData
---@field MaskClass TSoftClassPtr<ASBZMask>
---@field EquipAnimationCharacterFP TSoftObjectPtr<UAnimMontage>
---@field EquipAnimationCharacterTP TSoftObjectPtr<UAnimMontage>
---@field EquipAnimationFP TSoftObjectPtr<UAnimMontage>
---@field EquipAnimationTP TSoftObjectPtr<UAnimMontage>
---@field Mould USBZMaskMouldData
---@field Material USBZMaskMaterialData
---@field Pattern USBZMaskPatternData
---@field VFX USBZMaskVFXData
USBZMaskData = {}



---@class USBZMaskDatabase : USBZItemDatabase
---@field Masks TArray<USBZMaskData>
---@field CustomizableMask USBZMaskData
USBZMaskDatabase = {}



---@class USBZMaskInventorySlotData : USBZInventorySlotData
---@field MaskMouldSlot USBZModularPartSlotBase
USBZMaskInventorySlotData = {}



---@class USBZMaskInventorySlotDatabase : USBZItemDatabase
---@field InventorySlotArray TArray<USBZMaskInventorySlotData>
USBZMaskInventorySlotDatabase = {}



---@class USBZMaskMaterialApplier : USBZModularPartApplier
USBZMaskMaterialApplier = {}


---@class USBZMaskMaterialData : USBZCosmeticsDataAsset
---@field MaterialState ESBZMaskMaterialState
---@field BaseNormalTexture UTexture2D
---@field AgedNormalTexture UTexture2D
---@field AgedAlbedoTexture UTexture2D
---@field Metallic float
---@field Roughness float
---@field DetailTiling float
---@field ShadingModel float
---@field UseAlbedo boolean
USBZMaskMaterialData = {}

---@return ESBZMaskMaterialState
function USBZMaskMaterialData:GetMaterialState() end


---@class USBZMaskMouldApplier : USBZModularPartApplier
USBZMaskMouldApplier = {}


---@class USBZMaskMouldData : USBZCosmeticsDataAsset
---@field StaticMesh UStaticMesh
---@field SkeletalMesh USkeletalMesh
---@field BaseTexture TSoftObjectPtr<UTexture2D>
---@field NormalTexture TSoftObjectPtr<UTexture2D>
USBZMaskMouldData = {}



---@class USBZMaskMouldDatabase : USBZItemDatabase
---@field MaskMouldArray TArray<USBZMaskMouldData>
USBZMaskMouldDatabase = {}



---@class USBZMaskOnAbility : USBZGameplayAbility
USBZMaskOnAbility = {}


---@class USBZMaskOnInputAbility : USBZGameplayAbility
---@field MaskOnDuration float
USBZMaskOnInputAbility = {}



---@class USBZMaskPartConfig : USBZModularPartConfig
USBZMaskPartConfig = {}


---@class USBZMaskPatternApplier : USBZModularPartApplier
USBZMaskPatternApplier = {}


---@class USBZMaskPatternData : USBZCosmeticsPatternDataAsset
USBZMaskPatternData = {}


---@class USBZMaskPatternDatabase : USBZItemDatabase
---@field MaskPatternArray TArray<USBZMaskPatternData>
USBZMaskPatternDatabase = {}



---@class USBZMaskPreconfigData : USBZCosmeticsDataAsset
---@field MaskConfig FSBZMaskConfig
USBZMaskPreconfigData = {}

---@return FSBZMaskConfig
function USBZMaskPreconfigData:GetMaskConfig() end


---@class USBZMaskPreconfigDatabase : USBZItemDatabase
---@field MaskPreconfigArray TArray<USBZMaskPreconfigData>
USBZMaskPreconfigDatabase = {}



---@class USBZMaskPresetData : USBZInventoryBaseData
---@field MaskClass TSoftClassPtr<ASBZMask>
---@field EquipAnimationCharacterFP TSoftObjectPtr<UAnimMontage>
---@field EquipAnimationCharacterTP TSoftObjectPtr<UAnimMontage>
---@field EquipAnimationFP TSoftObjectPtr<UAnimMontage>
---@field EquipAnimationTP TSoftObjectPtr<UAnimMontage>
USBZMaskPresetData = {}



---@class USBZMaskPresetDatabase : USBZItemDatabase
---@field MaskPresetArray TArray<USBZMaskData>
USBZMaskPresetDatabase = {}



---@class USBZMaskSprayCanApplier : USBZModularPartApplier
USBZMaskSprayCanApplier = {}


---@class USBZMaskSprayCanGlobalColorApplier : USBZMaskSprayCanApplier
USBZMaskSprayCanGlobalColorApplier = {}


---@class USBZMaskSprayCanOnPatternAApplier : USBZMaskSprayCanApplier
USBZMaskSprayCanOnPatternAApplier = {}


---@class USBZMaskSprayCanOnPatternBApplier : USBZMaskSprayCanApplier
USBZMaskSprayCanOnPatternBApplier = {}


---@class USBZMaskSprayCanOnPatternGApplier : USBZMaskSprayCanApplier
USBZMaskSprayCanOnPatternGApplier = {}


---@class USBZMaskSprayCanOnPatternRApplier : USBZMaskSprayCanApplier
USBZMaskSprayCanOnPatternRApplier = {}


---@class USBZMaskVFXData : USBZCosmeticsDataAsset
---@field VFXSlot ESBZMaskVFXSlot
---@field EmitterSpawnerArray TArray<USBZEmitterSpawnerData>
USBZMaskVFXData = {}



---@class USBZMaskVFXDatabase : USBZItemDatabase
---@field MaskVFXArray TArray<USBZMaskVFXData>
USBZMaskVFXDatabase = {}



---@class USBZMatchmaking : UObject
USBZMatchmaking = {}


---@class USBZMatchmakingAccelByte : USBZMatchmaking
USBZMatchmakingAccelByte = {}


---@class USBZMatchmakingAccelByteV2 : USBZMatchmaking
USBZMatchmakingAccelByteV2 = {}


---@class USBZMeleeAbility : USBZGameplayAbility
---@field Character ASBZCharacter
USBZMeleeAbility = {}



---@class USBZMeleeComponent : UActorComponent
---@field OwningCharacter ASBZCharacter
---@field PostDamagePhysicsEffectData FSBZExplosivePhysicsEffectData
---@field bIsFriendlyFireAllowedOverride boolean
USBZMeleeComponent = {}

---@param Result FSBZExplosionResult
function USBZMeleeComponent:Multicast_ReplicateExplosion(Result) end


---@class USBZMeleeDamageData : UDataAsset
---@field DamageTypeClass TSubclassOf<USBZDamageType>
---@field DamageGameplayEffectClass TSubclassOf<UGameplayEffect>
---@field HurtReactionWeightModifier float
---@field HitboxSize FVector
---@field HitboxViewOffset FVector
---@field HitboxViewRotation float
---@field ArmorPenetration float
---@field PrimaryDamageWeight ESBZDamageWeight
---@field SecondaryDamageWeight ESBZDamageWeight
---@field DamageWeightModifier float
---@field Cooldown float
---@field MaxTargetsPerHit int32
---@field MaximumAngleDifference float
---@field MeleeEvent UAkAudioEvent
---@field ImpactType ESBZMeleeImpactType
---@field AttackCategory ESBZMeleeAttackCategory
---@field Duration float
USBZMeleeDamageData = {}



---@class USBZMeleeDamageExecutionCalculation : UGameplayEffectExecutionCalculation
USBZMeleeDamageExecutionCalculation = {}


---@class USBZMeleeDamageType : USBZDamageType
USBZMeleeDamageType = {}


---@class USBZMeleeHitNotify : UAnimNotify
USBZMeleeHitNotify = {}


---@class USBZMeleeImpactConfig : USBZImpactConfig
---@field MeleeWeaponTypes TMap<ESBZMeleeImpactType, FSBZMeleeImpactData>
---@field ImpactFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field MeleeTypeFeedbackOverride TMap<ESBZMeleeImpactType, TSubclassOf<USBZLocalPlayerFeedback>>
USBZMeleeImpactConfig = {}



---@class USBZMeleeWeaponData : USBZBaseWeaponData
---@field MeleeAttackData USBZWeaponMeleeAttackData
USBZMeleeWeaponData = {}



---@class USBZMeleeWeaponEffect : UGameplayEffect
USBZMeleeWeaponEffect = {}


---@class USBZMeleeWeaponExecutionCalculation : UGameplayEffectExecutionCalculation
USBZMeleeWeaponExecutionCalculation = {}


---@class USBZMenuButton : USBZWidgetBase
---@field SelectionActionName FName
---@field OnButtonFocusedChanged FSBZMenuButtonOnButtonFocusedChanged
---@field OnButtonHoveredChanged FSBZMenuButtonOnButtonHoveredChanged
---@field OnButtonDisabledChanged FSBZMenuButtonOnButtonDisabledChanged
---@field OnButtonSelected FSBZMenuButtonOnButtonSelected
---@field OnDisabledButtonSelected FSBZMenuButtonOnDisabledButtonSelected
---@field OnButtonAlternativeSelected FSBZMenuButtonOnButtonAlternativeSelected
---@field OnDisabledButtonAlternativeSelected FSBZMenuButtonOnDisabledButtonAlternativeSelected
---@field AlternativeActionName FName
---@field AlternativeActionMouseButton FKey
---@field FocusedAudioEvent UAkAudioEvent
---@field bHoverGivesFocus boolean
---@field bSelectGivesFocus boolean
---@field bAlternativeGivesFocus boolean
---@field bShouldTriggerLastFocused boolean
---@field bIsDisabled boolean
USBZMenuButton = {}

---@param bInIsDisabled boolean
function USBZMenuButton:SetButtonDisabled(bInIsDisabled) end
function USBZMenuButton:SelectButton() end
function USBZMenuButton:NativeOnSelectionInputPressed() end
function USBZMenuButton:NativeOnAlternativeSelectionInputPressed() end
function USBZMenuButton:DisabledButtonSelected() end
function USBZMenuButton:DisabledButtonAlternativeSelected() end
function USBZMenuButton:ButtonSelected() end
---@param bInIsHovered boolean
function USBZMenuButton:ButtonHoveredChanged(bInIsHovered) end
---@param bInHasFocus boolean
function USBZMenuButton:ButtonFocusedChanged(bInHasFocus) end
---@param bInIsDisabled boolean
function USBZMenuButton:ButtonDisabledChanged(bInIsDisabled) end
function USBZMenuButton:ButtonAlternativeSelected() end
function USBZMenuButton:AlternativeSelectButton() end


---@class USBZMenuDisableIKNotifyState : UAnimNotifyState
---@field DisableHandIkType ESBZMenuDisableHandIkType
USBZMenuDisableIKNotifyState = {}



---@class USBZMenuMouseButton : USBZWidgetBase
---@field OnButtonHoveredChanged FSBZMenuMouseButtonOnButtonHoveredChanged
---@field OnButtonSelected FSBZMenuMouseButtonOnButtonSelected
USBZMenuMouseButton = {}

function USBZMenuMouseButton:SelectButton() end
function USBZMenuMouseButton:ButtonSelected() end
---@param bInIsHovered boolean
function USBZMenuMouseButton:ButtonHoveredChanged(bInIsHovered) end


---@class USBZMenuMultiStackWidget : USBZWidgetBase
---@field StackValues TArray<FName>
---@field bHasStackFocus boolean
USBZMenuMultiStackWidget = {}

---@param UIStackStateChangedEvent FSBZUIStackChangedEvent
function USBZMenuMultiStackWidget:OnStackStateChanged(UIStackStateChangedEvent) end
function USBZMenuMultiStackWidget:OnRemovedFromStack() end
function USBZMenuMultiStackWidget:OnLostStackFocused() end
---@param PreviousValue FName
function USBZMenuMultiStackWidget:OnGainedStackFocused(PreviousValue) end
function USBZMenuMultiStackWidget:OnAddedToStack() end
---@return TArray<FName>
function USBZMenuMultiStackWidget:GetStackValues() end
---@return FName
function USBZMenuMultiStackWidget:GetActiveStackValue() end


---@class USBZMenuNavBar : USBZWidgetBase
---@field MoveForwardActionName FName
---@field MoveBackwardActionName FName
---@field NavigationButtons TArray<FSBZNavButtonParameters>
---@field NavigationButtonClass TSubclassOf<USBZMenuNavBarButton>
---@field Panel_ButtonContainer UPanelWidget
---@field bIsAffectedByInstallProgress boolean
USBZMenuNavBar = {}

---@param InTabName FName
function USBZMenuNavBar:SetActiveTab(InTabName) end
function USBZMenuNavBar:OnTabbedForward() end
function USBZMenuNavBar:OnTabbedBackward() end
---@param NewState boolean
function USBZMenuNavBar:OnInstallStateChanged(NewState) end
function USBZMenuNavBar:OnForwardInputPressed() end
function USBZMenuNavBar:OnBackwardInputPressed() end
---@return boolean
function USBZMenuNavBar:HasStackFocus() end
---@return TArray<FSBZNavButtonParameters>
function USBZMenuNavBar:GetNavigationParameters() end


---@class USBZMenuNavBarButton : USBZMenuStackWidget
---@field Text_ButtonDisplayText UTextBlock
---@field OwningNavBar USBZMenuNavBar
USBZMenuNavBarButton = {}

---@param bIsHovered boolean
function USBZMenuNavBarButton:OnHovered(bIsHovered) end
function USBZMenuNavBarButton:OnClicked() end
---@param ButtonParams FSBZNavButtonParameters
function USBZMenuNavBarButton:OnButtonInitialized(ButtonParams) end


---@class USBZMenuStackInventoryBaseScreen : USBZMenuStackScreenWidgetWithTutorial
USBZMenuStackInventoryBaseScreen = {}

function USBZMenuStackInventoryBaseScreen:OnEmptySlotSelected() end


---@class USBZMenuStackScreenWidget : USBZMenuStackWidget
---@field bShouldListenForUIBackEvent boolean
---@field bPopStackOnBackPressed boolean
---@field BackActionName FName
USBZMenuStackScreenWidget = {}

function USBZMenuStackScreenWidget:OnBackPressed() end
function USBZMenuStackScreenWidget:NativeOnBackPressed() end


---@class USBZMenuStackScreenWidgetWithTutorial : USBZMenuStackScreenWidget
---@field TutorialDisplayAction FName
---@field TutorialCloseAlternativeAction FName
---@field CanvasPanel_Tutorial UCanvasPanel
---@field Button_ToggleHelp USBZMenuTutorialMouseButton
---@field TutorialType ESBZTutorialType
---@field bIsTutorialShowing boolean
USBZMenuStackScreenWidgetWithTutorial = {}

function USBZMenuStackScreenWidgetWithTutorial:ToggleShowingTutorial() end
function USBZMenuStackScreenWidgetWithTutorial:OnTutorialHidden() end
function USBZMenuStackScreenWidgetWithTutorial:OnTutorialDisplayed() end
---@param Button USBZMenuMouseButton
function USBZMenuStackScreenWidgetWithTutorial:OnTutorialButtonSelected(Button) end
---@return boolean
function USBZMenuStackScreenWidgetWithTutorial:IsShowingTutorial() end


---@class USBZMenuStackWidget : USBZWidgetBase
---@field StackValue FName
---@field bHasStackFocus boolean
---@field bIsOnStack boolean
USBZMenuStackWidget = {}

---@param UIStackStateChangedEvent FSBZUIStackChangedEvent
function USBZMenuStackWidget:OnStackStateChanged(UIStackStateChangedEvent) end
function USBZMenuStackWidget:OnRemovedFromStack() end
function USBZMenuStackWidget:OnLostStackFocused() end
---@param PreviousValue FName
function USBZMenuStackWidget:OnGainedStackFocused(PreviousValue) end
function USBZMenuStackWidget:OnAddedToStack() end
---@return FName
function USBZMenuStackWidget:GetStackValue() end


---@class USBZMenuTutorialMouseButton : USBZMenuMouseButton
---@field bIsShowing boolean
USBZMenuTutorialMouseButton = {}

---@param bInIsShowing boolean
function USBZMenuTutorialMouseButton:SetTutorialShowing(bInIsShowing) end
function USBZMenuTutorialMouseButton:OnShowingTutorialChanged() end
---@return boolean
function USBZMenuTutorialMouseButton:IsShowingTutorial() end


---@class USBZMeshPartSlot : USBZModularPartSlotBase
---@field SpawnPriority int32
USBZMeshPartSlot = {}



---@class USBZMetaDataLoader : UObject
USBZMetaDataLoader = {}


---@class USBZMetaFunctionLibrary : UBlueprintFunctionLibrary
USBZMetaFunctionLibrary = {}

---@param WorldContextObject UObject
---@return ESBZMetaEventType
function USBZMetaFunctionLibrary:GetActiveMetaEventType(WorldContextObject) end
---@param WorldContextObject UObject
---@param MetaEventModifiers TArray<FSBZMetaEventModifierData>
---@return boolean
function USBZMetaFunctionLibrary:GetActiveMetaEventModifiers(WorldContextObject, MetaEventModifiers) end
---@param WorldContextObject UObject
---@param OutMetaEvent FSBZMetaEventData
---@return boolean
function USBZMetaFunctionLibrary:GetActiveMetaEvent(WorldContextObject, OutMetaEvent) end


---@class USBZMetaRequestResult : UObject
USBZMetaRequestResult = {}


---@class USBZMicroCameraActivateNotify : UAnimNotify
USBZMicroCameraActivateNotify = {}


---@class USBZMicroCameraData : USBZToolData
---@field SoundRangeOverloaded float
---@field DefaultAutoMarkedDuration float
---@field MarkedOutline USBZOutlineAsset
USBZMicroCameraData = {}



---@class USBZMiniGameAbility : USBZGameplayAbility
---@field WinningParticipant ASBZPlayerState
USBZMiniGameAbility = {}



---@class USBZMiniGameActorRequirement : USBZBaseInteractRequirement
USBZMiniGameActorRequirement = {}


---@class USBZMiniGameComponent : UActorComponent
---@field OnMiniGameInteraction FSBZMiniGameComponentOnMiniGameInteraction
---@field OnPreMiniGameInteraction FSBZMiniGameComponentOnPreMiniGameInteraction
---@field Data USBZMiniGameData
---@field AudioComponent UAkComponent
---@field AbortedAudioEvent UAkAudioEvent
---@field SuccessAudioEvent UAkAudioEvent
---@field FailedAudioEvent UAkAudioEvent
---@field InitiatedAudioEvent UAkAudioEvent
---@field InProgressAudioEvent UAkAudioEvent
---@field OpenWidgetAudioEvent UAkAudioEvent
---@field CloseWidgetAudioEvent UAkAudioEvent
---@field SilenceMinigameAudioEvent UAkAudioEvent
---@field AbortedAudioRtpc UAkRtpc
---@field SuccessAudioRtpc UAkRtpc
---@field FailedAudioRtpc UAkRtpc
---@field InitiatedAudioRtpc UAkRtpc
---@field InProgressAudioRtpc UAkRtpc
---@field bSpawnMiniGameOnHackingTool boolean
---@field bSpawnMiniGameOnObject boolean
---@field WidgetZOrder ESBZWidgetZOrdering
---@field HackingAmmoCost int32
---@field SpawnedWidget UPD3MiniGameWidgetBase
---@field CurrentControlsReferenceID int32
---@field InteractingPlayerStateArray TArray<ASBZPlayerState>
---@field MiniGameDifficulty uint8
---@field WinningParticipant ASBZPlayerState
---@field RootComponent USceneComponent
---@field ActiveLocallyController APlayerController
USBZMiniGameComponent = {}

---@param AkComponent UAkComponent
---@param Rtpc UAkRtpc
---@param bIsLocallyControlled boolean
function USBZMiniGameComponent:SetAudioPerspective(AkComponent, Rtpc, bIsLocallyControlled) end
function USBZMiniGameComponent:ServerAbortMiniGame() end
---@param AudioEvent UAkAudioEvent
function USBZMiniGameComponent:PlaySoundOnNative(AudioEvent) end
---@param AkComponent UAkComponent
---@param AudioEvent UAkAudioEvent
function USBZMiniGameComponent:PlaySound(AkComponent, AudioEvent) end
---@param Character ASBZCharacter
function USBZMiniGameComponent:Multicast_ActivateMiniGame(Character) end
---@param Character ASBZCharacter
---@param bIsLocallyControlled boolean
---@param bIsReplicated boolean
function USBZMiniGameComponent:ActivateMiniGame(Character, bIsLocallyControlled, bIsReplicated) end


---@class USBZMiniGameData : UDataAsset
---@field WidgetClass TSubclassOf<UUserWidget>
---@field ControlsReference FSBZControlsReference
---@field LockCameraData FSBZLockCameraData
---@field PlayerFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field bIsLockpickMiniGame boolean
USBZMiniGameData = {}



---@class USBZMissionResultLibrary : UBlueprintFunctionLibrary
USBZMissionResultLibrary = {}

---@param ResultData FSBZEndMissionResultData
---@param PlayerId int32
---@return FSBZPlayerEndMissionResultData
function USBZMissionResultLibrary:GetPlayerData(ResultData, PlayerId) end
---@param WorldContextObject UObject
---@param ResultData FSBZEndMissionResultData
---@return int32
function USBZMissionResultLibrary:GetPlayerCashReward(WorldContextObject, ResultData) end
---@param CharacterData FSBZCharacterEndMissionResultData
---@param EquippableIndex int32
---@return FSBZEquippableEndMissionResultData
function USBZMissionResultLibrary:GetEquippableData(CharacterData, EquippableIndex) end
---@param WorldContextObject UObject
---@param ResultData FSBZEndMissionResultData
---@param EquippableIndex int32
---@return float
function USBZMissionResultLibrary:GetCurrentPlayerEquippableAccuracy(WorldContextObject, ResultData, EquippableIndex) end
---@param ResultData FSBZEndMissionResultData
---@return int32
function USBZMissionResultLibrary:GetAllPlayersHaveSpecialKilledCount(ResultData) end
---@param ResultData FSBZEndMissionResultData
---@return int32
function USBZMissionResultLibrary:GetAllPlayersHaveKilledCount(ResultData) end
---@param ResultData FSBZEndMissionResultData
---@param EquippableIndex int32
---@return float
function USBZMissionResultLibrary:GetAllPlayersEquippableAccuracy(ResultData, EquippableIndex) end
---@param ResultData FSBZEndMissionResultData
---@return int32
function USBZMissionResultLibrary:GetAllPlayersBeenRevivedCount(ResultData) end
---@param ResultData FSBZEndMissionResultData
---@return int32
function USBZMissionResultLibrary:GetAllPlayersBeenKilledCount(ResultData) end
---@param ResultData FSBZEndMissionResultData
---@return int32
function USBZMissionResultLibrary:GetAllPlayersBeenDefeatedCount(ResultData) end


---@class USBZModGripAnimData : USBZEquippablePartCustomData
---@field Priority int32
---@field OverrideRightGripFPPose UAnimSequenceBase
---@field OverrideLeftGripFPPose UAnimSequenceBase
---@field OverrideRightGripTPPose UAnimSequenceBase
---@field OverrideLeftGripTPPose UAnimSequenceBase
USBZModGripAnimData = {}



---@class USBZModularCharacterComponent : USBZSkeletalMeshComponentBudgeted
---@field SuitCapsuleShadowingData USBZCapsuleShadowingData
---@field SuitMeshComponent USBZCustomizableSuitMeshComponent
---@field GlovesMeshComponent USkeletalMeshComponent
---@field BodyMeshComponent USkeletalMeshComponent
USBZModularCharacterComponent = {}

---@param SuitSkeletalMesh USkeletalMesh
function USBZModularCharacterComponent:SetSuitMesh(SuitSkeletalMesh) end
---@param GlovesSkeletalMesh USkeletalMesh
function USBZModularCharacterComponent:SetGlovesMesh(GlovesSkeletalMesh) end
---@param BodySkeletalMesh USkeletalMesh
function USBZModularCharacterComponent:SetBodyMesh(BodySkeletalMesh) end
---@return USBZCustomizableSuitMeshComponent
function USBZModularCharacterComponent:GetSuitMeshComponent() end
---@return USkeletalMeshComponent
function USBZModularCharacterComponent:GetGlovesMeshComponent() end
---@return USkeletalMeshComponent
function USBZModularCharacterComponent:GetBodyMeshComponent() end
---@param OutlineComponent USBZOutlineComponent
function USBZModularCharacterComponent:AddToOutline(OutlineComponent) end


---@class USBZModularMeshComponent : UActorComponent
---@field BaseRig USkeletalMeshComponent
---@field VisibilityMeshes TArray<FSBZModularMeshVisibility>
---@field CreatedMeshes TMap<TSoftObjectPtr<USkeletalMesh>, UMeshComponent>
---@field VisibilityRig USkeletalMeshComponent
---@field bLastOutlineStateToApply boolean
---@field bMeshReady boolean
USBZModularMeshComponent = {}



---@class USBZModularPartApplier : UObject
USBZModularPartApplier = {}

---@return boolean
function USBZModularPartApplier:NeedConfig() end
---@param PartAsset USBZModularPartDataAsset
---@return TArray<TSubclassOf<USBZModularPartDataAsset>>
function USBZModularPartApplier:GetExpectedParts(PartAsset) end
---@return boolean
function USBZModularPartApplier:DoesConfigNeedParts() end
---@return USBZModularPartConfig
function USBZModularPartApplier:CreateNewConfig() end


---@class USBZModularPartApplierOverrideMat : USBZModularPartApplier
USBZModularPartApplierOverrideMat = {}


---@class USBZModularPartApplierWeaponColor : USBZModularPartApplierWeaponPatternBase
USBZModularPartApplierWeaponColor = {}


---@class USBZModularPartApplierWeaponCosmetics : USBZModularPartApplier
USBZModularPartApplierWeaponCosmetics = {}


---@class USBZModularPartApplierWeaponDecal : USBZModularPartApplierWeaponCosmetics
USBZModularPartApplierWeaponDecal = {}


---@class USBZModularPartApplierWeaponPattern : USBZModularPartApplierWeaponPatternBase
USBZModularPartApplierWeaponPattern = {}


---@class USBZModularPartApplierWeaponPatternBase : USBZModularPartApplierWeaponCosmetics
USBZModularPartApplierWeaponPatternBase = {}


---@class USBZModularPartApplierWeaponStatics : UObject
USBZModularPartApplierWeaponStatics = {}


---@class USBZModularPartApplierWeaponSticker : USBZModularPartApplierWeaponCosmetics
---@field StickerConfig USBZWeaponStickerDataConfig
USBZModularPartApplierWeaponSticker = {}



---@class USBZModularPartApplierWeaponWearAndTear : USBZModularPartApplierWeaponCosmetics
USBZModularPartApplierWeaponWearAndTear = {}


---@class USBZModularPartConfig : UDataAsset
USBZModularPartConfig = {}

---@param PartAsset USBZModularPartDataAsset
---@param Index int32
function USBZModularPartConfig:SetPart(PartAsset, Index) end


---@class USBZModularPartDataAsset : USBZInventoryBaseData
USBZModularPartDataAsset = {}


---@class USBZModularPartSlot : USBZWeaponPartSlot
USBZModularPartSlot = {}


---@class USBZModularPartSlotBase : UDataAsset
---@field ModularPartClass TSubclassOf<USBZModularPartDataAsset>
---@field ApplierClass TSubclassOf<USBZModularPartApplier>
---@field ApplierPriority int32
---@field SlotWhenEquippedTag FGameplayTag
---@field DisplayName FText
---@field ApplierInstance USBZModularPartApplier
USBZModularPartSlotBase = {}

---@param OutDisplayName FText
---@param OutHasText boolean
function USBZModularPartSlotBase:GetDisplayName(OutDisplayName, OutHasText) end
---@return USBZModularPartApplier
function USBZModularPartSlotBase:GetApplierInstance() end


---@class USBZMusicManager : UObject
---@field VolumeRTPC FName
---@field StopEvent UAkAudioEvent
---@field CurrentVolume float
---@field bIsMusicMainMenu boolean
USBZMusicManager = {}

function USBZMusicManager:StopMusic() end
---@param NewVolume float
function USBZMusicManager:SetVolume(NewVolume) end
---@param SwitchGroup FName
---@param SwitchState FName
function USBZMusicManager:SetSwitch(SwitchGroup, SwitchState) end
---@param RTPC FName
---@param RTPCValue float
function USBZMusicManager:SetRTPCValue(RTPC, RTPCValue) end
---@param bInMuted boolean
function USBZMusicManager:SetMuted(bInMuted) end
---@param AudioStopEvent UAkAudioEvent
function USBZMusicManager:PostEndMusicSequence(AudioStopEvent) end
---@param AudioEvent UAkAudioEvent
---@param bStopCurrent boolean
function USBZMusicManager:PlayMusic(AudioEvent, bStopCurrent) end
---@return boolean
function USBZMusicManager:IsMuted() end
---@param WorldContextObject UObject
---@return USBZMusicManager
function USBZMusicManager:GetMusicManager(WorldContextObject) end


---@class USBZNavArea_AgilityClimbOnTopHigh : UNavArea
USBZNavArea_AgilityClimbOnTopHigh = {}


---@class USBZNavArea_AgilityClimbOnTopLow : UNavArea
USBZNavArea_AgilityClimbOnTopLow = {}


---@class USBZNavArea_AgilityClimbOverHigh : UNavArea
USBZNavArea_AgilityClimbOverHigh = {}


---@class USBZNavArea_AgilityClimbOverLow : UNavArea
USBZNavArea_AgilityClimbOverLow = {}


---@class USBZNavArea_AgilityGrapplingHook : UNavArea
USBZNavArea_AgilityGrapplingHook = {}


---@class USBZNavArea_AgilityJumpingDownHigh : UNavArea
USBZNavArea_AgilityJumpingDownHigh = {}


---@class USBZNavArea_AgilityJumpingDownLow : UNavArea
USBZNavArea_AgilityJumpingDownLow = {}


---@class USBZNavArea_AgilityJumpingStraightBig : UNavArea
USBZNavArea_AgilityJumpingStraightBig = {}


---@class USBZNavArea_AgilityJumpingStraightSmall : UNavArea
USBZNavArea_AgilityJumpingStraightSmall = {}


---@class USBZNavArea_AgilityLadder : UNavArea
USBZNavArea_AgilityLadder = {}


---@class USBZNavArea_AgilityMantling : UNavArea
USBZNavArea_AgilityMantling = {}


---@class USBZNavArea_AgilityMisc : UNavArea
USBZNavArea_AgilityMisc = {}


---@class USBZNavArea_AgilityRappel : UNavArea
USBZNavArea_AgilityRappel = {}


---@class USBZNavArea_AgilitySlideUnder : UNavArea
USBZNavArea_AgilitySlideUnder = {}


---@class USBZNavArea_AgilityVaulting : UNavArea
USBZNavArea_AgilityVaulting = {}


---@class USBZNavArea_AgilityWallRunning : UNavArea
USBZNavArea_AgilityWallRunning = {}


---@class USBZNavArea_AllowedArea : UNavArea
USBZNavArea_AllowedArea = {}


---@class USBZNavArea_DefaultCarve : UNavArea
USBZNavArea_DefaultCarve = {}


---@class USBZNavArea_ExitableNoEnter : UNavArea
USBZNavArea_ExitableNoEnter = {}


---@class USBZNavArea_ForbiddenDuringStealth : UNavArea
USBZNavArea_ForbiddenDuringStealth = {}


---@class USBZNavArea_NoPatrol : UNavArea
USBZNavArea_NoPatrol = {}


---@class USBZNavArea_PedestrianCrossing : UNavArea
USBZNavArea_PedestrianCrossing = {}


---@class USBZNavArea_PrivateArea : UNavArea
USBZNavArea_PrivateArea = {}


---@class USBZNavArea_PublicArea : UNavArea
USBZNavArea_PublicArea = {}


---@class USBZNavArea_SecureArea : UNavArea
USBZNavArea_SecureArea = {}


---@class USBZNavArea_Street : UNavArea
USBZNavArea_Street = {}


---@class USBZNavArea_StreetPedestrianCrossing : UNavArea
USBZNavArea_StreetPedestrianCrossing = {}


---@class USBZNavArea_WallRunningDetour : UNavArea
USBZNavArea_WallRunningDetour = {}


---@class USBZNavArea_ZipLine : UNavArea
USBZNavArea_ZipLine = {}


---@class USBZNavArea_ZipLinePlatform : UNavArea
USBZNavArea_ZipLinePlatform = {}


---@class USBZNavLinkAgilityComponent : UActorComponent
---@field LeftTrajectory FSBZAgilityTrajectory
---@field RightTrajectory FSBZAgilityTrajectory
---@field QueryParams USBZAgilityQueryParams
---@field LeftToRightType ESBZAgilityType
---@field RightToLeftType ESBZAgilityType
---@field IgnoredActorsByLeftTrajectory TArray<AActor>
---@field IgnoredActorsByRightTrajectory TArray<AActor>
---@field LeftToRightObstacle TScriptInterface<ISBZAgilityObstacleInterface>
---@field RightToLeftObstacle TScriptInterface<ISBZAgilityObstacleInterface>
---@field bUseNavMesh boolean
---@field ForcedLeftTrajectoryMontage UAnimMontage
---@field bLeftUseAnimationToComputeEnd boolean
---@field ForcedRightTrajectoryMontage UAnimMontage
---@field bRightUseAnimationToComputeEnd boolean
---@field bComputeOnBeginPlay boolean
---@field InterfaceObject UObject
USBZNavLinkAgilityComponent = {}

function USBZNavLinkAgilityComponent:ComputeTrajectories() end


---@class USBZNavLinkManager : UObject
---@field PointRadius int16
---@field MaxNavLinkChecksPerFrame int32
---@field CachedNavLinkPoints TArray<FSBZCachedNavLinkPoints>
USBZNavLinkManager = {}

---@param WorldContextObject UObject
---@return USBZNavLinkManager
function USBZNavLinkManager:Get(WorldContextObject) end


---@class USBZNavLinkTraversalComponent : UActorComponent
---@field LeftTrajectory FSBZAgilityTraversalTrajectory
---@field RightTrajectory FSBZAgilityTraversalTrajectory
---@field QueryParams USBZAgilityTraversalQueryParams
USBZNavLinkTraversalComponent = {}



---@class USBZNavLinkWaitSlotRoot : USceneComponent
---@field Slots TArray<FSBZNavLinkWaitSlot>
USBZNavLinkWaitSlotRoot = {}



---@class USBZNegotiationManager : UObject
---@field EndNegotiationTags FGameplayTagContainer
---@field Settings USBZNegotiationSettings
USBZNegotiationManager = {}

---@param DeadPawn APawn
function USBZNegotiationManager:OnPawnKilledDuringNegotiation(DeadPawn) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZNegotiationManager:OnHeistStateChanged(OldState, NewState) end


---@class USBZNegotiationSettings : UDataAsset
---@field DifficultySettingsArray FSBZNegotiationDifficultySettings
USBZNegotiationSettings = {}



---@class USBZNiagaraWwiseComponent : USceneComponent
---@field EventToPlayOneShot UAkAudioEvent
---@field EventToPlay UAkAudioEvent
---@field EventToStopPlay UAkAudioEvent
---@field Rtpc UAkRtpc
---@field NiagaraEffectOneShot UNiagaraSystem
---@field NiagaraEffect UNiagaraSystem
---@field AudioComponent USBZAmbientSoundComponent
---@field NiagaraComponent UNiagaraComponent
---@field bPlayFromBeginning boolean
---@field bOneShotEffect boolean
---@field bUpdateRtpc boolean
---@field RtpcUpdateValue float
---@field RtpcInterpolationTimerMS float
USBZNiagaraWwiseComponent = {}

---@param RtpcValue float
---@param RtpcInterpolationValue float
function USBZNiagaraWwiseComponent:UpdateRtpc(RtpcValue, RtpcInterpolationValue) end
function USBZNiagaraWwiseComponent:StopEffectsLoop() end
function USBZNiagaraWwiseComponent:PlayEffectsOneShot() end
function USBZNiagaraWwiseComponent:PlayEffectsLoop() end
function USBZNiagaraWwiseComponent:DestroyComponents() end
function USBZNiagaraWwiseComponent:DeactivateComponent() end
function USBZNiagaraWwiseComponent:ActivateComponent() end


---@class USBZNiagaraWwiseComponentNonOpt : USceneComponent
---@field EventToPlayOneShot UAkAudioEvent
---@field EventToPlay UAkAudioEvent
---@field EventToStopPlay UAkAudioEvent
---@field Rtpc UAkRtpc
---@field NiagaraEffectOneShot UNiagaraSystem
---@field NiagaraEffect UNiagaraSystem
---@field AudioComponent UAkComponent
---@field NiagaraComponent UNiagaraComponent
---@field bOneShotEffect boolean
---@field bUpdateRtpc boolean
---@field RtpcUpdateValue float
---@field RtpcInterpolationTimerMS float
USBZNiagaraWwiseComponentNonOpt = {}

---@param RtpcValue float
---@param RtpcInterpolationValue float
function USBZNiagaraWwiseComponentNonOpt:UpdateRtpc(RtpcValue, RtpcInterpolationValue) end
function USBZNiagaraWwiseComponentNonOpt:StopEffectsLoop() end
function USBZNiagaraWwiseComponentNonOpt:PlayEffectsOneShot() end
function USBZNiagaraWwiseComponentNonOpt:PlayEffectsLoop() end
function USBZNiagaraWwiseComponentNonOpt:DestroyComponents() end
function USBZNiagaraWwiseComponentNonOpt:DeactivateComponent() end
function USBZNiagaraWwiseComponentNonOpt:ActivateComponent() end


---@class USBZNodesFunctionLibrary : UBlueprintFunctionLibrary
USBZNodesFunctionLibrary = {}

---@param RandomStream FRandomStream
---@param LastOutputPinIndex int32
---@param Min int32
---@param Max int32
---@return int32
function USBZNodesFunctionLibrary:RollRNG(RandomStream, LastOutputPinIndex, Min, Max) end
---@param Index int32
---@param RngBitmask int32
---@return boolean
function USBZNodesFunctionLibrary:CheckRNG(Index, RngBitmask) end


---@class USBZNotificationWidget : UUserWidget
---@field BodyText UTextBlock
USBZNotificationWidget = {}

---@param InTextBlock UTextBlock
function USBZNotificationWidget:SetupWidget(InTextBlock) end
---@param InTextToDisplay FText
function USBZNotificationWidget:SetNotificationText(InTextToDisplay) end


---@class USBZObjectContainer : UObject
---@field Objects TArray<UObject>
---@field RestrictedObjectClass UClass
---@field RestrictedInterfaceType TSubclassOf<UInterface>
---@field bAllowDuplicates boolean
---@field bKeepSorted boolean
USBZObjectContainer = {}

function USBZObjectContainer:Reset() end
---@param Index int32
---@return boolean
function USBZObjectContainer:RemoveAt(Index) end
---@param Object UObject
---@return boolean
function USBZObjectContainer:Remove(Object) end
---@return TArray<UObject>
function USBZObjectContainer:K2_GetArray() end
---@return boolean
function USBZObjectContainer:CleanUp() end
---@param Object UObject
---@return boolean
function USBZObjectContainer:Add(Object) end


---@class USBZObjectContainerTickable : USBZObjectContainer
---@field TickDelegate FSBZObjectContainerTickableTickDelegate
USBZObjectContainerTickable = {}



---@class USBZObjectImpactConfig : USBZImpactConfig
USBZObjectImpactConfig = {}


---@class USBZObjectRingBuffer : USBZObjectContainer
---@field HeadIndex int32
---@field ElementDropped FSBZObjectRingBufferElementDropped
---@field DroppedElementContainer USBZObjectContainer
USBZObjectRingBuffer = {}



---@class USBZObjectiveContainerWidget : USBZWidgetBase
---@field Panel_ObjectivesContainer UPanelWidget
---@field Panel_OptionalObjectivesContainer UPanelWidget
---@field ObjectiveWidgetClass TSubclassOf<USBZObjectiveWidget>
USBZObjectiveContainerWidget = {}

---@param ObjectiveUObject UObject
function USBZObjectiveContainerWidget:OnObjectiveRemoved(ObjectiveUObject) end
---@param ObjectiveUObject UObject
function USBZObjectiveContainerWidget:OnObjectiveAdded(ObjectiveUObject) end
---@param Objective ASBZObjective
function USBZObjectiveContainerWidget:ObjectiveRemove(Objective) end
---@param Objective ASBZObjective
function USBZObjectiveContainerWidget:ObjectiveAdded(Objective) end


---@class USBZObjectiveWidget : USBZWidgetBase
---@field SubObjectiveWidgetClass TSubclassOf<USBZObjectiveWidget>
---@field Text_Objective URichTextBlock
---@field ProgressBar_Progress UProgressBar
---@field Text_ProgressSpeed UTextBlock
---@field Panel_SubObjectivesContainer UPanelWidget
---@field bIsActive boolean
---@field bIsTimed boolean
---@field Objective ASBZObjective
USBZObjectiveWidget = {}

function USBZObjectiveWidget:OnObjectiveUpdated() end
function USBZObjectiveWidget:OnObjectiveRemoved() end
---@param ObjectiveInit ASBZObjective
---@param bIsSubObjective boolean
function USBZObjectiveWidget:OnObjectiveInitialized(ObjectiveInit, bIsSubObjective) end
function USBZObjectiveWidget:OnObjectiveActivated() end
---@param ObjectiveUpdated ASBZObjective
function USBZObjectiveWidget:ObjectiveUpdated(ObjectiveUpdated) end
---@param ObjectiveFailed ASBZObjective
function USBZObjectiveWidget:ObjectiveFailed(ObjectiveFailed) end
---@param ObjectiveDisabled ASBZObjective
function USBZObjectiveWidget:ObjectiveDisabled(ObjectiveDisabled) end
---@param ObjectiveCompleted ASBZObjective
function USBZObjectiveWidget:ObjectiveCompleted(ObjectiveCompleted) end
---@param ObjectiveActivated ASBZObjective
function USBZObjectiveWidget:ObjectiveActivated(ObjectiveActivated) end


---@class USBZObservableActorContainer : USBZActorContainer
---@field OnChanged FSBZObservableActorContainerOnChanged
---@field OnAdded FSBZObservableActorContainerOnAdded
---@field OnRemoved FSBZObservableActorContainerOnRemoved
USBZObservableActorContainer = {}



---@class USBZOnTelegraphAttackComponent : UActorComponent
---@field OwnerCharacter ASBZAICharacter
---@field OwnerWeapon ASBZWeapon
USBZOnTelegraphAttackComponent = {}

---@param Equippable ASBZEquippable
function USBZOnTelegraphAttackComponent:OnUnequip(Equippable) end
---@param Character ASBZAICharacter
---@param bActivated boolean
function USBZOnTelegraphAttackComponent:OnTelegraphAttackChanged(Character, bActivated) end


---@class USBZOnlineEventBroker : UObject
USBZOnlineEventBroker = {}


---@class USBZOnlineFunctionLibrary : UBlueprintFunctionLibrary
USBZOnlineFunctionLibrary = {}

---@param WorldContextObject UObject
---@param UniqueNetId FUniqueNetIdRepl
function USBZOnlineFunctionLibrary:UnmutePlayer(WorldContextObject, UniqueNetId) end
---@param WorldContextObject UObject
---@param MatchmakingRegion FString
function USBZOnlineFunctionLibrary:SetMatchmakingRegion(WorldContextObject, MatchmakingRegion) end
---@param WorldContextObject UObject
---@param bIsClientReady boolean
function USBZOnlineFunctionLibrary:SetLocalClientReady(WorldContextObject, bIsClientReady) end
---@param WorldContextObject UObject
function USBZOnlineFunctionLibrary:RequestVoteRestartLevel(WorldContextObject) end
---@param WorldContextObject UObject
function USBZOnlineFunctionLibrary:RequestSteamLogin(WorldContextObject) end
---@param WorldContextObject UObject
function USBZOnlineFunctionLibrary:RequestRestartLevel(WorldContextObject) end
---@param WorldContextObject UObject
function USBZOnlineFunctionLibrary:RequestLoginWithDeviceID(WorldContextObject) end
---@param WorldContextObject UObject
---@param LoginFieldInfo FSBZLoginFieldInfo
function USBZOnlineFunctionLibrary:RequestLogin(WorldContextObject, LoginFieldInfo) end
---@param WorldContextObject UObject
function USBZOnlineFunctionLibrary:RequestDirectJoin(WorldContextObject) end
---@param WorldContextObject UObject
---@param RegistrationFieldInfo FSBZRegistrationFieldInfo
function USBZOnlineFunctionLibrary:RequestCreateAccount(WorldContextObject, RegistrationFieldInfo) end
---@param WorldContextObject UObject
---@param UniqueNetId FUniqueNetIdRepl
function USBZOnlineFunctionLibrary:MutePlayer(WorldContextObject, UniqueNetId) end
---@param WorldContextObject UObject
---@return FSoftObjectPath
function USBZOnlineFunctionLibrary:LevelIdxToPath(WorldContextObject) end
---@return boolean
function USBZOnlineFunctionLibrary:IsWinGDKActive() end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsUserOnline(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsTitleOnline(WorldContextObject) end
---@return boolean
function USBZOnlineFunctionLibrary:IsSteamActive() end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsSoloGame(WorldContextObject) end
---@return boolean
function USBZOnlineFunctionLibrary:IsShippingBuild() end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsServerAcceptingSlots(WorldContextObject) end
---@return boolean
function USBZOnlineFunctionLibrary:IsSecurityCompaniesProvided() end
---@param UniqueNetIdA FUniqueNetIdRepl
---@param UniqueNetIdB FUniqueNetIdRepl
---@return boolean
function USBZOnlineFunctionLibrary:IsSameUniqueId(UniqueNetIdA, UniqueNetIdB) end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsRequestInProgress(WorldContextObject) end
---@param ProductId int32
---@return boolean
function USBZOnlineFunctionLibrary:IsProductOwned(ProductId) end
---@param WorldContextObject UObject
---@param UniqueNetId FUniqueNetIdRepl
---@return boolean
function USBZOnlineFunctionLibrary:IsPlayerPartyOwner(WorldContextObject, UniqueNetId) end
---@param WorldContextObject UObject
---@param UniqueNetId FUniqueNetIdRepl
---@return boolean
function USBZOnlineFunctionLibrary:IsPlayerMuted(WorldContextObject, UniqueNetId) end
---@param WorldContextObject UObject
---@param UniqueNetId FUniqueNetIdRepl
---@return boolean
function USBZOnlineFunctionLibrary:IsPlayerInParty(WorldContextObject, UniqueNetId) end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsPartyOwner(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsPartyClient(WorldContextObject) end
---@param WorldContextObject UObject
---@param UniqueNetId FUniqueNetIdRepl
---@return boolean
function USBZOnlineFunctionLibrary:IsOwnUniqueId(WorldContextObject, UniqueNetId) end
---@return boolean
function USBZOnlineFunctionLibrary:IsNoSteam() end
---@return boolean
function USBZOnlineFunctionLibrary:IsNoHud() end
---@return boolean
function USBZOnlineFunctionLibrary:IsNoChallenges() end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsLocalPlayerInDropInLobby(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsLocalClientReady(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsLobbyHost(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsLobbyClient(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsInSession(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsInParty(WorldContextObject) end
---@return boolean
function USBZOnlineFunctionLibrary:IsForceLocalProgressionSaveFile() end
---@return boolean
function USBZOnlineFunctionLibrary:IsEOSActive() end
---@return boolean
function USBZOnlineFunctionLibrary:IsDifficultyArgumentProvided() end
---@return boolean
function USBZOnlineFunctionLibrary:IsDebugRandomSeedProvided() end
---@param WorldContextObject UObject
---@return boolean
function USBZOnlineFunctionLibrary:IsActionPhaseClient(WorldContextObject) end
---@return boolean
function USBZOnlineFunctionLibrary:IsAccelByteV2SessionsEnabled() end
---@return boolean
function USBZOnlineFunctionLibrary:IsAccelByteMatchmakingDisabled() end
---@param WorldContextObject UObject
function USBZOnlineFunctionLibrary:HideSessionFromJoin(WorldContextObject) end
---@param WorldContextObject UObject
---@param OutInfo TArray<FSBZLobbyCharacterInfoUi>
function USBZOnlineFunctionLibrary:GetUiLobbyInfo(WorldContextObject, OutInfo) end
---@param PlatformName FString
---@param NebulaName FString
---@param Platform ESBZPlatform
---@return FString
function USBZOnlineFunctionLibrary:GetSingleNameToShow(PlatformName, NebulaName, Platform) end
---@param WorldContextObject UObject
---@return EOnlineSessionInfo
function USBZOnlineFunctionLibrary:GetSessionInfo(WorldContextObject) end
---@param WorldContextObject UObject
---@param LevelName FString
---@param Difficulty ESBZDifficulty
---@return TArray<ESBZSecurityCompany>
function USBZOnlineFunctionLibrary:GetSecurityCompanyListForDifficulty(WorldContextObject, LevelName, Difficulty) end
---@return TArray<ESBZSecurityCompany>
function USBZOnlineFunctionLibrary:GetSecurityCompaniesArgument() end
---@param WorldContextObject UObject
---@return USBZOnlineSession
function USBZOnlineFunctionLibrary:GetSBZOnline(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZOnlineFunctionLibrary:GetPlayersCount(WorldContextObject) end
---@param WorldContextObject UObject
---@param UniqueNetId FUniqueNetIdRepl
---@return FString
function USBZOnlineFunctionLibrary:GetPlayerDisplayNameByUniqueId(WorldContextObject, UniqueNetId) end
---@param WorldContextObject UObject
---@param UniqueNetId FUniqueNetIdRepl
---@return UTexture2D
function USBZOnlineFunctionLibrary:GetPlayerAvatarByUniqueId(WorldContextObject, UniqueNetId) end
---@param WorldContextObject UObject
---@param PlayerIndex int32
---@return UTexture2D
function USBZOnlineFunctionLibrary:GetPlayerAvatar(WorldContextObject, PlayerIndex) end
---@param AccelbytePlatformId FString
---@return ESBZPlatform
function USBZOnlineFunctionLibrary:GetPlatformFromAccelbytePlatformId(AccelbytePlatformId) end
---@return ESBZPlatform
function USBZOnlineFunctionLibrary:GetPlatform() end
---@param WorldContextObject UObject
---@param LevelIdx int32
---@return FSoftObjectPath
function USBZOnlineFunctionLibrary:GetPathNameFromLevelIdx(WorldContextObject, LevelIdx) end
---@param WorldContextObject UObject
---@return int32
function USBZOnlineFunctionLibrary:GetPartyMembersCount(WorldContextObject) end
---@param WorldContextObject UObject
---@param PlayerIndex int32
---@return UTexture2D
function USBZOnlineFunctionLibrary:GetPartyMemberAvatar(WorldContextObject, PlayerIndex) end
---@param WorldContextObject UObject
---@return ESBZOnlineJoinType
function USBZOnlineFunctionLibrary:GetPartyJoinType(WorldContextObject) end
---@param WorldContextObject UObject
---@param OutPartyData FSBZPartyData
---@return boolean
function USBZOnlineFunctionLibrary:GetPartyData(WorldContextObject, OutPartyData) end
---@return FString
function USBZOnlineFunctionLibrary:GetOverrideLevelName() end
---@return FString
function USBZOnlineFunctionLibrary:GetOverrideAccelbyteGameMode() end
---@param WorldContextObject UObject
---@return uint8
function USBZOnlineFunctionLibrary:GetMaxPlayersForSession(WorldContextObject) end
---@param WorldContextObject UObject
---@return uint8
function USBZOnlineFunctionLibrary:GetMaxPlayersArgument(WorldContextObject) end
---@param WorldContextObject UObject
---@return FSBZOnlineMatchmakingParams
function USBZOnlineFunctionLibrary:GetMatchmakingParameters(WorldContextObject) end
---@param WorldContextObject UObject
---@return FString
function USBZOnlineFunctionLibrary:GetLastMatchID(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZOnlineFunctionLibrary:GetFoundPlayersCount(WorldContextObject) end
---@return int32
function USBZOnlineFunctionLibrary:GetDifficultyIdxArgument() end
---@return int32
function USBZOnlineFunctionLibrary:GetDebugRandomSeed() end
---@return int32
function USBZOnlineFunctionLibrary:GetDebugMatchmakingGroup() end
---@param WorldContextObject UObject
---@return FSBZLoginFieldInfo
function USBZOnlineFunctionLibrary:GetDebugLoginAndPassword(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZOnlineFunctionLibrary:GetConnectionsCount(WorldContextObject) end
---@param WorldContextObject UObject
---@param OutInfo FSBZMissionInfo
function USBZOnlineFunctionLibrary:GetBeaconMissionInfo(WorldContextObject, OutInfo) end
---@param WorldContextObject UObject
---@param OutParam TArray<FUniqueNetIdRepl>
function USBZOnlineFunctionLibrary:GetAllPlayersUniqueNetIds(WorldContextObject, OutParam) end
---@return FString
function USBZOnlineFunctionLibrary:GetAccelByteLinkedAccountsUrl() end
---@param WorldContextObject UObject
---@param InSessionToJoin FSBZOnlineSearchResult
function USBZOnlineFunctionLibrary:DebugJoinByInvite(WorldContextObject, InSessionToJoin) end
---@param WorldContextObject UObject
---@param SessionName FName
---@return FString
function USBZOnlineFunctionLibrary:DebugGetSessionParameters(WorldContextObject, SessionName) end
---@param WorldContextObject UObject
function USBZOnlineFunctionLibrary:ActivateSessionInviteOverlay(WorldContextObject) end
---@param WorldContextObject UObject
---@param PlayerId FUniqueNetIdRepl
function USBZOnlineFunctionLibrary:ActivateProfileOverlay(WorldContextObject, PlayerId) end
---@param WorldContextObject UObject
function USBZOnlineFunctionLibrary:ActivatePartyInviteOverlay(WorldContextObject) end


---@class USBZOnlineGetAvailableRegions : UBlueprintAsyncActionBase
---@field OnComplete FSBZOnlineGetAvailableRegionsOnComplete
USBZOnlineGetAvailableRegions = {}

---@param WorldContextObject UObject
---@return USBZOnlineGetAvailableRegions
function USBZOnlineGetAvailableRegions:GetAvailableRegions(WorldContextObject) end


---@class USBZOnlineGetNewsFeedCallbackProxy : UBlueprintAsyncActionBase
---@field OnComplete FSBZOnlineGetNewsFeedCallbackProxyOnComplete
---@field WorldContextObject UObject
USBZOnlineGetNewsFeedCallbackProxy = {}

---@param WorldContextObject UObject
---@return USBZOnlineGetNewsFeedCallbackProxy
function USBZOnlineGetNewsFeedCallbackProxy:RequestNewsFeed(WorldContextObject) end


---@class USBZOnlineSession : UOnlineSession
---@field OnMissionEndReceived FSBZOnlineSessionOnMissionEndReceived
---@field OnNetworkDisconnect FSBZOnlineSessionOnNetworkDisconnect
---@field OnNetworkReconnect FSBZOnlineSessionOnNetworkReconnect
---@field OnBecamePartyHost FSBZOnlineSessionOnBecamePartyHost
---@field OnBecamePartyClient FSBZOnlineSessionOnBecamePartyClient
---@field OnLeftParty FSBZOnlineSessionOnLeftParty
---@field OnLocalPartyJoinTypeUpdated FSBZOnlineSessionOnLocalPartyJoinTypeUpdated
---@field OnInviteProcessingBegin FSBZOnlineSessionOnInviteProcessingBegin
---@field OnInviteProcessingFinish FSBZOnlineSessionOnInviteProcessingFinish
---@field OnMatchmakingStarted FSBZOnlineSessionOnMatchmakingStarted
---@field OnMatchFound FSBZOnlineSessionOnMatchFound
---@field OnMatchOutdated FSBZOnlineSessionOnMatchOutdated
---@field OnMatchRejected FSBZOnlineSessionOnMatchRejected
---@field OnMatchRestartRejected FSBZOnlineSessionOnMatchRestartRejected
---@field OnMatchAccepted FSBZOnlineSessionOnMatchAccepted
---@field OnMatchInfoUpdated FSBZOnlineSessionOnMatchInfoUpdated
---@field OnMatchmAcceptUnlock FSBZOnlineSessionOnMatchmAcceptUnlock
---@field OnLobbyWaitPlayersCountdownStarted FSBZOnlineSessionOnLobbyWaitPlayersCountdownStarted
---@field OnLobbyWaitGameCountdownStarted FSBZOnlineSessionOnLobbyWaitGameCountdownStarted
---@field OnWaitActionPhaseStarted FSBZOnlineSessionOnWaitActionPhaseStarted
---@field OnWaitOtherPlayersStarted FSBZOnlineSessionOnWaitOtherPlayersStarted
---@field OnMatchmakingStopped FSBZOnlineSessionOnMatchmakingStopped
---@field OnLobbyComplete FSBZOnlineSessionOnLobbyComplete
---@field OnLocalClientReady FSBZOnlineSessionOnLocalClientReady
---@field OnNetworkError FSBZOnlineSessionOnNetworkError
---@field OnLobbyStateUpdated FSBZOnlineSessionOnLobbyStateUpdated
---@field OnPlayerMuted FSBZOnlineSessionOnPlayerMuted
---@field OnLobbySlotLoadoutChanged FSBZOnlineSessionOnLobbySlotLoadoutChanged
---@field OnSlotReservationComplete FSBZOnlineSessionOnSlotReservationComplete
---@field OnPartyCreated FSBZOnlineSessionOnPartyCreated
---@field Party USBZParty
---@field PartyManager USBZPartyManager
---@field OnlineSessionSettingManager USBZOnlineSessionSettingsManager
---@field Lobby USBZLobby
---@field Chat USBZChat
---@field Invites USBZInvites
---@field KickingManager USBZKickingManager
---@field VotingManager USBZVotingManager
---@field Matchmaking USBZMatchmaking
---@field OnlineSessionUtils USBZOnlineSessionUtils
---@field OnlineSessionRequestHandler USBZOnlineSessionRequestHandler
---@field OnlineSessionSearch USBZOnlineSessionSearch
---@field P2P USBZP2PSession
---@field GlobalLobby USBZGlobalLobby
---@field FriendManager USBZFriendManager
---@field JobOverviewSync ASBZJobOverviewSync
---@field OnlineSlotsClient USBZOnlineSlotsClient
---@field OnlineSlotsHost USBZOnlineSlotsHost
---@field Voip USBZOnlineVoip
---@field bHostPartyByDefault boolean
---@field GameRecordsManager USBZGameRecordsManager
---@field BlockedPlayerManager USBZBlockedPlayerManager
---@field AvatarCache USBZAvatarCache
USBZOnlineSession = {}

---@param bIsClientReady boolean
function USBZOnlineSession:SetLocalClientReady(bIsClientReady) end
---@param ServiceStatus ESBZServiceStatus
function USBZOnlineSession:OnNetworkStatus(ServiceStatus) end
---@return boolean
function USBZOnlineSession:IsLocalClientReady() end
---@param RequestType ESBZOnlineSessionRequestType
function USBZOnlineSession:HandleOnlinePlatformError(RequestType) end
---@return TArray<FSBZLobbyCharacterInfoUi>
function USBZOnlineSession:GetUiLobbyInfo() end
---@return int32
function USBZOnlineSession:GetPlayersCount() end
---@return int32
function USBZOnlineSession:GetPartyMembersCount() end
---@param EventName FString
function USBZOnlineSession:GetMenuEvent(EventName) end
---@return FString
function USBZOnlineSession:GetMatchmakingRegion() end
---@return USBZLobbyLocalState
function USBZOnlineSession:GetLobbyState() end
---@return int32
function USBZOnlineSession:GetFoundPlayersCount() end
---@return FSBZMissionInfo
function USBZOnlineSession:GetBeaconMissionInfo() end


---@class USBZOnlineSessionRequestHandler : UObject
---@field Lobby USBZLobby
---@field Party USBZParty
---@field SessionRequestTimeoutDuration float
USBZOnlineSessionRequestHandler = {}

---@return EOnlineSessionInfo
function USBZOnlineSessionRequestHandler:GetSessionInfo() end


---@class USBZOnlineSessionSearch : UObject
---@field GameSearchKeyword FString
---@field bHostPartyByDefault boolean
---@field SearchResults TArray<FSBZOnlineSearchResult>
USBZOnlineSessionSearch = {}



---@class USBZOnlineSessionSettingsManager : UObject
USBZOnlineSessionSettingsManager = {}


---@class USBZOnlineSessionUtils : UObject
---@field Party USBZPartyManager
---@field Lobby USBZLobby
USBZOnlineSessionUtils = {}

---@return boolean
function USBZOnlineSessionUtils:IsPartyOwner() end
---@return boolean
function USBZOnlineSessionUtils:IsPartyClient() end
---@return boolean
function USBZOnlineSessionUtils:IsLobbyHost() end
---@return boolean
function USBZOnlineSessionUtils:IsLobbyClient() end
---@return boolean
function USBZOnlineSessionUtils:IsInSession() end
---@return boolean
function USBZOnlineSessionUtils:IsInParty() end
---@return boolean
function USBZOnlineSessionUtils:IsActionPhaseHost() end
---@return boolean
function USBZOnlineSessionUtils:IsActionPhaseClient() end


---@class USBZOnlineSlotsClient : UObject
---@field SlotsData TArray<FSBZSlotData>
---@field PreMatchReadyTimer FTimerHandle
---@field CharacterInfoArray TArray<FSBZLobbyCharacterInfoUi>
---@field LocalPlayerData FSBZSlotData
---@field PreTravelTimeLimit float
USBZOnlineSlotsClient = {}



---@class USBZOnlineSlotsHost : UObject
---@field SlotsSync ASBZOnlineSlotsSync
---@field PreMatchReadyTimer FTimerHandle
---@field PreTravelTimer FTimerHandle
---@field PreMatchLongReadyTimeLimit float
---@field PreMatchShortReadyTimeLimit float
---@field PreTravelTimeLimit float
---@field OnlineSession USBZOnlineSession
USBZOnlineSlotsHost = {}



---@class USBZOnlineVoip : UObject
USBZOnlineVoip = {}

---@param DeviceName FString
function USBZOnlineVoip:SetCaptureDevice(DeviceName) end
---@param NewState FName
function USBZOnlineVoip:HandleStateEntered(NewState) end
---@return FString
function USBZOnlineVoip:GetSelectedCaptureDevice() end
---@param WorldContextObject UObject
---@return USBZOnlineVoip
function USBZOnlineVoip:GetSBZOnlineVoip(WorldContextObject) end
---@return TArray<FString>
function USBZOnlineVoip:GetCaptureDevices() end
---@return float
function USBZOnlineVoip:GetCaptureDeviceAmplitude() end


---@class USBZOutlineAsset : UDataAsset
---@field Priority int32
---@field ColorIndex int8
---@field Distance float
USBZOutlineAsset = {}



---@class USBZOutlineComponent : UActorComponent
---@field DefaultAsset USBZOutlineAsset
---@field MeshSelectors TArray<FSBZComponentSelector>
---@field InteractableSelector FSBZComponentSelector
---@field InteractableFocusAsset USBZOutlineAsset
---@field Meshes TArray<UMeshComponent>
---@field ActiveReplicated USBZOutlineAsset
---@field bIsReplicatedHidden boolean
USBZOutlineComponent = {}

---@param bInIsReplicatedHidden boolean
function USBZOutlineComponent:SetReplicatedHidden(bInIsReplicatedHidden) end
---@param WorldContextObject UObject
---@param bVal boolean
function USBZOutlineComponent:SetGloballyHideAllOutlines(WorldContextObject, bVal) end
---@param Mesh UMeshComponent
---@param bRemoveFromSelectorsIfUninitialized boolean
function USBZOutlineComponent:RemoveMesh(Mesh, bRemoveFromSelectorsIfUninitialized) end
function USBZOutlineComponent:OnRep_IsReplicatedHidden() end
function USBZOutlineComponent:OnRep_ActiveReplicated() end
---@param bInIsReplicatedHidden boolean
function USBZOutlineComponent:Multicast_SetReplicatedHidden(bInIsReplicatedHidden) end
---@param NewActiveReplicated USBZOutlineAsset
function USBZOutlineComponent:Multicast_SetActiveReplicated(NewActiveReplicated) end
---@param InteractableComponent USBZBaseInteractableComponent
---@param bInFocus boolean
function USBZOutlineComponent:HandleInteractionFocusChanged(InteractableComponent, bInFocus) end
---@param InteractableComponent USBZBaseInteractableComponent
---@param bEnabled boolean
function USBZOutlineComponent:HandleInteractionEnabledStateChanged(InteractableComponent, bEnabled) end
---@param Mesh UMeshComponent
---@param bAddToSelectorsIfUninitialized boolean
function USBZOutlineComponent:AddMesh(Mesh, bAddToSelectorsIfUninitialized) end


---@class USBZOverloadMicroCameraAbility : USBZGameplayAbility
---@field OwnerCharacter ASBZPlayerCharacter
USBZOverloadMicroCameraAbility = {}



---@class USBZOverrideMaxStepHeightRootMotion : UAnimNotifyState
USBZOverrideMaxStepHeightRootMotion = {}


---@class USBZP2PSession : UObject
---@field OnSessionJoined FSBZP2PSessionOnSessionJoined
---@field OnSessionJoinStarted FSBZP2PSessionOnSessionJoinStarted
USBZP2PSession = {}

---@param InWorld UWorld
function USBZP2PSession:OnLevelLoaded(InWorld) end


---@class USBZP2PSessionV1 : USBZP2PSession
USBZP2PSessionV1 = {}


---@class USBZP2PSessionV2 : USBZP2PSession
USBZP2PSessionV2 = {}


---@class USBZPagerData : UDataAsset
---@field StartDelayInterval FFloatInterval
---@field bCanRestart boolean
---@field RestartDelayInterval FFloatInterval
---@field TimoutDuration float
---@field Marker USBZMarkerDataAsset
---@field Outline USBZOutlineAsset
---@field MarkerSocket FName
---@field StartAudioEvent UAkAudioEvent
---@field RestartAudioEvent UAkAudioEvent
---@field AnswerDialogArray TArray<USBZDialogDataAsset>
---@field StopAudioEvent UAkAudioEvent
---@field TimeoutAudioEvent UAkAudioEvent
---@field TimeoutFailAudioEvent UAkAudioEvent
USBZPagerData = {}



---@class USBZParticleLibrary : UBlueprintFunctionLibrary
USBZParticleLibrary = {}

---@param WorldContextObject UObject
---@param EmitterTemplate UParticleSystem
---@param Location FVector
---@param Rotation FRotator
---@param Scale FVector
---@return UParticleSystemComponent
function USBZParticleLibrary:SpawnPooledEmitterAtLocation(WorldContextObject, EmitterTemplate, Location, Rotation, Scale) end
---@param World UWorld
---@param EmitterTemplate UParticleSystem
---@param SpawnLocation FVector
---@param SpawnRotation FRotator
---@param SpawnScale FVector
---@return UParticleSystemComponent
function USBZParticleLibrary:InternalSpawnPooledEmitterAtLocation(World, EmitterTemplate, SpawnLocation, SpawnRotation, SpawnScale) end


---@class USBZParty : UObject
---@field EventPartyHostEnteredMatchmaking FSBZPartyEventPartyHostEnteredMatchmaking
---@field EventPartyHostEnteredLobby FSBZPartyEventPartyHostEnteredLobby
---@field EventPartyHostEnteredMainMenu FSBZPartyEventPartyHostEnteredMainMenu
---@field PartyClient USBZPartyClient
---@field PartyHost USBZPartyHost
---@field State FSBZPartyData
---@field DefaultPort int32
---@field PartyRestoreTimeout float
USBZParty = {}

---@param InPartyState FSBZPartyData
function USBZParty:UpdatePartyState(InPartyState) end
---@param Result ESBZOnlineCode
function USBZParty:JoinPartyComplete(Result) end
---@param Params FSBZOnlineSessionParams
function USBZParty:HostPartySession(Params) end
---@param Result ESBZOnlineCode
function USBZParty:HostPartyComplete(Result) end
function USBZParty:HandleLostConnectionToPartyHost() end
---@param StateName FName
function USBZParty:HandleGameStateLeft(StateName) end
---@param StateName FName
function USBZParty:HandleGameStateEnter(StateName) end
---@return FSBZPartyData
function USBZParty:GetPartyData() end
function USBZParty:CancelPartyRestore() end


---@class USBZPartyClient : UObject
---@field PartyState FSBZPartyData
USBZPartyClient = {}

---@param ClientId FUniqueNetIdRepl
function USBZPartyClient:ServerNotifyLeftLobby(ClientId) end
---@param ClientId FUniqueNetIdRepl
function USBZPartyClient:ServerNotifyJoinedLobby(ClientId) end
---@param ClientId FUniqueNetIdRepl
function USBZPartyClient:ServerNotifyFailedToJoinLobby(ClientId) end
---@param Client FSBZPartyMemberInfo
function USBZPartyClient:ServerLogin(Client) end
function USBZPartyClient:OnRep_PartyState() end
function USBZPartyClient:LeaveLobby() end
---@param InLobbyNetId FString
function USBZPartyClient:ConnectToLobby(InLobbyNetId) end
---@param InNetId FUniqueNetIdRepl
---@param bWasSuccessful boolean
function USBZPartyClient:ClientLoginAck(InNetId, bWasSuccessful) end


---@class USBZPartyHost : UObject
---@field OnPartyJoined FSBZPartyHostOnPartyJoined
---@field OnPartyUpdated FSBZPartyHostOnPartyUpdated
---@field PartyMembers TArray<FSBZPartyMemberInfo>
---@field PartyTravelTimeout float
---@field PartyDisconnectTimeout float
---@field TravellingMembers TArray<FUniqueNetIdRepl>
---@field TravelTimeoutTimer FTimerHandle
---@field LeavingMembers TArray<FUniqueNetIdRepl>
---@field LeaveLobbyTimeoutTimer FTimerHandle
USBZPartyHost = {}

---@param PartyMemberId FUniqueNetIdRepl
function USBZPartyHost:NotifyClientLeftLobby(PartyMemberId) end
---@param PartyMemberNetId FUniqueNetIdRepl
function USBZPartyHost:NotifyClientFailedConnectionToLobby(PartyMemberNetId) end
---@param PartyMemberNetId FUniqueNetIdRepl
function USBZPartyHost:NotifyClientConnectedToLobby(PartyMemberNetId) end
function USBZPartyHost:HandlePartyTravelTimeout() end
function USBZPartyHost:HandlePartyLeaveLobbyTimeout() end
---@param ChangedPlayerState APlayerState
function USBZPartyHost:FirePartyUpdated(ChangedPlayerState) end
---@param Result ESBZOnlineCode
function USBZPartyHost:BroadcastPartyTravelled(Result) end
---@param Result ESBZOnlineCode
function USBZPartyHost:BroadcastPartyLeftLobby(Result) end


---@class USBZPartyManager : UObject
---@field PartyMembers TArray<FSBZPartyMember>
---@field OnChatChannelJoinEvent FSBZPartyManagerOnChatChannelJoinEvent
---@field OnPrivateMessageSentStatus FSBZPartyManagerOnPrivateMessageSentStatus
---@field OnPrivateMessageReceived FSBZPartyManagerOnPrivateMessageReceived
---@field OnPublicMessageSentStatus FSBZPartyManagerOnPublicMessageSentStatus
---@field OnPublicMessageReceived FSBZPartyManagerOnPublicMessageReceived
---@field OnPartyMessageSentStatus FSBZPartyManagerOnPartyMessageSentStatus
---@field OnPartyMessageReceived FSBZPartyManagerOnPartyMessageReceived
---@field OnPartyInvitiationReceived FSBZPartyManagerOnPartyInvitiationReceived
---@field PartyPlayerJoinEvent FSBZPartyManagerPartyPlayerJoinEvent
---@field PartyPlayerLeaveEvent FSBZPartyManagerPartyPlayerLeaveEvent
---@field PartyPlayerKickEvent FSBZPartyManagerPartyPlayerKickEvent
---@field PartyInfoUpdateEvent FSBZPartyManagerPartyInfoUpdateEvent
---@field PartyInvitesUpdateEvent FSBZPartyManagerPartyInvitesUpdateEvent
---@field PartyId FString
---@field PartyCode FString
---@field InvitesReceived TArray<FSBZPartyInvitation>
---@field InvitesSent TArray<FSBZPartyInvitation>
USBZPartyManager = {}

---@param InLobbyType ESBZOnlineJoinType
function USBZPartyManager:SetLobbyType(InLobbyType) end
---@param Message FString
---@return FString
function USBZPartyManager:SendPublicMessage(Message) end
---@param PlayerId FString
---@param Message FString
---@return boolean
function USBZPartyManager:SendPrivateMessage(PlayerId, Message) end
---@param Message FString
---@return boolean
function USBZPartyManager:SendPartyMessage(Message) end
---@return FString
function USBZPartyManager:SendJoinPublicChatChannel() end
---@return boolean
function USBZPartyManager:IsMatchmakingRequestedByPartyLeader() end
---@return int32
function USBZPartyManager:GetPartyPlayersNumber() end
---@param WorldContextObject UObject
---@return USBZPartyManager
function USBZPartyManager:GetPartyManager(WorldContextObject) end
---@return FSBZPartyMember
function USBZPartyManager:GetPartyLeader() end
---@return ESBZOnlineJoinType
function USBZPartyManager:GetLobbyType() end


---@class USBZPartyManagerAB : USBZPartyManager
USBZPartyManagerAB = {}

function USBZPartyManagerAB:OnPartyLeaderStoppedMatchmaking() end
function USBZPartyManagerAB:OnPartyLeaderStartedMatchmaking() end
function USBZPartyManagerAB:OnPartyLeaderMatchJoin() end
function USBZPartyManagerAB:OnPartyLeaderMatchFound() end
function USBZPartyManagerAB:OnEnteredGameStart() end
---@param Code FString
function USBZPartyManagerAB:JoinPartyAfterLeave(Code) end
---@param ActionName FName
function USBZPartyManagerAB:InvitePopUpCallback(ActionName) end


---@class USBZPartyManagerABV2 : USBZPartyManagerAB
USBZPartyManagerABV2 = {}

---@param ActionName FName
function USBZPartyManagerABV2:InvitePopUpCallbackV2(ActionName) end
---@param OldUserIndex int32
function USBZPartyManagerABV2:HandlePlatformUserChanged(OldUserIndex) end


---@class USBZPathFocusSettings : UDataAsset
---@field MinPathLengthGoal float
---@field MinPathLengthNoGoal float
---@field MinRemainingPathLength float
---@field MinDistanceFromEnemy float
---@field MinShotRadius float
USBZPathFocusSettings = {}



---@class USBZPawnAttributeSet : UAttributeSet
---@field Damage FGameplayAttributeData
---@field ArmorPenetration FGameplayAttributeData
---@field Health FGameplayAttributeData
---@field HealthMax FGameplayAttributeData
---@field Armor FGameplayAttributeData
---@field ArmorMax FGameplayAttributeData
---@field ArmorHardness FGameplayAttributeData
---@field ArmorHurtReactionWeightReduction FGameplayAttributeData
---@field DealtDamageMultiplier FGameplayAttributeData
---@field LastDamageTypeCDO USBZDamageType
---@field LastInstigatorPawn APawn
---@field FlashedVoiceComment USBZVoiceCommentDataAsset
---@field FlashedByAllyVoiceComment USBZVoiceCommentDataAsset
---@field HitByFragVoiceComment USBZVoiceCommentDataAsset
USBZPawnAttributeSet = {}

---@param OldHealth FGameplayAttributeData
function USBZPawnAttributeSet:OnRep_Health(OldHealth) end
---@param OldArmor FGameplayAttributeData
function USBZPawnAttributeSet:OnRep_Armor(OldArmor) end
---@param NewCurrentValue float
function USBZPawnAttributeSet:Multicast_SetHealth(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPawnAttributeSet:Multicast_SetArmor(NewCurrentValue) end


---@class USBZPawnSpawnBehaviourBase : UObject
USBZPawnSpawnBehaviourBase = {}


---@class USBZPawnSpawnEditorMeshComponent : UPrimitiveComponent
USBZPawnSpawnEditorMeshComponent = {}


---@class USBZPawnSpawnPreviewActorConfig : UObject
---@field PreviewActorClassName FSoftClassPath
USBZPawnSpawnPreviewActorConfig = {}



---@class USBZPawnSpawnRequestData : UDataAsset
---@field ClassVariationArray TArray<TSubclassOf<APawn>>
---@field PawnVariationDatas TArray<FSBZPawnVariationData>
USBZPawnSpawnRequestData = {}



---@class USBZPawnSpawnSettings : UDeveloperSettings
---@field DefaultSetting FSBZPawnPlatformSpawnSettings
---@field PlatformSettingMap TMap<ESBZPlatform, FSBZPawnPlatformSpawnSettings>
USBZPawnSpawnSettings = {}



---@class USBZPawnWidget : USBZWidgetBase
---@field PlayerCharacter ASBZPlayerCharacter
USBZPawnWidget = {}



---@class USBZPayDayCreditData : USBZInventoryBaseData
---@field ExternaltemId FString
USBZPayDayCreditData = {}



---@class USBZPayDayCreditDatabase : USBZItemDatabase
---@field PayDayCreditArray TArray<USBZPayDayCreditData>
USBZPayDayCreditDatabase = {}



---@class USBZPedestrianTrafficNavLinkPreviewData : UDataAsset
---@field SkeletalMesh USkeletalMesh
---@field Animation UAnimationAsset
USBZPedestrianTrafficNavLinkPreviewData = {}



---@class USBZPersistentWorldDamageSettings : USBZDeveloperSettings
---@field MaxHealth float
---@field Health float
---@field RadialDamageMultiplier float
USBZPersistentWorldDamageSettings = {}



---@class USBZPersistentWorldDamageZoneComponent : USBZEllipsoidComponent
---@field InfluencedMeshes TArray<TSoftObjectPtr<UMeshComponent>>
---@field PreviousRadialDamageCauser AActor
---@field MaxHealth float
---@field Health float
---@field RadialDamageMultiplier float
---@field bAffectOwnerOnly boolean
USBZPersistentWorldDamageZoneComponent = {}

---@param DamagedActor AActor
---@param DamageAmount float
---@param DamageEvent FRadialDamageEvent
---@param EventInstigator AController
---@param DamageCauser AActor
function USBZPersistentWorldDamageZoneComponent:HandleTakeRadialDamage(DamagedActor, DamageAmount, DamageEvent, EventInstigator, DamageCauser) end
---@param DamagedActor AActor
---@param DamageAmount float
---@param DamageEvent FPointDamageEvent
---@param EventInstigator AController
---@param DamageCauser AActor
function USBZPersistentWorldDamageZoneComponent:HandleTakePointDamage(DamagedActor, DamageAmount, DamageEvent, EventInstigator, DamageCauser) end


---@class USBZPhoneThumbPressedNotify : UAnimNotify
USBZPhoneThumbPressedNotify = {}


---@class USBZPhoneThumbReleasedNotify : UAnimNotify
USBZPhoneThumbReleasedNotify = {}


---@class USBZPhoneToolAbility : USBZGameplayAbility
---@field OwnerCharacter ASBZPlayerCharacter
USBZPhoneToolAbility = {}



---@class USBZPingCallAsset : UDataAsset
---@field ChatMessage FText
---@field CallIcon UPaperSprite
---@field CallComment USBZVoiceCommentDataAsset
USBZPingCallAsset = {}



---@class USBZPingWidget : USBZWidgetBase
---@field TimeBetweenUpdates float
---@field HighThreshold int32
---@field CriticalThreshold int32
---@field PlayerState APlayerState
USBZPingWidget = {}

---@param PingValue int32
function USBZPingWidget:OnPingValueChanged(PingValue) end
---@param PingQuality EPingQuality
function USBZPingWidget:OnPingQualityChanged(PingQuality) end


---@class USBZPitchLookCameraModifier : USBZPlayerCameraModifier
USBZPitchLookCameraModifier = {}


---@class USBZPlaceCuttableToolAbility : USBZPlaceToolAbility
USBZPlaceCuttableToolAbility = {}


---@class USBZPlaceECMJammerAbility : USBZPlaceToolAbility
USBZPlaceECMJammerAbility = {}


---@class USBZPlaceItemAbility : USBZGameplayAbility
---@field OwnerCharacter ASBZCharacter
---@field GhostActor AActor
---@field PlaceableActor ASBZPlaceableCharges
USBZPlaceItemAbility = {}

---@param DeltaSeconds float
function USBZPlaceItemAbility:Tick(DeltaSeconds) end


---@class USBZPlaceMicroCameraAbility : USBZPlaceToolAbility
USBZPlaceMicroCameraAbility = {}


---@class USBZPlaceSensorToolAbility : USBZPlaceToolAbility
USBZPlaceSensorToolAbility = {}


---@class USBZPlaceToolAbility : USBZGameplayAbility
---@field OwnerCharacter ASBZPlayerCharacter
---@field GhostTool ASBZGhostTool
---@field AttachParent UPrimitiveComponent
USBZPlaceToolAbility = {}



---@class USBZPlaceTripMineAbility : USBZPlaceToolAbility
USBZPlaceTripMineAbility = {}


---@class USBZPlaceableAmmoData : USBZPlaceableData
USBZPlaceableAmmoData = {}


---@class USBZPlaceableArmorData : USBZPlaceableData
USBZPlaceableArmorData = {}


---@class USBZPlaceableData : USBZEquippableData
---@field GhostActorClass TSoftClassPtr<AActor>
---@field AmmoInventoryMax int32
---@field AmmoInventory int32
---@field MaxTraceDistance float
---@field MaxDropdownTraceDistance float
---@field TraceStepSize float
---@field MaxSlopeAngle float
---@field OverrideGravityZ float
---@field ArcParam float
---@field BoxExtents FVector
---@field PlacementOffsetAngle float
---@field bUseLinetraceInitially boolean
---@field RequiredTagContainer FGameplayTagContainer
---@field StatisticsDeployString FString
USBZPlaceableData = {}



---@class USBZPlaceableDatabase : USBZItemDatabase
---@field Placeables TArray<USBZPlaceableData>
USBZPlaceableDatabase = {}



---@class USBZPlaceableHealthData : USBZPlaceableData
USBZPlaceableHealthData = {}


---@class USBZPlaceableSensorToolData : USBZToolData
USBZPlaceableSensorToolData = {}


---@class USBZPlaceableSentryData : USBZPlaceableData
USBZPlaceableSentryData = {}


---@class USBZPlaceableTripMineData : USBZToolData
---@field Range float
---@field AdditionalPlayerRange float
---@field StunTime float
---@field GameplayEffectClass TSubclassOf<UGameplayEffect>
---@field DurationTag FGameplayTag
USBZPlaceableTripMineData = {}



---@class USBZPlatformUserManager : UObject
USBZPlatformUserManager = {}

---@param ActionName FName
function USBZPlatformUserManager:OnPopUpClosedConfirmChanges(ActionName) end
---@param Event FSBZUIStackChangedEvent
function USBZPlatformUserManager:HandleUIStackChanged(Event) end


---@class USBZPlayerAbilityData : USBZCharacterAbilityData
---@field InitialMaxDownedCount int32
---@field InitialDownedHealth float
---@field InitialReviveHealth float
---@field InitialDefeatDownedTime float
---@field InitialDefeatCuffedTime float
---@field InitialDownedToCuffedHealth float
---@field InitialCriticalHealthMax float
---@field InitialCriticalHealthDamageScale float
---@field InitialDodge float
---@field InitialDodgeReplenishDelay float
---@field InitialDodgeReplenishSpeed float
---@field InitialArmorReplenishDelay float
---@field InitialArmorChunk float
---@field InitialArmorHardness float
---@field InitialArmorChunkCount int32
---@field InitialArmorDamageScale float
---@field InitialArmorTraumaScale float
---@field InitialLoadoutWeight float
---@field InitialWeightTierOffset float
---@field InitialMaxRuntimeCount int32
---@field RespawnMinAttributeDataDifficultyArray FSBZRespawnMinimumAttributeData
USBZPlayerAbilityData = {}



---@class USBZPlayerAbilitySystemComponent : USBZAbilitySystemComponent
---@field StaggeredTargetDamageIncrease float
---@field BuffTimeArray float
---@field ServerBuffTimeArray float
---@field BuffDurationArray float
---@field BuffMovementSpeedIncrease float
---@field BuffDamageReduction float
---@field BuffDamageIncrease float
---@field PredictingBuffBitmask uint32
---@field BuffTickCount uint8
---@field BuffBlockCountArray float
---@field BuffGUIEffectDataArray USBZCharacterEffectDataAsset
---@field TankLastManStandingImmuneGUIEffectData USBZCharacterEffectDataAsset
---@field TankLastManStandingBlockingGUIEffectData USBZCharacterEffectDataAsset
---@field BuffGUIEffectHandleArray uint32
---@field TankLastManStandingImmuneGUIEffectHandle uint32
---@field TankLastManStandingBlockingGUIEffectHandle uint32
---@field SkillTankLastManStandingImmuneTime float
---@field bIsSkillTankLastManStandingBlocking boolean
---@field SkillCooldownSecondsMap TMap<FGameplayTag, float>
---@field bIsAmmoSpecialistHighGrainSkillActive boolean
---@field bCanTriggerCoupDeGraceSkill boolean
USBZPlayerAbilitySystemComponent = {}

---@param SkillTag FGameplayTag
---@param Time float
function USBZPlayerAbilitySystemComponent:Server_SetSpeedBuffTime(SkillTag, Time) end
---@param SkillTag FGameplayTag
---@param Time float
function USBZPlayerAbilitySystemComponent:Server_SetMitigationBuffTime(SkillTag, Time) end
---@param SkillTag FGameplayTag
---@param Time float
function USBZPlayerAbilitySystemComponent:Server_SetDamageBuffTime(SkillTag, Time) end
function USBZPlayerAbilitySystemComponent:Server_ResetSpeedBuffTime() end
function USBZPlayerAbilitySystemComponent:Server_ResetMitigationBuffTime() end
function USBZPlayerAbilitySystemComponent:Server_ResetDamageBuffTime() end
function USBZPlayerAbilitySystemComponent:Server_DeactivateAmmoSpecialistHighGrainSkill() end
function USBZPlayerAbilitySystemComponent:OnSkillTankLastManStandingImmuneTimeChanged() end
function USBZPlayerAbilitySystemComponent:OnSkillTankLastManStandingBlockingChanged() end
function USBZPlayerAbilitySystemComponent:OnRep_BuffTimeArray() end
function USBZPlayerAbilitySystemComponent:Multicast_UnblockSkillTankLastManStanding() end
---@param Time float
function USBZPlayerAbilitySystemComponent:Multicast_SetSpeedBuffTime(Time) end
---@param ImmuneTime float
function USBZPlayerAbilitySystemComponent:Multicast_SetSkillTankLastManStandingImmuneTime(ImmuneTime) end
---@param Time float
function USBZPlayerAbilitySystemComponent:Multicast_SetMitigationBuffTime(Time) end
---@param Time float
function USBZPlayerAbilitySystemComponent:Multicast_SetDamageBuffTime(Time) end
function USBZPlayerAbilitySystemComponent:Multicast_ResetSpeedBuffTime() end
function USBZPlayerAbilitySystemComponent:Multicast_ResetMitigationBuffTime() end
function USBZPlayerAbilitySystemComponent:Multicast_ResetDamageBuffTime() end
---@param AICharacters TArray<ASBZAIBaseCharacter>
function USBZPlayerAbilitySystemComponent:Multicast_MarkedForDeath(AICharacters) end
function USBZPlayerAbilitySystemComponent:Multicast_DeactivateAmmoSpecialistHighGrainSkill() end
function USBZPlayerAbilitySystemComponent:Multicast_ActivateAmmoSpecialistHighGrainSkill() end
---@param Type ESBZPlayerAbilityBuffType
function USBZPlayerAbilitySystemComponent:Client_RejectBuffTime(Type) end


---@class USBZPlayerAnimationCollectionFPP : USBZBaseCharacterAnimationCollection
---@field AnimationLeftHandEquippedContainers TMap<TSoftClassPtr<ASBZEquippable>, FSBZAnimationsPerSpecificEquippablesContainer>
USBZPlayerAnimationCollectionFPP = {}



---@class USBZPlayerAnimationCollectionTPP : USBZCharacterAnimationCollection
USBZPlayerAnimationCollectionTPP = {}


---@class USBZPlayerAnimationFPP : USBZCharacterAnimation
---@field bIsTargeting boolean
---@field bIsHSInstigator boolean
---@field bLeftHandEquipped boolean
---@field PoseType ESBZPoseType
---@field RightHandGripAlpha float
---@field WeaponBoneLocationOffset FVector
---@field WeaponBoneRotationOffset FRotator
---@field LeftHandGripAlpha float
---@field LeftHandIKAlpha float
---@field LeftHandLocalIKAlpha float
---@field LeftHandWorldIKAlpha float
---@field RightHandIKAlpha float
---@field LeftHandAttachmentLocation FVector
---@field RightHandAttachmentLocation FVector
---@field LeftHandAttachmentRotation FRotator
---@field RightHandAttachmentRotation FRotator
---@field LeftHandAttachmentWorldLocation FVector
---@field LeftHandAttachmentWorldRotation FRotator
---@field AdditiveLeftHandAlpha float
---@field AdditiveAlpha float
---@field AdditiveMoveAlpha float
---@field AdditiveCameraAlpha float
---@field AdditiveMovePlayRate float
---@field AdditiveDetailAlpha float
---@field MoveGaitValue float
---@field AdditiveMoveType ESBZAdditiveMoveType
---@field IdlePose UAnimSequenceBase
---@field IdleAdditivePose UAnimSequenceBase
---@field IdleADSPose UAnimSequenceBase
---@field IdleHSInstigatorPose UAnimSequenceBase
---@field IdleHSInstigatorADSPose UAnimSequenceBase
---@field RunPose UAnimSequenceBase
---@field AdditiveMove UBlendSpace1D
---@field AdditiveMoveADS UBlendSpace1D
---@field AdditiveMoveLeftHandEquipped UBlendSpace1D
---@field AdditiveMoveLeftHandEquippedADS UBlendSpace1D
---@field LeftHandEquippedIdle UAnimSequenceBase
---@field LeftHandEquippedUsingIdle UAnimSequenceBase
---@field EquippableLeftGripPose UAnimSequenceBase
---@field EquippableRightGripPose UAnimSequenceBase
---@field AdditiveIdleLeftHand UAnimSequenceBase
---@field EnterRunMontage UAnimMontage
---@field ExitRunMontage UAnimMontage
---@field LeftHandIdleAssetPlayerData FCachedAnimAssetPlayerData
---@field PlayerCharacter ASBZPlayerCharacter
---@field AnimationCollectionFPP USBZPlayerAnimationCollectionFPP
---@field CurrentTraverseMontage UAnimMontage
USBZPlayerAnimationFPP = {}



---@class USBZPlayerAttackEventBase : USBZWorldEventBase
---@field MaxDistance float
---@field MaxTimeSinceAttack float
USBZPlayerAttackEventBase = {}



---@class USBZPlayerAttributeSet : USBZCharacterAttributeSet
---@field PrimaryEquippableAmmoInventory FGameplayAttributeData
---@field PrimaryEquippableAmmoInventoryServer float
---@field SecondaryEquippableAmmoInventory FGameplayAttributeData
---@field SecondaryEquippableAmmoInventoryServer float
---@field TertiaryEquippableAmmoInventory FGameplayAttributeData
---@field TertiaryEquippableAmmoInventoryServer float
---@field PrimaryEquippableAmmoLoaded FGameplayAttributeData
---@field PrimaryEquippableAmmoLoadedServer float
---@field SecondaryEquippableAmmoLoaded FGameplayAttributeData
---@field SecondaryEquippableAmmoLoadedServer float
---@field TertiaryEquippableAmmoLoaded FGameplayAttributeData
---@field TertiaryEquippableAmmoLoadedServer float
---@field PrimaryThrowableAmmoInventory FGameplayAttributeData
---@field PrimaryThrowableAmmoInventoryServer float
---@field SecondaryThrowableAmmoInventory FGameplayAttributeData
---@field SecondaryThrowableAmmoInventoryServer float
---@field TertiaryThrowableAmmoInventory FGameplayAttributeData
---@field TertiaryThrowableAmmoInventoryServer float
---@field PrimaryPlaceableAmmoInventory FGameplayAttributeData
---@field PrimaryPlaceableAmmoInventoryServer float
---@field SecondaryPlaceableAmmoInventory FGameplayAttributeData
---@field SecondaryPlaceableAmmoInventoryServer float
---@field TertiaryPlaceableAmmoInventory FGameplayAttributeData
---@field TertiaryPlaceableAmmoInventoryServer float
---@field PrimaryToolPlaceableAmmoInventory FGameplayAttributeData
---@field PrimaryToolPlaceableAmmoInventoryServer float
---@field SecondaryToolPlaceableAmmoInventory FGameplayAttributeData
---@field SecondaryToolPlaceableAmmoInventoryServer float
---@field TertiaryToolPlaceableAmmoInventory FGameplayAttributeData
---@field TertiaryToolPlaceableAmmoInventoryServer float
---@field PrimaryToolAmmoInventory FGameplayAttributeData
---@field PrimaryToolAmmoInventoryServer float
---@field SecondaryToolAmmoInventory FGameplayAttributeData
---@field SecondaryToolAmmoInventoryServer float
---@field TertiaryToolAmmoInventory FGameplayAttributeData
---@field TertiaryToolAmmoInventoryServer float
---@field Stamina FGameplayAttributeData
---@field DownedCount FGameplayAttributeData
---@field MaxDownedCount FGameplayAttributeData
---@field DownedHealth FGameplayAttributeData
---@field ReviveHealth FGameplayAttributeData
---@field DownedToCuffedHealth FGameplayAttributeData
---@field DefeatDownedTime FGameplayAttributeData
---@field DefeatCuffedTime FGameplayAttributeData
---@field Dodge FGameplayAttributeData
---@field DodgeMax FGameplayAttributeData
---@field DodgeReplenishDelay FGameplayAttributeData
---@field DodgeReplenishSpeed FGameplayAttributeData
---@field CriticalHealthMax FGameplayAttributeData
---@field CriticalHealthDamageScale FGameplayAttributeData
---@field ArmorChunk FGameplayAttributeData
---@field ArmorChunkCount FGameplayAttributeData
---@field ArmorReplenishDelay FGameplayAttributeData
---@field ArmorDamageScale FGameplayAttributeData
---@field ArmorTrauma FGameplayAttributeData
---@field ArmorTraumaScale FGameplayAttributeData
---@field LoadoutWeight FGameplayAttributeData
---@field WeaponLoadoutWeight FGameplayAttributeData
---@field WeightTierOffset FGameplayAttributeData
---@field MaxRuntimeCount FGameplayAttributeData
---@field MinRespawnHealth FGameplayAttributeData
---@field MinRespawnArmorChunkCountPercent FGameplayAttributeData
---@field MinRespawnDownedCount FGameplayAttributeData
---@field MinRespawnWeaponMagazineCount FGameplayAttributeData
---@field MinRespawnThrowableAmmo FGameplayAttributeData
---@field MinRespawnEquippableAmmo FGameplayAttributeData
---@field ArmorData USBZArmorData
---@field AbilityData USBZPlayerAbilityData
USBZPlayerAttributeSet = {}

---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_TertiaryToolPlaceableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_TertiaryToolAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_TertiaryThrowableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_TertiaryPlaceableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_TertiaryEquippableAmmoLoaded(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_TertiaryEquippableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_SecondaryToolPlaceableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_SecondaryToolAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_SecondaryThrowableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_SecondaryPlaceableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_SecondaryEquippableAmmoLoaded(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_SecondaryEquippableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_PrimaryToolPlaceableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_PrimaryToolAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_PrimaryThrowableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_PrimaryPlaceableAmmoInventory(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_PrimaryEquippableAmmoLoaded(OldData) end
---@param OldData FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_PrimaryEquippableAmmoInventory(OldData) end
---@param OldDownedCount FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_DownedCount(OldDownedCount) end
---@param OldDodge FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_Dodge(OldDodge) end
---@param OldArmorTrauma FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_ArmorTrauma(OldArmorTrauma) end
---@param OldArmorChunkCount FGameplayAttributeData
function USBZPlayerAttributeSet:OnRep_ArmorChunkCount(OldArmorChunkCount) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetTertiaryToolPlaceableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetTertiaryToolAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetTertiaryThrowableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetTertiaryPlaceableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetTertiaryEquippableAmmoLoaded(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetTertiaryEquippableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetSecondaryToolPlaceableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetSecondaryToolAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetSecondaryThrowableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetSecondaryPlaceableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetSecondaryEquippableAmmoLoaded(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetSecondaryEquippableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetPrimaryToolPlaceableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetPrimaryToolAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetPrimaryThrowableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetPrimaryPlaceableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetPrimaryEquippableAmmoLoaded(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetPrimaryEquippableAmmoInventory(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetDownedCount(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetDodge(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetArmorTrauma(NewCurrentValue) end
---@param NewCurrentValue float
function USBZPlayerAttributeSet:Multicast_SetArmorChunkCount(NewCurrentValue) end


---@class USBZPlayerBatteringRamTackleAbility : USBZPlayerTackleBaseAbility
USBZPlayerBatteringRamTackleAbility = {}


---@class USBZPlayerCameraFeedbackComponent : UActorComponent
---@field CurrentFeedbacks TArray<FSBZLocalPlayerFeedbackInfo>
---@field PlayerCameraOwner ASBZPlayerCameraManager
---@field FeedbackFirstPlayCooldowns TMap<TSubclassOf<USBZLocalPlayerFeedback>, FTimerHandle>
USBZPlayerCameraFeedbackComponent = {}

---@param FeedbackID int32
---@param InIntensity float
---@return boolean
function USBZPlayerCameraFeedbackComponent:SetFeedbackIntensity(FeedbackID, InIntensity) end
---@param RemoveID int32
---@return boolean
function USBZPlayerCameraFeedbackComponent:RemoveFeedback(RemoveID) end
function USBZPlayerCameraFeedbackComponent:OnExitedActionPhase() end
---@param WorldContextObject UObject
---@return USBZPlayerCameraFeedbackComponent
function USBZPlayerCameraFeedbackComponent:GetLocalCameraFeedbackComponent(WorldContextObject) end
---@param RemoveID int32
---@param bIsAutoRemoved boolean
---@return boolean
function USBZPlayerCameraFeedbackComponent:FadeOutFeedback(RemoveID, bIsAutoRemoved) end
---@param FeedbackClass TSubclassOf<USBZLocalPlayerFeedback>
function USBZPlayerCameraFeedbackComponent:CooldownTimerDelegate(FeedbackClass) end
---@param Parameters FSBZLocalPlayerFeedbackParameters
---@return int32
function USBZPlayerCameraFeedbackComponent:AddFeedback(Parameters) end


---@class USBZPlayerCameraModifier : UCameraModifier
USBZPlayerCameraModifier = {}


---@class USBZPlayerCharacterData : USBZInventoryBaseData
---@field CharacterClass TSoftClassPtr<ASBZPlayerCharacter>
---@field DefaultMaskData USBZMaskData
---@field DefaultSuitBaseData USBZSuitBaseData
---@field DefaultGloveData USBZGloveData
---@field SkeletalMesh TSoftObjectPtr<USkeletalMesh>
---@field SkeletalMesh1P TSoftObjectPtr<USkeletalMesh>
---@field CharacterBio FText
---@field CharacterNationality FText
---@field SizeCategory EPlayerCharacterSizeCategory
---@field MainMenuAnimationCollection USBZPlayerMenuAnimationCollection
USBZPlayerCharacterData = {}



---@class USBZPlayerCharacterDatabase : USBZItemDatabase
---@field PlayerCharacterArray TArray<USBZPlayerCharacterData>
USBZPlayerCharacterDatabase = {}



---@class USBZPlayerEndCycleRangedWeaponAbility : USBZPlayerReloadRangedWeaponAbility
USBZPlayerEndCycleRangedWeaponAbility = {}


---@class USBZPlayerFireRangedWeaponAbility : USBZFireRangedWeaponAbility
USBZPlayerFireRangedWeaponAbility = {}


---@class USBZPlayerFireRangedWeaponProjectileAbility : USBZPlayerFireRangedWeaponAbility
USBZPlayerFireRangedWeaponProjectileAbility = {}


---@class USBZPlayerFragGrenadeData : USBZFragGrenadeData
---@field DamageDistanceArray TArray<FSBZDamageDistance>
---@field ArmorPenetration float
USBZPlayerFragGrenadeData = {}



---@class USBZPlayerGasGrenadeData : USBZGasGrenadeData
---@field DamagePerSecond float
---@field DurationSeconds float
---@field TickSeconds float
---@field ArmorPenetration float
USBZPlayerGasGrenadeData = {}



---@class USBZPlayerHumanShieldInstigatorAbility : USBZGameplayAbility
USBZPlayerHumanShieldInstigatorAbility = {}


---@class USBZPlayerInteractableComponent : USBZCharacterInteractableComponent
---@field ModeArray TArray<ESBZPlayerInteractableMode>
---@field ModeDataArray FSBZInteractableModeData
USBZPlayerInteractableComponent = {}



---@class USBZPlayerInteractorComponent : USBZInteractorComponent
---@field InteractionLockCameraData FSBZLockCameraData
---@field DistancePitchCurve UCurveFloat
---@field Selected FSBZInteractDisplayDataCollection
---@field bIsValidThisFrame boolean
---@field LocalPlayerController ASBZPlayerController
---@field bIsInstantModeIndex boolean
---@field bIsFrontSelected boolean
---@field LastFailedScreenInteractableCheckFrame uint32
---@field CheckScreenInteractableFrameInterval uint32
---@field PendingOnScreenDelay float
---@field PendingOnScreenInteractable USBZBaseInteractableComponent
---@field PendingOnScreenTime float
USBZPlayerInteractorComponent = {}

---@return boolean
function USBZPlayerInteractorComponent:ShowInteractWidget() end
---@return boolean
function USBZPlayerInteractorComponent:IsCurrentInstant() end
---@return USBZBaseInteractableComponent
function USBZPlayerInteractorComponent:GetSelectedInteraction() end
---@param Collection FSBZInteractDisplayDataCollection
---@param bIsInstant boolean
---@param bOutIsFront boolean
---@return FSBZInteractModeDisplayData
function USBZPlayerInteractorComponent:GetModeDisplayData(Collection, bIsInstant, bOutIsFront) end
---@return boolean
function USBZPlayerInteractorComponent:CanInteract() end


---@class USBZPlayerInventory : UObject
---@field OverkillWeaponInventoryItemMap TMap<FGuid, FSBZOverkillWeaponInventoryItem>
---@field PreplanningInventoryItemMap TMap<FGuid, FSBZPreplanningInventoryItem>
---@field GloveInventoryItemMap TMap<FGuid, FSBZGloveInventoryItem>
---@field SuitInventoryItemMap TMap<FGuid, FSBZSuitInventoryItem>
---@field WatchInventoryItemMap TMap<FGuid, FSBZWatchInventoryItem>
---@field PlaceableInventoryItemMap TMap<FGuid, FSBZPlaceableInventoryItem>
---@field ToolInventoryItemMap TMap<FGuid, FSBZToolInventoryItem>
---@field ArmorInventoryItemMap TMap<FGuid, FSBZArmorInventoryItem>
---@field ThrowableInventoryItemMap TMap<FGuid, FSBZThrowableInventoryItem>
---@field PlayerCharacterInventoryItemMap TMap<FGuid, FSBZPlayerCharacterInventoryItem>
USBZPlayerInventory = {}



---@class USBZPlayerItemProgression : UObject
---@field OverkillWeaponInventoryItemArray TArray<FSBZPlayerItemInfo>
---@field PlaceableInventoryItemArray TArray<FSBZPlayerItemInfo>
---@field ToolInventoryItemArray TArray<FSBZPlayerItemInfo>
---@field ArmorInventoryItemArray TArray<FSBZPlayerItemInfo>
---@field ThrowableInventoryItemArray TArray<FSBZPlayerItemInfo>
USBZPlayerItemProgression = {}



---@class USBZPlayerJumpAbility : USBZGameplayAbility_CharacterJump
USBZPlayerJumpAbility = {}


---@class USBZPlayerLibrary : UBlueprintFunctionLibrary
USBZPlayerLibrary = {}

---@param WorldContextObject UObject
---@param Location FVector
---@param Range float
---@return boolean
function USBZPlayerLibrary:IsPlayerInRange(WorldContextObject, Location, Range) end
---@param WorldContextObject UObject
---@param Stream FRandomStream
---@return ASBZPlayerCharacter
function USBZPlayerLibrary:GetRandomPlayerCharacterFromStream(WorldContextObject, Stream) end
---@param WorldContextObject UObject
---@return ASBZPlayerCharacter
function USBZPlayerLibrary:GetRandomPlayerCharacter(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZPlayerLibrary:GetNumConnectedPlayers(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZPlayerLibrary:GetNumAlivePlayers(WorldContextObject) end
---@param WorldContextObject UObject
---@return APlayerState
function USBZPlayerLibrary:GetLocalPlayerState(WorldContextObject) end
---@param WorldContextObject UObject
---@return APawn
function USBZPlayerLibrary:GetLocalPlayerPawn(WorldContextObject) end
---@param WorldContextObject UObject
---@return APlayerController
function USBZPlayerLibrary:GetLocalPlayerController(WorldContextObject) end
---@param WorldContextObject UObject
---@param Location FVector
---@param PlayerCharacter ASBZPlayerCharacter
---@param Distance float
function USBZPlayerLibrary:GetClosestPlayerToLocation(WorldContextObject, Location, PlayerCharacter, Distance) end
---@param WorldContextObject UObject
---@param Actor AActor
---@param PlayerCharacter ASBZPlayerCharacter
---@param Distance float
function USBZPlayerLibrary:GetClosestPlayerToActor(WorldContextObject, Actor, PlayerCharacter, Distance) end
---@param WorldContextObject UObject
---@return TArray<ASBZPlayerCharacter>
function USBZPlayerLibrary:GetAllSBZPlayerCharacters(WorldContextObject) end


---@class USBZPlayerLinkedAnimationTPP : USBZCharacterLinkedAnimation
---@field UpperBodyAimRotation FRotator
---@field Player ASBZPlayerCharacter
---@field DefeatStateAnimationHandler FSBZDefeatStateAnimationHandler
USBZPlayerLinkedAnimationTPP = {}



---@class USBZPlayerLoadoutAsset : UDataAsset
---@field Loadout FPD3PlayerLoadout
USBZPlayerLoadoutAsset = {}



---@class USBZPlayerMeleeAbility : USBZMeleeAbility
USBZPlayerMeleeAbility = {}


---@class USBZPlayerMeleeDamageData : USBZMeleeDamageData
---@field HealthDamage float
---@field PropDamage float
---@field MaximumAimAssistAngleDifference float
---@field AimAssistSpeed float
USBZPlayerMeleeDamageData = {}



---@class USBZPlayerMenuAnimationCollection : USBZBaseMenuAnimationCollection
---@field PerCharacterSlots TMap<ESBZMainMenuAnimationName, FSBZMenuACPerCharacterSlot>
USBZPlayerMenuAnimationCollection = {}



---@class USBZPlayerMovementComponent : USBZCharacterMovementComponent
---@field bAutoComputeTrajectory boolean
---@field AutoComputeTrajectoryInterval float
---@field MinSpeedToSprintAccelerating float
---@field MinSpeedToSprintDecelerating float
---@field MaxAngleToSprintAccelerating float
---@field MaxAngleToSprintDecelerating float
---@field MaxSimulationTimeStepForMovingObject float
---@field PushActorMassMultiplier FRuntimeFloatCurve
---@field PushActorVelToImpulseModifier float
---@field PushActorVelToAngularImpulseModifier float
---@field MovingObjectCollisionMinLaunchVelocity float
---@field MovingObjectCollisionMaxLaunchVelocity float
---@field MovingObjectCollisionVelocityFactor float
---@field MovingObjectCapsuleInflation float
---@field MinLoadoutTierIndex int32
---@field WeightAssetArray TArray<USBZPlayerMovementWeightAsset>
---@field WeightAsset USBZPlayerMovementWeightAsset
---@field SkillSprintModifier float
---@field SkillWalkHumanShieldModifier float
USBZPlayerMovementComponent = {}

---@param bInWantToSprint boolean
function USBZPlayerMovementComponent:Server_SetWantToSprint(bInWantToSprint) end
---@param bInWantToSprint boolean
function USBZPlayerMovementComponent:Multicast_SetWantToSprint(bInWantToSprint) end


---@class USBZPlayerMovementWeightAsset : UDataAsset
---@field TierWeight float
---@field MaxWalkSpeed FFloatInterval
---@field MaxRunSpeed FFloatInterval
---@field MaxWalkTargetingSpeed FFloatInterval
---@field MaxWalkCrouchedSpeed FFloatInterval
---@field MaxWalkCasingSpeed FFloatInterval
---@field MaxRunCasingSpeed FFloatInterval
---@field MaxWalkCrouchedCasingSpeed FFloatInterval
---@field MaxWalkHumanShieldSpeed FFloatInterval
---@field MaxWalkTargetingHumanShieldSpeed FFloatInterval
---@field VaultMantleData USBZAgilityTraversalQueryParams
---@field SlideData USBZAgilitySlideParams
USBZPlayerMovementWeightAsset = {}



---@class USBZPlayerNearWorldEvent : USBZWorldEventBase
---@field MaxDistance float
---@field AngleRange FFloatInterval
USBZPlayerNearWorldEvent = {}



---@class USBZPlayerOnlineStatusLibrary : UBlueprintFunctionLibrary
USBZPlayerOnlineStatusLibrary = {}

---@param WorldContextObject UObject
function USBZPlayerOnlineStatusLibrary:ResetPlayerActivity(WorldContextObject) end


---@class USBZPlayerProjectileWeaponFireData : USBZPlayerWeaponFireData
---@field PitchAdjustment float
---@field SpawnOffsetFromCamera float
USBZPlayerProjectileWeaponFireData = {}



---@class USBZPlayerReloadRangedWeaponAbility : USBZReloadRangedWeaponAbility
USBZPlayerReloadRangedWeaponAbility = {}


---@class USBZPlayerRunAbility : USBZGameplayAbility_CharacterRun
USBZPlayerRunAbility = {}


---@class USBZPlayerRunExitAbility : USBZGameplayAbility
USBZPlayerRunExitAbility = {}


---@class USBZPlayerSettings : USBZDeveloperSettings
---@field LookInput FSBZLookInputSettings
---@field KeyPropertyModeMap TMap<FKey, FSBZKeyPropertyModeData>
---@field RepeatDelay float
USBZPlayerSettings = {}



---@class USBZPlayerSlideTackleAbility : USBZSkillTriggeredHurtReactionAbility
USBZPlayerSlideTackleAbility = {}


---@class USBZPlayerSmokeGrenadeData : USBZPlayerGasGrenadeData
---@field RangeMultiplierIncrease float
USBZPlayerSmokeGrenadeData = {}



---@class USBZPlayerStatePawnWidgetBase : USBZPlayerStateWidgetBase
---@field PlayerCharacter ASBZPlayerCharacter
USBZPlayerStatePawnWidgetBase = {}

---@return boolean
function USBZPlayerStatePawnWidgetBase:IsWidgetPawnLocallyControlled() end


---@class USBZPlayerStateWidgetBase : USBZWidgetBase
---@field PlayerState ASBZPlayerState
USBZPlayerStateWidgetBase = {}

---@param PlayerState ASBZPlayerState
---@return boolean
function USBZPlayerStateWidgetBase:IsWidgetForPlayerState(PlayerState) end
---@return boolean
function USBZPlayerStateWidgetBase:IsForLocalPlayerState() end
---@param InPlayerState ASBZPlayerState
function USBZPlayerStateWidgetBase:InitializePlayerState(InPlayerState) end


---@class USBZPlayerStatisticsData : UObject
---@field StatCodeToValueMap TMap<FName, FSBZPlayerStatisticsValue>
---@field ItemProgressionLevelMap TMap<FString, FSBZWeaponProgressionStats>
USBZPlayerStatisticsData = {}



---@class USBZPlayerStatisticsManager : UObject
---@field PlayerStatisticsData USBZPlayerStatisticsData
---@field ServerPlayerStatisticsData TMap<FUniqueNetIdRepl, USBZPlayerStatisticsData>
USBZPlayerStatisticsManager = {}

---@param WorldContextObject UObject
---@return USBZPlayerStatisticsManager
function USBZPlayerStatisticsManager:GetPlayerStatisticsManager(WorldContextObject) end
---@param LevelPath FSoftObjectPath
---@return TArray<FSBZLevelTimesStruct>
function USBZPlayerStatisticsManager:GetHeistBestTimes(LevelPath) end


---@class USBZPlayerStoreItems : UObject
USBZPlayerStoreItems = {}


---@class USBZPlayerTackleBaseAbility : USBZMeleeAbility
USBZPlayerTackleBaseAbility = {}


---@class USBZPlayerTackleRunningAbility : USBZPlayerTackleBaseAbility
USBZPlayerTackleRunningAbility = {}


---@class USBZPlayerTargetAbility : USBZGameplayAbility_CharacterTarget
USBZPlayerTargetAbility = {}


---@class USBZPlayerTasedAbility : USBZTasedAbility
---@field OwnerCharacter ASBZPlayerCharacter
---@field SBZPlayerCameraManager ASBZPlayerCameraManager
USBZPlayerTasedAbility = {}



---@class USBZPlayerTasedGentlyAbility : USBZPlayerTasedAbility
USBZPlayerTasedGentlyAbility = {}


---@class USBZPlayerTasedUncontrolledAbility : USBZPlayerTasedAbility
USBZPlayerTasedUncontrolledAbility = {}


---@class USBZPlayerThrowableKnifeData : USBZThrowableProjectileData
---@field SoundRangePOI float
---@field ShatteredEvent UAkAudioEvent
---@field ReadyEvent UAkAudioEvent
---@field ThrownEvent UAkAudioEvent
---@field ShatteredEffect UNiagaraSystem
USBZPlayerThrowableKnifeData = {}



---@class USBZPlayerViewTargetAbility : USBZGameplayAbility
USBZPlayerViewTargetAbility = {}


---@class USBZPlayerWeaponFireData : USBZWeaponFireData
---@field DamageDistanceArray TArray<FSBZDamageDistance>
---@field TimeBetweenBurstsSeconds float
---@field bIsReloadEndCycledEachRound boolean
---@field AmmoLoaded uint32
---@field AmmoLeftInChamber uint32
---@field AmmoPerFiredRound uint32
---@field AmmoInventoryMax uint32
---@field AmmoInventory uint32
---@field AmmoPickup FFloatInterval
---@field MuzzleData USBZWeaponMuzzleData
USBZPlayerWeaponFireData = {}

---@param MinDistance float
---@param MaxDistance float
---@param DistanceStep float
---@param OutDamageArray TArray<float>
function USBZPlayerWeaponFireData:GetDamageOnEachDistance(MinDistance, MaxDistance, DistanceStep, OutDamageArray) end


---@class USBZPocketDrillInteractRequirement : USBZBaseInteractRequirement
USBZPocketDrillInteractRequirement = {}


---@class USBZPopupWidget : USBZWidgetBase
---@field Text_Header UTextBlock
---@field Text_Description UTextBlock
---@field Widget_ControlsReference USBZControlsReferenceWidget
---@field CanvasPanel_PopUpBody UCanvasPanel
---@field DefaultControlsReference FSBZControlsReference
---@field ControlsReference FSBZControlsReference
---@field bIsShowing boolean
USBZPopupWidget = {}

function USBZPopupWidget:OnDisplayPopUp() end
---@param ActionName FName
function USBZPopupWidget:OnActionPressed(ActionName) end
---@return boolean
function USBZPopupWidget:IsShowing() end
---@param ActionName FName
function USBZPopupWidget:HidePopUpWidget(ActionName) end
function USBZPopupWidget:AdvanceCountdown() end


---@class USBZPostAKEventNotify : UAnimNotify
---@field AttachName FName
---@field Event UAkAudioEvent
---@field EventName FString
---@field bFollow boolean
---@field bDistanceCulled boolean
---@field bOverrideCullingDistance boolean
---@field CullingDistance float
USBZPostAKEventNotify = {}



---@class USBZPostProcessSettingsPresetDataAsset : UDataAsset
---@field Settings FPostProcessSettings
USBZPostProcessSettingsPresetDataAsset = {}



---@class USBZPredefinedBoxNavModifierComponent : UNavModifierComponent
---@field BoxExtent FVector
---@field ForwardOffset float
USBZPredefinedBoxNavModifierComponent = {}



---@class USBZPreplanningAssetData : USBZInventoryBaseData
---@field Tags TArray<FGameplayTag>
USBZPreplanningAssetData = {}

---@param WorldContextObject UObject
function USBZPreplanningAssetData:ApplyPreplanningAsset(WorldContextObject) end


---@class USBZPreplanningAssetData1 : USBZPreplanningAssetData
USBZPreplanningAssetData1 = {}


---@class USBZPreplanningAssetDatabase : USBZItemDatabase
---@field PreplanningAssetArray TArray<USBZPreplanningAssetData>
USBZPreplanningAssetDatabase = {}



---@class USBZPreplanningAssetManager : UObject
USBZPreplanningAssetManager = {}

---@param WorldContextObject UObject
---@return USBZPreplanningAssetManager
function USBZPreplanningAssetManager:GetPreplanningAssetManager(WorldContextObject) end
---@param InAssetSku FString
---@return USBZPreplanningAssetData
function USBZPreplanningAssetManager:GetAssetBySku(InAssetSku) end
---@param Result ESBZMetaRequestResult
function USBZPreplanningAssetManager:ConsumeUserEntitlementSuccess(Result) end
---@param Result ESBZMetaRequestResult
function USBZPreplanningAssetManager:ConsumeUserEntitlementError(Result) end


---@class USBZPreplanningModifierSettings : USBZDeveloperSettings
---@field Settings FSBZPreplanningModifierSettingsData
USBZPreplanningModifierSettings = {}



---@class USBZPriceProgressionSettings : USBZDeveloperSettings
---@field WeeklyResetPriceGroups TArray<FString>
USBZPriceProgressionSettings = {}

---@return TArray<FString>
function USBZPriceProgressionSettings:GetWeeklyResetPriceGroupSettings() end


---@class USBZPrimaryHackingToolWidget : USBZPrimaryToolWidget
USBZPrimaryHackingToolWidget = {}

---@param bHasUpgrade02 boolean
function USBZPrimaryHackingToolWidget:OnHackinToolEquipped(bHasUpgrade02) end
function USBZPrimaryHackingToolWidget:OnHackingSyncStarted() end
---@param TimeRemaining float
function USBZPrimaryHackingToolWidget:OnHackingSyncProgressChanged(TimeRemaining) end
---@param InCost int32
---@param InCurrent int32
function USBZPrimaryHackingToolWidget:OnHackingSyncNoAmmo(InCost, InCurrent) end
---@param bAlreadyHacked boolean
function USBZPrimaryHackingToolWidget:OnHackingSyncCompleted(bAlreadyHacked) end
---@param bInAlreadySynched boolean
function USBZPrimaryHackingToolWidget:OnHackingSyncAborted(bInAlreadySynched) end
---@param MaxDistance float
---@param CurrentDistance float
function USBZPrimaryHackingToolWidget:OnHackingDistanceToTarget(MaxDistance, CurrentDistance) end
---@param Tag FGameplayTag
---@return boolean
function USBZPrimaryHackingToolWidget:HasTag(Tag) end


---@class USBZPrimaryToolWidget : UUserWidget
USBZPrimaryToolWidget = {}

---@param VisibilityTime float
function USBZPrimaryToolWidget:OnNoAmmoTriggered(VisibilityTime) end


---@class USBZProgressionSaveGame : USBZSaveGame
---@field ProgressionSaveGameData FSBZProgressionSaveGameData
USBZProgressionSaveGame = {}



---@class USBZProjectileImpactConfig : USBZImpactConfig
---@field Types TArray<FSBZProjectileTypeImpactData>
---@field bShouldDoBloodSplatter boolean
USBZProjectileImpactConfig = {}



---@class USBZPropDamageComponent : UActorComponent
---@field OnPropDamageHits FSBZPropDamageComponentOnPropDamageHits
---@field OnPropDamageHealth FSBZPropDamageComponentOnPropDamageHealth
---@field DamagePools TArray<FSBZPropDamagePool>
USBZPropDamageComponent = {}

function USBZPropDamageComponent:OnRep_DamagePools() end
---@param DamagedActor AActor
---@param Damage float
---@param InstigatedBy AController
---@param HitInfos TArray<FHitResult>
---@param Params FRadialDamageParams
---@param Origin FVector
---@param DamageType UDamageType
---@param DamageCauser AActor
function USBZPropDamageComponent:HandleTakeRadialDamage(DamagedActor, Damage, InstigatedBy, HitInfos, Params, Origin, DamageType, DamageCauser) end
---@param DamagedActor AActor
---@param Damage float
---@param InstigatedBy AController
---@param HitLocation FVector
---@param HitComponent UPrimitiveComponent
---@param BoneName FName
---@param ShotFromDirection FVector
---@param DamageType UDamageType
---@param DamageCauser AActor
function USBZPropDamageComponent:HandleTakePointDamage(DamagedActor, Damage, InstigatedBy, HitLocation, HitComponent, BoneName, ShotFromDirection, DamageType, DamageCauser) end


---@class USBZQueryPrivilege : UBlueprintAsyncActionBase
---@field OnPrivilegeAllowed FSBZQueryPrivilegeOnPrivilegeAllowed
---@field OnPrivilegeBlocked FSBZQueryPrivilegeOnPrivilegeBlocked
---@field WorldContextObject UObject
USBZQueryPrivilege = {}

---@param WorldContextObject UObject
---@param Privilege ESBZUserPrivilegesProxy
---@return USBZQueryPrivilege
function USBZQueryPrivilege:QueryPrivilege(WorldContextObject, Privilege) end


---@class USBZRagdollNotify : UAnimNotify
---@field RandomOffsetBackward float
USBZRagdollNotify = {}



---@class USBZRagdollSyncManager : UActorComponent
---@field Ragdolls TArray<FSBZRagdollInfo>
USBZRagdollSyncManager = {}

---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZRagdollSyncManager:OnHeistStateChanged(OldState, NewState) end
---@param InRagdollSyncData TArray<FSBZRagdollSyncData>
function USBZRagdollSyncManager:Multicast_RagdollSyncData(InRagdollSyncData) end


---@class USBZRandomNoiseComponent : UActorComponent
---@field SoundInterval FFloatRange
---@field NoiseToMake UAkAudioEvent
USBZRandomNoiseComponent = {}

function USBZRandomNoiseComponent:MulticastForceSound() end


---@class USBZRangedWeaponData : USBZBaseWeaponData
---@field StatisticADSKillsString FString
---@field StatisticHipfireKillsString FString
---@field StatisticNoReloadKillsString FString
---@field StatisticArmoredHeadshotKillsString FString
---@field StatisticLongrangeKillsString FString
---@field StatisticSuppressorKillsString FString
---@field StatisticSpecialEnemyKillsString FString
---@field StatisticMultiKillString FString
---@field StatisticModEquippedString FString
---@field StatisticFourModsEquippedString FString
---@field StatisticNoReloadKillAmount int32
---@field StatisticLongRangeDistance float
---@field StatisticMultiKillAmount int32
---@field FireData USBZWeaponFireData
---@field SpreadData USBZWeaponSpreadData
---@field RecoilData USBZRecoilData
---@field NormalAimAssistData USBZWeaponAimAssistDataAsset
---@field NormalAimAssistDataFiring USBZWeaponAimAssistDataAsset
---@field TargetingAimAssistData USBZWeaponAimAssistDataAsset
---@field TargetingAimAssistDataFiring USBZWeaponAimAssistDataAsset
---@field OnFireWeaponFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field NormalMagnification float
---@field DOFData USBZWeaponDOFData
---@field WeaponBoxClass TSubclassOf<ASBZPlaceableWeapon>
---@field SprintEnterPlayRate float
---@field SprintExitPlayRate float
---@field EquipNotifyTime float
---@field UnequipNotifyTime float
---@field SprintExitNotifyTime float
---@field ReloadEmptyNotifyTime float
---@field ReloadNotifyTime float
---@field CachedMagazineData USBZWeaponMagazineData
USBZRangedWeaponData = {}



---@class USBZRangedWeaponEffect : UGameplayEffect
USBZRangedWeaponEffect = {}


---@class USBZRangedWeaponExecutionCalculation : UGameplayEffectExecutionCalculation
USBZRangedWeaponExecutionCalculation = {}


---@class USBZRappellingRopeComponent : USBZCableComponent
USBZRappellingRopeComponent = {}


---@class USBZRappellingRopeData : UDataAsset
---@field EnterSettings FSBZRappellingRopeSettings
---@field ExitSettings FSBZRappellingRopeSettings
USBZRappellingRopeData = {}



---@class USBZRappellingRopeNotifyState : UAnimNotifyState
---@field RappellingRopeData USBZRappellingRopeData
USBZRappellingRopeNotifyState = {}



---@class USBZReactionDataComponent : UActorComponent
---@field Reaction FSBZReactionData
USBZReactionDataComponent = {}



---@class USBZReactionPredicate : UObject
USBZReactionPredicate = {}


---@class USBZReactionPredicate_CanScream : USBZReactionPredicate
---@field ScreamInterval FFloatInterval
---@field MaxScreamsPerInterval uint8
---@field MaxPlayerScreamDistance float
USBZReactionPredicate_CanScream = {}



---@class USBZReactionPredicate_GlobalCooldown : USBZReactionPredicate
---@field WaitTime float
---@field GlobalCooldownKey FName
USBZReactionPredicate_GlobalCooldown = {}



---@class USBZReactionPredicate_HasNoEnemy : USBZReactionPredicate
USBZReactionPredicate_HasNoEnemy = {}


---@class USBZReactionPredicate_HasStimuliTag : USBZReactionPredicate
USBZReactionPredicate_HasStimuliTag = {}


---@class USBZReactionPredicate_RoomSoundDistance : USBZReactionPredicate
USBZReactionPredicate_RoomSoundDistance = {}


---@class USBZReactionPredicate_RoomSoundDistance_Footstep : USBZReactionPredicate_RoomSoundDistance
USBZReactionPredicate_RoomSoundDistance_Footstep = {}


---@class USBZReactionPredicate_RoomSoundDistance_HasNoEnemy : USBZReactionPredicate_RoomSoundDistance
USBZReactionPredicate_RoomSoundDistance_HasNoEnemy = {}


---@class USBZRecoilComponent : UActorComponent
---@field PlayerCharacter ASBZPlayerCharacter
---@field CurrentWeapon ASBZRangedWeapon
---@field CurrentRecoilData USBZRecoilData
USBZRecoilComponent = {}



---@class USBZRecoilData : UDataAsset
---@field DisplacementListMultiplier float
---@field ViewKick FSBZWeaponViewKickData
---@field ViewKickBack FSBZWeaponViewKickBackData
---@field ViewKickBackTargeting FSBZWeaponViewKickBackData
---@field GunKickXY FSBZWeaponGunKickData
---@field GunKickBackAlpha float
---@field GunKickBack FSBZWeaponGunKickBackData
---@field GunKickBackTargeting FSBZWeaponGunKickBackData
USBZRecoilData = {}

---@param OutMin float
---@param OutMax float
function USBZRecoilData:GetGunKickVerticalTop(OutMin, OutMax) end
---@param OutMin float
---@param OutMax float
function USBZRecoilData:GetGunKickVerticalBottom(OutMin, OutMax) end
---@param OutMin float
---@param OutMax float
function USBZRecoilData:GetGunKickHorizontalRight(OutMin, OutMax) end
---@param OutMin float
---@param OutMax float
function USBZRecoilData:GetGunKickHorizontalLeft(OutMin, OutMax) end


---@class USBZReloadRangedWeaponAbility : USBZGameplayAbility
---@field Character ASBZCharacter
USBZReloadRangedWeaponAbility = {}



---@class USBZReloadStateChangeNotify : UAnimNotify
---@field TargetState ESBZReloadState
USBZReloadStateChangeNotify = {}



---@class USBZReloadWeaponNotify : UAnimNotify
USBZReloadWeaponNotify = {}


---@class USBZRenderTargetWidgetComponent : UWidgetComponent
USBZRenderTargetWidgetComponent = {}

---@param Target UMaterialInstanceDynamic
---@param ParameterName FName
function USBZRenderTargetWidgetComponent:SetWidgetAsTextureParameter(Target, ParameterName) end
---@return UUserWidget
function USBZRenderTargetWidgetComponent:GetUserWidgetInitialized() end


---@class USBZReplayBaseWidget : USBZWidgetBase
---@field PlayerController ASBZReplayPlayerController
---@field ReplaySpeed float
---@field ReplayInfo FSBZReplayInfo
---@field ReplayEvents TArray<FSBZReplayEventInfo>
---@field GameInstance USBZGameInstance
---@field ReplayFilePlayer USBZReplayFilePlayer
USBZReplayBaseWidget = {}

---@return boolean
function USBZReplayBaseWidget:StopReplay() end
---@return boolean
function USBZReplayBaseWidget:StartReplay() end
---@param ElapsedTime float
function USBZReplayBaseWidget:SetElapasedTimeSeconds(ElapsedTime) end
function USBZReplayBaseWidget:ScrubForward() end
function USBZReplayBaseWidget:ScrubBackward() end
---@return boolean
function USBZReplayBaseWidget:ResumeReplay() end
function USBZReplayBaseWidget:Quit() end
---@return boolean
function USBZReplayBaseWidget:PauseReplay() end
---@param ReplayLength FString
---@param ReplayElapased FString
---@param ReplayElapsedPercent float
function USBZReplayBaseWidget:OnReplayUpdate(ReplayLength, ReplayElapased, ReplayElapsedPercent) end
function USBZReplayBaseWidget:OnReplayTimerUpdate() end
function USBZReplayBaseWidget:OnReplayStopped() end
---@param InReplayInfo FSBZReplayInfo
function USBZReplayBaseWidget:OnReplayStarted(InReplayInfo) end
function USBZReplayBaseWidget:OnReplayStart() end
---@return boolean
function USBZReplayBaseWidget:IsPaused() end
function USBZReplayBaseWidget:IncreaseReplaySpeed() end
---@return float
function USBZReplayBaseWidget:GetReplayLengthSeconds() end
---@return float
function USBZReplayBaseWidget:GetElapsedTimeSeconds() end
function USBZReplayBaseWidget:DecreaseReplaySpeed() end
function USBZReplayBaseWidget:CycleNextPlayerView() end
function USBZReplayBaseWidget:CycleNextCameraView() end


---@class USBZReplayFilePlayer : UObject
---@field GameInstance USBZGameInstance
---@field ReplayNetDriver UDemoNetDriver
---@field ReplayPlayerController ASBZReplayPlayerController
---@field ReplayEvents TArray<FSBZReplayEventInfo>
USBZReplayFilePlayer = {}



---@class USBZReplayFileRecorder : UObject
---@field GameInstance USBZGameInstance
USBZReplayFileRecorder = {}



---@class USBZReplayManager : UObject
---@field GameInstance USBZGameInstance
---@field ReplayFilePlayer USBZReplayFilePlayer
---@field ReplayFileRecorder USBZReplayFileRecorder
USBZReplayManager = {}

---@return boolean
function USBZReplayManager:IsRecording() end
---@return boolean
function USBZReplayManager:IsPlaying() end
---@param WorldContextObject UObject
---@return USBZReplayManager
function USBZReplayManager:GetReplayManager(WorldContextObject) end
function USBZReplayManager:FindReplays() end
---@param ReplayName FString
function USBZReplayManager:DeleteReplay(ReplayName) end


---@class USBZReplenishHealthEffect : UGameplayEffect
USBZReplenishHealthEffect = {}


---@class USBZReplicationGraph : UReplicationGraph
---@field GridNode UReplicationGraphNode_GridSpatialization2D
---@field PrototypeNode USBZReplicationGraphNode_PrototypingOnly
---@field AlwaysRelevantNode UReplicationGraphNode_ActorList
---@field DynamicSpatialFrequencyNode UReplicationGraphNode_DynamicSpatialFrequency
---@field IntialFrameReplicationNode USBZReplicationGraphNode_InitialFrameReplication
---@field NonSpatializedChildClasses TArray<UClass>
---@field ConfigRepClasses TArray<FSBZConfigRepClass>
USBZReplicationGraph = {}

---@param Master AActor
---@param Slave AActor
function USBZReplicationGraph:OnActorDependencyRemoved(Master, Slave) end
---@param Master AActor
---@param Slave AActor
function USBZReplicationGraph:OnActorDependencyAdded(Master, Slave) end


---@class USBZReplicationGraphNode_AlwaysRelevant_ForConnection : UReplicationGraphNode
---@field LastPawn AActor
USBZReplicationGraphNode_AlwaysRelevant_ForConnection = {}



---@class USBZReplicationGraphNode_InitialFrameReplication : UReplicationGraphNode
USBZReplicationGraphNode_InitialFrameReplication = {}


---@class USBZReplicationGraphNode_PlayerStateFrequencyLimiter : UReplicationGraphNode
USBZReplicationGraphNode_PlayerStateFrequencyLimiter = {}


---@class USBZReplicationGraphNode_PrototypingOnly : UReplicationGraphNode
USBZReplicationGraphNode_PrototypingOnly = {}


---@class USBZRequestOverkillWeaponAbility : USBZGameplayAbility
---@field OwnerCharacter ASBZPlayerCharacter
---@field OverkillSuccessDialog USBZDialogDataAsset
---@field OverkillFailedDialog USBZDialogDataAsset
USBZRequestOverkillWeaponAbility = {}



---@class USBZResultScreenPlayerListWidget : USBZWidgetBase
USBZResultScreenPlayerListWidget = {}

---@param PlayerStateArray TArray<ASBZPlayerState>
---@param AICrewStateArray TArray<ASBZAICrewState>
function USBZResultScreenPlayerListWidget:OnSetup(PlayerStateArray, AICrewStateArray) end


---@class USBZResultsScreenBaseWidget : USBZWidgetBase
USBZResultsScreenBaseWidget = {}

---@param InNewTime float
function USBZResultsScreenBaseWidget:OnRestartExpireTimerUpdated(InNewTime) end
---@param InNewTime float
function USBZResultsScreenBaseWidget:OnRestartCountdownTimerUpdated(InNewTime) end
---@param InNewTime float
function USBZResultsScreenBaseWidget:OnRestartAcceptTimerUpdated(InNewTime) end


---@class USBZResultsScreenStatusWidget : USBZWidgetBase
USBZResultsScreenStatusWidget = {}

---@param InNewTime float
function USBZResultsScreenStatusWidget:OnRestartExpireTimerUpdated(InNewTime) end
---@param InNewTime float
function USBZResultsScreenStatusWidget:OnRestartCountdownTimerUpdated(InNewTime) end
---@param InNewTime float
function USBZResultsScreenStatusWidget:OnRestartAcceptTimerUpdated(InNewTime) end


---@class USBZReticleWidget : USBZPlayerStatePawnWidgetBase
---@field ProgressionCurve UCurveFloat
---@field SpreadMod float
---@field CurrentEquippableIndex int32
---@field MaxSpreadAngle float
---@field CurrentWeapon ASBZRangedWeapon
---@field SpreadData USBZWeaponSpreadData
---@field CurrentScale float
USBZReticleWidget = {}

---@param bIsVisible boolean
function USBZReticleWidget:OnCrossHairVisibilityChanged(bIsVisible) end
---@param CrosshairSettings FSBZCrosshairSettings
function USBZReticleWidget:OnCrosshairSettingsChanged(CrosshairSettings) end
---@param CurrentSpread float
function USBZReticleWidget:OnCrossHairScaleChanged(CurrentSpread) end


---@class USBZRewardWidget : USBZWidgetBase
USBZRewardWidget = {}

---@param InfamyManager USBZInfamyManager
---@param NewInfamyExperience int32
---@param PreviousInfamyExperience int32
function USBZRewardWidget:OnInfamyChanged(InfamyManager, NewInfamyExperience, PreviousInfamyExperience) end
---@param ChallengeData FSBZChallengeData
function USBZRewardWidget:OnChallengeCompleted(ChallengeData) end
---@param PreviousInfamyExperince int32
---@param CurrentInfamyExperience int32
---@param SkillPointsEarned int32
function USBZRewardWidget:InfamyExperinceChanged(PreviousInfamyExperince, CurrentInfamyExperience, SkillPointsEarned) end
---@param ChallengeData FSBZChallengeData
function USBZRewardWidget:ChallengeCompleted(ChallengeData) end


---@class USBZRoomConnectorComponent : UActorComponent
---@field RoomA ASBZRoomVolume
---@field RoomB ASBZRoomVolume
USBZRoomConnectorComponent = {}

---@return FVector
function USBZRoomConnectorComponent:GetRoomBLocation() end
---@return FVector
function USBZRoomConnectorComponent:GetRoomALocation() end


---@class USBZRoomPathFinder : UObject
---@field Frontier TArray<TScriptInterface<ISBZRoomConnectorInterface>>
---@field Visited TMap<UObject, FSBZNode>
USBZRoomPathFinder = {}



---@class USBZSafeHouseBaseWidget : USBZWidgetBase
USBZSafeHouseBaseWidget = {}


---@class USBZSafeHouseManager : UObject
---@field WorldLoader USBZWorldLoader
---@field OnSafeHouseLoadStart FSBZSafeHouseManagerOnSafeHouseLoadStart
---@field OnSafeHouseLoadProgressUpdate FSBZSafeHouseManagerOnSafeHouseLoadProgressUpdate
---@field OnSafeHouseLoadComplete FSBZSafeHouseManagerOnSafeHouseLoadComplete
USBZSafeHouseManager = {}

function USBZSafeHouseManager:TravelToSafeHouse() end
---@param Data FSBZPlayerStateAddedEvent
function USBZSafeHouseManager:HandlePlayerStateAdded(Data) end
---@param WorldContextObject UObject
---@return USBZSafeHouseManager
function USBZSafeHouseManager:Get(WorldContextObject) end
function USBZSafeHouseManager:DebugExitSafeHouse() end


---@class USBZSaveGame : USaveGame
---@field CurrentVersion int32
---@field LatestVersion int32
USBZSaveGame = {}



---@class USBZSaveGameSettings : USBZDeveloperSettings
---@field DefaultProgressionSaveGame TSoftClassPtr<USBZProgressionSaveGame>
USBZSaveGameSettings = {}



---@class USBZSaveManager : UObject
---@field ProgressionSaveGame USBZProgressionSaveGame
---@field DefaultProgressionSaveGame USBZProgressionSaveGame
USBZSaveManager = {}

function USBZSaveManager:UpdateLoadoutInLobby() end
---@return USBZProgressionSaveGame
function USBZSaveManager:GetProgressionSaveGame() end
---@param WorldContextObject UObject
---@return USBZSaveManager
function USBZSaveManager:Get(WorldContextObject) end


---@class USBZScrollBox : UScrollBox
---@field InputComponent UInputComponent
---@field InputAxisYName FName
---@field ScrollSpeedY float
---@field InputAxisDeadZone float
---@field bIsCustomFocus boolean
USBZScrollBox = {}

---@param bInIsCustomFocus boolean
function USBZScrollBox:SetCustomFocus(bInIsCustomFocus) end


---@class USBZSearchAndHostMatchmaking : USBZMatchmaking
---@field MaxSearchesPerRequest int32
---@field RepeatSearchDelayMin float
---@field RepeatSearchDelayMax float
---@field LostConnectionDelayMin float
---@field LostConnectionDelayMax float
---@field PowerLevelDeltaSmall float
---@field PowerLevelDeltaMedium float
---@field bPartyDropInEnabled boolean
---@field DelayTimer FTimerHandle
USBZSearchAndHostMatchmaking = {}

---@param Result ESBZOnlineCode
function USBZSearchAndHostMatchmaking:HandleLostConnectionToHost(Result) end


---@class USBZSecuredBagVisualizeComponent : UActorComponent
---@field OnBagAdded FSBZSecuredBagVisualizeComponentOnBagAdded
---@field BagTypes TArray<USBZBagType>
---@field SpawnLocationArray TArray<FSBZComponentSelector>
USBZSecuredBagVisualizeComponent = {}

function USBZSecuredBagVisualizeComponent:OnRep_BagTypes() end
---@param BagType USBZBagType
function USBZSecuredBagVisualizeComponent:Multicast_AddBagType(BagType) end
---@param BagHandle FSBZBagHandle
function USBZSecuredBagVisualizeComponent:AddBagHandle(BagHandle) end


---@class USBZSecurityCompanySettings : USBZDeveloperSettings
---@field Settings FSBZSecurityCompanySettingData
USBZSecurityCompanySettings = {}

---@param WorldContextObject UObject
---@return boolean
function USBZSecurityCompanySettings:HasLeadGuard(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSecurityCompanySettings:HasIndestructibleCameras(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSecurityCompanySettings:HasCameraRuntimeLimit(WorldContextObject) end
---@return FSBZSecurityCompanySettingData
function USBZSecurityCompanySettings:Get() end


---@class USBZSecurityCompanyVisualsWidget : USBZWidgetBase
---@field SecurityCompanyEnum ESBZSecurityCompany
---@field SecurityCompanyAsset UPD3SecurityCompanyDataAsset
USBZSecurityCompanyVisualsWidget = {}

function USBZSecurityCompanyVisualsWidget:SetEmpty() end
function USBZSecurityCompanyVisualsWidget:OnSecurityCompanyAssetStartedLoad() end
function USBZSecurityCompanyVisualsWidget:OnSecurityCompanyAssetLoaded() end
function USBZSecurityCompanyVisualsWidget:OnEmptySet() end
function USBZSecurityCompanyVisualsWidget:NativeOnAssetLoaded() end
---@param InSecurityCompany ESBZSecurityCompany
function USBZSecurityCompanyVisualsWidget:InitializeSecurityCompany(InSecurityCompany) end
---@return ESBZSecurityCompany
function USBZSecurityCompanyVisualsWidget:GetSecurityCompanyEnum() end
---@return UPD3SecurityCompanyDataAsset
function USBZSecurityCompanyVisualsWidget:GetSecurityCompany() end


---@class USBZSelectorWidget : USBZMenuButton
---@field SelectionOptionChanged FSBZSelectorWidgetSelectionOptionChanged
---@field SelectionCount int32
---@field CurrentIndex int32
USBZSelectorWidget = {}

---@param NewSelectionCount int32
function USBZSelectorWidget:SetSelectionCount(NewSelectionCount) end
---@param DesiredIndex int32
function USBZSelectorWidget:SetCurrentIndex(DesiredIndex) end
function USBZSelectorWidget:SelectRight() end
function USBZSelectorWidget:SelectLeft() end
---@param InCurrentIndex int32
function USBZSelectorWidget:OnSelectionOptionChanged(InCurrentIndex) end
function USBZSelectorWidget:OnSelectedRight() end
function USBZSelectorWidget:OnSelectedLeft() end


---@class USBZSensorComponent : UActorComponent
---@field bIsBlueMode boolean
USBZSensorComponent = {}



---@class USBZSensorToolData : USBZToolData
---@field MaxMarkableTargets int32
---@field MaxVisibleTargets int32
---@field MaxDistance float
---@field SensorToolDOFFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field MarkedOutline USBZOutlineAsset
---@field SensorAimDegreePadding float
---@field DefaultAmmoCost float
---@field DefaultSensoryMarkingDuration float
---@field ScanLineTime float
USBZSensorToolData = {}



---@class USBZSentryExplosionDamageType : USBZExplosionDamageType
USBZSentryExplosionDamageType = {}


---@class USBZSentryExplosionExecutionCalculation : UGameplayEffectExecutionCalculation
USBZSentryExplosionExecutionCalculation = {}


---@class USBZSentryGunAbilityData : UDataAsset
---@field AbilityArray TArray<TSubclassOf<USBZGameplayAbility>>
USBZSentryGunAbilityData = {}



---@class USBZSentryGunAnimation : UAnimInstance
---@field SentryYawOnlyRotation FRotator
---@field SentryRotation FRotator
---@field SentryGun ASBZSentryGun
---@field YawBouncer FSBZSentryGunAngleBouncer
---@field PitchBouncer FSBZSentryGunAngleBouncer
---@field DeadPitch float
---@field ToDeadPitchSpeed float
---@field FromDeadPitchSpeed float
USBZSentryGunAnimation = {}



---@class USBZSentryGunAttributeSet : USBZPawnAttributeSet
USBZSentryGunAttributeSet = {}


---@class USBZSentryGunFireData : USBZAIWeaponFireData
---@field OverheatEffectClass TSubclassOf<UGameplayEffect>
USBZSentryGunFireData = {}



---@class USBZSentryGunOverheatEffect : UGameplayEffect
USBZSentryGunOverheatEffect = {}


---@class USBZSentryGunOverheatExecutionCalculation : UGameplayEffectExecutionCalculation
USBZSentryGunOverheatExecutionCalculation = {}


---@class USBZSentryGunRangedWeaponAbility : USBZFireRangedWeaponAbility
USBZSentryGunRangedWeaponAbility = {}


---@class USBZSentryKillsStatisticCriteriaData : USBZStatisticCriteriaData
---@field SentryKills int32
USBZSentryKillsStatisticCriteriaData = {}



---@class USBZSessionHostDebugCallbackProxy : UBlueprintAsyncActionBase
---@field OnComplete FSBZSessionHostDebugCallbackProxyOnComplete
USBZSessionHostDebugCallbackProxy = {}

---@param WorldContextObject UObject
---@return USBZSessionHostDebugCallbackProxy
function USBZSessionHostDebugCallbackProxy:SessionHostDebug(WorldContextObject) end


---@class USBZSessionHostPartyCallbackProxy : UBlueprintAsyncActionBase
---@field OnComplete FSBZSessionHostPartyCallbackProxyOnComplete
---@field WorldContextObject UObject
---@field PartyParams FSBZOnlinePartyParamsUi
USBZSessionHostPartyCallbackProxy = {}

---@param WorldContextObject UObject
---@param InPartyParams FSBZOnlinePartyParamsUi
---@return USBZSessionHostPartyCallbackProxy
function USBZSessionHostPartyCallbackProxy:SessionHostParty(WorldContextObject, InPartyParams) end


---@class USBZSessionJoinCallbackProxy : UBlueprintAsyncActionBase
---@field OnComplete FSBZSessionJoinCallbackProxyOnComplete
USBZSessionJoinCallbackProxy = {}

---@param WorldContextObject UObject
---@param InSessionToJoin FSBZOnlineSearchResult
---@return USBZSessionJoinCallbackProxy
function USBZSessionJoinCallbackProxy:SessionJoin(WorldContextObject, InSessionToJoin) end


---@class USBZSessionLeaveCallbackProxy : UBlueprintAsyncActionBase
---@field OnComplete FSBZSessionLeaveCallbackProxyOnComplete
USBZSessionLeaveCallbackProxy = {}

---@param WorldContextObject UObject
---@return USBZSessionLeaveCallbackProxy
function USBZSessionLeaveCallbackProxy:SessionLeave(WorldContextObject) end


---@class USBZSessionLeavePartyCallbackProxy : UBlueprintAsyncActionBase
---@field OnComplete FSBZSessionLeavePartyCallbackProxyOnComplete
USBZSessionLeavePartyCallbackProxy = {}

---@param WorldContextObject UObject
---@return USBZSessionLeavePartyCallbackProxy
function USBZSessionLeavePartyCallbackProxy:SessionLeaveParty(WorldContextObject) end


---@class USBZSessionUpdateListCallbackProxy : UBlueprintAsyncActionBase
---@field OnComplete FSBZSessionUpdateListCallbackProxyOnComplete
USBZSessionUpdateListCallbackProxy = {}

---@param WorldContextObject UObject
---@param InSearchParams FSBZOnlineSessionParams
---@return USBZSessionUpdateListCallbackProxy
function USBZSessionUpdateListCallbackProxy:SessionUpdateList(WorldContextObject, InSearchParams) end


---@class USBZSetCharacterStanceNofity : UAnimNotify
---@field Stance ESBZCharacterStance
USBZSetCharacterStanceNofity = {}



---@class USBZSettingHelperPanel : USBZWidgetBase
---@field PanelName FName
USBZSettingHelperPanel = {}

---@param InSettingCategoryName FName
function USBZSettingHelperPanel:SetSettingCategoryName(InSettingCategoryName) end
function USBZSettingHelperPanel:RefreshPanelState() end


---@class USBZSettingsButton : USBZMenuButton
---@field SettingName FName
---@field SettingCategoryName FName
---@field SettingHelperPanelName FName
---@field SettingNameLocalized FText
---@field bCanResetSetting boolean
---@field bSettingIsDirty boolean
---@field bSettingHasDefaultValue boolean
USBZSettingsButton = {}

---@return boolean
function USBZSettingsButton:SettingIsDirty() end
---@return boolean
function USBZSettingsButton:SettingHasDefaultValue() end
function USBZSettingsButton:SettingChanged() end
---@param InSettingNameLocalized FText
function USBZSettingsButton:SetSettingNameLocalized(InSettingNameLocalized) end
---@param InSettingName FName
function USBZSettingsButton:SetSettingName(InSettingName) end
---@param InSettingHelperPanelName FName
function USBZSettingsButton:SetSettingHelperPanelName(InSettingHelperPanelName) end
---@param InSettingCategoryName FName
function USBZSettingsButton:SetSettingCategoryName(InSettingCategoryName) end
---@param InCanResetSetting boolean
function USBZSettingsButton:SetCanResetSetting(InCanResetSetting) end
function USBZSettingsButton:SelectionNameChanged() end
---@return boolean
function USBZSettingsButton:CanResetSetting() end


---@class USBZSettingsButtonDLSSSRModeChoice : USBZSettingsButtonMultipleChoice
---@field OptionDLSSSRModes TArray<int64>
USBZSettingsButtonDLSSSRModeChoice = {}

---@param InOptionDLSSSRModes TArray<int64>
function USBZSettingsButtonDLSSSRModeChoice:SetOptionDLSSSRModes(InOptionDLSSSRModes) end


---@class USBZSettingsButtonGamepadBinding : USBZSettingsButton
---@field PrimaryBinding FInputChord
USBZSettingsButtonGamepadBinding = {}

---@param InBinding FInputChord
function USBZSettingsButtonGamepadBinding:SetPrimaryBinding(InBinding) end


---@class USBZSettingsButtonKeyboardBinding : USBZSettingsButton
---@field PrimaryBinding FInputChord
---@field SecondaryBinding FInputChord
USBZSettingsButtonKeyboardBinding = {}

---@param InBinding FInputChord
function USBZSettingsButtonKeyboardBinding:SetSecondaryBinding(InBinding) end
---@param InBinding FInputChord
function USBZSettingsButtonKeyboardBinding:SetPrimaryBinding(InBinding) end


---@class USBZSettingsButtonMultipleChoice : USBZSettingsButton
---@field OptionNames TArray<FText>
---@field ChoiceIndex int32
USBZSettingsButtonMultipleChoice = {}

---@param InOptionNames TArray<FText>
function USBZSettingsButtonMultipleChoice:SetOptionNames(InOptionNames) end
---@param InChoiceIndex int32
function USBZSettingsButtonMultipleChoice:SetChoiceIndex(InChoiceIndex) end
function USBZSettingsButtonMultipleChoice:OptionNamesChanged() end


---@class USBZSettingsButtonResolutionChoice : USBZSettingsButtonMultipleChoice
---@field OptionResolutions TArray<FIntPoint>
USBZSettingsButtonResolutionChoice = {}

---@param InOptionResolutions TArray<FIntPoint>
function USBZSettingsButtonResolutionChoice:SetOptionResolutions(InOptionResolutions) end


---@class USBZSettingsButtonSlider : USBZSettingsButton
---@field SliderMinValue float
---@field SliderMaxValue float
---@field SliderIncrementValue float
---@field SliderValue float
USBZSettingsButtonSlider = {}

---@param InNewValue float
function USBZSettingsButtonSlider:SetSliderValue(InNewValue) end
---@param NewMinSliderValue float
function USBZSettingsButtonSlider:SetMinValue(NewMinSliderValue) end
---@param NewMaxSliderValue float
function USBZSettingsButtonSlider:SetMaxValue(NewMaxSliderValue) end
---@param NewIncrementValue float
function USBZSettingsButtonSlider:SetIncrementValue(NewIncrementValue) end
function USBZSettingsButtonSlider:MinSliderValueChanged() end
function USBZSettingsButtonSlider:MaxSliderValueChanged() end
function USBZSettingsButtonSlider:IncrementSliderValueChanged() end


---@class USBZSettingsButtonTwoChoice : USBZSettingsButton
---@field OptionOneName FText
---@field OptionTwoName FText
---@field bToggleValue boolean
USBZSettingsButtonTwoChoice = {}

---@param bIsToggled boolean
function USBZSettingsButtonTwoChoice:SetToggleValue(bIsToggled) end
---@param InOptionTwoName FText
function USBZSettingsButtonTwoChoice:SetOptionTwoName(InOptionTwoName) end
---@param InOptionOneName FText
function USBZSettingsButtonTwoChoice:SetOptionOneName(InOptionOneName) end
function USBZSettingsButtonTwoChoice:OptionTwoNameChanged() end
function USBZSettingsButtonTwoChoice:OptionOneNameChanged() end


---@class USBZSettingsCategoryScreen : USBZMenuStackScreenWidget
---@field SettingHelperPanels TArray<USBZSettingHelperPanel>
---@field ScrollBox_SettingsItems UPanelWidget
---@field SettingsGroupTitleClass TSubclassOf<UTextBlock>
---@field SettingsButtonClassTwoChoice TSubclassOf<USBZSettingsButtonTwoChoice>
---@field SettingsButtonClassMultipleChoice TSubclassOf<USBZSettingsButtonMultipleChoice>
---@field SettingsButtonClassResolutionChoice TSubclassOf<USBZSettingsButtonResolutionChoice>
---@field SettingsButtonClassDLSSSRModeChoice TSubclassOf<USBZSettingsButtonDLSSSRModeChoice>
---@field SettingsButtonClassSlider TSubclassOf<USBZSettingsButtonSlider>
---@field SettingsButtonClassKeyboardBinding TSubclassOf<USBZSettingsButtonKeyboardBinding>
---@field SettingsButtonClassGamepadBinding TSubclassOf<USBZSettingsButtonGamepadBinding>
USBZSettingsCategoryScreen = {}

function USBZSettingsCategoryScreen:SettingsCategoryInitialized() end
---@param SettingsCategoryName FName
function USBZSettingsCategoryScreen:ResetSettingsCategory(SettingsCategoryName) end
---@param MenuButton USBZMenuButton
---@param bIsFocused boolean
function USBZSettingsCategoryScreen:OnSettingsButtonFocused(MenuButton, bIsFocused) end
---@param SettingsButton USBZSettingsButton
function USBZSettingsCategoryScreen:OnSettingsButtonChanged(SettingsButton) end
---@param SettingsCategoryName FName
---@return boolean
function USBZSettingsCategoryScreen:IsSettingsCategoryDirty(SettingsCategoryName) end
---@param SettingsCategoryName FName
function USBZSettingsCategoryScreen:InitializeSettingsItems(SettingsCategoryName) end
---@param SettingsCategoryName FName
function USBZSettingsCategoryScreen:ApplySettingsCategory(SettingsCategoryName) end


---@class USBZSettingsCategoryScreenGamepad : USBZMenuStackScreenWidget
---@field MultipleChoiceButton_GamepadPreset USBZSettingsButtonMultipleChoice
USBZSettingsCategoryScreenGamepad = {}

function USBZSettingsCategoryScreenGamepad:SettingsCategoryInitialized() end
function USBZSettingsCategoryScreenGamepad:ResetSettingsCategory() end
function USBZSettingsCategoryScreenGamepad:RefreshScreen() end
---@param MenuButton USBZMenuButton
---@param bIsFocused boolean
function USBZSettingsCategoryScreenGamepad:OnSettingsButtonFocused(MenuButton, bIsFocused) end
---@param SettingsButton USBZSettingsButton
function USBZSettingsCategoryScreenGamepad:OnSettingsButtonChanged(SettingsButton) end
function USBZSettingsCategoryScreenGamepad:OnInputTypeChanged() end
---@return boolean
function USBZSettingsCategoryScreenGamepad:IsSettingsCategoryDirty() end
function USBZSettingsCategoryScreenGamepad:InitializeSettingsItems() end
function USBZSettingsCategoryScreenGamepad:ApplySettingsCategory() end


---@class USBZSettingsFunctions : UObject
USBZSettingsFunctions = {}

---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctions:GetButtonVisibilityAlways(WorldContextObject) end


---@class USBZSettingsFunctionsAudio : USBZSettingsFunctions
USBZSettingsFunctionsAudio = {}

---@param WorldContextObject UObject
---@param Volume float
function USBZSettingsFunctionsAudio:SetVOVolume(WorldContextObject, Volume) end
---@param WorldContextObject UObject
---@param Volume float
function USBZSettingsFunctionsAudio:SetVoIPVolume(WorldContextObject, Volume) end
---@param WorldContextObject UObject
---@param Volume float
function USBZSettingsFunctionsAudio:SetSFXVolume(WorldContextObject, Volume) end
---@param WorldContextObject UObject
---@param Volume float
function USBZSettingsFunctionsAudio:SetMusicVolume(WorldContextObject, Volume) end
---@param WorldContextObject UObject
---@param Volume float
function USBZSettingsFunctionsAudio:SetMasterVolume(WorldContextObject, Volume) end
---@param WorldContextObject UObject
---@param Volume float
function USBZSettingsFunctionsAudio:SetCinematicVolume(WorldContextObject, Volume) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetVOVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetVoIPVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetSFXVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetMusicVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetMasterVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetDefaultVOVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetDefaultVoIPVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetDefaultSFXVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetDefaultMusicVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetDefaultMasterVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetDefaultCinematicVolume(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsAudio:GetCinematicVolume(WorldContextObject) end


---@class USBZSettingsFunctionsGamepad : USBZSettingsFunctions
USBZSettingsFunctionsGamepad = {}

---@param WorldContextObject UObject
---@param Preset int32
function USBZSettingsFunctionsGamepad:SetGamepadBindingsPreset(WorldContextObject, Preset) end
---@param WorldContextObject UObject
---@param Binding FInputChord
---@param ActionName FName
function USBZSettingsFunctionsGamepad:SetGamepadBinding(WorldContextObject, Binding, ActionName) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsGamepad:GetGamepadBindingsPreset(WorldContextObject) end
---@param WorldContextObject UObject
---@param ActionName FName
---@return FInputChord
function USBZSettingsFunctionsGamepad:GetGamepadBinding(WorldContextObject, ActionName) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsGamepad:GetDefaultGamepadBindingsPreset(WorldContextObject) end
---@param WorldContextObject UObject
---@param ActionName FName
---@return FInputChord
function USBZSettingsFunctionsGamepad:GetDefaultGamepadBinding(WorldContextObject, ActionName) end


---@class USBZSettingsFunctionsGameplay : USBZSettingsFunctions
USBZSettingsFunctionsGameplay = {}

---@param WorldContextObject UObject
---@param Sensitivity float
function USBZSettingsFunctionsGameplay:SetTargetingSensitivityMultiplier(WorldContextObject, Sensitivity) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsGameplay:SetSwitchWeaponAutomaticallyEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsGameplay:SetMouseSmoothingEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param Sensitivity float
function USBZSettingsFunctionsGameplay:SetMouseSensitivityMultiplier(WorldContextObject, Sensitivity) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsGameplay:SetInvertedYAxisEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsGameplay:SetHoldToTargetEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsGameplay:SetHoldToRunEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsGameplay:SetHoldToCrouchEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param Sensitivity float
function USBZSettingsFunctionsGameplay:SetGamepadVerticalSensitivityMultiplier(WorldContextObject, Sensitivity) end
---@param WorldContextObject UObject
---@param Sensitivity float
function USBZSettingsFunctionsGameplay:SetGamepadHorizontalSensitivityMultiplier(WorldContextObject, Sensitivity) end
---@param WorldContextObject UObject
---@param bDisabled boolean
function USBZSettingsFunctionsGameplay:SetCrossplayDisabled(WorldContextObject, bDisabled) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsGameplay:SetControllerVibrationsEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param bDisabled boolean
function USBZSettingsFunctionsGameplay:SetChatDisabled(WorldContextObject, bDisabled) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsSwitchWeaponAutomaticallyEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsSwitchWeaponAutomaticallyEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsMouseSmoothingEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsMouseSmoothingEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsInvertedYAxisEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsInvertedYAxisEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsHoldToTargetEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsHoldToTargetEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsHoldToRunEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsHoldToRunEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsHoldToCrouchEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsHoldToCrouchEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsCrossplayDisabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsCrossplayDisabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsChatDisabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:IsChatDisabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsGameplay:GetTargetingSensitivityMultiplier(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsGameplay:GetMouseSensitivityMultiplier(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsGameplay:GetGamepadVerticalSensitivityMultiplier(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsGameplay:GetGamepadHorizontalSensitivityMultiplier(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsGameplay:GetDefaultTargetingSensitivityMultiplier(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsGameplay:GetDefaultMouseSensitivityMultiplier(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsGameplay:GetDefaultGamepadVerticalSensitivityMultiplier(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsGameplay:GetDefaultGamepadHorizontalSensitivityMultiplier(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:AreControllerVibrationsEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsGameplay:AreControllerVibrationsEnabled(WorldContextObject) end


---@class USBZSettingsFunctionsKeyboard : USBZSettingsFunctions
USBZSettingsFunctionsKeyboard = {}

---@param WorldContextObject UObject
---@param AxisOrActionName FName
---@param Scale float
---@param Binding FInputChord
function USBZSettingsFunctionsKeyboard:SetSecondaryKeyboardBinding(WorldContextObject, AxisOrActionName, Scale, Binding) end
---@param WorldContextObject UObject
---@param AxisOrActionName FName
---@param Scale float
---@param Binding FInputChord
function USBZSettingsFunctionsKeyboard:SetPrimaryKeyboardBinding(WorldContextObject, AxisOrActionName, Scale, Binding) end
---@param WorldContextObject UObject
---@param AxisOrActionName FName
---@param Scale float
---@return FInputChord
function USBZSettingsFunctionsKeyboard:GetSecondaryKeyboardBinding(WorldContextObject, AxisOrActionName, Scale) end
---@param WorldContextObject UObject
---@param AxisOrActionName FName
---@param Scale float
---@return FInputChord
function USBZSettingsFunctionsKeyboard:GetPrimaryKeyboardBinding(WorldContextObject, AxisOrActionName, Scale) end
---@param WorldContextObject UObject
---@param AxisOrActionName FName
---@param Scale float
---@return FInputChord
function USBZSettingsFunctionsKeyboard:GetDefaultSecondaryKeyboardBinding(WorldContextObject, AxisOrActionName, Scale) end
---@param WorldContextObject UObject
---@param AxisOrActionName FName
---@param Scale float
---@return FInputChord
function USBZSettingsFunctionsKeyboard:GetDefaultPrimaryKeyboardBinding(WorldContextObject, AxisOrActionName, Scale) end


---@class USBZSettingsFunctionsUserInterface : USBZSettingsFunctions
USBZSettingsFunctionsUserInterface = {}

---@param WorldContextObject UObject
---@param Size float
function USBZSettingsFunctionsUserInterface:SetSubtitlesSize(WorldContextObject, Size) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsUserInterface:SetSubtitlesEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsUserInterface:SetReticleEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param Scale float
function USBZSettingsFunctionsUserInterface:SetMinCrosshairsScale(WorldContextObject, Scale) end
---@param WorldContextObject UObject
---@param Scale float
function USBZSettingsFunctionsUserInterface:SetMaxCrosshairsScale(WorldContextObject, Scale) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsUserInterface:SetHitIndicatorsEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param Scale float
function USBZSettingsFunctionsUserInterface:SetHitIndicatorScale(WorldContextObject, Scale) end
---@param WorldContextObject UObject
---@param Color FLinearColor
function USBZSettingsFunctionsUserInterface:SetHitIndicatorColorKill(WorldContextObject, Color) end
---@param WorldContextObject UObject
---@param Color FLinearColor
function USBZSettingsFunctionsUserInterface:SetHitIndicatorColorHit(WorldContextObject, Color) end
---@param WorldContextObject UObject
---@param Color FLinearColor
function USBZSettingsFunctionsUserInterface:SetHitIndicatorColorCrit(WorldContextObject, Color) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsUserInterface:SetFPSCountEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param Size float
function USBZSettingsFunctionsUserInterface:SetCrosshairsDotSize(WorldContextObject, Size) end
---@param WorldContextObject UObject
---@param Color FLinearColor
function USBZSettingsFunctionsUserInterface:SetCrosshairsDotColor(WorldContextObject, Color) end
---@param WorldContextObject UObject
---@param Width float
function USBZSettingsFunctionsUserInterface:SetCrosshairsBarWidth(WorldContextObject, Width) end
---@param WorldContextObject UObject
---@param Length float
function USBZSettingsFunctionsUserInterface:SetCrosshairsBarLength(WorldContextObject, Length) end
---@param WorldContextObject UObject
---@param Color FLinearColor
function USBZSettingsFunctionsUserInterface:SetCrosshairsBarColor(WorldContextObject, Color) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsUserInterface:IsReticleEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsUserInterface:IsReticleEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsUserInterface:IsFPSCountEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsUserInterface:IsFPSCountEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetSubtitlesSize(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetMinCrosshairsScale(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetMaxCrosshairsScale(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetHitIndicatorScale(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetHitIndicatorColorKill(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetHitIndicatorColorHit(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetHitIndicatorColorCrit(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetDefaultSubtitlesSize(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetDefaultMinCrosshairsScale(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetDefaultMaxCrosshairsScale(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetDefaultHitIndicatorScale(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetDefaultHitIndicatorColorKill(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetDefaultHitIndicatorColorHit(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetDefaultHitIndicatorColorCrit(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetDefaultCrosshairsDotSize(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetDefaultCrosshairsDotColor(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetDefaultCrosshairsBarWidth(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetDefaultCrosshairsBarLength(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetDefaultCrosshairsBarColor(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetCrosshairsDotSize(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetCrosshairsDotColor(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetCrosshairsBarWidth(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsUserInterface:GetCrosshairsBarLength(WorldContextObject) end
---@param WorldContextObject UObject
---@return FLinearColor
function USBZSettingsFunctionsUserInterface:GetCrosshairsBarColor(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsUserInterface:AreSubtitlesEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsUserInterface:AreSubtitlesEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsUserInterface:AreHitIndicatorsEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsUserInterface:AreHitIndicatorsEnabled(WorldContextObject) end


---@class USBZSettingsFunctionsVideo : USBZSettingsFunctions
USBZSettingsFunctionsVideo = {}

---@param WorldContextObject UObject
---@param Value int32
function USBZSettingsFunctionsVideo:SetWindowMode(WorldContextObject, Value) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsVideo:SetVSyncEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param Value int32
function USBZSettingsFunctionsVideo:SetViewDistanceQuality(WorldContextObject, Value) end
---@param WorldContextObject UObject
---@param Mode int32
function USBZSettingsFunctionsVideo:SetUpscalingMode(WorldContextObject, Mode) end
---@param WorldContextObject UObject
---@param Value int32
function USBZSettingsFunctionsVideo:SetTextureQuality(WorldContextObject, Value) end
---@param WorldContextObject UObject
---@param Value int32
function USBZSettingsFunctionsVideo:SetShadowQuality(WorldContextObject, Value) end
---@param WorldContextObject UObject
---@param Resolution FIntPoint
function USBZSettingsFunctionsVideo:SetResolution(WorldContextObject, Resolution) end
---@param WorldContextObject UObject
---@param Value int32
function USBZSettingsFunctionsVideo:SetPostProcessingQuality(WorldContextObject, Value) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsVideo:SetMotionBlurEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param Gamma float
function USBZSettingsFunctionsVideo:SetGamma(WorldContextObject, Gamma) end
---@param WorldContextObject UObject
---@param Limit int32
function USBZSettingsFunctionsVideo:SetFramerateLimit(WorldContextObject, Limit) end
---@param WorldContextObject UObject
---@param Value int32
function USBZSettingsFunctionsVideo:SetFoliageQuality(WorldContextObject, Value) end
---@param WorldContextObject UObject
---@param Value int32
function USBZSettingsFunctionsVideo:SetEffectsQuality(WorldContextObject, Value) end
---@param WorldContextObject UObject
---@param Mode int32
function USBZSettingsFunctionsVideo:SetDLSSSRMode(WorldContextObject, Mode) end
---@param WorldContextObject UObject
---@param bEnabled boolean
function USBZSettingsFunctionsVideo:SetDepthOfFieldEnabled(WorldContextObject, bEnabled) end
---@param WorldContextObject UObject
---@param Contrast float
function USBZSettingsFunctionsVideo:SetContrast(WorldContextObject, Contrast) end
---@param WorldContextObject UObject
---@param Strength float
function USBZSettingsFunctionsVideo:SetColorBlindStrength(WorldContextObject, Strength) end
---@param WorldContextObject UObject
---@param Mode int32
function USBZSettingsFunctionsVideo:SetColorBlindMode(WorldContextObject, Mode) end
---@param WorldContextObject UObject
---@param FoV float
function USBZSettingsFunctionsVideo:SetCameraVerticalFieldOfView(WorldContextObject, FoV) end
---@param WorldContextObject UObject
---@param Brightness float
function USBZSettingsFunctionsVideo:SetBrightness(WorldContextObject, Brightness) end
---@param WorldContextObject UObject
---@param Mode int32
function USBZSettingsFunctionsVideo:SetAntiAliasingMode(WorldContextObject, Mode) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsVideo:IsVSyncEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsVideo:IsVSyncEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsVideo:IsMotionBlurEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsVideo:IsMotionBlurEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsVideo:IsDepthOfFieldEnabledByDefault(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsVideo:IsDepthOfFieldEnabled(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetWindowMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetViewDistanceQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetUpscalingMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetTextureQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetShadowQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return FIntPoint
function USBZSettingsFunctionsVideo:GetResolution(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetPostProcessingQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetGamma(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetFramerateLimit(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetFoliageQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetEffectsQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDLSSSRMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultWindowMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultViewDistanceQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultUpscalingMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultTextureQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultShadowQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return FIntPoint
function USBZSettingsFunctionsVideo:GetDefaultResolution(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultPostProcessingQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetDefaultGamma(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultFramerateLimit(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultFoliageQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultEffectsQuality(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultDLSSSRMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetDefaultContrast(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetDefaultColorBlindStrength(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultColorBlindMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetDefaultCameraVerticalFieldOfView(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetDefaultBrightness(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetDefaultAntiAliasingMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetContrast(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetColorBlindStrength(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetColorBlindMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetCameraVerticalFieldOfView(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsVideo:GetButtonVisibilityUpscalingMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USBZSettingsFunctionsVideo:GetButtonVisibilityDLSSRMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USBZSettingsFunctionsVideo:GetBrightness(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USBZSettingsFunctionsVideo:GetAntiAliasingMode(WorldContextObject) end


---@class USBZSettingsMenuChildManager : UObject
---@field Items TArray<FSBZSettingsMenuChildData>
USBZSettingsMenuChildManager = {}



---@class USBZSettingsMenuConfig : UObject
---@field SettingsCategories TArray<FSBZSettingsMenuCategoryInfo>
USBZSettingsMenuConfig = {}



---@class USBZSettingsMenuManager : UObject
---@field OnPopUpClosedDelegate FSBZSettingsMenuManagerOnPopUpClosedDelegate
---@field SettingsMenuConfig USBZSettingsMenuConfig
---@field SubSettings USBZSettingsMenuChildManager
USBZSettingsMenuManager = {}

---@param ActionName FName
function USBZSettingsMenuManager:OnPopUpClosedUnappliedChanges(ActionName) end
---@param ActionName FName
function USBZSettingsMenuManager:OnPopUpClosedConfirmResetToDefault(ActionName) end
---@param ActionName FName
function USBZSettingsMenuManager:OnPopUpClosedConfirmChanges(ActionName) end
---@param ActionName FName
function USBZSettingsMenuManager:OnPopUpClosedConfirmAllChanges(ActionName) end
---@param WorldContextObject UObject
---@return USBZSettingsMenuManager
function USBZSettingsMenuManager:Get(WorldContextObject) end


---@class USBZSharedPartList : UDataAsset
---@field SharedModParts TArray<USBZEquippablePartDataAsset>
USBZSharedPartList = {}



---@class USBZShieldHunkeredDownNotifyState : UAnimNotifyState
USBZShieldHunkeredDownNotifyState = {}


---@class USBZShiftAmmoNotifyState : UAnimNotifyState
---@field FixedCount int32
---@field FixedEmptyCount int32
USBZShiftAmmoNotifyState = {}



---@class USBZShockAndAweAbility : USBZSkillTriggeredHurtReactionAbility
USBZShockAndAweAbility = {}


---@class USBZShoutTargetComponent : UActorComponent
---@field BasePriority float
---@field DistModPriority float
---@field bUseDirectHits boolean
---@field bRequiresVisibility boolean
---@field bRequiresOwnerAliveIfCharacter boolean
---@field Action ESBZShoutActionType
---@field TargetName FText
---@field CustomPingMessage FText
---@field CustomOutline USBZOutlineAsset
---@field CustomVoice USBZVoiceCommentDataAsset
---@field TargetVoice USBZVoiceCommentDataAsset
---@field bUseCustomGesture boolean
---@field CustomGesture ESBZPlayerGestureType
---@field CustomDuration float
---@field bUseBoundsCenter boolean
---@field bUseAllActorOutlines boolean
---@field PositionComponent FSBZComponentSelector
---@field OutlineComponents TArray<FSBZComponentSelector>
---@field OnShoutedAt FSBZShoutTargetComponentOnShoutedAt
---@field bEnabled boolean
USBZShoutTargetComponent = {}

---@param bNewValue boolean
function USBZShoutTargetComponent:SetEnabled(bNewValue) end
---@param InCustomPingMessage FText
function USBZShoutTargetComponent:SetCustomPingMessage(InCustomPingMessage) end
---@param Components TArray<UPrimitiveComponent>
function USBZShoutTargetComponent:MakeComponentsShoutTargetable(Components) end
---@param Component UPrimitiveComponent
function USBZShoutTargetComponent:MakeComponentShoutTargetable(Component) end
---@return boolean
function USBZShoutTargetComponent:IsEnabled() end


---@class USBZShoutoutComponent : UActorComponent
---@field ShoutOutRadius float
---@field MaxRoomPathDistanceFromInitialTarget float
---@field HeightCutOffDistance float
---@field RaytraceTargetFindDist float
---@field AproximateTargetFindBox FVector
---@field MarkingOutlineAsset USBZOutlineAsset
---@field MarkLimit int32
---@field ShoutoutDuration float
---@field DefaultMarkComment USBZVoiceCommentDataAsset
---@field DefaultHelpComment USBZVoiceCommentDataAsset
---@field DefaultGetDownComment USBZVoiceCommentDataAsset
---@field DefaultCopSurrenderComment USBZVoiceCommentDataAsset
---@field GetDownTags FGameplayTagContainer
---@field BlockGoDownTagContainer FGameplayTagContainer
---@field PingMarkerAsset USBZMarkerDataAsset
---@field PingTimer float
---@field CopSurrenderAction TSubclassOf<USBZAIAction>
---@field PingIndex int32
---@field AbilitySystem UAbilitySystemComponent
---@field ActivationBlockedTags TMap<ESBZShoutActionType, FGameplayTagContainer>
USBZShoutoutComponent = {}

---@param NewLimit int32
function USBZShoutoutComponent:SetMarkLimit(NewLimit) end
---@param Actor AActor
---@param Action ESBZShoutActionType
---@param Target USBZShoutTargetComponent
function USBZShoutoutComponent:Server_Shoutout(Actor, Action, Target) end
---@param Location FVector
function USBZShoutoutComponent:Server_SendPing(Location) end
function USBZShoutoutComponent:OnPingComplete() end
---@param Action ESBZShoutActionType
function USBZShoutoutComponent:Multicast_ShoutoutWithoutTarget(Action) end
---@param Actor AActor
---@param Action ESBZShoutActionType
---@param Target USBZShoutTargetComponent
function USBZShoutoutComponent:Multicast_Shoutout(Actor, Action, Target) end
---@param Location FVector
function USBZShoutoutComponent:Multicast_SendPing(Location) end
---@param Actor AActor
---@return boolean
function USBZShoutoutComponent:IsActorMarked(Actor) end


---@class USBZShoutoutWidget : USBZWidgetBase
---@field ShoutoutActionName FName
---@field Widget_CallWidget USBZCircularInteractionWidget
USBZShoutoutWidget = {}

function USBZShoutoutWidget:OnShoutoutReleased() end
function USBZShoutoutWidget:OnShoutoutPressed() end


---@class USBZShoveHumanShieldAbility : USBZGameplayAbility
USBZShoveHumanShieldAbility = {}


---@class USBZShoveHumanShieldDamageType : USBZMeleeDamageType
USBZShoveHumanShieldDamageType = {}


---@class USBZShowAmmoNotifyState : UAnimNotifyState
---@field bIsSpawnedOnInterrupt boolean
---@field bIsSpawnedOnEnd boolean
---@field ExtraAmmoCount int32
USBZShowAmmoNotifyState = {}



---@class USBZShowLoginUICallbackProxy : UBlueprintAsyncActionBase
---@field OnSuccess FSBZShowLoginUICallbackProxyOnSuccess
---@field OnFailure FSBZShowLoginUICallbackProxyOnFailure
USBZShowLoginUICallbackProxy = {}

---@param WorldContextObject UObject
---@param InPlayerController APlayerController
---@return USBZShowLoginUICallbackProxy
function USBZShowLoginUICallbackProxy:SBZShowExternalLoginUI(WorldContextObject, InPlayerController) end


---@class USBZShowSpeedLoaderNotifyState : UAnimNotifyState
---@field bIsDropAllowed boolean
---@field bIsPrespawned boolean
USBZShowSpeedLoaderNotifyState = {}



---@class USBZSideBarNotifications : USBZWidgetBase
---@field bIsDisplaying boolean
---@field Animation_OpenWidget UWidgetAnimation
---@field DisplayTimeLeft float
---@field SideBarNotifications TArray<FSBZSideBarNotificationData>
USBZSideBarNotifications = {}

---@param InNotificationToDisplay FSBZSideBarNotificationData
function USBZSideBarNotifications:OnNotificationDisplayed(InNotificationToDisplay) end
---@param InSideBarNotificationData FSBZSideBarNotificationData
function USBZSideBarNotifications:AddNewNotification(InSideBarNotificationData) end


---@class USBZSignificanceManager : UObject
USBZSignificanceManager = {}


---@class USBZSimplePhysicsCorrector : UActorComponent
---@field TeleportDistance float
---@field Velocity FVector
---@field AngularVel FVector
---@field LastState FSBZSimplePhysicsState
USBZSimplePhysicsCorrector = {}

---@param Vel FVector
function USBZSimplePhysicsCorrector:SetVelocity(Vel) end
---@param State FSBZSimplePhysicsState
function USBZSimplePhysicsCorrector:MulticastSyncState(State) end
function USBZSimplePhysicsCorrector:MulticastInvalidateState() end


---@class USBZSkeletalMeshComponentBudgeted : USkeletalMeshComponentBudgeted
---@field CapsuleShadowingData USBZCapsuleShadowingData
USBZSkeletalMeshComponentBudgeted = {}



---@class USBZSkill : UObject
---@field SkillType ESBZSkill
---@field ProgressPercentage float
---@field SkillData USBZSkillData
---@field SkillLine USBZSkillLine
USBZSkill = {}



---@class USBZSkillAmmoSpecialistAmmoSpecialist : USBZSkillData
USBZSkillAmmoSpecialistAmmoSpecialist = {}


---@class USBZSkillAmmoSpecialistAmmoSpecialistAced : USBZSkillData
USBZSkillAmmoSpecialistAmmoSpecialistAced = {}


---@class USBZSkillAmmoSpecialistFullyLoaded : USBZSkillData
USBZSkillAmmoSpecialistFullyLoaded = {}


---@class USBZSkillAmmoSpecialistHighGrain : USBZSkillData
USBZSkillAmmoSpecialistHighGrain = {}


---@class USBZSkillAmmoSpecialistMagThrow : USBZSkillData
USBZSkillAmmoSpecialistMagThrow = {}


---@class USBZSkillAmmoSpecialistPlateUp : USBZSkillData
USBZSkillAmmoSpecialistPlateUp = {}


---@class USBZSkillAmmoSpecialistScrounger : USBZSkillData
USBZSkillAmmoSpecialistScrounger = {}


---@class USBZSkillAmmoSpecialistTopUp : USBZSkillData
USBZSkillAmmoSpecialistTopUp = {}


---@class USBZSkillCQCSpecialistCQCSpecialist : USBZSkillData
USBZSkillCQCSpecialistCQCSpecialist = {}


---@class USBZSkillCQCSpecialistCQCSpecialistAced : USBZSkillData
USBZSkillCQCSpecialistCQCSpecialistAced = {}


---@class USBZSkillCQCSpecialistCoverUp : USBZSkillData
USBZSkillCQCSpecialistCoverUp = {}


---@class USBZSkillCQCSpecialistGroundskeeper : USBZSkillData
USBZSkillCQCSpecialistGroundskeeper = {}


---@class USBZSkillCQCSpecialistPinPuller : USBZSkillData
---@field GrenadeData USBZGrenadeData
---@field GrenadeAttachSocket FName
---@field FlashBangDelay float
USBZSkillCQCSpecialistPinPuller = {}



---@class USBZSkillCQCSpecialistPressurePoints : USBZSkillData
USBZSkillCQCSpecialistPressurePoints = {}


---@class USBZSkillCQCSpecialistSavageTakedown : USBZSkillData
---@field ActivationDelay float
USBZSkillCQCSpecialistSavageTakedown = {}



---@class USBZSkillCQCSpecialistSoftAssets : USBZSkillData
USBZSkillCQCSpecialistSoftAssets = {}


---@class USBZSkillData : USBZInventoryBaseData
---@field ProgressLevel float
---@field EquippedTag FGameplayTag
---@field bIsEquippedTagGranted boolean
---@field PlayerEffect TSubclassOf<UGameplayEffect>
---@field CrewEffect TSubclassOf<UGameplayEffect>
---@field Category FGameplayTag
---@field SkillDescriptionImage TSoftObjectPtr<UPaperSprite>
---@field BuffActivationArray TArray<FSBZAbilityBuffTypeActivation>
---@field RequiredBuffTypeArray TArray<ESBZPlayerAbilityBuffType>
---@field bIsAnyRequiredBuffTypeEnough boolean
---@field CooldownSeconds float
---@field FloatArray TArray<FSBZSkillFloatValue>
---@field IntArray TArray<FSBZSkillIntValue>
USBZSkillData = {}

---@return FText
function USBZSkillData:GetFormattedDescriptionText() end


---@class USBZSkillDemolitionistBlastShield : USBZSkillData
USBZSkillDemolitionistBlastShield = {}


---@class USBZSkillDemolitionistBlowback : USBZSkillData
---@field PawnTypeContainer FGameplayTagContainer
USBZSkillDemolitionistBlowback = {}



---@class USBZSkillDemolitionistCooker : USBZSkillData
USBZSkillDemolitionistCooker = {}


---@class USBZSkillDemolitionistDemolitionist : USBZSkillData
USBZSkillDemolitionistDemolitionist = {}


---@class USBZSkillDemolitionistDemolitionistAced : USBZSkillData
USBZSkillDemolitionistDemolitionistAced = {}


---@class USBZSkillDemolitionistExtraMunitions : USBZSkillData
USBZSkillDemolitionistExtraMunitions = {}


---@class USBZSkillDemolitionistOvercooked : USBZSkillData
USBZSkillDemolitionistOvercooked = {}


---@class USBZSkillDemolitionistShellShock : USBZSkillData
---@field PawnTypeContainer FGameplayTagContainer
USBZSkillDemolitionistShellShock = {}



---@class USBZSkillEnforcerCombatReload : USBZSkillData
USBZSkillEnforcerCombatReload = {}


---@class USBZSkillEnforcerEnforcer : USBZSkillData
USBZSkillEnforcerEnforcer = {}


---@class USBZSkillEnforcerEnforcerAced : USBZSkillData
USBZSkillEnforcerEnforcerAced = {}


---@class USBZSkillEnforcerFaceToFace : USBZSkillData
USBZSkillEnforcerFaceToFace = {}


---@class USBZSkillEnforcerQuickReload : USBZSkillData
USBZSkillEnforcerQuickReload = {}


---@class USBZSkillEnforcerShockAndAwe : USBZSkillData
---@field AffectedAITypes FGameplayTagContainer
USBZSkillEnforcerShockAndAwe = {}



---@class USBZSkillEnforcerSolid : USBZSkillData
USBZSkillEnforcerSolid = {}


---@class USBZSkillEngineerAPTurret : USBZSkillData
USBZSkillEngineerAPTurret = {}


---@class USBZSkillEngineerAced : USBZSkillData
USBZSkillEngineerAced = {}


---@class USBZSkillEngineerCoolingSystem : USBZSkillData
USBZSkillEngineerCoolingSystem = {}


---@class USBZSkillEngineerDetonation : USBZSkillData
USBZSkillEngineerDetonation = {}


---@class USBZSkillEngineerDualSentries : USBZSkillData
USBZSkillEngineerDualSentries = {}


---@class USBZSkillEngineerEngineer : USBZSkillData
USBZSkillEngineerEngineer = {}


---@class USBZSkillEngineerSpinCycle : USBZSkillData
USBZSkillEngineerSpinCycle = {}


---@class USBZSkillEngineerTargetedFire : USBZSkillData
USBZSkillEngineerTargetedFire = {}


---@class USBZSkillEscapistBalanced : USBZSkillData
USBZSkillEscapistBalanced = {}


---@class USBZSkillEscapistBatteringRam : USBZSkillData
USBZSkillEscapistBatteringRam = {}


---@class USBZSkillEscapistEscapist : USBZSkillData
USBZSkillEscapistEscapist = {}


---@class USBZSkillEscapistEscapistAced : USBZSkillData
USBZSkillEscapistEscapistAced = {}


---@class USBZSkillEscapistMoveAndCover : USBZSkillData
USBZSkillEscapistMoveAndCover = {}


---@class USBZSkillEscapistSlideTackle : USBZSkillData
---@field AffectedAITypes FGameplayTagContainer
USBZSkillEscapistSlideTackle = {}



---@class USBZSkillEscapistSwift : USBZSkillData
USBZSkillEscapistSwift = {}


---@class USBZSkillGrifterGrifter : USBZSkillData
USBZSkillGrifterGrifter = {}


---@class USBZSkillGrifterGrifterAced : USBZSkillData
---@field ActivationDelay float
USBZSkillGrifterGrifterAced = {}



---@class USBZSkillGrifterOpenMic : USBZSkillData
USBZSkillGrifterOpenMic = {}


---@class USBZSkillGrifterSlippery : USBZSkillData
USBZSkillGrifterSlippery = {}


---@class USBZSkillGrifterSocialEngineering : USBZSkillData
USBZSkillGrifterSocialEngineering = {}


---@class USBZSkillGrifterWalkTheWalk : USBZSkillData
USBZSkillGrifterWalkTheWalk = {}


---@class USBZSkillGunslingerFinisher : USBZSkillData
USBZSkillGunslingerFinisher = {}


---@class USBZSkillGunslingerFromTheHip : USBZSkillData
USBZSkillGunslingerFromTheHip = {}


---@class USBZSkillGunslingerGunslinger : USBZSkillData
USBZSkillGunslingerGunslinger = {}


---@class USBZSkillGunslingerGunslingerAced : USBZSkillData
USBZSkillGunslingerGunslingerAced = {}


---@class USBZSkillGunslingerHeavyHipfire : USBZSkillData
USBZSkillGunslingerHeavyHipfire = {}


---@class USBZSkillGunslingerQuickDraw : USBZSkillData
USBZSkillGunslingerQuickDraw = {}


---@class USBZSkillHackerApplianceBreach : USBZSkillData
USBZSkillHackerApplianceBreach = {}


---@class USBZSkillHackerGlitchProtocol : USBZSkillData
USBZSkillHackerGlitchProtocol = {}


---@class USBZSkillHackerHacker : USBZSkillData
USBZSkillHackerHacker = {}


---@class USBZSkillHackerHackerAced : USBZSkillData
USBZSkillHackerHackerAced = {}


---@class USBZSkillHackerRoutedPing : USBZSkillData
USBZSkillHackerRoutedPing = {}


---@class USBZSkillHackerSecureLoop : USBZSkillData
USBZSkillHackerSecureLoop = {}


---@class USBZSkillHackerSignalCatch : USBZSkillData
USBZSkillHackerSignalCatch = {}


---@class USBZSkillInfiltratorBagger : USBZSkillData
USBZSkillInfiltratorBagger = {}


---@class USBZSkillInfiltratorBladeBouncer : USBZSkillData
USBZSkillInfiltratorBladeBouncer = {}


---@class USBZSkillInfiltratorFrugalThrower : USBZSkillData
USBZSkillInfiltratorFrugalThrower = {}


---@class USBZSkillInfiltratorInfiltrator : USBZSkillData
USBZSkillInfiltratorInfiltrator = {}


---@class USBZSkillInfiltratorInfiltratorAced : USBZSkillData
USBZSkillInfiltratorInfiltratorAced = {}


---@class USBZSkillInfiltratorQuickFingers : USBZSkillData
USBZSkillInfiltratorQuickFingers = {}


---@class USBZSkillInfiltratorRetriever : USBZSkillData
USBZSkillInfiltratorRetriever = {}


---@class USBZSkillLine : UObject
---@field ResearchMarker boolean
---@field ProgressLevel float
---@field ResearchLevel float
---@field ResearchPercentage float
---@field SkillLineData USBZSkillLineData
---@field Skills TArray<USBZSkill>
USBZSkillLine = {}



---@class USBZSkillLineData : USBZInventoryBaseData
---@field ProgressLevelID FName
---@field ResearchLevelID FName
---@field ResearchLevel float
---@field BaseSkill USBZSkillData
---@field AcedBaseSkill USBZSkillData
---@field UpgradeSkillArray TArray<USBZSkillData>
---@field MasterySkillArray TArray<USBZSkillData>
USBZSkillLineData = {}



---@class USBZSkillLineDatabase : USBZItemDatabase
---@field SkillLineArray TArray<USBZSkillLineData>
USBZSkillLineDatabase = {}



---@class USBZSkillManager : USBZPlayerStatisticsManager
---@field ResearchMarkerResultDelegate FSBZSkillManagerResearchMarkerResultDelegate
USBZSkillManager = {}

---@param Skills TArray<USBZSkill>
---@param PlayerLoadoutConfig FSBZPlayerLoadoutConfig
---@return boolean
function USBZSkillManager:UnequipSkills(Skills, PlayerLoadoutConfig) end
---@param Skill USBZSkill
---@param PlayerLoadoutConfig FSBZPlayerLoadoutConfig
---@return boolean
function USBZSkillManager:UnequipSkill(Skill, PlayerLoadoutConfig) end
---@param SkillLine USBZSkillLine
function USBZSkillManager:SetResearchMarkerOnSkillLine(SkillLine) end
---@param Skill USBZSkill
---@param PlayerLoadoutConfig FSBZPlayerLoadoutConfig
---@return boolean
function USBZSkillManager:IsSkillEquippable(Skill, PlayerLoadoutConfig) end
---@param InfamyLevel int32
---@return int32
function USBZSkillManager:GetSkillPointsFromInfamyLevel(InfamyLevel) end
---@param InfamyExperience int32
---@return int32
function USBZSkillManager:GetSkillPointsFromInfamyExperience(InfamyExperience) end
---@param WorldContextObject UObject
---@return USBZSkillManager
function USBZSkillManager:GetSkillManager(WorldContextObject) end
---@param SkillLine USBZSkillLine
---@return USBZSkill
function USBZSkillManager:GetProgressingSkill(SkillLine) end
---@param PlayerState ASBZPlayerState
---@param SkillLineData USBZSkillLineData
---@return USBZSkillLine
function USBZSkillManager:GetPlayerStatsForSkillLine(PlayerState, SkillLineData) end
---@param PlayerState ASBZPlayerState
---@param SkillLineData USBZSkillLineData
---@param SkillData USBZSkillData
---@return USBZSkill
function USBZSkillManager:GetPlayerStatsForSkill(PlayerState, SkillLineData, SkillData) end
---@param PlayerSkills TArray<USBZSkillLine>
function USBZSkillManager:GetPlayerSkills(PlayerSkills) end
---@param AccelByteSkuNo FName
---@return USBZSkillLine
function USBZSkillManager:GetPlayerSkillLine(AccelByteSkuNo) end
---@return int32
function USBZSkillManager:GetMaxSkillPoints() end
---@param SkillLine USBZSkillLineData
---@return float
function USBZSkillManager:GetMaxProgressLevel(SkillLine) end
---@return int32
function USBZSkillManager:GetEarnedSkillPoints() end
---@param Skills TArray<USBZSkill>
---@param PlayerLoadoutConfig FSBZPlayerLoadoutConfig
---@return boolean
function USBZSkillManager:EquipSkills(Skills, PlayerLoadoutConfig) end
---@param Skill USBZSkill
---@param PlayerLoadoutConfig FSBZPlayerLoadoutConfig
---@return boolean
function USBZSkillManager:EquipSkill(Skill, PlayerLoadoutConfig) end


---@class USBZSkillManipulatorManipulator : USBZSkillData
USBZSkillManipulatorManipulator = {}


---@class USBZSkillManipulatorManipulatorAced : USBZSkillData
USBZSkillManipulatorManipulatorAced = {}


---@class USBZSkillManipulatorMasterTrader : USBZSkillData
USBZSkillManipulatorMasterTrader = {}


---@class USBZSkillManipulatorMenacing : USBZSkillData
USBZSkillManipulatorMenacing = {}


---@class USBZSkillManipulatorNegotiator : USBZSkillData
USBZSkillManipulatorNegotiator = {}


---@class USBZSkillManipulatorOverbearing : USBZSkillData
USBZSkillManipulatorOverbearing = {}


---@class USBZSkillManipulatorSilverTongue : USBZSkillData
USBZSkillManipulatorSilverTongue = {}


---@class USBZSkillManipulatorStockholmSyndrome : USBZSkillData
USBZSkillManipulatorStockholmSyndrome = {}


---@class USBZSkillMedicCodeBlue : USBZSkillData
USBZSkillMedicCodeBlue = {}


---@class USBZSkillMedicCombatMedic : USBZSkillData
USBZSkillMedicCombatMedic = {}


---@class USBZSkillMedicExtraCharge : USBZSkillData
USBZSkillMedicExtraCharge = {}


---@class USBZSkillMedicFieldSurgery : USBZSkillData
USBZSkillMedicFieldSurgery = {}


---@class USBZSkillMedicMedic : USBZSkillData
USBZSkillMedicMedic = {}


---@class USBZSkillMedicMedicAced : USBZSkillData
USBZSkillMedicMedicAced = {}


---@class USBZSkillMedicSteadyHands : USBZSkillData
USBZSkillMedicSteadyHands = {}


---@class USBZSkillMedicTriage : USBZSkillData
USBZSkillMedicTriage = {}


---@class USBZSkillMowerAmmoFunnel : USBZSkillData
USBZSkillMowerAmmoFunnel = {}


---@class USBZSkillMowerMower : USBZSkillData
USBZSkillMowerMower = {}


---@class USBZSkillMowerMowerAced : USBZSkillData
USBZSkillMowerMowerAced = {}


---@class USBZSkillMowerMowerReplenish : USBZSkillData
USBZSkillMowerMowerReplenish = {}


---@class USBZSkillMowerRecoilHandling : USBZSkillData
USBZSkillMowerRecoilHandling = {}


---@class USBZSkillMowerSprintLoaded : USBZSkillData
USBZSkillMowerSprintLoaded = {}


---@class USBZSkillMowerSuppressiveFire : USBZSkillData
USBZSkillMowerSuppressiveFire = {}


---@class USBZSkillSettings : USBZDeveloperSettings
---@field Settings FSBZSkillSettingData
USBZSkillSettings = {}

---@return FSBZSkillSettingData
function USBZSkillSettings:Get() end


---@class USBZSkillSharpshooterCollateralControl : USBZSkillData
USBZSkillSharpshooterCollateralControl = {}


---@class USBZSkillSharpshooterCuttingShot : USBZSkillData
USBZSkillSharpshooterCuttingShot = {}


---@class USBZSkillSharpshooterLongShot : USBZSkillData
USBZSkillSharpshooterLongShot = {}


---@class USBZSkillSharpshooterPrecisionShot : USBZSkillData
USBZSkillSharpshooterPrecisionShot = {}


---@class USBZSkillSharpshooterSharpshooter : USBZSkillData
USBZSkillSharpshooterSharpshooter = {}


---@class USBZSkillSharpshooterSharpshooterAced : USBZSkillData
USBZSkillSharpshooterSharpshooterAced = {}


---@class USBZSkillSharpshooterSpeedAim : USBZSkillData
USBZSkillSharpshooterSpeedAim = {}


---@class USBZSkillStrategistCombatMarking : USBZSkillData
USBZSkillStrategistCombatMarking = {}


---@class USBZSkillStrategistMarkedForDeath : USBZSkillData
USBZSkillStrategistMarkedForDeath = {}


---@class USBZSkillStrategistMisdirect : USBZSkillData
USBZSkillStrategistMisdirect = {}


---@class USBZSkillStrategistStrategist : USBZSkillData
USBZSkillStrategistStrategist = {}


---@class USBZSkillStrategistStrategistAced : USBZSkillData
USBZSkillStrategistStrategistAced = {}


---@class USBZSkillStrategistThreatAssessment : USBZSkillData
USBZSkillStrategistThreatAssessment = {}


---@class USBZSkillTacticianCoupDeGrace : USBZSkillData
USBZSkillTacticianCoupDeGrace = {}


---@class USBZSkillTacticianCrowdControl : USBZSkillData
USBZSkillTacticianCrowdControl = {}


---@class USBZSkillTacticianDiscombobulate : USBZSkillData
---@field PostSmokeFlashEffect TSubclassOf<USBZTacticianDiscombobulateEffect>
USBZSkillTacticianDiscombobulate = {}



---@class USBZSkillTacticianExpose : USBZSkillData
USBZSkillTacticianExpose = {}


---@class USBZSkillTacticianScramble : USBZSkillData
USBZSkillTacticianScramble = {}


---@class USBZSkillTacticianTactician : USBZSkillData
USBZSkillTacticianTactician = {}


---@class USBZSkillTacticianTacticianAced : USBZSkillData
USBZSkillTacticianTacticianAced = {}


---@class USBZSkillTankArmorUp : USBZSkillData
USBZSkillTankArmorUp = {}


---@class USBZSkillTankDisengage : USBZSkillData
USBZSkillTankDisengage = {}


---@class USBZSkillTankExtraPlates : USBZSkillData
USBZSkillTankExtraPlates = {}


---@class USBZSkillTankHardy : USBZSkillData
USBZSkillTankHardy = {}


---@class USBZSkillTankLastManStanding : USBZSkillData
USBZSkillTankLastManStanding = {}


---@class USBZSkillTankTank : USBZSkillData
USBZSkillTankTank = {}


---@class USBZSkillTankTankAced : USBZSkillData
USBZSkillTankTankAced = {}


---@class USBZSkillTransporterBeastOfBurden : USBZSkillData
USBZSkillTransporterBeastOfBurden = {}


---@class USBZSkillTransporterBrutalCarry : USBZSkillData
USBZSkillTransporterBrutalCarry = {}


---@class USBZSkillTransporterCatapult : USBZSkillData
USBZSkillTransporterCatapult = {}


---@class USBZSkillTransporterDeepPockets : USBZSkillData
USBZSkillTransporterDeepPockets = {}


---@class USBZSkillTransporterPowerLifter : USBZSkillData
USBZSkillTransporterPowerLifter = {}


---@class USBZSkillTransporterTransporter : USBZSkillData
USBZSkillTransporterTransporter = {}


---@class USBZSkillTransporterTransporterAced : USBZSkillData
USBZSkillTransporterTransporterAced = {}


---@class USBZSkillTriggeredHurtReactionAbility : USBZGameplayAbility
---@field OwnerPlayer ASBZPlayerCharacter
---@field SkillTag FGameplayTag
USBZSkillTriggeredHurtReactionAbility = {}



---@class USBZSkillsMenuButton : USBZMenuButton
---@field SkillState ESBZSkillState
---@field SkillType ESBZSkillType
USBZSkillsMenuButton = {}



---@class USBZSlidingImpactConfig : USBZImpactConfig
USBZSlidingImpactConfig = {}


---@class USBZSmallTalkManager : UActorComponent
---@field SmallTalkCollections TArray<USBZAISmallTalkCollection>
---@field PhoneSmallTalkCollections TArray<USBZAISmallTalkCollection>
---@field ConversationNeededTags FGameplayTagContainer
---@field PhoneNeededTags FGameplayTagContainer
---@field SoloNeededTags FGameplayTagContainer
---@field SoloDialogInterval FFloatInterval
---@field MaxIterationPerTick int32
---@field MaxSearchDistance float
---@field CullingDistance float
---@field MaxDistBetweenConversationPerformers float
---@field MinAngleBetweenConversationPerformers float
---@field MaxConcurrentPhone int32
---@field MaxConcurrentSolo int32
---@field MaxConcurrentConversation int32
---@field ConversationCullingMap TMap<AActor, USBZDialogDataAsset>
---@field PhoneCullingMap TMap<AActor, USBZDialogDataAsset>
---@field SoloCullingMap TMap<AActor, USBZDialogDataAsset>
USBZSmallTalkManager = {}

---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZSmallTalkManager:OnHeistStateChanged(OldState, NewState) end


---@class USBZSmartMatchmaking : USBZMatchmaking
USBZSmartMatchmaking = {}


---@class USBZSmashAndGrabStatisticCriteriaData : USBZStatisticCriteriaData
---@field CompletionTime float
USBZSmashAndGrabStatisticCriteriaData = {}



---@class USBZSniperBulletDamageType : USBZBulletDamageType
USBZSniperBulletDamageType = {}


---@class USBZSocialChatBaseWidget : USBZWidgetBase
---@field PublicChannelColor FSlateColor
---@field PartyChannelColor FSlateColor
---@field PrivateChannelColor FSlateColor
---@field bEnablePartyMessageNotification boolean
---@field bEnablePrivateMessageNotification boolean
---@field bEnablePublicMessageNotification boolean
---@field DisplayOption ESBZChatWidgetDisplayType
---@field Channel ESBZChatChannelType
---@field ChatMessageEvent UAkAudioEvent
---@field ChannelText USBZSocialChatChannelTextBox
---@field ChatReceiver USBZSocialChatReceiverTextBox
---@field ChatText USBZSocialChatTextBox
---@field PublicChannelChatScrollBox USBZSocialChatScrollBox
---@field PrivateChannelChatScrollBox USBZSocialChatScrollBox
---@field PartyChannelChatScrollBox USBZSocialChatScrollBox
---@field ChatBorder UBorder
---@field ChannelsChatMessageBorder UBorder
---@field ChannelsBorder UBorder
---@field ChatInputBorder UBorder
---@field ChatButtonBorder UBorder
---@field bIsChatDisabled boolean
---@field PartySentMessageMap TMap<FString, FString>
---@field PrivateSentMessageMap TMap<FString, FString>
---@field PublicSentMessageMap TMap<FString, FString>
---@field bJoinedPublicChannel boolean
---@field UserDisplayName FString
---@field UserId FString
USBZSocialChatBaseWidget = {}

---@return ESBZChatChannelType
function USBZSocialChatBaseWidget:ToggleChannel() end
---@param InChannel ESBZChatChannelType
function USBZSocialChatBaseWidget:SetChannelFocus(InChannel) end
---@param Message FString
function USBZSocialChatBaseWidget:SendPublicMessage(Message) end
---@param UserId FString
---@param Message FString
function USBZSocialChatBaseWidget:SendPrivateMessage(UserId, Message) end
---@param Message FString
function USBZSocialChatBaseWidget:SendPartyMessage(Message) end
---@param bChatVisible boolean
function USBZSocialChatBaseWidget:OnVisiblityChanged(bChatVisible) end
---@param bResult boolean
---@param Message FString
---@param UserId FString
---@param RoomId FString
function USBZSocialChatBaseWidget:OnPublicMessageSentStatus(bResult, Message, UserId, RoomId) end
---@param Timestamp FString
---@param Sender FString
---@param Message FString
function USBZSocialChatBaseWidget:OnPublicMessageReceived(Timestamp, Sender, Message) end
---@param bResult boolean
---@param Message FString
---@param UserId FString
---@param RoomId FString
function USBZSocialChatBaseWidget:OnPrivateMessageSentStatus(bResult, Message, UserId, RoomId) end
---@param Timestamp FString
---@param Sender FString
---@param Message FString
---@param RoomId FString
function USBZSocialChatBaseWidget:OnPrivateMessageReceived(Timestamp, Sender, Message, RoomId) end
---@param bResult boolean
---@param Message FString
---@param UserId FString
---@param RoomId FString
function USBZSocialChatBaseWidget:OnPartyMessageSentStatus(bResult, Message, UserId, RoomId) end
---@param Timestamp FString
---@param Sender FString
---@param Message FString
---@param RoomId FString
function USBZSocialChatBaseWidget:OnPartyMessageReceived(Timestamp, Sender, Message, RoomId) end
function USBZSocialChatBaseWidget:OnPartyInfoUpdateEvent() end
function USBZSocialChatBaseWidget:OnOpenPressed() end
---@param MessageInfo FSBZChatMessageInfo
function USBZSocialChatBaseWidget:OnMessageReceived(MessageInfo) end
---@param bResult boolean
---@param MessageInfo FSBZChatMessageInfo
function USBZSocialChatBaseWidget:OnMessageDelivered(bResult, MessageInfo) end
function USBZSocialChatBaseWidget:OnClosePressed() end
---@param bIsDisabled boolean
function USBZSocialChatBaseWidget:OnChatDisabledChanged(bIsDisabled) end
---@param ChannelSlug FString
function USBZSocialChatBaseWidget:OnChatChannelJoinEvent(ChannelSlug) end
---@param NewChannel ESBZChatChannelType
function USBZSocialChatBaseWidget:OnChannelChanged(NewChannel) end
---@param InChannel ESBZChatChannelType
---@param Color FSlateColor
function USBZSocialChatBaseWidget:GetChannelColor(InChannel, Color) end


---@class USBZSocialChatChannelTextBox : UEditableTextBox
---@field SocialChatWidget USBZSocialChatBaseWidget
USBZSocialChatChannelTextBox = {}

---@param InSocialChatWidget USBZSocialChatBaseWidget
function USBZSocialChatChannelTextBox:Initialize(InSocialChatWidget) end


---@class USBZSocialChatReceiverTextBox : UEditableTextBox
---@field SocialChatWidget USBZSocialChatBaseWidget
---@field ChannelTextBox USBZSocialChatChannelTextBox
---@field ChatTextBox USBZSocialChatTextBox
---@field SearchedUsers TMap<FString, FPagedPublicUsersInfo>
USBZSocialChatReceiverTextBox = {}

---@param InSocialChatWidget USBZSocialChatBaseWidget
---@param InChannelTextBox USBZSocialChatChannelTextBox
---@param InChatTextBox USBZSocialChatTextBox
function USBZSocialChatReceiverTextBox:Initialize(InSocialChatWidget, InChannelTextBox, InChatTextBox) end


---@class USBZSocialChatScrollBox : USBZScrollBox
---@field SocialChatWidget USBZSocialChatBaseWidget
USBZSocialChatScrollBox = {}

---@param InSocialChatWidget USBZSocialChatBaseWidget
function USBZSocialChatScrollBox:Initialize(InSocialChatWidget) end


---@class USBZSocialChatTextBox : UEditableTextBox
---@field SocialChatWidget USBZSocialChatBaseWidget
---@field ChannelTextBox USBZSocialChatChannelTextBox
---@field ReceiverTextBox USBZSocialChatReceiverTextBox
USBZSocialChatTextBox = {}

---@param InSocialChatWidget USBZSocialChatBaseWidget
---@param InChannelTextBox USBZSocialChatChannelTextBox
---@param InReceiverTextBox USBZSocialChatReceiverTextBox
function USBZSocialChatTextBox:Initialize(InSocialChatWidget, InChannelTextBox, InReceiverTextBox) end


---@class USBZSocialFriendButton : USBZMenuButton
---@field FriendListEntry FSBZFriendListEntry
---@field FriendButtonType ESocialFriendButtonType
---@field SocialFriendButtonContainer USBZSocialFriendButtonContainer
---@field CurrentFeedbackType ESBZRequestFeedbackType
USBZSocialFriendButton = {}

function USBZSocialFriendButton:UnblockPlayerAction() end
function USBZSocialFriendButton:TertiaryAction() end
function USBZSocialFriendButton:SecondaryAction() end
function USBZSocialFriendButton:RequestFriend() end
function USBZSocialFriendButton:ReportPlayerAction() end
---@param ReportPlayerInfo FSBZReportPlayerInfo
function USBZSocialFriendButton:ReportPlayer(ReportPlayerInfo) end
function USBZSocialFriendButton:RemoveFriend() end
function USBZSocialFriendButton:RejectFriendRequest() end
function USBZSocialFriendButton:QuaternaryAction() end
---@param ActionName FName
function USBZSocialFriendButton:OnRequestStatusPopupClosed(ActionName) end
---@param FeedbackType ESBZRequestFeedbackType
---@param bResult boolean
---@param ErrorCode FString
function USBZSocialFriendButton:OnRequestFeedback(FeedbackType, bResult, ErrorCode) end
---@param InFriendListEntry FSBZFriendListEntry
function USBZSocialFriendButton:OnPlayerDataInitialized(InFriendListEntry) end
---@param FeedbackType ESBZPartyRequestFeedbackType
---@param bResult boolean
---@param ErrorCode FString
function USBZSocialFriendButton:OnPartyRequestFeedback(FeedbackType, bResult, ErrorCode) end
---@param ActionName FName
function USBZSocialFriendButton:OnConfirmationPopupClosed(ActionName) end
function USBZSocialFriendButton:JoinParty() end
function USBZSocialFriendButton:JoinLobby() end
function USBZSocialFriendButton:FriendProfileAction() end
---@param Action FName
function USBZSocialFriendButton:ExecuteAction(Action) end
---@return boolean
function USBZSocialFriendButton:CanShowFriendProfile() end
---@return boolean
function USBZSocialFriendButton:CanRequestFriend() end
---@return boolean
function USBZSocialFriendButton:CanJoinParty() end
---@return boolean
function USBZSocialFriendButton:CanJoinLobby() end
---@return boolean
function USBZSocialFriendButton:CanInvitePlayer() end
function USBZSocialFriendButton:CancelFriendRequest() end
---@return boolean
function USBZSocialFriendButton:CanBlockPlayer() end
function USBZSocialFriendButton:BlockPlayerAction() end
function USBZSocialFriendButton:AcceptFriendRequest() end


---@class USBZSocialFriendButtonContainer : USBZMenuStackWidget
---@field Button_FilterFriends USBZTextEntryButton
---@field LeavePartyButton USBZMenuButton
---@field Panel_AccelByteFriendList UPanelWidget
---@field Panel_PlatformFriendList UPanelWidget
---@field Panel_IncomingFriendRequests UPanelWidget
---@field Panel_OutgoingFriendRequests UPanelWidget
---@field Panel_UserSearch UPanelWidget
---@field Panel_BlockedPlayers UPanelWidget
---@field Panel_PartyMembers UPanelWidget
---@field Panel_OfflinePlayers UPanelWidget
---@field FriendButtonWidgetClass TSubclassOf<USBZSocialFriendButton>
---@field AccelByteFriendButtonMap TMap<FString, USBZSocialFriendButton>
---@field PlatformFriendButtonMap TMap<FString, USBZSocialFriendButton>
---@field IncomingFriendButtonMap TMap<FString, USBZSocialFriendButton>
---@field OutgoingFriendButtonMap TMap<FString, USBZSocialFriendButton>
---@field UserSearchButtonMap TMap<FString, USBZSocialFriendButton>
---@field BlockedPlayerButtonMap TMap<FString, USBZSocialFriendButton>
---@field OfflineFriendButtonMap TMap<FString, USBZSocialFriendButton>
---@field PartyMembers TMap<FString, USBZSocialPartyMemberButton>
---@field PartyEmptyButtonPool TArray<USBZSocialPartyMemberButton>
---@field PartyMemberButtonWidgetClass TSubclassOf<USBZSocialPartyMemberButton>
---@field CurrentlyFocusedButton USBZSocialFriendButton
USBZSocialFriendButtonContainer = {}

function USBZSocialFriendButtonContainer:UpdatePartyMembersList() end
---@param Text FString
function USBZSocialFriendButtonContainer:UpdateFriendFilterText(Text) end
---@param UserID FString
function USBZSocialFriendButtonContainer:UpdateFriendButton(UserID) end
function USBZSocialFriendButtonContainer:StopAutoRefreshFriends() end
function USBZSocialFriendButtonContainer:StartAutoRefreshFriends() end
---@param UserName FString
function USBZSocialFriendButtonContainer:SearchUser(UserName) end
function USBZSocialFriendButtonContainer:RequestPartyLeave() end
function USBZSocialFriendButtonContainer:RefreshPartyPanel() end
function USBZSocialFriendButtonContainer:RefreshFriends() end
function USBZSocialFriendButtonContainer:OnPartyPanelRefreshComplete() end
---@param MenuButton USBZMenuButton
---@param bIsFocused boolean
function USBZSocialFriendButtonContainer:OnPartyButtonFocused(MenuButton, bIsFocused) end
function USBZSocialFriendButtonContainer:OnFriendButtonsUpdated() end
---@param MenuButton USBZMenuButton
---@param bIsFocused boolean
function USBZSocialFriendButtonContainer:OnFriendButtonFocused(MenuButton, bIsFocused) end
---@return FText
function USBZSocialFriendButtonContainer:GetPlatformName() end
---@return int32
function USBZSocialFriendButtonContainer:GetPartyMembersNum() end
---@return TArray<FSBZPartyMember>
function USBZSocialFriendButtonContainer:GetPartyMembers() end
function USBZSocialFriendButtonContainer:BuildPartyMembersList() end
---@param NewMember FSBZPartyMember
function USBZSocialFriendButtonContainer:AddPartyMember(NewMember) end


---@class USBZSocialMainMenuScreenBaseWidget : USBZWidgetBase
---@field bSocialScreenVisible boolean
---@field ToggleSocialScreenInputName FName
USBZSocialMainMenuScreenBaseWidget = {}

---@param InNewToggleActionName FName
function USBZSocialMainMenuScreenBaseWidget:SetToggleSocialScreenInput(InNewToggleActionName) end
function USBZSocialMainMenuScreenBaseWidget:OnToggleSocialScreenPressed() end
---@param NewToggleSocialSceenAction FName
function USBZSocialMainMenuScreenBaseWidget:OnToggleSocialScreenInputChanged(NewToggleSocialSceenAction) end
function USBZSocialMainMenuScreenBaseWidget:OnOpenSocialScreen() end
function USBZSocialMainMenuScreenBaseWidget:OnCloseSocialScreen() end


---@class USBZSocialPartyButtonContainer : USBZMenuStackWidget
---@field Panel_PartyMembers UPanelWidget
---@field PartyMembers TMap<FString, USBZSocialPartyMemberButton>
---@field PartyMemberButtonWidgetClass TSubclassOf<USBZSocialPartyMemberButton>
USBZSocialPartyButtonContainer = {}

function USBZSocialPartyButtonContainer:RequestPartyLeave() end
function USBZSocialPartyButtonContainer:RefreshPanel() end
---@param MenuButton USBZMenuButton
---@param bIsFocused boolean
function USBZSocialPartyButtonContainer:OnPartyButtonFocused(MenuButton, bIsFocused) end
function USBZSocialPartyButtonContainer:OnPanelRefreshComplete() end
---@return int32
function USBZSocialPartyButtonContainer:GetPartyMembersNum() end
---@return TArray<FSBZPartyMember>
function USBZSocialPartyButtonContainer:GetPartyMembers() end
function USBZSocialPartyButtonContainer:BuildPartyMembersList() end
---@param NewMember FSBZPartyMember
function USBZSocialPartyButtonContainer:AddPartyMember(NewMember) end


---@class USBZSocialPartyMemberButton : USBZMenuButton
---@field PlatformUsername FString
---@field NebulaUsername FString
---@field PlayerId FString
---@field bIsPartyLeader boolean
---@field Type ESBZPartyMemberButtonType
---@field PartyId FString
---@field InvitationId FString
---@field PlatformIcon UPaperSprite
---@field NebulaIcon UPaperSprite
USBZSocialPartyMemberButton = {}

function USBZSocialPartyMemberButton:RevokeInvite() end
function USBZSocialPartyMemberButton:RejectInvite() end
function USBZSocialPartyMemberButton:PromotePlayer() end
function USBZSocialPartyMemberButton:OnReadyToDisplayMember() end
function USBZSocialPartyMemberButton:KickPlayer() end
function USBZSocialPartyMemberButton:FriendProfileAction() end
---@param Action FName
function USBZSocialPartyMemberButton:ExecuteAction(Action) end
---@return boolean
function USBZSocialPartyMemberButton:CanShowFriendProfile() end
function USBZSocialPartyMemberButton:AcceptInvite() end


---@class USBZSoundEnvironmentManager : UObject
---@field LastActiveSoundEnvironments TArray<ASBZSoundEnvironment>
---@field CurrentlyActiveSoundEnvironments TArray<ASBZSoundEnvironment>
USBZSoundEnvironmentManager = {}



---@class USBZSpawnActorNotifyState : UAnimNotifyState
---@field SpawnSettings USBZAnimationSpawnedActorSettings
USBZSpawnActorNotifyState = {}



---@class USBZSpawnManager : UObject
---@field KilledPawnDelegate FSBZSpawnManagerKilledPawnDelegate
---@field PawnPlatformSpawnSettings FSBZPawnPlatformSpawnSettings
---@field SpawnedPawnSet TSet<APawn>
---@field PendingDestroyedPawnArray TArray<APawn>
---@field KilledPawnDelegateMap TMap<APawn, FSBZSpawnManagerKilledPawnDelegateMap>
USBZSpawnManager = {}

---@param Pawn APawn
function USBZSpawnManager:OnPawnLifetimeChanged(Pawn) end
---@param WorldContextObject UObject
---@return USBZSpawnManager
function USBZSpawnManager:Get(WorldContextObject) end


---@class USBZSpawnManagerFunctionLibrary : UBlueprintFunctionLibrary
USBZSpawnManagerFunctionLibrary = {}

---@param WorldContextObject UObject
---@param Handle FSBZPawnSpawnRequestHandle
---@param LatentInfo FLatentActionInfo
function USBZSpawnManagerFunctionLibrary:WaitForPawnRequest(WorldContextObject, Handle, LatentInfo) end
---@param WorldContextObject UObject
---@param Handle FSBZActorSpawnRequestHandle
---@param LatentInfo FLatentActionInfo
function USBZSpawnManagerFunctionLibrary:WaitForActorRequest(WorldContextObject, Handle, LatentInfo) end
---@param WorldContextObject UObject
---@param RequestArray TArray<FSBZPawnSpawnRequest>
---@param Spawned FRequestPawnSpawned
---@param RequestDone FRequestPawnRequestDone
---@param Options FSBZSpawnRequestOptions
---@param DebugName FName
---@return FSBZPawnSpawnRequestHandle
function USBZSpawnManagerFunctionLibrary:RequestPawn(WorldContextObject, RequestArray, Spawned, RequestDone, Options, DebugName) end
---@param WorldContextObject UObject
---@param RequestArray TArray<FSBZActorSpawnRequest>
---@param Options FSBZSpawnRequestOptions
---@param Spawned FRequestActorSpawned
---@param RequestDone FRequestActorRequestDone
---@param DebugName FName
---@return FSBZActorSpawnRequestHandle
function USBZSpawnManagerFunctionLibrary:RequestActor(WorldContextObject, RequestArray, Options, Spawned, RequestDone, DebugName) end
---@param Handle FSBZPawnSpawnRequestHandle
---@return ESBZSpawnRequestStatus
function USBZSpawnManagerFunctionLibrary:GetPawnRequestStatus(Handle) end
---@param Handle FSBZPawnSpawnRequestHandle
---@return int32
function USBZSpawnManagerFunctionLibrary:GetPawnRequestCount(Handle) end
---@param Handle FSBZPawnSpawnRequestHandle
---@param Index int32
---@return FSBZPawnSpawnRequest
function USBZSpawnManagerFunctionLibrary:GetPawnRequest(Handle, Index) end
---@param Handle FSBZPawnSpawnRequestHandle
---@param bIncludeMissingPawns boolean
---@return TArray<APawn>
function USBZSpawnManagerFunctionLibrary:GetCreatedPawns(Handle, bIncludeMissingPawns) end
---@param Handle FSBZActorSpawnRequestHandle
---@param bRemoveMissingActors boolean
---@return TArray<AActor>
function USBZSpawnManagerFunctionLibrary:GetCreatedActors(Handle, bRemoveMissingActors) end
---@param Handle FSBZActorSpawnRequestHandle
---@return ESBZSpawnRequestStatus
function USBZSpawnManagerFunctionLibrary:GetActorRequestStatus(Handle) end
---@param Handle FSBZActorSpawnRequestHandle
---@return int32
function USBZSpawnManagerFunctionLibrary:GetActorRequestCount(Handle) end
---@param Handle FSBZActorSpawnRequestHandle
---@param Index int32
---@return FSBZActorSpawnRequest
function USBZSpawnManagerFunctionLibrary:GetActorRequest(Handle, Index) end


---@class USBZSpecialAIComponent : UActorComponent
USBZSpecialAIComponent = {}


---@class USBZSplineComponent : USplineComponent
---@field InputSplineActors TArray<ASBZSpline>
---@field OutputSplineActors TArray<ASBZSpline>
---@field InputSplines TArray<USBZSplineComponent>
---@field OutputSplines TArray<USBZSplineComponent>
---@field YawControls TArray<FSBZYawControl>
---@field bYawControlEnabled boolean
---@field bReverse boolean
---@field SplineType ESBZSplineType
USBZSplineComponent = {}



---@class USBZSprayCanData : USBZCosmeticsDataAsset
---@field SprayCanColor FLinearColor
---@field SprayCanTexture UTexture2D
---@field SprayCanTextureColorR FLinearColor
---@field SprayCanTextureColorG FLinearColor
---@field SprayCanTextureColorB FLinearColor
---@field SprayCanTextureColorA FLinearColor
---@field SprayCanTextureRotation float
---@field SprayCanTextureSize float
---@field SprayCanRoughness float
---@field SprayCanRoughnessTexture UTexture2D
---@field SprayCanRoughnessChannelSelection FLinearColor
---@field SprayCanMetallic float
USBZSprayCanData = {}



---@class USBZSprayCanDatabase : USBZItemDatabase
---@field SprayCanArray TArray<USBZSprayCanData>
USBZSprayCanDatabase = {}



---@class USBZSpringArmComponent : USpringArmComponent
---@field Target AActor
USBZSpringArmComponent = {}



---@class USBZStanceTransitionDataAsset : UDataAsset
---@field AllowedStanceTransitions TArray<FSBZAllowedStanceTransition>
USBZStanceTransitionDataAsset = {}



---@class USBZStateMachineDataActionPhase : USBZStateMachineData
USBZStateMachineDataActionPhase = {}


---@class USBZStateMachineDataGameError : USBZStateMachineData
---@field ErrorType ESBZGameMachineStateError
USBZStateMachineDataGameError = {}



---@class USBZStateMachineDataIIS : USBZStateMachineData
---@field ReturnReason ESBZReturnToIISReason
USBZStateMachineDataIIS = {}



---@class USBZStateMachineDataMatchmaking : USBZStateMachineData
---@field Params FSBZOnlineMatchmakingParams
---@field PartyCode FString
---@field bAsyncLoadingComplete boolean
---@field bCrossPlayEnabled boolean
---@field bInCrossPlayLobby boolean
---@field bCrossPlayAllowed boolean
---@field BuildVersion FString
---@field JoinType ESBZOnlineJoinType
USBZStateMachineDataMatchmaking = {}



---@class USBZStateMachineDataOutroVariation : USBZStateMachineData
USBZStateMachineDataOutroVariation = {}


---@class USBZStateMachineDataReplay : USBZStateMachineData
---@field Params FSBZReplayInfo
USBZStateMachineDataReplay = {}



---@class USBZStateMachineDataRestartLevel : USBZStateMachineData
---@field Params FSBZRestartLevelInfo
USBZStateMachineDataRestartLevel = {}



---@class USBZStateMachineDataResult : USBZStateMachineData
USBZStateMachineDataResult = {}


---@class USBZStateMachineDataSubsystemInitialisation : USBZStateMachineData
---@field ReturnReason ESBZReturnToSubsystemInitialisationReason
USBZStateMachineDataSubsystemInitialisation = {}



---@class USBZStateMachineDataWaitActionPhase : USBZStateMachineData
---@field TargetLevelIdx int32
USBZStateMachineDataWaitActionPhase = {}



---@class USBZStateMachineDataWaitResult : USBZStateMachineData
USBZStateMachineDataWaitResult = {}


---@class USBZStateMachineSharedState : UActorComponent
---@field OnlineSessionPhase ESBZOnlineSessionPhase
USBZStateMachineSharedState = {}

function USBZStateMachineSharedState:OnServerInAction__DelegateSignature() end
function USBZStateMachineSharedState:NotifyServerInActionPhase() end


---@class USBZStateMachineStateABMatchmaking : USBZClientStateMachineState
---@field LoadingScreen USBZLoadingScreen
---@field MatchmakingData USBZStateMachineDataMatchmaking
USBZStateMachineStateABMatchmaking = {}

function USBZStateMachineStateABMatchmaking:HandleBeaconDisconnect() end


---@class USBZStateMachineStateABPreMatch : USBZClientStateMachineState
---@field MatchmakingData USBZStateMachineDataMatchmaking
USBZStateMachineStateABPreMatch = {}

function USBZStateMachineStateABPreMatch:HandleReceivedPlayerReadyAck() end
---@param Result ESBZOnlineCode
function USBZStateMachineStateABPreMatch:HandleLobbyStateUpdated(Result) end
function USBZStateMachineStateABPreMatch:HandleInitializeTravel() end
function USBZStateMachineStateABPreMatch:HandleBeaconDisconnect() end
function USBZStateMachineStateABPreMatch:DelayedTravelToServer() end


---@class USBZStateMachineStateActionPhase : USBZClientStateMachineState
---@field ActionPhaseWidget USBZActionPhaseBaseWidget
---@field ActionPhaseData USBZStateMachineDataActionPhase
---@field InitialLongTimeoutDelay float
USBZStateMachineStateActionPhase = {}

---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateActionPhase:PlayerReadyReceived(PlayerId) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateActionPhase:PlayerDisconnectedAtBeacon(PlayerId) end
---@param Data FSBZPlayerStateRemovedEvent
function USBZStateMachineStateActionPhase:HandlePlayerStateRemoved(Data) end
---@param PlayerController ASBZPlayerController
---@param OldStateName FName
---@param NewStateName FName
function USBZStateMachineStateActionPhase:HandlePlayerStateChanged(PlayerController, OldStateName, NewStateName) end
---@param Data FSBZPlayerStateAddedEvent
function USBZStateMachineStateActionPhase:HandlePlayerStateAdded(Data) end
---@param OutroVariation int32
function USBZStateMachineStateActionPhase:HandleMissionEnd(OutroVariation) end
---@param PlayerId FUniqueNetIdRepl
---@param DisplayName FString
function USBZStateMachineStateActionPhase:DropInLobbyClient(PlayerId, DisplayName) end
function USBZStateMachineStateActionPhase:BlackScreenDoneTimeout() end
function USBZStateMachineStateActionPhase:AutoReadyTimeout() end


---@class USBZStateMachineStateBackendError : USBZClientStateMachineState
---@field ErrorData USBZStateMachineDataGameError
---@field BackendErrorWidget USBZBackendErrorWidget
USBZStateMachineStateBackendError = {}



---@class USBZStateMachineStateDsActionPhase : USBZDsStateMachineState
---@field ActionPhaseWidget USBZActionPhaseBaseWidget
---@field ActionPhaseData USBZStateMachineDataActionPhase
---@field InitialLongTimeoutDelay float
USBZStateMachineStateDsActionPhase = {}

---@param WaitForReadyPlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsActionPhase:PlayerWaitForReady(WaitForReadyPlayerId) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsActionPhase:PlayerStartTravel(PlayerId) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsActionPhase:PlayerReadyReceived(PlayerId) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsActionPhase:PlayerDisconnectedAtBeacon(PlayerId) end
---@param Data FSBZPlayerStateRemovedEvent
function USBZStateMachineStateDsActionPhase:HandlePlayerStateRemoved(Data) end
---@param Data FSBZPlayerStateAddedEvent
function USBZStateMachineStateDsActionPhase:HandlePlayerStateAdded(Data) end
---@param MissionResultData FSBZEndMissionResultData
function USBZStateMachineStateDsActionPhase:HandleMissionResultReady(MissionResultData) end
---@param OutroVariation int32
function USBZStateMachineStateDsActionPhase:HandleMissionEnd(OutroVariation) end
---@param PlayerId FUniqueNetIdRepl
---@param DisplayName FString
function USBZStateMachineStateDsActionPhase:DropInLobbyClient(PlayerId, DisplayName) end
function USBZStateMachineStateDsActionPhase:AutoReadyTimeout() end


---@class USBZStateMachineStateDsLoading : USBZDsStateMachineState
---@field TimeOutAck float
USBZStateMachineStateDsLoading = {}

---@param NewWorld UWorld
function USBZStateMachineStateDsLoading:DestinationMapLoaded(NewWorld) end


---@class USBZStateMachineStateDsRestartLevel : USBZDsStateMachineState
---@field PreplanningAssets TArray<FSBZPreplanningAsset>
USBZStateMachineStateDsRestartLevel = {}

---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsRestartLevel:OnClientStartSeamlessTravel(PlayerId) end


---@class USBZStateMachineStateDsResult : USBZDsStateMachineState
---@field ResultStateTimerHandler FTimerHandle
---@field ResultStateTimeout float
---@field RestartAcceptTimeout float
---@field RestartInitiateTimeout float
---@field ResultWidget USBZWidgetBase
---@field PlayerRequestedRestart TArray<FUniqueNetIdRepl>
---@field RestartAcceptTimerHandler FTimerHandle
---@field RestartLevelTimerHandler FTimerHandle
USBZStateMachineStateDsResult = {}

function USBZStateMachineStateDsResult:OnRestartTimerFinsihed() end
function USBZStateMachineStateDsResult:OnRestartLevelTimeExpired() end
function USBZStateMachineStateDsResult:OnRestartAcceptTimerFinsihed() end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsResult:OnRestartAccepted(PlayerId) end
---@param NewWorld UWorld
function USBZStateMachineStateDsResult:DestinationMapLoaded(NewWorld) end


---@class USBZStateMachineStateDsWaitingForPlayers : USBZDsStateMachineState
---@field PlayersReadyTimeoutValue float
---@field PlayersReadyTimer FTimerHandle
USBZStateMachineStateDsWaitingForPlayers = {}

---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsWaitingForPlayers:UnregisterClient(PlayerId) end
---@param WaitForReadyPlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsWaitingForPlayers:PlayerWaitForReady(WaitForReadyPlayerId) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsWaitingForPlayers:PlayerStartTravel(PlayerId) end
---@param ReadyPlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsWaitingForPlayers:PlayerReadyReceived(ReadyPlayerId) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateDsWaitingForPlayers:PlayerDisconnectedAtBeacon(PlayerId) end
function USBZStateMachineStateDsWaitingForPlayers:OnPlayersReadyTimerComplete() end
function USBZStateMachineStateDsWaitingForPlayers:IntroSequenceTimeout() end
---@param Data FSBZPlayerStateRemovedEvent
function USBZStateMachineStateDsWaitingForPlayers:HandlePlayerStateRemoved(Data) end
---@param Data FSBZPlayerStateAddedEvent
function USBZStateMachineStateDsWaitingForPlayers:HandlePlayerStateAdded(Data) end
function USBZStateMachineStateDsWaitingForPlayers:EndIntroSequence() end
---@param PlayerId FUniqueNetIdRepl
---@param DisplayName FString
function USBZStateMachineStateDsWaitingForPlayers:DropInLobbyClient(PlayerId, DisplayName) end
function USBZStateMachineStateDsWaitingForPlayers:CleanState() end
function USBZStateMachineStateDsWaitingForPlayers:BlackScreenDoneTimeout() end
function USBZStateMachineStateDsWaitingForPlayers:AutoReadyTimeout() end


---@class USBZStateMachineStateFunctionalTest : USBZClientStateMachineState
USBZStateMachineStateFunctionalTest = {}


---@class USBZStateMachineStateGameError : USBZClientStateMachineState
---@field ErrorData USBZStateMachineDataGameError
---@field GameErrorWidget USBZGameErrorWidget
---@field GameDataState ESBZGameDataState
USBZStateMachineStateGameError = {}

---@param ServiceStatus ESBZServiceStatus
function USBZStateMachineStateGameError:SetNetworkConnected(ServiceStatus) end


---@class USBZStateMachineStateGameStart : USBZClientStateMachineState
---@field LoadingScreen USBZLoadingScreen
USBZStateMachineStateGameStart = {}

function USBZStateMachineStateGameStart:SessionJoinStarted() end
---@param InWorld UWorld
function USBZStateMachineStateGameStart:SessionJoined(InWorld) end
---@param ErrorCode ESBZOnlineCode
function USBZStateMachineStateGameStart:HandleLostConnectionToPartyHost(ErrorCode) end


---@class USBZStateMachineStateHostMigration : USBZClientStateMachineState
USBZStateMachineStateHostMigration = {}


---@class USBZStateMachineStateJobOverview : USBZClientStateMachineState
---@field JobOverviewWidget USBZJobOverviewBaseWidget
USBZStateMachineStateJobOverview = {}

function USBZStateMachineStateJobOverview:WaitForRandomizedRooms() end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateJobOverview:UnregisterClient(PlayerId) end
function USBZStateMachineStateJobOverview:StartIntroSequence() end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateJobOverview:ReadyPlayer(PlayerId) end
---@param SubLevel ASBZLevelScriptActor
function USBZStateMachineStateJobOverview:RandomizedRoomLoadingComplete(SubLevel) end
---@param WaitForReadyPlayerId FUniqueNetIdRepl
function USBZStateMachineStateJobOverview:PlayerWaitForReady(WaitForReadyPlayerId) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateJobOverview:PlayerStartTravel(PlayerId) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateJobOverview:PlayerReadyReceived(PlayerId) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateJobOverview:PlayerDisconnectedAtBeacon(PlayerId) end
---@param PlayerController ASBZPlayerController
function USBZStateMachineStateJobOverview:OnPlayerBeginPlayState(PlayerController) end
---@param BlackScreenTransitionType EBlackScreenTransitionType
function USBZStateMachineStateJobOverview:OnAllPlayersReady(BlackScreenTransitionType) end
function USBZStateMachineStateJobOverview:NetworkDisconnected() end
function USBZStateMachineStateJobOverview:MoveToActionPhase() end
function USBZStateMachineStateJobOverview:IntroSequenceTimedOut() end
---@param Data FSBZPlayerStateRemovedEvent
function USBZStateMachineStateJobOverview:HandlePlayerStateRemoved(Data) end
---@param Data FSBZPlayerStateAddedEvent
function USBZStateMachineStateJobOverview:HandlePlayerStateAdded(Data) end
function USBZStateMachineStateJobOverview:EndIntroSequence() end
function USBZStateMachineStateJobOverview:EnableReadyButton() end
---@param PlayerIdm FUniqueNetIdRepl
---@param DisplayName FString
function USBZStateMachineStateJobOverview:DropInLobbyClient(PlayerIdm, DisplayName) end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateJobOverview:ClientDisconnected(PlayerId) end
function USBZStateMachineStateJobOverview:AutoReadyTimeout() end


---@class USBZStateMachineStateJobOverviewDirectJoin : USBZClientStateMachineState
---@field JobOverviewWidget USBZJobOverviewBaseWidget
USBZStateMachineStateJobOverviewDirectJoin = {}

---@param PlayerController ASBZPlayerController
function USBZStateMachineStateJobOverviewDirectJoin:OnHandleBeginPlayState(PlayerController) end
function USBZStateMachineStateJobOverviewDirectJoin:EnableReadyButton() end
---@param BlackScreenTransitionType EBlackScreenTransitionType
function USBZStateMachineStateJobOverviewDirectJoin:ClientShowBlackScreen(BlackScreenTransitionType) end


---@class USBZStateMachineStateJobOverviewDropIn : USBZClientStateMachineState
---@field JobOverviewWidget USBZJobOverviewBaseWidget
USBZStateMachineStateJobOverviewDropIn = {}

---@param PlayerController ASBZPlayerController
function USBZStateMachineStateJobOverviewDropIn:OnHandleBeginPlayState(PlayerController) end
function USBZStateMachineStateJobOverviewDropIn:NetworkDisconnected() end
function USBZStateMachineStateJobOverviewDropIn:EnableReadyButton() end
---@param BlackScreenTransitionType EBlackScreenTransitionType
function USBZStateMachineStateJobOverviewDropIn:ClientShowBlackScreen(BlackScreenTransitionType) end


---@class USBZStateMachineStateLobby : USBZClientStateMachineState
---@field PlayersWaitTimeout int32
---@field ActionPhasePlayersWaitTimeout int32
---@field GameStartTimeout int32
USBZStateMachineStateLobby = {}

function USBZStateMachineStateLobby:WaitPlayersTickSeconds() end
function USBZStateMachineStateLobby:WaitGameTickSeconds() end
function USBZStateMachineStateLobby:TryUpdateWaitPlayersTimer() end
function USBZStateMachineStateLobby:StartWaitPlayersTimer() end
function USBZStateMachineStateLobby:StartWaitGameTimer() end
function USBZStateMachineStateLobby:StartWaitForServerPlayerReadyAck() end
function USBZStateMachineStateLobby:ResetWaitPlayersTimer() end
function USBZStateMachineStateLobby:ReceivedHostUpdate() end
function USBZStateMachineStateLobby:OnMissionEnd() end
function USBZStateMachineStateLobby:HandleWaitActionPhaseReceived() end
---@param ErrorCode ESBZOnlineCode
function USBZStateMachineStateLobby:HandleLostConnectionToPartyHost(ErrorCode) end
---@param ErrorCode ESBZOnlineCode
function USBZStateMachineStateLobby:HandleLostConnectionToHost(ErrorCode) end


---@class USBZStateMachineStateMatchmaking : USBZClientStateMachineState
---@field AcceptMatchTimeMax int32
---@field AcceptMatchUnlockTimeDebug int32
---@field AcceptMatchUnlockTimeShipping int32
---@field AcceptMatchUnlockTimePrivateParty int32
---@field AcceptMatchUnlockTimeCamp int32
---@field MatchmakingData USBZStateMachineDataMatchmaking
USBZStateMachineStateMatchmaking = {}

function USBZStateMachineStateMatchmaking:HandleSessionBecomeOutdated() end
function USBZStateMachineStateMatchmaking:HandlePlayerCountChanged() end
function USBZStateMachineStateMatchmaking:HandleMatchInfoUpdated() end
---@param ErrorCode ESBZOnlineCode
function USBZStateMachineStateMatchmaking:HandleLostConnectionToPartyHost(ErrorCode) end
---@param ErrorCode ESBZOnlineCode
function USBZStateMachineStateMatchmaking:HandleLostConnectionToHost(ErrorCode) end
function USBZStateMachineStateMatchmaking:FireMatchAcceptUnlock() end


---@class USBZStateMachineStateNotLoggedIn : USBZClientStateMachineState
---@field AccelByteAdminHelper USBZAccelByteAdminHelper
---@field LoginBadRequestErrorCount int32
USBZStateMachineStateNotLoggedIn = {}



---@class USBZStateMachineStateOutro : USBZClientStateMachineState
---@field ResultData USBZStateMachineDataResult
---@field WaitingForEndResult boolean
USBZStateMachineStateOutro = {}

function USBZStateMachineStateOutro:OutroSequenceTimeout() end
---@param MissionResultData FSBZEndMissionResultData
function USBZStateMachineStateOutro:HandleMissionResultReady(MissionResultData) end
function USBZStateMachineStateOutro:DelayedLeaveOutroSequence() end


---@class USBZStateMachineStateP2PHost : USBZClientStateMachineState
---@field MatchmakingData USBZStateMachineDataMatchmaking
---@field AccelByteDS USBZAccelByteDS
USBZStateMachineStateP2PHost = {}

---@param NewWorld UWorld
function USBZStateMachineStateP2PHost:PostLoadMap(NewWorld) end


---@class USBZStateMachineStateReplay : USBZClientStateMachineState
USBZStateMachineStateReplay = {}


---@class USBZStateMachineStateResult : USBZClientStateMachineState
---@field ResultWidget USBZWidgetBase
---@field PlayerRequestedRestart TArray<FUniqueNetIdRepl>
USBZStateMachineStateResult = {}

function USBZStateMachineStateResult:OnRestartTimeExpired() end
function USBZStateMachineStateResult:OnRestartCountdownTimerUpdated() end
---@param TimeRemainingUntilRestart float
function USBZStateMachineStateResult:OnRestartCountdownTimerStarted(TimeRemainingUntilRestart) end
function USBZStateMachineStateResult:OnRestartAcceptTimerUpdated() end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateResult:OnRestartAccepted(PlayerId) end
function USBZStateMachineStateResult:OnExpireRestartTimerUpdate() end


---@class USBZStateMachineStateSubsystemInitialisation : USBZClientStateMachineState
USBZStateMachineStateSubsystemInitialisation = {}

---@param bSuccess boolean
function USBZStateMachineStateSubsystemInitialisation:HandlePlatformUserLoginComplete(bSuccess) end


---@class USBZStateMachineStateWaitFirstGameStart : USBZClientStateMachineState
---@field MetaDataLoader USBZMetaDataLoader
USBZStateMachineStateWaitFirstGameStart = {}



---@class USBZStateMachineStateWaitMainMenu : USBZClientStateMachineState
---@field TickSeamlessTravelTimer FTimerHandle
---@field LoadingScreen USBZLoadingScreen
USBZStateMachineStateWaitMainMenu = {}

---@param SessionName FName
---@param bResult boolean
function USBZStateMachineStateWaitMainMenu:HandleP2PSessionDestroyed(SessionName, bResult) end


---@class USBZStateMachineStateWaitSoloGame : USBZClientStateMachineState
---@field LoadingScreen USBZLoadingScreen
USBZStateMachineStateWaitSoloGame = {}

function USBZStateMachineStateWaitSoloGame:PlayerSpawnDelay() end


---@class USBZStateMachineStateWaitingActionPhase : USBZClientStateMachineState
---@field LoadingScreen USBZLoadingScreen
---@field WaitingActionPhaseData USBZStateMachineDataWaitActionPhase
---@field TravelToHostTimer FTimerHandle
USBZStateMachineStateWaitingActionPhase = {}

function USBZStateMachineStateWaitingActionPhase:TravelToHostTimeout() end
function USBZStateMachineStateWaitingActionPhase:HandlePlayerControllerReady() end
---@param Result ESBZOnlineCode
function USBZStateMachineStateWaitingActionPhase:HandleNetworkError(Result) end
---@param NewWorld UWorld
function USBZStateMachineStateWaitingActionPhase:HandleJoinedHost(NewWorld) end
function USBZStateMachineStateWaitingActionPhase:HandleGameStateReady() end
---@param Result ESBZOnlineCode
function USBZStateMachineStateWaitingActionPhase:HandleBeaconNetworkError(Result) end
function USBZStateMachineStateWaitingActionPhase:DelayedNetworkBeaconError() end
function USBZStateMachineStateWaitingActionPhase:ConsumePreplanningAssets() end


---@class USBZStateMachineStateWaitingActionPhaseBase : USBZClientStateMachineState
---@field TransitionTimeOutTime float
---@field WaitActionPhaseData USBZStateMachineDataWaitActionPhase
USBZStateMachineStateWaitingActionPhaseBase = {}

function USBZStateMachineStateWaitingActionPhaseBase:HandleTransitionGameModeReady() end
---@param Result ESBZOnlineCode
function USBZStateMachineStateWaitingActionPhaseBase:HandleNetworkError(Result) end
function USBZStateMachineStateWaitingActionPhaseBase:HandleGameReady() end
function USBZStateMachineStateWaitingActionPhaseBase:HandleCinematicStopped() end
function USBZStateMachineStateWaitingActionPhaseBase:HandleCinematicStarted() end
---@param Result ESBZOnlineCode
function USBZStateMachineStateWaitingActionPhaseBase:HandleBeaconNetworkError(Result) end
function USBZStateMachineStateWaitingActionPhaseBase:DelayedNetworkBeaconError() end


---@class USBZStateMachineStateWaitingActionPhaseClient : USBZStateMachineStateWaitingActionPhaseBase
USBZStateMachineStateWaitingActionPhaseClient = {}

function USBZStateMachineStateWaitingActionPhaseClient:ReceivedHostUpdate() end
function USBZStateMachineStateWaitingActionPhaseClient:HandlePlayerControllerReady() end
---@param NewWorld UWorld
function USBZStateMachineStateWaitingActionPhaseClient:HandleJoinedHost(NewWorld) end
function USBZStateMachineStateWaitingActionPhaseClient:HandleGameStateReady() end


---@class USBZStateMachineStateWaitingActionPhaseDropIn : USBZStateMachineStateWaitingActionPhaseBase
USBZStateMachineStateWaitingActionPhaseDropIn = {}

function USBZStateMachineStateWaitingActionPhaseDropIn:HandlePlayerControllerReady() end
---@param NewWorld UWorld
function USBZStateMachineStateWaitingActionPhaseDropIn:HandleJoinedHost(NewWorld) end
function USBZStateMachineStateWaitingActionPhaseDropIn:HandleGameStateReady() end


---@class USBZStateMachineStateWaitingActionPhaseHost : USBZStateMachineStateWaitingActionPhaseBase
---@field TimeOutAck float
USBZStateMachineStateWaitingActionPhaseHost = {}

---@param NewWorld UWorld
function USBZStateMachineStateWaitingActionPhaseHost:PostLoadTransitionMap(NewWorld) end
---@param ChangedPlayerState APlayerState
function USBZStateMachineStateWaitingActionPhaseHost:HandlePlayerRegister(ChangedPlayerState) end
function USBZStateMachineStateWaitingActionPhaseHost:HandlePlayerControllerReady() end
---@param PlayerId FUniqueNetIdRepl
function USBZStateMachineStateWaitingActionPhaseHost:HandlePlayerAckReceived(PlayerId) end
---@param NewWorld UWorld
function USBZStateMachineStateWaitingActionPhaseHost:DestinationMapLoaded(NewWorld) end


---@class USBZStateMachineStateWaitingReplay : USBZClientStateMachineState
---@field Data USBZStateMachineData
USBZStateMachineStateWaitingReplay = {}



---@class USBZStateMachineStateWaitingRestartLevel : USBZClientStateMachineState
---@field RestartLevelData USBZStateMachineDataRestartLevel
---@field LoadingScreen USBZLoadingScreen
USBZStateMachineStateWaitingRestartLevel = {}

function USBZStateMachineStateWaitingRestartLevel:OnLocalPlayerStateReady() end
function USBZStateMachineStateWaitingRestartLevel:OnHandleGameStateReady() end


---@class USBZStateMachineStateWaitingReturnToIIS : USBZClientStateMachineState
---@field ReturnReason USBZStateMachineDataIIS
USBZStateMachineStateWaitingReturnToIIS = {}

---@param NewWorld UWorld
function USBZStateMachineStateWaitingReturnToIIS:HandlePostLoadMap(NewWorld) end
---@param SessionName FName
---@param bResult boolean
function USBZStateMachineStateWaitingReturnToIIS:HandleP2PSessionDestroyed(SessionName, bResult) end


---@class USBZStatisticCriteriaData : UDataAsset
---@field HeistDataArray TArray<UPD3HeistDataAsset>
---@field LowestDifficulty ESBZDifficulty
---@field MaxPassableState EPD3HeistState
---@field StatisticCode FString
USBZStatisticCriteriaData = {}



---@class USBZStepUpImpactConfig : USBZImpactConfig
USBZStepUpImpactConfig = {}


---@class USBZStoreManager : UObject
---@field WeaponPartCostMap TMap<FString, FSBZStoreBaseItem>
---@field PreplanningAssetCostMap TMap<FGuid, FSBZStoreBaseItem>
---@field AccelByteItemTitleToIdString TMap<FString, FString>
---@field AllVendorsItems FSBZPlayerStoreItemData
---@field PayDayCreditMap TMap<FString, FSBZPayDayCreditStoreItem>
USBZStoreManager = {}

---@param WorldContextObject UObject
---@return USBZStoreManager
function USBZStoreManager:GetStoreManager(WorldContextObject) end
---@param PriceProgressionGroup FString
---@return int32
function USBZStoreManager:GetMaxPriceProgressionLevel(PriceProgressionGroup) end
---@param InfamyLevel int32
---@return int32
function USBZStoreManager:GetInfamyLevelItemUnlockCount(InfamyLevel) end


---@class USBZSubduedAbility : USBZDamageDefeatAbility
USBZSubduedAbility = {}


---@class USBZSubtitleWidget : USBZWidgetBase
---@field MinDisplayTime float
---@field DisplayTimePerCharacter float
---@field bSettingsPreview boolean
---@field DisplayTimePerCharacterMap TMap<FString, float>
---@field StringTableName FString
---@field VOStringTableName FString
---@field Text_SubtitleText UTextBlock
---@field SubtitleStringTable UStringTable
USBZSubtitleWidget = {}

function USBZSubtitleWidget:HandlePlayerControllerInitialized() end


---@class USBZSuitBaseData : USBZCosmeticsDataAsset
---@field SuitBaseVariants TMap<EPlayerCharacterSizeCategory, FSBZSuitBaseVariant>
---@field DefaultSizeCategory EPlayerCharacterSizeCategory
---@field SkeletalMesh1P TSoftObjectPtr<USkeletalMesh>
---@field SkeletalMesh1PFemale TSoftObjectPtr<USkeletalMesh>
---@field UpperPartMaterialSlotMale TSoftObjectPtr<UMaterialInstance>
---@field LowerPartMaterialSlotMale TSoftObjectPtr<UMaterialInstance>
---@field UpperPartMaterialSlotFemale TSoftObjectPtr<UMaterialInstance>
---@field LowerPartMaterialSlotFemale TSoftObjectPtr<UMaterialInstance>
---@field CPD00 uint8
---@field CPD01 uint8
USBZSuitBaseData = {}



---@class USBZSuitBaseDatabase : USBZItemDatabase
---@field SuitBases TArray<USBZSuitBaseData>
USBZSuitBaseDatabase = {}



---@class USBZSuitCustomizationComponent : UActorComponent
USBZSuitCustomizationComponent = {}

---@param Config FSBZSuitConfig
function USBZSuitCustomizationComponent:SetSuitConfig(Config) end
---@param InMeshCompoenent USkeletalMeshComponent
function USBZSuitCustomizationComponent:SetMeshComponent(InMeshCompoenent) end
function USBZSuitCustomizationComponent:NativeOnSkeletalMeshLoaded() end


---@class USBZSuitData : USBZInventoryBaseData
USBZSuitData = {}


---@class USBZSuitDatabase : USBZItemDatabase
---@field Suits TArray<USBZSuitData>
---@field CustomizableSuit USBZSuitData
USBZSuitDatabase = {}



---@class USBZSuitInventorySlotData : USBZInventorySlotData
---@field SuitBaseSlot USBZModularPartSlotBase
USBZSuitInventorySlotData = {}



---@class USBZSuitInventorySlotDatabase : USBZItemDatabase
---@field InventorySlotArray TArray<USBZSuitInventorySlotData>
USBZSuitInventorySlotDatabase = {}



---@class USBZSuitMaterialApplier : USBZModularPartApplier
USBZSuitMaterialApplier = {}


---@class USBZSuitMaterialData : USBZCosmeticsDataAsset
USBZSuitMaterialData = {}


---@class USBZSuitMaterialDatabase : USBZItemDatabase
---@field SuitMaterialArray TArray<USBZSuitMaterialData>
USBZSuitMaterialDatabase = {}



---@class USBZSuitPartConfig : USBZModularPartConfig
---@field SuitPart ESBZSuitPart
USBZSuitPartConfig = {}



---@class USBZSuitPartSlot : USBZCosmeticsPartSlot
---@field SuitPart uint8
USBZSuitPartSlot = {}



---@class USBZSuitPatternApplier : USBZModularPartApplier
USBZSuitPatternApplier = {}


---@class USBZSuitPatternData : USBZCosmeticsPatternDataAsset
USBZSuitPatternData = {}


---@class USBZSuitPatternDatabase : USBZItemDatabase
---@field SuitPatternArray TArray<USBZSuitPatternData>
USBZSuitPatternDatabase = {}



---@class USBZSuitPresetData : USBZCosmeticsDataAsset
---@field SkeletalMesh TSoftObjectPtr<USkeletalMesh>
USBZSuitPresetData = {}



---@class USBZSuitPresetDatabase : USBZItemDatabase
---@field SuitPresets TArray<USBZSuitPresetData>
USBZSuitPresetDatabase = {}



---@class USBZSuitSprayCanApplier : USBZModularPartApplier
USBZSuitSprayCanApplier = {}


---@class USBZSuitSprayCanGlobalColorApplier : USBZSuitSprayCanApplier
USBZSuitSprayCanGlobalColorApplier = {}


---@class USBZSuitSprayCanOnPatternAApplier : USBZSuitSprayCanApplier
USBZSuitSprayCanOnPatternAApplier = {}


---@class USBZSuitSprayCanOnPatternBApplier : USBZSuitSprayCanApplier
USBZSuitSprayCanOnPatternBApplier = {}


---@class USBZSuitSprayCanOnPatternGApplier : USBZSuitSprayCanApplier
USBZSuitSprayCanOnPatternGApplier = {}


---@class USBZSuitSprayCanOnPatternRApplier : USBZSuitSprayCanApplier
USBZSuitSprayCanOnPatternRApplier = {}


---@class USBZSurfaceTypesConfig : UDataAsset
---@field BloodSplatterDecalAmount int32
---@field BloodSplatterDistance float
---@field BloodSplatterDecalFadeOutDuration float
---@field SoundEvents FSBZSurfaceSoundEvents
---@field SurfaceTypeMap TMap<EPhysicalSurface, FSBZSurfaceType>
---@field SurfaceImpactConfigMap TMap<ESBZImpactConfigType, FSBZSurfaceImpactConfig>
USBZSurfaceTypesConfig = {}



---@class USBZSurrenderNotify : UAnimNotify
USBZSurrenderNotify = {}


---@class USBZTacticalNavigationQueryFilter : UNavigationQueryFilter
---@field VisibilityCostMultiplier float
---@field DistanceCostMultiplier float
---@field HeuristicScale float
---@field EnemyExcluderRadius float
---@field MaxRelevantDist float
---@field VisibilityScoreBoostMultiplier float
---@field RejectingHeightDiffBetweenNodeAndEnemy float
---@field bActive boolean
---@field AreaFixedSizeMinAdditionnalLength uint16
---@field AreaFixedSizeMaxAdditionnalLength uint16
---@field AreaFixedSizeMinAdditionnalWidth uint16
---@field AreaFixedSizeMaxAdditionnalWidth uint16
USBZTacticalNavigationQueryFilter = {}



---@class USBZTacticianDiscombobulateEffect : UGameplayEffect
USBZTacticianDiscombobulateEffect = {}


---@class USBZTagReactionAsset : UPrimaryDataAsset
---@field Map TMap<FGameplayTag, FSBZTagReaction>
USBZTagReactionAsset = {}



---@class USBZTankAIComponent : USBZSpecialAIComponent
---@field Armored UPhysicalMaterial
---@field ArmorSelectors TArray<FSBZComponentSelector>
---@field ArmorPopOffEvent UAkAudioEvent
---@field FaceArmorSelectors TArray<FSBZComponentSelector>
---@field HeadshotColliderSelector FSBZComponentSelector
---@field Cooldown float
---@field StaggerStateCooldown float
---@field ChargeDistance FFloatInterval
---@field DistantChargeDistance FFloatInterval
---@field ArmorParts TArray<UStaticMeshComponent>
---@field FaceArmor TArray<USBZDozerFaceArmor>
---@field HeadshotCollider UPrimitiveComponent
---@field BodyArmorNames TArray<FName>
---@field BodyArmorMeshes TMap<FName, UStaticMesh>
---@field ArmorInfo TArray<FSBZArmorVariationInfo>
USBZTankAIComponent = {}

---@param InTag FGameplayTag
---@param TagCount int32
function USBZTankAIComponent:OnFiringTagChanged(InTag, TagCount) end


---@class USBZTankAbilityData : USBZAICharacterAbilityData
---@field Visor float
---@field VisorHardness float
USBZTankAbilityData = {}



---@class USBZTankAttributeSet : USBZAICharacterAttributeSet
---@field VisorArmor FGameplayAttributeData
---@field VisorArmorMax FGameplayAttributeData
---@field VisorArmorHardness FGameplayAttributeData
---@field TankComponent USBZTankAIComponent
---@field ArmorDamageTypeMultipliers TMap<FGameplayTag, float>
USBZTankAttributeSet = {}

---@param OldValue FGameplayAttributeData
function USBZTankAttributeSet:OnRep_VisorArmor(OldValue) end
---@param NewCurrentValue float
function USBZTankAttributeSet:Multicast_SetVisorArmor(NewCurrentValue) end


---@class USBZTargetEnemyEffectRequirement : UGameplayEffectCustomApplicationRequirement
USBZTargetEnemyEffectRequirement = {}


---@class USBZTargetFinder : UObject
---@field Predicates TArray<USBZTargetFinderPredicate>
USBZTargetFinder = {}



---@class USBZTargetFinderPredicate : UObject
USBZTargetFinderPredicate = {}


---@class USBZTargetFinderPredicate_Dot : USBZTargetFinderPredicate
---@field Range FFloatRange
USBZTargetFinderPredicate_Dot = {}



---@class USBZTargetFinderPredicate_Linetrace : USBZTargetFinderPredicate
---@field bWantsHit boolean
USBZTargetFinderPredicate_Linetrace = {}



---@class USBZTargetFinder_TypeDistSorted : USBZTargetFinder
---@field Types FGameplayTagContainer
---@field IgnoredTags FGameplayTagContainer
---@field Range FFloatRange
USBZTargetFinder_TypeDistSorted = {}



---@class USBZTargetingHeadbobData : UDataAsset
---@field BreathingCurve UCurveVector
---@field LocomotionFPRigModifier float
---@field BreathingFPRigModifier float
---@field BreathingAmplitude float
USBZTargetingHeadbobData = {}



---@class USBZTasedAbility : USBZDefeatAbility
USBZTasedAbility = {}


---@class USBZTasedData : UDataAsset
---@field LimitedControlTimer float
---@field AccuracyModifierDegrees float
---@field TasedTiltSpeed float
---@field TasedTiltDegrees float
---@field UncontrolledShootingTimeInterval FFloatInterval
---@field UncontrolledShootingCooldownTimeInterval FFloatInterval
---@field TasedCameraShakeFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field TasedGentlyCameraShakeFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field TasedUncontrolledCameraShakeFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field LockCameraData FSBZLockCameraData
USBZTasedData = {}



---@class USBZTaserPackStunsCriteriaData : USBZStatisticCriteriaData
---@field NumberOfStuns int32
USBZTaserPackStunsCriteriaData = {}



---@class USBZTelegraphAttackSoundComponent : USBZOnTelegraphAttackComponent
---@field TelegraphStartEvent UAkAudioEvent
---@field TelegraphStopEvent UAkAudioEvent
USBZTelegraphAttackSoundComponent = {}



---@class USBZTextEntryButton : USBZMenuButton
---@field EditableText_TextInput UEditableText
---@field bSanitizeInputText boolean
---@field OnTextSubmitted FSBZTextEntryButtonOnTextSubmitted
USBZTextEntryButton = {}

---@param InText FText
function USBZTextEntryButton:SetInputText(InText) end
---@param Text FText
---@param CommitMethod ETextCommit::Type
function USBZTextEntryButton:OnTextCommited(Text, CommitMethod) end
---@return FText
function USBZTextEntryButton:GetCurrentText() end
---@param bInIsEditingText boolean
function USBZTextEntryButton:EditingText(bInIsEditingText) end


---@class USBZThermalLanceWidget : UUserWidget
---@field FuelBar UProgressBar
---@field TimeLeftText UTextBlock
---@field ThermalLance ASBZThermalLance
---@field RefuelingPercent float
USBZThermalLanceWidget = {}

function USBZThermalLanceWidget:BP_OnThermalLanceSet() end
---@param NewState ESBZBreachingEquipmentState
function USBZThermalLanceWidget:BP_OnStateChanged(NewState) end
---@param bIsFuelingNeeded boolean
function USBZThermalLanceWidget:BP_OnRefuelingNeeded(bIsFuelingNeeded) end


---@class USBZThermiteInteractRequirement : USBZBaseInteractRequirement
USBZThermiteInteractRequirement = {}


---@class USBZThrowBagAbility : USBZGameplayAbility
USBZThrowBagAbility = {}


---@class USBZThrowCarryAbility : USBZGameplayAbility
USBZThrowCarryAbility = {}


---@class USBZThrowEquippedNotify : UAnimNotify
USBZThrowEquippedNotify = {}


---@class USBZThrowItemAbility : USBZGameplayAbility
---@field OwnerCharacter ASBZCharacter
USBZThrowItemAbility = {}



---@class USBZThrowReleaseNotify : UAnimNotify
---@field bUseThrowBoneTransform boolean
---@field ThrowBoneComponentTransform FTransform
USBZThrowReleaseNotify = {}



---@class USBZThrowableData : USBZInventoryBaseData
---@field ThrowableClass TSoftClassPtr<ASBZThrowable>
---@field ThrowForce float
---@field CharacterMovementVelocityModifier float
---@field PitchAdjustment float
---@field SpawnOffsetFromCamera float
---@field AttachmentBone FName
---@field AttachmentRotation FRotator
---@field bIsHeldItem boolean
---@field AmmoInventoryMax int32
---@field AmmoInventory int32
---@field bIsFriendlyFireAllowed boolean
---@field OnHitVelocityModifier float
---@field ThrowComment USBZVoiceCommentDataAsset
---@field NoiseTag FGameplayTag
---@field ThrowableAdditionalTargetSearchMultiplier float
---@field AdditionalTargetsWeight float
---@field IdealLaunchAngle float
---@field ThrowLocationForwardOffset float
---@field ThrowLocationDeviation float
---@field Cooldown float
---@field DroppedComment USBZVoiceCommentDataAsset
---@field bUseThrowCalculation boolean
---@field MaxThrowAngle float
---@field WeaponSelectionScorer USBZAIScorer
---@field StatisticsAffectedString FString
---@field AimAssistData USBZWeaponAimAssistDataAsset
---@field FireData USBZWeaponFireData
USBZThrowableData = {}



---@class USBZThrowableDatabase : USBZItemDatabase
---@field Throwables TArray<USBZThrowableData>
USBZThrowableDatabase = {}



---@class USBZThrowableImpactConfig : USBZImpactConfig
USBZThrowableImpactConfig = {}


---@class USBZThrowableInvisibleNotify : UAnimNotify
USBZThrowableInvisibleNotify = {}


---@class USBZThrowableKnifeDamageType : USBZDamageType
USBZThrowableKnifeDamageType = {}


---@class USBZThrowableKnifeExecutionCalculation : UGameplayEffectExecutionCalculation
USBZThrowableKnifeExecutionCalculation = {}


---@class USBZThrowableProjectileData : USBZThrowableData
USBZThrowableProjectileData = {}


---@class USBZThrowableProjectileImpactConfig : USBZImpactConfig
---@field Types TArray<FSBZProjectileTypeImpactData>
---@field bShouldDoBloodSplatter boolean
USBZThrowableProjectileImpactConfig = {}



---@class USBZTiltCameraModifier : USBZPlayerCameraModifier
USBZTiltCameraModifier = {}


---@class USBZTimeEventManager : UObject
USBZTimeEventManager = {}

function USBZTimeEventManager:RequestTimeEventCheck() end
---@return float
function USBZTimeEventManager:GetNextResetTime() end
---@param WorldContextObject UObject
---@return USBZTimeEventManager
function USBZTimeEventManager:Get(WorldContextObject) end


---@class USBZToolCuttingData : USBZToolData
---@field Fuel float
---@field MaximumCutDistance float
---@field MouseLookSpeedModifier float
---@field GamepadLookSpeedModifier float
---@field FollowSplineMinAngleDegree float
---@field DamageDistanceArray TArray<FSBZDamageDistance>
---@field ArmorPenetration float
---@field FriendlyPlayerDamageScale float
---@field InstigatorPlayerDamageScale float
---@field bUseInstigatorPlayerDamageScale boolean
---@field DefaultSkillSpeedModifier float
---@field MinCuttableTier ESBZCuttingMaterialTier
USBZToolCuttingData = {}



---@class USBZToolData : USBZEquippableData
---@field PrimaryToolClass TSoftClassPtr<ASBZTool>
---@field PlaceableToolClass TSoftClassPtr<ASBZTool>
---@field GhostToolClass TSoftClassPtr<ASBZGhostTool>
---@field PrimaryToolAnimCollection USBZEquippableAnimationCollection
---@field PlaceableToolAnimCollection USBZEquippableAnimationCollection
---@field SpawnOffsetFromCamera float
---@field AttachmentBone FName
---@field ToolInventoryMax int32
---@field ToolInventory int32
---@field PrimaryToolAmmoInventoryMax int32
---@field PrimaryToolAmmoInventory int32
---@field PrimaryAbilityTag FGameplayTag
---@field PlaceableAbilityTag FGameplayTag
---@field PrimaryAbilityClass TSubclassOf<USBZGameplayAbility>
---@field PlaceableAbilityClass TSubclassOf<USBZGameplayAbility>
---@field bActivateImmediately boolean
---@field AutoDeactivateTimer float
---@field DisplayControlsReference FSBZControlsReference
---@field bIsCameraLockedWhenActive boolean
---@field LockCameraData FSBZLockCameraData
---@field ToolRepeatDelay float
---@field bUsesPrimaryToolAmmo boolean
---@field bRequiresViewing boolean
---@field StatisticsUseString FString
---@field ViewDistanceOffset float
---@field bIsClippingAllowed boolean
---@field SurfaceOffset float
---@field RotationOffsetPlaced FRotator
---@field ForbiddenPlacementBones TMap<FName, float>
USBZToolData = {}



---@class USBZToolDatabase : USBZItemDatabase
---@field Tools TArray<USBZToolData>
USBZToolDatabase = {}



---@class USBZToolEquippedNotify : UAnimNotify
USBZToolEquippedNotify = {}


---@class USBZToolHackingData : USBZToolData
---@field MaxHackingDistance float
---@field HackingSynchTimer float
---@field HackingToolDOFFeedback TSubclassOf<USBZLocalPlayerFeedback>
---@field HackingAimDegreePadding float
USBZToolHackingData = {}



---@class USBZToolInvisibleNotify : UAnimNotify
USBZToolInvisibleNotify = {}


---@class USBZToolReleaseNotify : UAnimNotify
USBZToolReleaseNotify = {}


---@class USBZToolSkeletalMeshComponent : USkeletalMeshComponent
USBZToolSkeletalMeshComponent = {}


---@class USBZToolSnapData : UDataAsset
---@field ZAxisOffset float
---@field ToolSnapOffset float
---@field ToolSnapRadius float
USBZToolSnapData = {}



---@class USBZToolUnequippedAbility : USBZGameplayAbility
USBZToolUnequippedAbility = {}


---@class USBZToolVisibleNotify : UAnimNotify
USBZToolVisibleNotify = {}


---@class USBZTrackWeaponVelocityNotifyState : UAnimNotifyState
USBZTrackWeaponVelocityNotifyState = {}


---@class USBZTrafficFunctionLibrary : UBlueprintFunctionLibrary
USBZTrafficFunctionLibrary = {}

---@param WorldContextObject UObject
---@param EscapeVanActorClass TSubclassOf<ASBZWheeledVehicle>
---@param StartSpline ASBZTrafficSpline
---@param DestinationSpline ASBZTrafficSpline
---@param Exec ESBZTrafficNodeExec
---@param LatentInfo FLatentActionInfo
function USBZTrafficFunctionLibrary:SpawnEscapeVanWithRoute(WorldContextObject, EscapeVanActorClass, StartSpline, DestinationSpline, Exec, LatentInfo) end
---@param WorldContextObject UObject
---@param EscapeVanActorClass TSubclassOf<ASBZWheeledVehicle>
---@param SpawnTransform FTransform
---@param Exec ESBZTrafficNodeExec
---@param LatentInfo FLatentActionInfo
function USBZTrafficFunctionLibrary:SpawnEscapeVan(WorldContextObject, EscapeVanActorClass, SpawnTransform, Exec, LatentInfo) end
---@param WorldContextObject UObject
---@param StartSpline ASBZTrafficSpline
---@param DestinationSpline ASBZTrafficSpline
---@param Exec ESBZTrafficNodeExec
---@param LatentInfo FLatentActionInfo
function USBZTrafficFunctionLibrary:SpawnAndDriveSwatVan(WorldContextObject, StartSpline, DestinationSpline, Exec, LatentInfo) end
---@param WorldContextObject UObject
---@param StartSpline ASBZTrafficSpline
---@param DestinationSpline ASBZTrafficSpline
---@return boolean
function USBZTrafficFunctionLibrary:SetEscapeVanRoute(WorldContextObject, StartSpline, DestinationSpline) end
---@param WorldContextObject UObject
---@param Vehicle ASBZWheeledVehicle
function USBZTrafficFunctionLibrary:SetEscapeVan(WorldContextObject, Vehicle) end
---@param WorldContextObject UObject
---@param NewEscapeVan ASBZWheeledVehicle
---@param StartSpline ASBZTrafficSpline
---@param DestinationSpline ASBZTrafficSpline
---@param Exec ESBZTrafficNodeExec
---@param LatentInfo FLatentActionInfo
---@param bTeleportToPathStart boolean
function USBZTrafficFunctionLibrary:SetAndDriveEscapeVanRoute(WorldContextObject, NewEscapeVan, StartSpline, DestinationSpline, Exec, LatentInfo, bTeleportToPathStart) end
---@param WorldContextObject UObject
---@param Vehicle ASBZAerialVehicle
---@param StartSpline ASBZTrafficSpline
---@param DestinationSpline ASBZTrafficSpline
---@return boolean
function USBZTrafficFunctionLibrary:SetAndDriveAerialVehicleRoute(WorldContextObject, Vehicle, StartSpline, DestinationSpline) end
---@param WorldContextObject UObject
---@param Spline ASBZTrafficSpline
---@param TransformType ESBZTrafficNodeType
---@return FTransform
function USBZTrafficFunctionLibrary:GetTrafficSplineGroundTransform(WorldContextObject, Spline, TransformType) end
---@param WorldContextObject UObject
---@return USBZTrafficManager
function USBZTrafficFunctionLibrary:GetTrafficManager(WorldContextObject) end
---@param WorldContextObject UObject
---@param bDebug boolean
---@param Path TArray<ASBZSpline>
---@param Distance float
---@param Location FVector
---@param ForwardDir FVector
---@param StepDistance float
---@param MaxDistance float
---@param MaxAngle float
---@return FVector
function USBZTrafficFunctionLibrary:GetLocationAlongPathWithinAngle(WorldContextObject, bDebug, Path, Distance, Location, ForwardDir, StepDistance, MaxDistance, MaxAngle) end
---@param WorldContextObject UObject
---@param Exec ESBZTrafficNodeExec
---@param LatentInfo FLatentActionInfo
function USBZTrafficFunctionLibrary:DriveEscapeVan(WorldContextObject, Exec, LatentInfo) end
---@param WorldContextObject UObject
---@param DestinationSpline ASBZTrafficSpline
---@return boolean
function USBZTrafficFunctionLibrary:AppendEscapeVanRoute(WorldContextObject, DestinationSpline) end


---@class USBZTrafficManager : UObject
---@field Settings USBZTrafficSettings
---@field TrafficNodeGraph TMap<ASBZTrafficSpline, FSBZTrafficNode>
---@field DestinationNodeGraph TMap<ASBZTrafficSpline, FSBZTrafficDestinationNode>
---@field SpawnerNodeGraph TMap<ASBZTrafficSpline, FSBZTrafficSpawnerNode>
---@field VehicleArray TArray<FSBZTrafficVehicleInfo>
---@field VehiclesToSpawn TArray<FSBZTrafficSpawnInfo>
---@field PedestrianTrafficNavLinks TArray<ASBZPedestrianTrafficNavLink>
---@field TimeToNextSpawnAttempt float
---@field AmountFirstRespondersLeftToArrive int32
---@field EscapeVan ASBZWheeledVehicle
---@field bCivilianTrafficEnabled boolean
---@field TimeToNextCivilianSpawn float
---@field AmountActiveCivilianVehicles int32
---@field ParkedCivilianVehicles TArray<ASBZWheeledVehicle>
---@field GridlockArray TArray<FSBZTrafficGridlockInfo>
---@field TrafficLightArray TArray<ASBZTrafficLights>
---@field SoundHornTimerGraph TMap<ASBZWheeledVehicle, float>
---@field CachedCivilianRouteArrayGraph TMap<ASBZTrafficSpline, FSBZTrafficRouteArray>
---@field CachedFirstResponderRouteArrayGraph TMap<ASBZTrafficSpline, FSBZTrafficRouteArray>
---@field CachedFBIVanRouteArrayGraph TMap<ASBZTrafficSpline, FSBZTrafficRouteArray>
---@field bIsInActionPhase boolean
USBZTrafficManager = {}

function USBZTrafficManager:OnExitedActionPhase() end
---@param World UWorld
function USBZTrafficManager:OnEnteredActionPhase(World) end
---@param Vehicle ASBZWheeledVehicle
function USBZTrafficManager:HandleVehicleStopped(Vehicle) end
---@param Vehicle ASBZWheeledVehicle
---@param Actor AActor
function USBZTrafficManager:HandleVehicleEndObstacle(Vehicle, Actor) end
---@param Vehicle ASBZWheeledVehicle
---@param Actor AActor
function USBZTrafficManager:HandleVehicleBeginObstacle(Vehicle, Actor) end
---@param Vehicle ASBZWheeledVehicle
function USBZTrafficManager:HandleSwatVanArrived(Vehicle) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZTrafficManager:HandleHeistStateChanged(OldState, NewState) end
---@param Vehicle ASBZWheeledVehicle
function USBZTrafficManager:HandleFirstResponderArrived(Vehicle) end
---@param Vehicle ASBZWheeledVehicle
function USBZTrafficManager:HandleEscapeVanArrived(Vehicle) end
---@param Vehicle ASBZWheeledVehicle
function USBZTrafficManager:HandleCivilianArrived(Vehicle) end


---@class USBZTrafficSettings : UDataAsset
---@field FirstResponders FSBZTrafficFirstResponders
---@field FBIVan FSBZTrafficFBIVan
---@field SwatVans FSBZTrafficSwatVans
---@field Civilians FSBZTrafficCivilians
---@field SoundHorn FSBZTrafficSoundHorn
---@field VehicleSpawnInterval float
---@field VehicleWantedStopDistance float
---@field GridlockBreakCountdown float
---@field PedestrianGreenSoundEvent UAkAudioEvent
---@field PedestrianRedSoundEvent UAkAudioEvent
USBZTrafficSettings = {}



---@class USBZTransformCameraModifier : USBZPlayerCameraModifier
USBZTransformCameraModifier = {}


---@class USBZTutorialPopUpBody : USBZWidgetBase
---@field PopUpControlsReference FSBZButtonControlsReference
---@field PopUpDataAsset USBZTutorialPopUpDataAsset
USBZTutorialPopUpBody = {}

---@param InPopUpDataAsset USBZTutorialPopUpDataAsset
function USBZTutorialPopUpBody:OnTutorialPopUpInitialized(InPopUpDataAsset) end
---@param InPopUpDataAsset USBZTutorialPopUpDataAsset
function USBZTutorialPopUpBody:InitializeTutorialPopUpBody(InPopUpDataAsset) end


---@class USBZTutorialPopUpDataAsset : UDataAsset
---@field PopUpHeader FText
---@field TutorialDescription FText
---@field TutorialIcon UPaperSprite
USBZTutorialPopUpDataAsset = {}



---@class USBZUE4StatsProfiler : UObject
USBZUE4StatsProfiler = {}

function USBZUE4StatsProfiler:OnExitedActionPhase() end
function USBZUE4StatsProfiler:OnEnteredActionPhase() end
---@param WorldContextObject UObject
---@return USBZUE4StatsProfiler
function USBZUE4StatsProfiler:GetUE4StatsProfiler(WorldContextObject) end


---@class USBZUICharacterEffectComponent : UActorComponent
---@field CharacterEffectRuntimes TMap<uint32, FSBZCharacterEffectRuntime>
USBZUICharacterEffectComponent = {}



---@class USBZUIData : UDataAsset
---@field SecurityCompanyDataAssets TMap<ESBZSecurityCompany, TSoftObjectPtr<UPD3SecurityCompanyDataAsset>>
---@field DifficultyText TMap<ESBZDifficulty, FText>
USBZUIData = {}

---@param InSecurityCompany ESBZSecurityCompany
---@return TSoftObjectPtr<UPD3SecurityCompanyDataAsset>
function USBZUIData:GetSecurityCompanyData(InSecurityCompany) end
---@param InDifficulty ESBZDifficulty
---@param OutDifficultyText FText
---@param bHasText boolean
function USBZUIData:GetDifficultyText(InDifficulty, OutDifficultyText, bHasText) end


---@class USBZUIManager : UObject
---@field OnDisplayNotification FSBZUIManagerOnDisplayNotification
---@field PopUpWidgetClass TSubclassOf<USBZPopupWidget>
---@field PopUpWidget USBZPopupWidget
---@field TutorialPopUpBodyWidgetClass TSubclassOf<USBZTutorialPopUpBody>
---@field TutorialPopUpBody USBZTutorialPopUpBody
---@field FullscreenNotificationWidgetClass TSubclassOf<USBZFullScreenNotification>
---@field FullscreenNotificationWidget USBZFullScreenNotification
---@field SideBarNotificationWidgetClass TSubclassOf<USBZSideBarNotifications>
---@field SideBarNotificationWidget USBZSideBarNotifications
---@field InfoPopupWidgetWidgetClass TSubclassOf<USBZLoginScreenInfoPopupWidget>
---@field InfoPopupWidget USBZLoginScreenInfoPopupWidget
---@field EULAContent FSBZInfoPopupText
---@field OnHUDContextChanged FSBZUIManagerOnHUDContextChanged
---@field DebugWidgetClass TSubclassOf<USBZDebugWidget>
---@field DebugWidget USBZDebugWidget
---@field OnUITagsChanged FSBZUIManagerOnUITagsChanged
---@field MetaSaveSuccessfulText FText
---@field MetaSaveFailedText FText
---@field UIGameplayTags FGameplayTagContainer
---@field SubtitleWidgetClass TSubclassOf<USBZSubtitleWidget>
---@field PlatformSprite_GenericPC UPaperSprite
---@field PlatformSprite_GenericConsole UPaperSprite
---@field PlatformSprite_Playstation UPaperSprite
---@field PlatformSprite_XBox UPaperSprite
---@field NebulaSprite UPaperSprite
---@field PlayerNoName FText
---@field XBoxGamepadSprite UPaperSprite
---@field PlayStationGamepadSprite UPaperSprite
---@field KeySpriteEmpty UPaperSprite
---@field MouseSpriteMap TMap<FKey, UPaperSprite>
---@field KeyboardSpriteMap TMap<FKey, UPaperSprite>
---@field XBoxSpriteMap TMap<FKey, UPaperSprite>
---@field PlayStationSpriteMap TMap<FKey, UPaperSprite>
---@field SubtitleWidget USBZSubtitleWidget
---@field OnUIStackChanged FSBZUIManagerOnUIStackChanged
---@field OnUIStackLostOrRemoved FSBZUIManagerOnUIStackLostOrRemoved
---@field OnUIStackLockChanged FSBZUIManagerOnUIStackLockChanged
---@field PopUpStackString FName
---@field SwitchingStackString FName
---@field UIStack TArray<FName>
---@field StackLockedArray TArray<USBZWidgetBase>
---@field RuntimeControlsReference TArray<FSBZControlsReferenceRuntime>
---@field BlackBackgroundWidgetClass TSubclassOf<USBZWidgetBase>
---@field ActiveMenuWidget USBZBaseMenuWidget
---@field ActiveLoginScreenWidget USBZLoginScreenBaseWidget
---@field LastFocusedWidget USBZWidgetBase
---@field LastUIStackUpdate float
---@field bSetFocusOnUnlock boolean
---@field OnInstallStateChanged FSBZUIManagerOnInstallStateChanged
---@field UIData USBZUIData
USBZUIManager = {}

---@param StackValue FName
---@return boolean
function USBZUIManager:TryRemoveFromStack(StackValue) end
---@param StackValueToSwitch FName
function USBZUIManager:SwitchUIStack(StackValueToSwitch) end
function USBZUIManager:SimulateJoinHeistActivity() end
---@param WorldContextObject UObject
---@param InTutorialToDisplay USBZTutorialPopUpDataAsset
---@param InPopUpActionInputDelegate FShowTutorialPopUpInPopUpActionInputDelegate
function USBZUIManager:ShowTutorialPopUp(WorldContextObject, InTutorialToDisplay, InPopUpActionInputDelegate) end
---@param InSideBarNotificationData FSBZSideBarNotificationData
function USBZUIManager:ShowSidebarNotification(InSideBarNotificationData) end
---@param InPopupData FSBZUIPopupData
---@param InPopUpActionInputDelegate FShowPopUpWithCallbackInPopUpActionInputDelegate
---@param InAutomaticClosingCountdownTime int32
---@param InAutomaticClosingActionName FName
---@param bReturnFocusWhenClosed boolean
function USBZUIManager:ShowPopUpWithCallback(InPopupData, InPopUpActionInputDelegate, InAutomaticClosingCountdownTime, InAutomaticClosingActionName, bReturnFocusWhenClosed) end
---@param InPopupData FSBZUIPopupData
---@param bReturnFocusWhenClosed boolean
function USBZUIManager:ShowPopUp(InPopupData, bReturnFocusWhenClosed) end
---@param InMetaNotification FSBZMetaNotification
function USBZUIManager:ShowMetaNotification(InMetaNotification) end
---@param InFullscreenNotificationData FSBZUIFullscreenNotificationData
function USBZUIManager:ShowFullScreenNotification(InFullscreenNotificationData) end
---@param InDelegate FShowEULAPopupInDelegate
function USBZUIManager:ShowEULAPopup(InDelegate) end
---@return boolean
function USBZUIManager:ShouldStartInHeistSelection() end
---@return boolean
function USBZUIManager:ShouldDisplayCursor() end
function USBZUIManager:SetStartInHeistSelection() end
---@param InVisibility ESlateVisibility
function USBZUIManager:SetLogoP3Visibility(InVisibility) end
---@param InVisibility ESlateVisibility
function USBZUIManager:SetLoginScreenVisibility(InVisibility) end
---@param InLastFocusedWidget USBZWidgetBase
function USBZUIManager:SetLastFocusedWidget(InLastFocusedWidget) end
function USBZUIManager:SetInputModeToUI() end
function USBZUIManager:SetInputModeToGameAndUI() end
function USBZUIManager:SetInputModeToGame() end
---@param bShouldDisplayPlayerHUD boolean
function USBZUIManager:SetDisplayPlayerHUD(bShouldDisplayPlayerHUD) end
function USBZUIManager:SaveProgressionSaveGame() end
---@param UITag FGameplayTag
function USBZUIManager:RemoveGameplayTag(UITag) end
---@param InControlsReferenceID int32
function USBZUIManager:RemoveControlsReference(InControlsReferenceID) end
function USBZUIManager:RefreshFullScreenNotificationQueue() end
---@param StackValue FName
function USBZUIManager:PushUIStack(StackValue) end
---@return FName
function USBZUIManager:PopStack() end
---@return FName
function USBZUIManager:PeekStack() end
---@param StateName FName
function USBZUIManager:OnStateMachineStateExited(StateName) end
---@param StateName FName
function USBZUIManager:OnStateMachineStateEntered(StateName) end
---@param Actor AActor
---@param EndPlayReason EEndPlayReason::Type
function USBZUIManager:OnPopupControllerEndPlay(Actor, EndPlayReason) end
function USBZUIManager:OnHeistSelectionMenuSet() end
---@return boolean
function USBZUIManager:IsStackLocked() end
---@return boolean
function USBZUIManager:IsStackEmpty() end
---@return boolean
function USBZUIManager:IsPopupShowing() end
---@return boolean
function USBZUIManager:IsGameInstallPending() end
---@return boolean
function USBZUIManager:IsControllerMode() end
---@param WorldContextObject UObject
function USBZUIManager:HideMenuControlsReference(WorldContextObject) end
---@param Result ESBZMetaRequestResult
function USBZUIManager:HandleProgressionSave(Result) end
function USBZUIManager:HandleLocalPlayerControllerReady() end
function USBZUIManager:HandleActionPhaseEntered() end
---@return TArray<FName>
function USBZUIManager:GetUIStack() end
---@param WorldContextObject UObject
---@return USBZUIData
function USBZUIManager:GetUIData(WorldContextObject) end
---@param InPlatform ESBZPlatform
---@return UPaperSprite
function USBZUIManager:GetSpriteForPlatform(InPlatform) end
---@return UPaperSprite
function USBZUIManager:GetSpriteForNebula() end
---@return USBZPopupWidget
function USBZUIManager:GetPopUpWidget() end
---@param WorldContextObject UObject
---@return USBZBaseMenuWidget
function USBZUIManager:GetMenuWidget(WorldContextObject) end
---@return FText
function USBZUIManager:GetLocalizedPlayerNoName() end
---@return USBZWidgetBase
function USBZUIManager:GetLastFocusedWidget() end
---@param InKey FKey
---@return UPaperSprite
function USBZUIManager:GetKeySpriteForFKey(InKey) end
---@return UPaperSprite
function USBZUIManager:GetKeySpriteEmpty() end
---@param InAxisName FName
---@param ReturnList TArray<FKey>
function USBZUIManager:GetKeysForAxisMapping(InAxisName, ReturnList) end
---@param InActionName FName
---@return FKey
function USBZUIManager:GetKeyForActionMapping(InActionName) end
---@return ESBZInputState
function USBZUIManager:GetInputMode() end
---@return UPaperSprite
function USBZUIManager:GetGamepadSprite() end
---@return TArray<FSBZUIFullscreenNotificationData>
function USBZUIManager:GetFullscreenNotificationQueue() end
---@param OutControlsReference FSBZControlsReference
---@return boolean
function USBZUIManager:GetActiveControlsReference(OutControlsReference) end
---@param HUDNotification FSBZHUDNotificationData
function USBZUIManager:DisplayHUDNotification(HUDNotification) end
function USBZUIManager:ClearPopupStack() end
---@param UITag FGameplayTag
function USBZUIManager:AddUIGameplayTag(UITag) end
---@param WorldContextObject UObject
---@param InButtonControlsReference FSBZButtonControlsReference
---@param ControlsReferenceActionPressedEvent FAddMenuControlsReferenceControlsReferenceActionPressedEvent
function USBZUIManager:AddMenuControlsReference(WorldContextObject, InButtonControlsReference, ControlsReferenceActionPressedEvent) end
---@param InControlsReference FSBZControlsReference
---@return int32
function USBZUIManager:AddControlsReference(InControlsReference) end


---@class USBZUISettings : USBZDeveloperSettings
---@field ColorsMap TMap<FName, FLinearColor>
---@field FontMap TMap<FName, FSlateFontInfo>
---@field DefaultSoundEvents FSBZUIDefaultSoundEvents
---@field ShowActionInputKeyboardMap TMap<FName, int32>
---@field ShowActionInputGamepadMap TMap<FName, int32>
USBZUISettings = {}



---@class USBZUIStatics : UBlueprintFunctionLibrary
USBZUIStatics = {}

---@param SoundID int32
function USBZUIStatics:Stop2DSound(SoundID) end
---@param WorldContextObject UObject
---@param InTextToPrint FText
function USBZUIStatics:ShowDebugObjective(WorldContextObject, InTextToPrint) end
---@param WorldContextObject UObject
function USBZUIStatics:SetUIInDefaultMode(WorldContextObject) end
---@param WorldContextObject UObject
function USBZUIStatics:SetUIInCinematicMode(WorldContextObject) end
---@param WorldContextObject UObject
---@param StringToPrint FString
---@param Colour FLinearColor
---@param TimeToDisplay float
function USBZUIStatics:PrintSubtitle(WorldContextObject, StringToPrint, Colour, TimeToDisplay) end
---@param WorldContextObject UObject
---@param AudioEvent UAkAudioEvent
---@return int32
function USBZUIStatics:Play2DSound(WorldContextObject, AudioEvent) end
---@param LogText FString
function USBZUIStatics:LogUiVerbose(LogText) end
---@param Widget UWidget
---@return boolean
function USBZUIStatics:IsWidgetActuallyVisible(Widget) end
---@return boolean
function USBZUIStatics:IsInputTypeController() end
---@param ZOrder ESBZWidgetZOrdering
---@return int32
function USBZUIStatics:GetWidgetZOrderValue(ZOrder) end
---@param WorldContextObject UObject
---@return USBZUIManager
function USBZUIStatics:GetUIManager(WorldContextObject) end
---@return uint8
function USBZUIStatics:GetMaxDifficultyCount() end
---@param WorldContextObject UObject
---@return FString
function USBZUIStatics:GetMapName(WorldContextObject) end
---@param WorldContextObject UObject
---@param FontName FName
---@return FSlateFontInfo
function USBZUIStatics:GetGlobalFont(WorldContextObject, FontName) end
---@param WorldContextObject UObject
---@param ColorName FName
---@return FLinearColor
function USBZUIStatics:GetGlobalColor(WorldContextObject, ColorName) end
---@param WorldContextObject UObject
---@return int32
function USBZUIStatics:GetCurrentProgressionSaveGameVersion(WorldContextObject) end
---@param IntToConvert int32
---@param bAlwaysDisplayHours boolean
---@return FText
function USBZUIStatics:FormatIntToTimerText(IntToConvert, bAlwaysDisplayHours) end
---@param IntToConvert int32
---@param Integral int32
---@param Precision int32
---@return FText
function USBZUIStatics:FormatIntToText(IntToConvert, Integral, Precision) end
---@param WorldContextObject UObject
---@param HUDNotification FSBZHUDNotificationData
function USBZUIStatics:DisplayHUDNotification(WorldContextObject, HUDNotification) end
---@param InText FText
---@param MaxCharacters int32
---@param bAddElipses boolean
---@return FText
function USBZUIStatics:ClampText(InText, MaxCharacters, bAddElipses) end


---@class USBZUIWeaponStatsAsset : UDataAsset
---@field WeaponStatsBlueprintClass TSubclassOf<USBZUIWeaponStatsBlueprint>
---@field StatWeightContainerArray FSBZUIWeaponStatWeightContainer
USBZUIWeaponStatsAsset = {}



---@class USBZUIWeaponStatsBlueprint : UObject
USBZUIWeaponStatsBlueprint = {}

---@param RangedWeaponData USBZRangedWeaponData
---@param OutValueArray TArray<float>
function USBZUIWeaponStatsBlueprint:GetStabilityValueArray(RangedWeaponData, OutValueArray) end
---@param RangedWeaponData USBZRangedWeaponData
---@param OutValueArray TArray<float>
function USBZUIWeaponStatsBlueprint:GetRecoilValueArray(RangedWeaponData, OutValueArray) end
---@param RangedWeaponData USBZRangedWeaponData
---@param OutValueArray TArray<float>
function USBZUIWeaponStatsBlueprint:GetHandlingValueArray(RangedWeaponData, OutValueArray) end
---@param RangedWeaponData USBZRangedWeaponData
---@param OutValueArray TArray<float>
function USBZUIWeaponStatsBlueprint:GetFireRateValueArray(RangedWeaponData, OutValueArray) end
---@param RangedWeaponData USBZRangedWeaponData
---@param OutValueArray TArray<float>
function USBZUIWeaponStatsBlueprint:GetDamageValueArray(RangedWeaponData, OutValueArray) end
---@param RangedWeaponData USBZRangedWeaponData
---@param OutValueArray TArray<float>
function USBZUIWeaponStatsBlueprint:GetAccuracyValueArray(RangedWeaponData, OutValueArray) end


---@class USBZUnblockAbilityNotify : UAnimNotify
---@field TagContainer FGameplayTagContainer
USBZUnblockAbilityNotify = {}



---@class USBZUnblockHandleEquipmentAbilityNotify : UAnimNotify
USBZUnblockHandleEquipmentAbilityNotify = {}


---@class USBZUnblockKillHumanShieldNotify : UAnimNotify
USBZUnblockKillHumanShieldNotify = {}


---@class USBZUnblockMeleeNotify : UAnimNotify
USBZUnblockMeleeNotify = {}


---@class USBZUnblockReloadNotify : UAnimNotify
USBZUnblockReloadNotify = {}


---@class USBZUnblockRunNotify : UAnimNotify
USBZUnblockRunNotify = {}


---@class USBZUpdatePartyJoinTypeCallbackProxy : UBlueprintAsyncActionBase
---@field OnSuccess FSBZUpdatePartyJoinTypeCallbackProxyOnSuccess
USBZUpdatePartyJoinTypeCallbackProxy = {}

---@param WorldContextObject UObject
---@param InNewJoinType ESBZOnlineJoinType
---@return USBZUpdatePartyJoinTypeCallbackProxy
function USBZUpdatePartyJoinTypeCallbackProxy:UpdatePartyJoinType(WorldContextObject, InNewJoinType) end


---@class USBZVOImportBindings : UDataAsset
---@field VOInfoArray TArray<FSBZLevelVOInfo>
---@field LevelToVOInfo TMap<FSoftObjectPath, FSBZLevelVOInfo>
USBZVOImportBindings = {}



---@class USBZVariationEditComponent : UActorComponent
---@field VariationSet USBZVariationSetData
---@field EditVariationSet FSBZEditVariationSetData
---@field CurrentVariationIdx int32
USBZVariationEditComponent = {}



---@class USBZVariationSetData : UDataAsset
---@field Mesh USkeletalMesh
---@field SkeletalMesh USkeletalMesh
---@field StaticMesh UStaticMesh
---@field OverrideMaterials TArray<UMaterialInterface>
---@field CDPFormat UDataTable
---@field Variations TArray<FSBZCustomPrimitiveData>
USBZVariationSetData = {}



---@class USBZVariationSetUtils : UBlueprintFunctionLibrary
USBZVariationSetUtils = {}

---@param StatComponent UStaticMeshComponent
---@param VariationSet USBZVariationSetData
---@param VariationIdx int32
function USBZVariationSetUtils:ApplyVariationToStatic(StatComponent, VariationSet, VariationIdx) end
---@param SkelComponent USkeletalMeshComponent
---@param VariationSet USBZVariationSetData
---@param VariationIdx int32
function USBZVariationSetUtils:ApplyVariationToSkeletal(SkelComponent, VariationSet, VariationIdx) end
---@param Actor AActor
---@param VariationSet USBZVariationSetData
---@param VariationIdx int32
function USBZVariationSetUtils:ApplyVariation(Actor, VariationSet, VariationIdx) end


---@class USBZVehicleAnimation : UVehicleAnimInstance
---@field BuiltInAnimMontagesHandler USBZBuiltInAnimMontagesHandler
USBZVehicleAnimation = {}

---@param AnimMontage USBZBuiltInAnimMontage
function USBZVehicleAnimation:StopBuiltInAnimMontage(AnimMontage) end
---@param AnimMontage USBZBuiltInAnimMontage
---@return float
function USBZVehicleAnimation:PlayBuiltInAnimMontage(AnimMontage) end


---@class USBZVehicleAnimationCollection : UDataAsset
---@field DoorAnimationContainers TMap<ESBZVehicleDoorState, FSBZVehicleDoorAnimationContainer>
USBZVehicleAnimationCollection = {}



---@class USBZVehicleAudioComponent : USBZAmbientSoundComponent
---@field VehicleTypeState FName
---@field EngineSoundEvent UAkAudioEvent
---@field EngineStopSoundEvent UAkAudioEvent
---@field TyreFrictionSoundEvent UAkAudioEvent
---@field TyreFrictionStopSoundEvent UAkAudioEvent
---@field BrakeSoundEvent UAkAudioEvent
---@field BrakeStopSoundEvent UAkAudioEvent
---@field CollisionTiresSoundEvent UAkAudioEvent
---@field CollisionBodySoundEvent UAkAudioEvent
---@field TireFrictionSoundEvent UAkAudioEvent
---@field SignalSoundEvent UAkAudioEvent
---@field SignalStopSoundEvent UAkAudioEvent
---@field RadioSoundEvent UAkAudioEvent
---@field RadioStopSoundEvent UAkAudioEvent
---@field HelicopterRotaryBladesSoundEvent UAkAudioEvent
---@field HelicopterRotaryBladesStopSoundEvent UAkAudioEvent
---@field EngineRTPC UAkRtpc
---@field CollisionTiresRTPC UAkRtpc
---@field CollisionBodyRTPC UAkRtpc
---@field FrictionTiresRTPC UAkRtpc
---@field HelicopterRotaryBladesRTPC UAkRtpc
---@field EngineSoundMultiplicationValue float
---@field BrakeSoundMultiplicationValue float
---@field TyreSoundMultiplicationValue float
---@field BladeSoundMultiplicationValue float
USBZVehicleAudioComponent = {}

function USBZVehicleAudioComponent:StopTyreFrictionSound() end
function USBZVehicleAudioComponent:StopEngineSound() end
function USBZVehicleAudioComponent:StopBrakeSound() end
---@param FrictionSpeedValue float
function USBZVehicleAudioComponent:SetTyreFriction(FrictionSpeedValue) end
---@param CollisionSpeedValue float
function USBZVehicleAudioComponent:SetTyreCollisionImpact(CollisionSpeedValue) end
---@param EngineValue float
---@param BladeValue float
function USBZVehicleAudioComponent:SetHelicopterVehicleEngineSpeed(EngineValue, BladeValue) end
---@param EngineValue float
function USBZVehicleAudioComponent:SetCarVehicleEngineSpeed(EngineValue) end
---@param CollisionSpeedValue float
function USBZVehicleAudioComponent:SetBodyCollisionImpact(CollisionSpeedValue) end
---@param bValue boolean
function USBZVehicleAudioComponent:PlayVehicleRadioSounds(bValue) end
function USBZVehicleAudioComponent:PlayVehicleHornSounds() end
---@param CollisionValue float
function USBZVehicleAudioComponent:PlayVehicleCollisionSounds(CollisionValue) end
---@param EngineValue float
function USBZVehicleAudioComponent:PlayTyreFrictionSound(EngineValue) end
---@param CollisionValue float
function USBZVehicleAudioComponent:PlayTireCollisionSounds(CollisionValue) end
---@param EngineValue float
---@param BladeValue float
function USBZVehicleAudioComponent:PlayEngineSounds(EngineValue, BladeValue) end
---@param EngineValue float
function USBZVehicleAudioComponent:PlayEngineSound(EngineValue) end
---@param BreakDistance float
function USBZVehicleAudioComponent:PlayBrakeSound(BreakDistance) end
function USBZVehicleAudioComponent:DisableSounds() end


---@class USBZVehicleDamageComponent : UActorComponent
---@field DamageZones TArray<FVector4>
USBZVehicleDamageComponent = {}

---@param DamagedActor AActor
---@param DamageAmount float
---@param DamageEvent FRadialDamageEvent
---@param EventInstigator AController
---@param DamageCauser AActor
function USBZVehicleDamageComponent:HandleTakeRadialDamage(DamagedActor, DamageAmount, DamageEvent, EventInstigator, DamageCauser) end
---@param DamagedActor AActor
---@param DamageAmount float
---@param DamageEvent FPointDamageEvent
---@param EventInstigator AController
---@param DamageCauser AActor
function USBZVehicleDamageComponent:HandleTakePointDamage(DamagedActor, DamageAmount, DamageEvent, EventInstigator, DamageCauser) end


---@class USBZVehicleManager : UActorComponent
---@field Vehicles TArray<AActor>
---@field VehicleInfos TArray<FSBZVehicleInfo>
USBZVehicleManager = {}

function USBZVehicleManager:OnExitedActionPhase() end
---@param World UWorld
function USBZVehicleManager:OnEnteredActionPhase(World) end


---@class USBZVehicleSpawnComponent : UActorComponent
---@field OnSpawnCompletedBP FSBZVehicleSpawnComponentOnSpawnCompletedBP
---@field SpawnGroupSelector FSBZComponentSelector
---@field SpawnerSelectors TArray<FSBZComponentSelector>
---@field bEnableForAssault boolean
---@field MaxNumSpawn int32
---@field bInitialSpawnOnly boolean
---@field bCustomSpawnCompleted boolean
---@field SpawnGroup APD3PawnSpawnGroup
---@field Spawners TArray<ASBZAgilityPawnSpawnPredefined>
USBZVehicleSpawnComponent = {}

---@param Result ESBZVehicleSpawnResult
function USBZVehicleSpawnComponent:SpawnCompleted(Result) end
---@param Vehicle ASBZWheeledVehicle
---@param Spline ASBZSpline
function USBZVehicleSpawnComponent:OnWheeledStarted(Vehicle, Spline) end
---@param Vehicle ASBZWheeledVehicle
function USBZVehicleSpawnComponent:OnWheeledReachedPathEnd(Vehicle) end
---@param InSpawnGroup APD3PawnSpawnGroup
---@param Spawner ASBZPawnSpawnBase
---@param Pawn APawn
function USBZVehicleSpawnComponent:OnPawnSpawned(InSpawnGroup, Spawner, Pawn) end
---@param OldState EPD3HeistState
---@param NewState EPD3HeistState
function USBZVehicleSpawnComponent:OnHeistStateChanged(OldState, NewState) end
---@param Vehicle ASBZAerialVehicle
---@param Spline ASBZSpline
function USBZVehicleSpawnComponent:OnAerialStarted(Vehicle, Spline) end
---@param Vehicle ASBZAerialVehicle
function USBZVehicleSpawnComponent:OnAerialReachedPathEnd(Vehicle) end


---@class USBZVehicleSplineFollowingComponent : UActorComponent
---@field OnStarted FSBZVehicleSplineFollowingComponentOnStarted
---@field VehicleManager USBZVehicleManager
---@field ReplicatedProperties FSBZVehicleSplineFollowingComponentReplicatedProperties
---@field ClientPath TArray<ASBZSpline>
---@field TargetSpeed float
---@field Speed float
---@field StopBeginSpeed float
---@field StopBeginDistance float
---@field StopEndDistance float
---@field DecelDuration float
---@field DecelTime float
---@field CruisingSpeed float
---@field TurnCruisingSpeed float
---@field Acceleration float
---@field Deceleration float
---@field bIsStopping boolean
---@field bIsStopRequestedByUser boolean
---@field FullPath TArray<ASBZSpline>
USBZVehicleSplineFollowingComponent = {}

function USBZVehicleSplineFollowingComponent:Stop() end
function USBZVehicleSplineFollowingComponent:Start() end
---@param Spline ASBZSpline
function USBZVehicleSplineFollowingComponent:SetPathSpline(Spline) end
---@param Path TArray<ASBZSpline>
---@param bTeleportToPathStart boolean
function USBZVehicleSplineFollowingComponent:SetPath(Path, bTeleportToPathStart) end
---@param InDeceleration float
function USBZVehicleSplineFollowingComponent:SetDeceleration(InDeceleration) end
---@param Speed float
---@param bForceUpdateTargetSpeed boolean
function USBZVehicleSplineFollowingComponent:SetCruisingSpeed(Speed, bForceUpdateTargetSpeed) end
---@param InAcceleration float
function USBZVehicleSplineFollowingComponent:SetAcceleration(InAcceleration) end
---@param Spline ASBZSpline
function USBZVehicleSplineFollowingComponent:PushPathSpline(Spline) end
---@param Path TArray<ASBZSpline>
function USBZVehicleSplineFollowingComponent:PushPath(Path) end
---@param Distance float
---@param bRequestedByUser boolean
function USBZVehicleSplineFollowingComponent:Multicast_StopAtDistance(Distance, bRequestedByUser) end
function USBZVehicleSplineFollowingComponent:Multicast_Start() end
---@param InPath ASBZSpline
function USBZVehicleSplineFollowingComponent:Multicast_SetPathSpline(InPath) end
---@param InPath TArray<ASBZSpline>
---@param bTeleportToPathStart boolean
function USBZVehicleSplineFollowingComponent:Multicast_SetPath(InPath, bTeleportToPathStart) end
---@param ServerCurrentSpeed float
---@param InServerPath TArray<ASBZSpline>
---@param InServerTraveledDistance float
---@param InDeceleration float
function USBZVehicleSplineFollowingComponent:Multicast_SetDeceleration(ServerCurrentSpeed, InServerPath, InServerTraveledDistance, InDeceleration) end
---@param ServerCurrentSpeed float
---@param InServerPath TArray<ASBZSpline>
---@param InServerTraveledDistance float
---@param InSpeed float
---@param bForceUpdateTargetSpeed boolean
function USBZVehicleSplineFollowingComponent:Multicast_SetCruisingSpeed(ServerCurrentSpeed, InServerPath, InServerTraveledDistance, InSpeed, bForceUpdateTargetSpeed) end
---@param ServerCurrentSpeed float
---@param InServerPath TArray<ASBZSpline>
---@param InServerTraveledDistance float
---@param InAcceleration float
function USBZVehicleSplineFollowingComponent:Multicast_SetAcceleration(ServerCurrentSpeed, InServerPath, InServerTraveledDistance, InAcceleration) end
---@param InPath ASBZSpline
function USBZVehicleSplineFollowingComponent:Multicast_PushPathSpline(InPath) end
---@param InPath TArray<ASBZSpline>
function USBZVehicleSplineFollowingComponent:Multicast_PushPath(InPath) end
---@param Spline ASBZSpline
---@param Distance float
function USBZVehicleSplineFollowingComponent:Multicast_OnStopped(Spline, Distance) end
function USBZVehicleSplineFollowingComponent:Multicast_OnStarted() end
---@param Spline ASBZSpline
function USBZVehicleSplineFollowingComponent:Multicast_OnSplineLeft(Spline) end
---@param Spline ASBZSpline
---@param bPathEntered boolean
---@param bTeleportToPathStart boolean
function USBZVehicleSplineFollowingComponent:Multicast_OnSplineEntered(Spline, bPathEntered, bTeleportToPathStart) end
---@param Spline ASBZSpline
function USBZVehicleSplineFollowingComponent:Multicast_OnSplineEndReached(Spline) end
function USBZVehicleSplineFollowingComponent:Multicast_OnPathEndReached() end
function USBZVehicleSplineFollowingComponent:Multicast_OnBeginStop() end
---@return boolean
function USBZVehicleSplineFollowingComponent:IsStopping() end
---@return boolean
function USBZVehicleSplineFollowingComponent:IsStopped() end
---@return float
function USBZVehicleSplineFollowingComponent:GetSpeed() end
---@return float
function USBZVehicleSplineFollowingComponent:GetPathLength() end
---@return TArray<ASBZSpline>
function USBZVehicleSplineFollowingComponent:GetPath() end
---@return ASBZSpline
function USBZVehicleSplineFollowingComponent:GetNextSpline() end
---@return ASBZSpline
function USBZVehicleSplineFollowingComponent:GetLastSpline() end
---@return TArray<ASBZSpline>
function USBZVehicleSplineFollowingComponent:GetFullPath() end
---@return ASBZSpline
function USBZVehicleSplineFollowingComponent:GetCurrentSpline() end
---@param bMaxBraking boolean
---@return float
function USBZVehicleSplineFollowingComponent:GetBrakingDistance(bMaxBraking) end


---@class USBZVehicleWheel : UVehicleWheel
---@field bDriven boolean
USBZVehicleWheel = {}



---@class USBZVendorData : UDataAsset
---@field DisplayName FText
---@field Description FText
---@field Tag FName
---@field DisplayIcon TSoftObjectPtr<UPaperSprite>
---@field StoreCategories TArray<ESBZStoreItemUICategory>
USBZVendorData = {}



---@class USBZVendorDatabase : USBZItemDatabase
---@field VendorArray TArray<USBZVendorData>
USBZVendorDatabase = {}



---@class USBZViewTargetContainerWidget : USBZWidgetBase
---@field ViewTargetWidgetClass TSubclassOf<USBZViewTargetWidget>
---@field Panel_ViewTargetWidgets UPanelWidget
---@field ControlsReference FSBZControlsReference
---@field HackerAcedControlReference FSBZActionControlReference
---@field HackerRoutedPingControlReference FSBZActionControlReference
---@field HackerSecureLoopControlReference FSBZActionControlReference
---@field CurrentIndex int32
---@field TargetCollectionInterface TScriptInterface<ISBZViewTargetCollectionInterface>
---@field WidgetPool TArray<USBZViewTargetWidget>
---@field CurrentControlsReferenceID int32
USBZViewTargetContainerWidget = {}

---@param InPlayerController ASBZPlayerController
---@param InViewTargetCollection TScriptInterface<ISBZViewTargetCollectionInterface>
function USBZViewTargetContainerWidget:OnViewTargetChanged(InPlayerController, InViewTargetCollection) end
---@param bIsSecurityCamera boolean
function USBZViewTargetContainerWidget:IsSecurityCamera(bIsSecurityCamera) end


---@class USBZViewTargetWidget : USBZWidgetBase
---@field ViewTargetActor AActor
USBZViewTargetWidget = {}

---@param CurrentState ESBZCameraState
function USBZViewTargetWidget:SecurityCameraStateChanged(CurrentState) end
---@param OldState ESBZCameraState
---@param NewState ESBZCameraState
function USBZViewTargetWidget:OnSecurityCameraStateChanged(OldState, NewState) end
function USBZViewTargetWidget:OnNewTarget() end
---@param bIsFocused boolean
function USBZViewTargetWidget:OnFocusedChanged(bIsFocused) end


---@class USBZVoiceCommentDataAsset : UDataAsset
---@field CommentState FString
---@field VoiceEvent ESBZVoiceEvent
---@field CoolDown float
---@field Chance float
---@field DelayRange FFloatInterval
---@field GlobalPermission FSBZGlobalVoiceCommentPermission
---@field BlockingTags FGameplayTagContainer
USBZVoiceCommentDataAsset = {}



---@class USBZVoiceCommentNotify : UAnimNotify
---@field VoiceComment USBZVoiceCommentDataAsset
---@field VoicePriority ESBZVoicePriority
USBZVoiceCommentNotify = {}



---@class USBZVoiceLibrary : UBlueprintFunctionLibrary
USBZVoiceLibrary = {}

---@param WorldContextObject UObject
---@param DialogDataAsset USBZDialogDataAsset
---@param OnDialogEnded FPlayDialogWithSuitablePlayersOnDialogEnded
---@return ESBZPlayDialogResult
function USBZVoiceLibrary:PlayDialogWithSuitablePlayers(WorldContextObject, DialogDataAsset, OnDialogEnded) end
---@param WorldContextObject UObject
---@param DialogDataAsset USBZDialogDataAsset
---@param Performers TArray<AActor>
---@param OnDialogEnded FPlayDialogOnDialogEnded
---@param DialogInstigator AActor
---@return ESBZPlayDialogResult
function USBZVoiceLibrary:PlayDialog(WorldContextObject, DialogDataAsset, Performers, OnDialogEnded, DialogInstigator) end


---@class USBZVoipWidget : USBZWidgetBase
USBZVoipWidget = {}

---@param PlayerName FString
---@param bPlayerTalking boolean
function USBZVoipWidget:OnPlayerTalkingChangedEvent(PlayerName, bPlayerTalking) end
---@param PlayerId FUniqueNetIdRepl
---@param IsTalking boolean
function USBZVoipWidget:OnPlayerTalkingChanged(PlayerId, IsTalking) end


---@class USBZVolumeDamageEffect : UGameplayEffect
USBZVolumeDamageEffect = {}


---@class USBZVolumeManager : UObject
---@field MasterVolumeSetting FSBZVolumeTypeSetting
---@field MusicVolumeSetting FSBZVolumeTypeSetting
---@field SFXVolumeSetting FSBZVolumeTypeSetting
---@field VOVolumeSetting FSBZVolumeTypeSetting
---@field HUDVolumeSetting FSBZVolumeTypeSetting
---@field VoipVolumeSetting FSBZVolumeTypeSetting
---@field CinematicVolumeSetting FSBZVolumeTypeSetting
USBZVolumeManager = {}

---@param WorldContextObject UObject
---@return USBZVolumeManager
function USBZVolumeManager:GetVolumeManager(WorldContextObject) end
---@return float
function USBZVolumeManager:GetRelativeCinematicVolume() end


---@class USBZVote : UObject
USBZVote = {}


---@class USBZVoteDebug : USBZVote
USBZVoteDebug = {}


---@class USBZVoteFactory : UObject
USBZVoteFactory = {}


---@class USBZVoteRestartLevel : USBZVote
USBZVoteRestartLevel = {}


---@class USBZVotingManager : UObject
---@field ReplicatedProxy ASBZVotingReplicatedProxy
---@field VoteFactory USBZVoteFactory
---@field CurrentVote USBZVote
USBZVotingManager = {}

---@param World UWorld
function USBZVotingManager:HandlePlayableLevelInitialized(World) end


---@class USBZWaitStateMachineStateCallbackProxy : UBlueprintAsyncActionBase
---@field OnSuccess FSBZWaitStateMachineStateCallbackProxyOnSuccess
USBZWaitStateMachineStateCallbackProxy = {}

---@param WorldContextObject UObject
---@param StateToWait ESBZGameStateMachineState
---@return USBZWaitStateMachineStateCallbackProxy
function USBZWaitStateMachineStateCallbackProxy:WaitGameStateMachineState(WorldContextObject, StateToWait) end
---@param StateName FName
function USBZWaitStateMachineStateCallbackProxy:HandleStateEntered(StateName) end


---@class USBZWaitStateMachineStateChangeCallbackProxy : UBlueprintAsyncActionBase
---@field OnSuccess FSBZWaitStateMachineStateChangeCallbackProxyOnSuccess
USBZWaitStateMachineStateChangeCallbackProxy = {}

---@param WorldContextObject UObject
---@return USBZWaitStateMachineStateChangeCallbackProxy
function USBZWaitStateMachineStateChangeCallbackProxy:WaitGameStateMachineStateChange(WorldContextObject) end
---@param StateName FName
function USBZWaitStateMachineStateChangeCallbackProxy:HandleStateEntered(StateName) end


---@class USBZWatchData : USBZInventoryBaseData
USBZWatchData = {}


---@class USBZWatchDatabase : USBZItemDatabase
---@field Watches TArray<USBZWatchData>
USBZWatchDatabase = {}



---@class USBZWeaponAimAssistDataAsset : UDataAsset
---@field Gamepad FSBZWeaponAimAssistData
---@field Mouse FSBZWeaponAimAssistData
USBZWeaponAimAssistDataAsset = {}



---@class USBZWeaponAmmoData : USBZEquippablePartCustomData
---@field EmptyMesh TSoftObjectPtr<UStaticMesh>
---@field LoadedMesh TSoftObjectPtr<UStaticMesh>
USBZWeaponAmmoData = {}



---@class USBZWeaponAnimation : UAnimInstance
---@field AnimationState ESBZWeaponAnimationState
---@field bEmpty boolean
---@field RBExternalForce FVector
---@field RBMinVelocity float
---@field RBMaxVelocity float
---@field RBCoefHVelDampening float
---@field AlphaNotAnimatedBones float
---@field AlphaCopyBoneDeltaFirst float
---@field AlphaCopyBoneDeltaSecond float
---@field IdleStatePose UAnimSequenceBase
---@field EmptyStatePose UAnimSequenceBase
---@field NotAnimatedBones FSBZBoneRefArrayParam
---@field CopyBoneDeltaSourceFirst FSBZBoneRefParam
---@field CopyBoneDeltaTargetsFirst FSBZBoneRefArrayParam
---@field CopyBoneDeltaSourceSecond FSBZBoneRefParam
---@field CopyBoneDeltaTargetsSecond FSBZBoneRefArrayParam
---@field Weapon ASBZWeapon
---@field AnimationCollection USBZEquippableAnimationCollection
---@field Character ASBZCharacter
USBZWeaponAnimation = {}



---@class USBZWeaponBaseAttackData : UDataAsset
---@field DamageTypeClass TSubclassOf<USBZDamageType>
---@field TargetEffectClass TSubclassOf<UGameplayEffect>
---@field HurtReactionData FSBZHurtReactionData
USBZWeaponBaseAttackData = {}



---@class USBZWeaponCharmAnimation : USBZEquippableCharmAnimation
USBZWeaponCharmAnimation = {}


---@class USBZWeaponCharmApplier : USBZModularPartApplier
USBZWeaponCharmApplier = {}


---@class USBZWeaponCharmData : USBZCosmeticsDataAsset
---@field ModularMeshes TArray<FSBZModularMeshData>
---@field AttachmentBoneName FName
---@field WeaponCharmClass TSoftClassPtr<ASBZWeaponCharm>
---@field AttachmentOffset FTransform
USBZWeaponCharmData = {}



---@class USBZWeaponCharmDatabase : USBZItemDatabase
---@field WeaponCharmArray TArray<USBZWeaponCharmData>
USBZWeaponCharmDatabase = {}



---@class USBZWeaponCharmSlot : USBZCosmeticsPartSlot
---@field SpawnPriority int32
USBZWeaponCharmSlot = {}



---@class USBZWeaponConfigManager : UObject
USBZWeaponConfigManager = {}


---@class USBZWeaponCustomizationSubscreen : USBZWidgetBase
---@field EquippableConfig FSBZEquippableConfig
---@field CosmeticSlot USBZCosmeticsPartSlot
---@field CosmeticData USBZCosmeticsDataAsset
---@field CosmeticConfig USBZEquippablePartConfig
---@field EquippableSlot ESBZEquippableLoadoutSlot
---@field WeaponSlotIndex int32
USBZWeaponCustomizationSubscreen = {}

function USBZWeaponCustomizationSubscreen:UpdatePreview() end
---@param CosmeticSlot USBZCosmeticsPartSlot
---@param LoadoutSlot ESBZEquippableLoadoutSlot
---@param LoadoutIndex int32
function USBZWeaponCustomizationSubscreen:SetupScreen(CosmeticSlot, LoadoutSlot, LoadoutIndex) end
---@param InEquippableSlot ESBZEquippableLoadoutSlot
---@param InWeaponSlotIndex int32
function USBZWeaponCustomizationSubscreen:RefreshEquippableConfig(InEquippableSlot, InWeaponSlotIndex) end
---@param Result ESBZMetaRequestResult
function USBZWeaponCustomizationSubscreen:OnTryApplyDone(Result) end
function USBZWeaponCustomizationSubscreen:OnTryApply() end
function USBZWeaponCustomizationSubscreen:OnCosmeticSlotUpdated() end
---@param Result ESBZMetaRequestResult
function USBZWeaponCustomizationSubscreen:OnApplyCosmeticDone(Result) end
---@return USBZCosmeticsPartSlot
function USBZWeaponCustomizationSubscreen:GetCosmeticSlot() end
---@return USBZCosmeticsDataAsset
function USBZWeaponCustomizationSubscreen:GetCosmeticPart() end
---@param CosmeticSlot USBZCosmeticsPartSlot
---@return TArray<FSBZCosmeticsInventoryItem>
function USBZWeaponCustomizationSubscreen:GetCosmeticItems(CosmeticSlot) end
---@return USBZEquippablePartConfig
function USBZWeaponCustomizationSubscreen:GetCosmeticConfig() end
function USBZWeaponCustomizationSubscreen:ApplyCosmeticOnBackend() end
---@param CosmeticDataAsset USBZCosmeticsDataAsset
function USBZWeaponCustomizationSubscreen:ApplyCosmeticData(CosmeticDataAsset) end
---@param CosmeticDataAsset USBZCosmeticsDataAsset
---@param ConfigIndex int32
function USBZWeaponCustomizationSubscreen:ApplyCosmeticConfig(CosmeticDataAsset, ConfigIndex) end


---@class USBZWeaponDOFData : UDataAsset
---@field NormalDOF FSBZCameraDOF
---@field TargetingDOF FSBZCameraDOF
---@field TopPassNormalDOF FSBZCameraDOF
---@field TopPassTargetingDOF FSBZCameraDOF
USBZWeaponDOFData = {}



---@class USBZWeaponDatabase : USBZItemDatabase
---@field Weapons TArray<USBZBaseWeaponData>
USBZWeaponDatabase = {}



---@class USBZWeaponDecalData : USBZEquippablePartDataAsset
---@field DecalTexture UTexture2D
---@field DecalTextureRotation float
---@field DecalTextureSize float
---@field DecalTexturePosition FVector2D
USBZWeaponDecalData = {}



---@class USBZWeaponFireData : USBZWeaponBaseAttackData
---@field CriticalDamageMultiplierDistanceArray TArray<FSBZDamageMultiplierDistance>
---@field FireMode ESBZFireMode
---@field FireType ESBZFireType
---@field ProjectilesPerFiredRound uint32
---@field MaximumPenetrationCount uint32
---@field bCanHitEnvironmentAfterPenetration boolean
---@field bCanPenetrateBlocked boolean
---@field Range uint32
---@field AdditionalPlayerRange float
---@field ArmorPenetration float
---@field ImpactType ESBZProjectileImpactType
---@field AmmoVisibilityType ESBZWeaponAmmoVisibilityType
---@field GrenadeProjectileClass TSoftClassPtr<ASBZGrenadeProjectile>
---@field ArmorPenetrationProjectile float
---@field FriendlyPlayerDamageScale float
---@field InstigatorPlayerDamageScale float
---@field bUseInstigatorPlayerDamageScale boolean
---@field bIsFriendlyFireAllowed boolean
---@field DamageDistanceProjectileArray TArray<FSBZDamageDistance>
---@field AmmoLoadedMax uint32
---@field AmmoPerReload uint32
---@field AmmoVisibleMax int32
---@field bIsEmptyAmmoEjected boolean
---@field bIsEquippedAmmoLoadedTracked boolean
---@field bIsChamberRotatedEachFiredRound boolean
---@field bIsChamberRotatedEachReloadedRound boolean
---@field RoundsPerMinute float
USBZWeaponFireData = {}

---@return int32
function USBZWeaponFireData:GetProjectilesPerFiredRound() end
---@param MinDistance float
---@param MaxDistance float
---@param DistanceStep float
---@param OutMultiplierArray TArray<float>
function USBZWeaponFireData:GetCriticalMultipliersOnEachDistance(MinDistance, MaxDistance, DistanceStep, OutMultiplierArray) end


---@class USBZWeaponGlobalPaintSlot : USBZCosmeticsPartSlot
---@field GlobalPaintAreas FSBZWeaponPatternDataSingleColorAreaList
USBZWeaponGlobalPaintSlot = {}



---@class USBZWeaponMagazineData : USBZEquippablePartCustomData
---@field AmmoLoadedMax uint32
---@field AmmoLoaded uint32
---@field AmmoPerReload uint32
---@field AmmoInventoryMax uint32
---@field AmmoInventory uint32
---@field AmmoPickup FFloatInterval
---@field AmmoVisibilityType ESBZWeaponAmmoVisibilityType
USBZWeaponMagazineData = {}



---@class USBZWeaponMeleeAttackData : USBZWeaponBaseAttackData
USBZWeaponMeleeAttackData = {}


---@class USBZWeaponModificationSettings : USBZDeveloperSettings
---@field Settings FSBZWeaponModificationData
USBZWeaponModificationSettings = {}



---@class USBZWeaponMuzzleData : USBZEquippablePartCustomData
---@field SuppressorStrength ESBZMuzzleSuppressor
---@field FireEmitterMesh TSoftObjectPtr<UStaticMesh>
USBZWeaponMuzzleData = {}



---@class USBZWeaponPartDataAsset : USBZEquippablePartDataAsset
---@field AddTagToWeapon FGameplayTagContainer
---@field ModularMeshes TArray<FSBZModularMeshData>
---@field UseDefaultPartsFromSlotsAndBlock TArray<USBZModularPartSlotBase>
USBZWeaponPartDataAsset = {}



---@class USBZWeaponPartDataCosmeticOverrideConfig : USBZEquippablePartConfig
---@field OverriddenWeaponPart USBZWeaponPartDataAsset
---@field bAddMeshes boolean
---@field Meshes TArray<FSBZModularMeshData>
---@field OverriddenWeaponMaterialPerMesh TMap<USkeletalMesh, FSBZOverrideConfigWeaponMaterials>
USBZWeaponPartDataCosmeticOverrideConfig = {}



---@class USBZWeaponPartSlot : USBZMeshPartSlot
USBZWeaponPartSlot = {}


---@class USBZWeaponPatternAreaData : UDataAsset
---@field AreaName FName
---@field DefaultAreaDefinition FSBZWeaponPatternAreaDefinition
USBZWeaponPatternAreaData = {}



---@class USBZWeaponPatternData : USBZCosmeticsDataAsset
---@field AreasForEachColor TArray<FSBZWeaponPatternDataSingleColorAreaList>
USBZWeaponPatternData = {}

---@return int32
function USBZWeaponPatternData:GetNbExpectedColorsInConfig() end


---@class USBZWeaponPatternDataConfig : USBZEquippablePartConfig
---@field PatternSprayCans TArray<USBZSprayCanData>
USBZWeaponPatternDataConfig = {}



---@class USBZWeaponPatternDatabase : USBZItemDatabase
---@field WeaponPatternArray TArray<USBZWeaponPatternData>
USBZWeaponPatternDatabase = {}



---@class USBZWeaponPresetConfigData : USBZInventoryBaseData
---@field WeaponData USBZEquippableData
---@field ModData TMap<USBZModularPartSlotBase, FSBZWeaponPresetModularConfigItem>
USBZWeaponPresetConfigData = {}

---@return FSBZEquippableConfig
function USBZWeaponPresetConfigData:GetEquippableConfig() end


---@class USBZWeaponPresetConfigDatabase : USBZItemDatabase
---@field WeaponPresetConfigDataArray TArray<USBZWeaponPresetConfigData>
USBZWeaponPresetConfigDatabase = {}



---@class USBZWeaponProgressionData : UDataAsset
---@field WeaponPartProgressionArray FSBZWeaponPartProgressionArray
USBZWeaponProgressionData = {}



---@class USBZWeaponProgressionManager : UObject
USBZWeaponProgressionManager = {}

---@param WorldContextObject UObject
---@return USBZWeaponProgressionManager
function USBZWeaponProgressionManager:GetWeaponProgressionManager(WorldContextObject) end


---@class USBZWeaponSettings : USBZDeveloperSettings
---@field Settings FSBZWeaponSettingData
USBZWeaponSettings = {}

---@return FSBZWeaponSettingData
function USBZWeaponSettings:Get() end


---@class USBZWeaponSightData : USBZEquippablePartCustomData
---@field TargetingData USBZWeaponTargetingData
---@field DOFData USBZWeaponDOFData
---@field DisplayName FText
USBZWeaponSightData = {}



---@class USBZWeaponSpreadData : UDataAsset
---@field InnerClusterNumber uint32
---@field InnerClusterSpreadMultiplier float
---@field PieOcclusion float
---@field FireSpreadStart float
---@field FireSpreadIncrease float
---@field FireSpreadResetTime float
---@field FireSpreadDecayRate float
---@field FireSpreadCap float
---@field SpreadRecoveryMode ESBZWeaponSpreadRecoveryMode
---@field SpreadStanceMultipliers FSBZWeaponSpreadStances
---@field SpreadRadiusMultipliers FVector2D
---@field ShotgunPatterns TArray<FSBZShotgunSpreadPattern>
---@field DeviationHipFireMultiplier float
---@field DeviationTargetingFireMultiplier float
USBZWeaponSpreadData = {}



---@class USBZWeaponStatics : UObject
USBZWeaponStatics = {}


---@class USBZWeaponStickerData : USBZCosmeticsDataAsset
---@field StickerTexture UTexture2D
---@field StickerTextureBaseRotation float
---@field StickerTextureBaseSize float
---@field StickerMetallic float
---@field StickerNormalStrength float
---@field StickerRoughnessContrast float
---@field StickerRoughnessValue float
USBZWeaponStickerData = {}



---@class USBZWeaponStickerDataConfig : USBZEquippablePartConfig
---@field StickerPositionIndex int8
USBZWeaponStickerDataConfig = {}



---@class USBZWeaponStickerDatabase : USBZItemDatabase
---@field WeaponStickerArray TArray<USBZWeaponStickerData>
USBZWeaponStickerDatabase = {}



---@class USBZWeaponStickerSlot : USBZCosmeticsPartSlot
---@field StickerPositionIndex int8
USBZWeaponStickerSlot = {}



---@class USBZWeaponSwayData : UDataAsset
---@field Alpha float
---@field Hip FSBZWeaponSwayDataStruct
---@field Target FSBZWeaponSwayDataStruct
USBZWeaponSwayData = {}



---@class USBZWeaponTargetingData : UDataAsset
---@field bTargetingHideWeapon boolean
---@field SightSocket FName
---@field TargetingTransitionTime float
---@field TargetingProgressTrigger float
---@field TargetingXAxisOffset float
---@field WeaponOverride TMap<FGameplayTag, FSBZWeaponTargetingOverrideData>
---@field TargetingTransitionCurve FRuntimeFloatCurve
---@field TargetingMagnification float
---@field TargetingOnTopMagnification float
---@field TargetingMagnificationCurve FRuntimeFloatCurve
---@field TargetingXCurve FRuntimeFloatCurve
---@field TargetingRotationCurve UCurveVector
---@field TargetingExitRotationCurve UCurveVector
---@field HeadbobData USBZTargetingHeadbobData
USBZWeaponTargetingData = {}



---@class USBZWeaponWearAndTearData : USBZCosmeticsDataAsset
---@field WearAndTearLevel int8
USBZWeaponWearAndTearData = {}



---@class USBZWeaponWearAndTearDatabase : USBZItemDatabase
---@field WeaponWearAndTearArray TArray<USBZWeaponWearAndTearData>
USBZWeaponWearAndTearDatabase = {}



---@class USBZWheeledVehicleAnimation : USBZVehicleAnimation
USBZWheeledVehicleAnimation = {}


---@class USBZWheeledVehicleAudioComponent : USBZAmbientSoundComponent
---@field SirenAudioComponent UAkComponent
---@field SirenSoundEvent UAkAudioEvent
---@field SirenStopSoundEvent UAkAudioEvent
---@field EngineSoundEvent UAkAudioEvent
---@field EngineStopSoundEvent UAkAudioEvent
---@field BrakeSoundEvent UAkAudioEvent
---@field BrakeStopSoundEvent UAkAudioEvent
---@field CollisionTiresSoundEvent UAkAudioEvent
---@field CollisionBodySoundEvent UAkAudioEvent
---@field TyreFrictionSoundEvent UAkAudioEvent
---@field TyreFrictionStopSoundEvent UAkAudioEvent
---@field SignalSoundEvent UAkAudioEvent
---@field SignalStopSoundEvent UAkAudioEvent
---@field EngineRTPC UAkRtpc
---@field BrakeRTPC UAkRtpc
---@field CollisionTiresRTPC UAkRtpc
---@field CollisionBodyRTPC UAkRtpc
---@field FrictionTiresRTPC UAkRtpc
---@field EngineSoundMultiplicationValue float
---@field BrakeSoundMultiplicationValue float
---@field TyreSoundMultiplicationValue float
USBZWheeledVehicleAudioComponent = {}

function USBZWheeledVehicleAudioComponent:StopTyreFrictionSound() end
function USBZWheeledVehicleAudioComponent:StopSirenSound() end
function USBZWheeledVehicleAudioComponent:StopEngineSound() end
function USBZWheeledVehicleAudioComponent:StopBreakSound() end
---@param EngineValue float
function USBZWheeledVehicleAudioComponent:SetVehicleEngineSpeed(EngineValue) end
---@param EngineValue float
function USBZWheeledVehicleAudioComponent:SetVehicleBreakIntencity(EngineValue) end
---@param FrictionSpeedValue float
function USBZWheeledVehicleAudioComponent:SetTyreFriction(FrictionSpeedValue) end
---@param CollisionSpeedValue float
function USBZWheeledVehicleAudioComponent:SetTyreCollisionImpact(CollisionSpeedValue) end
---@param CollisionSpeedValue float
function USBZWheeledVehicleAudioComponent:SetBodyCollisionImpact(CollisionSpeedValue) end
function USBZWheeledVehicleAudioComponent:PlayVehicleHornSound() end
---@param CollisionValue float
function USBZWheeledVehicleAudioComponent:PlayVehicleCollisionSound(CollisionValue) end
---@param EngineValue float
function USBZWheeledVehicleAudioComponent:PlayTyreFrictionSound(EngineValue) end
---@param CollisionValue float
function USBZWheeledVehicleAudioComponent:PlayTyreCollisionSound(CollisionValue) end
function USBZWheeledVehicleAudioComponent:PlaySirenSound() end
---@param EngineValue float
function USBZWheeledVehicleAudioComponent:PlayEngineSound(EngineValue) end
---@param BreakDistance float
function USBZWheeledVehicleAudioComponent:PlayBreakSound(BreakDistance) end


---@class USBZWheeledVehicleMovementComponent : USimpleWheeledVehicleMovementComponent
USBZWheeledVehicleMovementComponent = {}


---@class USBZWheeledVehicleNavModifierComponent : UNavModifierComponent
USBZWheeledVehicleNavModifierComponent = {}


---@class USBZWheeledVehicleSkeletalMeshComponent : USkeletalMeshComponent
USBZWheeledVehicleSkeletalMeshComponent = {}


---@class USBZWidgetBase : UUserWidget
USBZWidgetBase = {}

function USBZWidgetBase:OnWidgetPreRemovedFromParent() end


---@class USBZWidgetCreditsImage : USBZWidgetCreditsRowBase
---@field ImageWidget UImage
USBZWidgetCreditsImage = {}



---@class USBZWidgetCreditsLinebreak : USBZWidgetCreditsRowBase
USBZWidgetCreditsLinebreak = {}


---@class USBZWidgetCreditsRowBase : USBZWidgetBase
USBZWidgetCreditsRowBase = {}


---@class USBZWidgetCreditsText : USBZWidgetCreditsRowBase
---@field TextWidget UTextBlock
USBZWidgetCreditsText = {}



---@class USBZWidgetCreditsTextPair : USBZWidgetCreditsRowBase
---@field TextFirstWidget UTextBlock
---@field TextSecondWidget UTextBlock
USBZWidgetCreditsTextPair = {}



---@class USBZWorldEventBase : UObject
USBZWorldEventBase = {}


---@class USBZWorldEventData : UDataAsset
---@field Event USBZWorldEventBase
USBZWorldEventData = {}



---@class USBZWorldEventSectionSwitchNotify : UAnimNotify
---@field SectionName FName
---@field bNegateEvent boolean
---@field EventData USBZWorldEventData
USBZWorldEventSectionSwitchNotify = {}



---@class USBZWorldLoader : UObject
---@field LoadedWorlds TArray<UWorld>
---@field Observers TArray<UObject>
---@field GameModeParamClass TSubclassOf<AGameModeBase>
---@field GameStateClass TSubclassOf<AGameStateBase>
USBZWorldLoader = {}



---@class USBZWorldRuntime : USBZWorldRuntimeBase
---@field AllPawns USBZActorContainer
---@field AllPlayerCharacters USBZObservableActorContainer
---@field AllAlivePlayerCharacters USBZObservableActorContainer
---@field AllAliveAICrewCharacters USBZActorContainer
---@field AllAliveAICharacters USBZActorContainer
---@field AllAliveAIGuards USBZActorContainer
---@field AllAliveAIDrones USBZActorContainer
---@field AllRagdollCarryCharacters USBZActorContainer
---@field AllLevelScriptActors USBZActorContainer
---@field AllBagDropPoints USBZActorContainer
---@field AllSecurityRooms USBZActorContainer
---@field AllSecurityCameras USBZActorContainer
---@field AllDespawnVolumes USBZActorContainer
---@field AllArmedGrenades USBZActorContainer
---@field AllRoomVolumes USBZActorContainer
---@field AllProtectPoints USBZActorContainer
---@field AllDefensePoints USBZActorContainer
---@field AllVantagePoints USBZActorContainer
---@field AllActiveObjectives USBZObservableActorContainer
---@field AllEscortPoints USBZActorContainer
---@field AllSabotageTargets USBZActorContainer
---@field AllTaserMines USBZActorContainer
---@field AllPlacebleCharges USBZActorContainer
---@field AllAliveHostages USBZActorContainer
---@field AllAliveAutoAimActors USBZActorContainer
---@field PendingVisibilityDeleteActors USBZObjectContainer
---@field RagdollActorsBuffer USBZActorRingBuffer
---@field DebrisActorsBuffer USBZActorRingBuffer
---@field AllAIAttractors USBZObjectContainer
---@field AllAIObjectives USBZObjectContainer
---@field ImpactManager USBZImpactManager
---@field DebugDrawingManager ASBZDebugDrawingManager
---@field SignificanceManager USBZSignificanceManager
---@field AllHackableActors USBZActorContainer
---@field AllActiveBagRespawnPoints USBZActorContainer
---@field AllSensorToolBlueActors USBZActorContainer
---@field AllSensorToolOrangeActors USBZActorContainer
---@field AllScreenInteractComponents USBZObjectContainer
---@field AllCrewAILifeActionComponents USBZObjectContainer
USBZWorldRuntime = {}

---@param WorldContextObject UObject
---@return USBZWorldRuntime
function USBZWorldRuntime:Get(WorldContextObject) end


---@class USBZWorldSettingsDeveloperSettings : USBZDeveloperSettings
---@field SoftSurfaceTypesConfig TSoftObjectPtr<USBZSurfaceTypesConfig>
---@field MaterialParameterCollection TSoftObjectPtr<UMaterialParameterCollection>
---@field NiagaraParameterCollection TSoftObjectPtr<UNiagaraParameterCollection>
---@field DefaultLifeActionSettings TSoftObjectPtr<USBZLifeActionSettings>
USBZWorldSettingsDeveloperSettings = {}



---@class USBZWwiseMotionManagerComponent : USceneComponent
---@field AkComponent UAkComponent
---@field RootComponent USceneComponent
---@field WwiseMotionBusName FString
USBZWwiseMotionManagerComponent = {}



---@class USBZZiplineAbility : USBZGameplayAbility
---@field MovementComponent USBZCharacterMovementComponent
USBZZiplineAbility = {}

---@param DeltaSeconds float
function USBZZiplineAbility:Tick(DeltaSeconds) end


---@class USBZZiplineAttachmentBone : UAnimNotify
---@field BoneName FName
USBZZiplineAttachmentBone = {}



---@class USBZZiplineAudioController : UActorComponent
---@field ZiplineStartAudioEvent UAkAudioEvent
---@field ZiplineStopAudioEvent UAkAudioEvent
---@field ZiplineVelocityRtpc UAkRtpc
---@field CharacterPerspectiveRtpc UAkRtpc
---@field bZiplineActive boolean
---@field AudioComponent UAkComponent
---@field ZiplineSoundMultiplicationValue float
USBZZiplineAudioController = {}

---@param ZiplineVelocity float
function USBZZiplineAudioController:UpdateZiplineRtpc(ZiplineVelocity) end
function USBZZiplineAudioController:StopZiplineAudio() end
function USBZZiplineAudioController:StartZiplineAudio() end
---@param bLocalPlayer boolean
function USBZZiplineAudioController:SetZiplineRtpcPerspective(bLocalPlayer) end


---@class USBZZiplineInteractRequirement : USBZBaseInteractRequirement
USBZZiplineInteractRequirement = {}


---@class USBZZiplineSettings : UDataAsset
---@field ZiplineSpeed FRuntimeFloatCurve
---@field ZiplineSpeedModifier FRuntimeFloatCurve
---@field MaxAcceleration float
---@field CancelLaunchForce float
---@field ControlsReference FSBZControlsReference
---@field BagZiplineSpeed float
---@field BagOffset FVector
---@field ForcedDirectionThreshold float
USBZZiplineSettings = {}



